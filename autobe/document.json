{"operations":[{"specification":"This API operation allows an unauthenticated visitor to register an account and receive initial guest or visitor tokens for further interaction with the discussion board. The primary target is the discussion_board_visitors table, which tracks anonymous or unauthenticated actors for auditing, analytics, and potential privilege escalation. When executed, it will create a new visitor record by generating a unique visitor_token, optionally recording IP address and user_agent for audit and security purposes.\n\nThis enables visitors to begin a session that may be tracked, audited, and optionally upgraded to full user/membership in the future, without exposing or requiring personally identifiable information. Guest registration supports features like vote/session anti-fraud protection, limited personalization, and seamless escalation to member roles if needed.\n\nSecurity is maintained by avoiding PII capture, limiting ticket/session scope, and associating tokens only with session-level analytics. Only one visitor record should be created per unique session. If soft deletion is applied (deleted_at), repeated or multi-device registrations may co-exist for compliance. Creation is strictly for unauthenticated user onboarding.\n\nCommonly used in combination with /auth/visitor/refresh for session continuation and with guest-to-member upgrade flows. All behavior aligns with guest (visitor) role logic and does not overlap with user/member/admin registration.\n\nError handling ensures duplicate registrations by the same device/session are handled gracefully, either by returning an existing valid session or by audit logging as new but not exposing confidential info.","authorizationType":"join","description":"This API operation registers a new unauthenticated visitor by creating a record in discussion_board_visitors. It issues a unique visitor_token for session-based tracking without storing PII, and is used for anonymous access onboarding. The endpoint processes registration requests, logs device/IP/user_agent if provided, and ensures soft deletion (via deleted_at) is respected for compliance. Registration enables analytics, basic anti-fraud, auditing, and provides an entry point for privilege escalation should the visitor later choose to register as a full member. Each registration is auditable, aligns strictly to the schema, and avoids overlap with user/member/admin actor tables. Interaction with this endpoint is the first step in the authentication flow for guest users, related to refresh endpoints for session continuation.","summary":"Visitor registration for unauthenticated guest actors in discussion_board_visitors table","parameters":[],"requestBody":{"description":"Information required to register a new visitor and open a new guest session. Can include user_agent and IP for audit/security (if available).","typeName":"IDiscussionBoardVisitor.IJoin"},"responseBody":{"description":"Authorized session and visitor token for future guest operations, including role claim and issued session/token info.","typeName":"IDiscussionBoardVisitor.IAuthorized"},"authorizationRole":null,"name":"join","path":"/auth/visitor/join","method":"post"},{"specification":"This API operation enables an existing unauthenticated visitor to refresh their access/session tokens, continuing a guest session in the discussion_board_visitors table. The operation confirms the validity of a current guest/visitor token and, in return, issues refreshed tokens (for stateless JWT or similar patterns), thereby extending the lifespan of the anonymous/guest session without transitioning to a full user state. Clients should provide the current valid visitor_token (if using token-based authentication).\n\nThe operation is intended for session continuation and is essential for maintaining persistent, secure, anonymous user access over multiple requests or minor interruptions. It does not grant member permissions or change the guest status of the actor. Soft deletion (via deleted_at) is respected: attempts to refresh a soft-deleted/expired session must be handled by returning an error or guidance for new join. No personally identifiable info is processed or returned; only session OAuth is refreshed based on token validation.\n\nMost commonly used in mobile/web guest session lifecycles, such as 'continue as guest' functionality. Tightly integrates with /auth/visitor/join and, if supported, with guest-to-member upgrade APIs. All logic is limited to guest actors and is not valid for user/member/admin roles. Error handling returns explicit session expiration, invalid token, or compliance error details as appropriate.","authorizationType":"refresh","description":"This API operation allows an existing visitor to refresh the anonymous session in the discussion_board_visitors table. The endpoint verifies the provided visitor_token against active, non-soft-deleted records (deleted_at), and, if valid, issues a fresh session token to extend guest access. Operation ensures session continuity for unregistered/guest actors, without collecting or exposing PII. Security checks ensure tokens from suspended or soft-deleted records are not refreshed. Acts as a counterpart to the join endpoint and integrates with guest upgrade flows (not handled here). All actions align to strict visitor/guest schema logic, supporting safe anonymous participation and strict audit traceability. No member or admin rights are escalated or exposed from this operation.","summary":"Visitor token/session refresh in discussion_board_visitors (guest actors)","parameters":[],"requestBody":{"description":"Request payload for refreshing a visitor (guest) session, must provide valid visitor_token.","typeName":"IDiscussionBoardVisitor.IRefresh"},"responseBody":{"description":"Authorized guest session and new visitor token, allowing continuation of anonymous access, with audit metadata in the payload.","typeName":"IDiscussionBoardVisitor.IAuthorized"},"authorizationRole":null,"name":"refresh","path":"/auth/visitor/refresh","method":"post"},{"specification":"This operation implements user registration/creation for standard members (role: user) of the discussionBoard service. It corresponds to initial account creation upon user sign-up and issues JWT tokens upon success. The underlying database table is discussion_board_users. The registration process requires the user to provide unique email, username, password (stored as password_hash), display name (optional), and consent to terms. Email and username fields must be unique. Upon registration, the system sets is_verified to false (pending email verification), and is_suspended to false by default. Audit attributes such as created_at/updated_at are maintained via trigger/mechanism outside the operation. This operation does NOT set moderator/admin; escalations are manual. On success, a JWT is returned containing user id, current role ('user'), permissions, and expiration. This is a public endpoint.","authorizationType":"join","description":"This endpoint enables guest users to register as standard users by supplying unique email, username, password (hashed using the password_hash field), and optional display_name. The user is created as unverified (is_verified: false) and unsuspended (is_suspended: false) by default, in accordance with the discussion_board_users schema. Email and username are enforced as unique. The operation triggers an email verification process (via related verification token table), but does not immediately allow forum participation until verification (is_verified) is complete. Security is ensured by storing only password_hash, never plaintext. In accordance with security requirements and audit policy, registration attempts, failures, and resulting states are logged for compliance. This operation establishes user membership, laying the foundation of JWT-based authentication for the entire service. Related operations: verification initiation and login endpoints.","summary":"Register a new standard user member (discussion_board_users table) and issue tokens.","parameters":[],"requestBody":{"description":"User registration payload (email, username, password, display_name).","typeName":"IDiscussionBoardUser.ICreate"},"responseBody":{"description":"Successful registration and issuance of authorization tokens (access/refresh tokens for the user).","typeName":"IDiscussionBoardUser.IAuthorized"},"authorizationRole":null,"name":"join","path":"/auth/user/join","method":"post"},{"specification":"Implements the login endpoint for standard user members (discussion_board_users). Authenticates credentials (email or username + password), and on success issues JWT access and refresh tokens based on user id, role and permissions. Internally, the password_hash field is validated against the submitted password. Only users with is_verified true and is_suspended false are allowed to log in; suspended or unverified users are denied access. On successful authentication, updates last_login_at and issues new tokens. Login attempts are rate limited and failures are audited. This is a public endpoint.","authorizationType":"login","description":"This endpoint authenticates a user using provided credentials (email or username, plus password) by verifying against the discussion_board_users schema (email/username, password_hash). The system only allows verified (is_verified: true) and unsuspended (is_suspended: false) accounts to log in, blocking those suspended or unverified, per the schema's security requirements. On success, JWT access and refresh tokens including user id, role, and permissions are returned. On failure, rate limiting and audit logging of failed attempts are enforced as described in functional requirements and audit logs for compliance. Passwords are never returned or logged, only the password_hash is stored and compared securely. This is crucial for user access to all member operations, acting as the gateway to authenticated discussionBoard participation.","summary":"Authenticate a user (discussion_board_users) and issue new tokens for member session.","parameters":[],"requestBody":{"description":"User login payload (email/username and password).","typeName":"IDiscussionBoardUser.ILogin"},"responseBody":{"description":"Authorized JWT payload, including issued tokens and user info, per authentication response.","typeName":"IDiscussionBoardUser.IAuthorized"},"authorizationRole":null,"name":"login","path":"/auth/user/login","method":"post"},{"specification":"Implements JWT refresh token endpoint for standard users (discussion_board_users). Consumes a valid refresh token (stored in discussion_board_refresh_tokens) to issue a new JWT access token, rotating the refresh token. The operation ensures only one active refresh token per session/device/user, enforced in the refresh token table. Suspended (is_suspended true) or deleted users are denied refresh. The endpoint is protected and not public; refresh tokens are validated against the schema. Upon refresh, new access/refresh JWTs are issued reflecting current claims (id, role, permissions).","authorizationType":"refresh","description":"This endpoint allows an authenticated user to refresh their JWT access token by presenting a valid, non-revoked refresh token, as stored in discussion_board_refresh_tokens. It ensures single-token-per-device and that the user is not suspended or deleted as per the discussion_board_users schema (is_suspended must be false, deleted_at null). On verification and success, it rotates the refresh token and issues new tokens. This process maintains session continuity for authenticated users, while aligning with compliance, audit, and security policies enforced through schema relationships on discussion_board_refresh_tokens and discussion_board_users.","summary":"Refresh a user JWT access token using a valid refresh token (discussion_board_refresh_tokens table).","parameters":[],"requestBody":{"description":"Refresh token payload (typically just a refresh_token string).","typeName":"IDiscussionBoardUser.IRefresh"},"responseBody":{"description":"Refreshed JWT token response, including new access/refresh tokens.","typeName":"IDiscussionBoardUser.IAuthorized"},"authorizationRole":null,"name":"refresh","path":"/auth/user/refresh","method":"post"},{"specification":"This operation enables registration of a new discussion board moderator (a user with elevated content management permissions). It creates a new user record in the discussion_board_users table with required authentication fields: email, username, password_hash, and default profile attributes. When the user registers, the is_verified boolean is set to false, and is_suspended is set to false by default. Email and username must both be unique as enforced by the schema's unique constraints. Upon successful registration, the system issues a JWT access token and a refresh token, with the role claim set to 'moderator', and inserts a record linking the user to discussion_board_moderators for audit. This API enforces password complexity and account uniqueness constraints described in the schema. If registration fails, the API returns a specific error. This is the primary entry point for moderator onboarding, and is expected to work with email verification and post-registration authentication operations.","authorizationType":"join","description":"This operation allows a new moderator to register an account in the system. It creates a new row in discussion_board_users (which stores authentication credentials for all user-like roles) and issues a JWT access/refresh token pair with role='moderator'. The operation requires (and validates) a unique email and username—the fields enforced by the discussion_board_users schema. During registration, password_hash is stored securely, and is_verified is set to false until the moderator completes email confirmation. Upon user creation, the discussion_board_moderators table is updated to link this user with moderator privileges (with assigned_at timestamp set to now, is_active true, and revoked_at null). Security-critical fields such as password_hash and email must adhere to complexity and uniqueness requirements, and any business rule violation will be rejected. This endpoint does not permit immediate login until email is verified, as managed by other schema tables (verification flows not explicitly handled by this call). Works in conjunction with moderator login, token refresh, and email verification APIs.","summary":"Register a new moderator account and issue initial tokens (discussion_board_users + discussion_board_moderators).","parameters":[],"requestBody":{"description":"Moderator registration info (email, username, password, profile).","typeName":"IDiscussionBoardModerator.IJoin"},"responseBody":{"description":"JWT access and refresh tokens for authenticated session in 'moderator' role.","typeName":"IDiscussionBoardModerator.IAuthorized"},"authorizationRole":null,"name":"join","path":"/auth/moderator/join","method":"post"},{"specification":"This operation allows a registered moderator to log in with their credentials (email/username and password). It authenticates the request against the discussion_board_users table, matching either the unique email or username field and validating via stored password_hash. Only users whose moderator privileges are currently active (proven by associated discussion_board_moderators record with is_active=true and not revoked) are permitted. The login process verifies the is_verified flag on the discussion_board_users table, denying access until email is confirmed. Upon successful authentication, the operation issues a new JWT access token (with payload including id, role='moderator', permissions array, and expiration) and a new refresh token, and records the login in audit logs. Security features include rejection for non-existent/suspended/deleted accounts or revoked moderator records. Repeated failed attempts may increment lockout status (not managed directly by this endpoint but via application logic). This is a primary authentication point for moderators, working in conjunction with registration, refresh, and logout APIs.","authorizationType":"login","description":"This API operation authenticates a moderator account by verifying the provided email/username and password combination against the discussion_board_users schema (for identity and password_hash) and the discussion_board_moderators schema (to confirm active moderator status with is_active=true and revoked_at=null). The account must also be is_verified=true. If authentication is successful, the system issues a JWT access token (containing role claims, expiration, and permissions) and a refresh token, as defined by session tables. Failed logins due to invalid credentials, non-verified, suspended, or deleted accounts, or moderator role revocation are rejected with specific errors. Security requirements strictly follow the uniqueness and status fields of the schema, and audit logging of the login event is recommended. This endpoint is only accessible to users already registered as moderators and with fully verified accounts. Works in conjunction with token refresh and security-related endpoints.","summary":"Authenticate moderator and issue tokens (from discussion_board_users/discussion_board_moderators).","parameters":[],"requestBody":{"description":"Moderator credentials (email/username and password).","typeName":"IDiscussionBoardModerator.ILogin"},"responseBody":{"description":"JWT tokens for authorized moderator session.","typeName":"IDiscussionBoardModerator.IAuthorized"},"authorizationRole":null,"name":"login","path":"/auth/moderator/login","method":"post"},{"specification":"This operation refreshes the JWT access token for a moderator whose refresh token remains valid. It looks up the provided refresh token (from discussion_board_refresh_tokens) associated with a valid discussion_board_user and confirms the user's ongoing moderator privileges (using the discussion_board_moderators table: is_active=true, revoked_at=null). On successful validation, a new access token (and optionally, a rotated refresh token) is issued. The session linkage is preserved by updating relevant audit or session logs (by application layer). Failure cases include expired/revoked refresh tokens, loss of moderator status, or user account deletion. This refresh supports only authorized sessions tied to active moderator roles and cannot be used to escalate privileges.","authorizationType":"refresh","description":"This operation allows a logged-in moderator to refresh their access session using a valid refresh token. The operation validates that the provided token exists in the discussion_board_refresh_tokens table, is not revoked/expired, and belongs to a discussion_board_user still holding active moderator status (checked in discussion_board_moderators). If the refresh is valid, a new JWT access token (and optionally a new refresh token) is issued with updated expiration, matching the session's permissions and audit policies as required by the schema. Expired or revoked refresh tokens, or loss of moderator privilege, cause the operation to fail. This endpoint is used in session renewal flows, works with login and logout APIs, and adheres to the business logic in the session and actors schema tables.","summary":"Refresh a moderator's JWT access token by valid refresh token (session extension/auth renewal).","parameters":[],"requestBody":{"description":"Moderator refresh token (from active session).","typeName":"IDiscussionBoardModerator.IRefresh"},"responseBody":{"description":"Renewed JWT access/refresh tokens for moderator session.","typeName":"IDiscussionBoardModerator.IAuthorized"},"authorizationRole":null,"name":"refresh","path":"/auth/moderator/refresh","method":"post"},{"specification":"This operation enables system administrators to register their administrator accounts for the discussionBoard platform. It leverages the `discussion_board_admins` table, which tracks all admin actors. The core fields involved are `user_id` (link to the base user record in discussion_board_users), `assigned_at` (timestamp for role granting), and `is_active` (admin currently active). Admin registration requires an existing user profile with completed email verification, after which admin privileges are granted and corresponding JWT tokens are issued. This endpoint also audits the admin creation event in compliance logs using the action_type 'admin_registration' in audit logs. The operation supports detailed error responses for duplicate, invalid, or incomplete input, and integrates with the platform's onboarding security policies (such as minimum password strength and explicit admin role approval by root admins). Related flows: email verification via discussion_board_verification_tokens must precede admin elevation; assignment events are mirrored in discussion_board_audit_logs. Admin join is only available to root users or authorized system actors, not public signup.","authorizationType":"join","description":"This API operation is used for the registration of administrator accounts in the discussionBoard system. Administrators are managed in the `discussion_board_admins` table, which stores attributes such as `user_id`, `assigned_at`, and `is_active`. The registration process requires a valid and unique `user_id` referencing an already email-verified user in the `discussion_board_users` table.\n\nUpon successful administrator registration, a new record is created in `discussion_board_admins`, with `assigned_at` set to the current time and `is_active` marked as true unless explicitly suspended. An audit log entry is recorded in `discussion_board_audit_logs` with action_type `admin_registration` to ensure traceability and compliance.\n\nThe system enforces that only authorized system actors may perform admin registration; public users cannot directly self-register as administrators. This operation interacts with the platform's verification workflow by enforcing email verification, and with compliance flows for root admin approval.\n\nIf input is invalid (e.g., duplicate admin for same user, user not verified, improper authority), a detailed error is returned and the registration is not persisted. This is designed to align with high-security requirements, including explicit admin assignment/revocation events and retention of audit logs for compliance.\n\nThis operation is typically followed by the admin login process, after which JWT tokens are issued for API access.","summary":"Register a new administrator account in the discussion_board_admins table.","parameters":[],"requestBody":{"description":"Admin registration payload (must include reference to already verified user ID).","typeName":"IDiscussionBoardAdmin.ICreate"},"responseBody":{"description":"Response containing issued JWT tokens and admin user profile.","typeName":"IDiscussionBoardAdmin.IAuthorized"},"authorizationRole":null,"name":"join","path":"/auth/admin/join","method":"post"},{"specification":"Authenticate an admin user in the discussionBoard platform by validating credentials such as email and password against the `discussion_board_users` table, with admin linkage verified in `discussion_board_admins` (`is_active`: true). This endpoint ensures that only properly assigned, active admins can access administrative features. It issues new session JWT access and refresh tokens, tracks login in audit logs via action_type 'admin_login', and updates the `last_login_at` on the user entity. Security features include rate limiting after repeated failed attempts, mandatory email verification (`is_verified`) before login is permitted, and lockout if the admin is suspended (`is_suspended`/`suspended_until`). The operation is only accessible to previously assigned and verified admins. It references the password hash in `discussion_board_users`, and privileges in `discussion_board_admins`. Related flows: audit logging, token issuance via session models, and compliance with the platform's authentication policy.","authorizationType":"login","description":"This operation handles admin authentication in the discussionBoard platform. It validates admin login credentials by matching the provided email and password (checked as a secure hash against the `password_hash` field in `discussion_board_users`).\n\nAdditionally, it ensures the user has an active, valid administrator role by referencing `discussion_board_admins` (`is_active`: true, `revoked_at`: null, and not soft-deleted). Email verification is enforced via the `is_verified` flag in `discussion_board_users`, and lockout is implemented for suspended accounts based on `is_suspended` and `suspended_until`.\n\nUpon successful authentication, this operation issues new JWT access and refresh tokens and updates the `last_login_at` value for the admin user. All login attempts, both successful and failed, are logged into `discussion_board_audit_logs` under the `admin_login` action_type for compliance and auditing. This endpoint supports rate limiting and explicit error codes for invalid credentials, suspension, or failed login attempts.\n\nThis operation is only available to previously assigned, verified admin accounts. Admins must subsequently use the issued JWT tokens to access restricted endpoints.","summary":"Authenticate and login an active admin account for the discussion_board_admins table.","parameters":[],"requestBody":{"description":"Admin login payload (typically includes email and password).","typeName":"IDiscussionBoardAdmin.ILogin"},"responseBody":{"description":"Response includes issued JWT tokens and admin profile, if login is successful.","typeName":"IDiscussionBoardAdmin.IAuthorized"},"authorizationRole":null,"name":"login","path":"/auth/admin/login","method":"post"},{"specification":"This endpoint allows an active admin to refresh authentication tokens. The operation accepts a refresh token (managed in `discussion_board_refresh_tokens` table, where `revoked_at` is null and `expires_at` is in the future) and issues new JWT access and refresh tokens, while rotating or invalidating the old one for compliance. It references the current admin's session/device, checks revocation status, and ensures the admin is still active (in both `discussion_board_admins` (`is_active`: true) and `discussion_board_users` (`is_suspended`: false)). All refresh actions are audit-logged (action_type 'admin_refresh') in `discussion_board_audit_logs`. On success, returns current admin profile and tokens; on invalid/expired token, returns an error, as per the token management rules established. This endpoint ensures secure stateless session management for admins, supporting multi-session and multi-device audit/compliance requirements.","authorizationType":"refresh","description":"This operation issues a new JWT access token for an administrator, exchanging a valid, non-expired refresh token (tracked in `discussion_board_refresh_tokens`, `revoked_at` is null, `expires_at` is in the future) for new tokens. It ensures the admin is active and not currently suspended (using `is_active`, `revoked_at`, and `suspended_until` from `discussion_board_admins` and `discussion_board_users`). \n\nUpon a valid refresh, this endpoint rotates refresh tokens and issues new authentication credentials for continued API access. All usage is logged to the `discussion_board_audit_logs` table under `admin_refresh` for audit and regulatory compliance. If the refresh token is expired, revoked, or invalid, a detailed error response is returned.\n\nThis endpoint underpins the stateless session management system and is critical for securely extending admin access. Tokens must be managed per device/session, and this operation guarantees that existing refresh tokens are correctly rotated or invalidated according to compliance rules.","summary":"Refresh admin JWT access and refresh tokens using a valid refresh token for session management.","parameters":[],"requestBody":{"description":"Refresh token request payload for admin session token renewal.","typeName":"IDiscussionBoardAdmin.IRefresh"},"responseBody":{"description":"Response includes newly issued JWT tokens (access/refresh) and admin profile.","typeName":"IDiscussionBoardAdmin.IAuthorized"},"authorizationRole":null,"name":"refresh","path":"/auth/admin/refresh","method":"post"},{"specification":"This operation retrieves a paginated list of discussion board categories, allowing advanced filtering, searching, and sorting. It leverages the discussion_board_categories table from the Prisma schema, providing search through fields like name, is_active, and supports custom sort orders. The endpoint is essential for listing all available or administratively-managed categories, including workflow for moderators and admins to review and manage categories efficiently.","path":"/discussionBoard/admin/categories","method":"patch","prisma_schemas":"model discussion_board_categories {\n  id String @id @db.Uuid\n  name String\n  description String?\n  is_active Boolean\n  sort_order Int @db.Integer\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  discussion_board_category_tag_relations discussion_board_category_tag_relations[]\n  @@unique([name])\n  @@index([is_active])\n}","description":"Retrieve a paginated, searchable, and sortable list of all discussion board categories. This API is crucial for both general users to browse available categories as well as for moderators/admins to manage category status and details.\n\nFiltering can be applied on fields such as name, is_active, and sort_order. Supports complex search scenarios for backend moderation dashboards as well as public listings. The response supports efficient pagination for performance and user experience.\n\nAccess is typically restricted to authenticated users for management, but may also allow public listing with is_active=true. The list integrates with category-tag relations, and can be extended to support tag-based filtering in the future.","summary":"Retrieve a paginated and filterable list of discussion board categories.","parameters":[],"requestBody":{"description":"Search, filter, and pagination options for querying categories.","typeName":"IDiscussionBoardCategory.IRequest"},"responseBody":{"description":"Paginated result set of category summaries matching the search/filter criteria.","typeName":"IPageIDiscussionBoardCategory.ISummary"},"authorizationRoles":["admin"],"name":"index","model_name":"discussion_board_categories","soft_delete_column":"deleted_at","authorizationRole":"admin","authorizationType":null},{"specification":"Retrieve detailed information for a specific discussion board category, identified by unique categoryId. Reviews all fields including id, name, description, active status, sort order, and timestamps. Taps into the discussion_board_categories table from the Prisma schema for granular access and display. Core use case is category detail page for admin dashboard or public UI.","path":"/discussionBoard/admin/categories/{categoryId}","method":"get","prisma_schemas":"model discussion_board_categories {\n  id String @id @db.Uuid\n  name String\n  description String?\n  is_active Boolean\n  sort_order Int @db.Integer\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  discussion_board_category_tag_relations discussion_board_category_tag_relations[]\n  @@unique([name])\n  @@index([is_active])\n}","description":"Get all details about a single category based on its unique identifier. Returns all fields including name, description, active state, ordering, and timestamps. Used for admin and moderator workflows, as well as public category detail if is_active.\n\nAuthorization ensures that only users with sufficient permissions may view inactive categories or full details. The response allows UI to present rich category information, and supports further management operations.","summary":"Get details for a single discussion board category by ID.","parameters":[{"name":"categoryId","description":"Unique identifier of the target category.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete information about the requested category.","typeName":"IDiscussionBoardCategory"},"authorizationRoles":["admin"],"name":"at","model_name":"discussion_board_categories","soft_delete_column":"deleted_at","authorizationRole":"admin","authorizationType":null},{"specification":"Create a new discussion board category. Accepts required data including unique name, description, display/active status, and sort order. Operates on the discussion_board_categories table as per Prisma schema. Ensures name uniqueness and compliance with business rules (e.g., sort order, is_active logic).","path":"/discussionBoard/admin/categories","method":"post","prisma_schemas":"model discussion_board_categories {\n  id String @id @db.Uuid\n  name String\n  description String?\n  is_active Boolean\n  sort_order Int @db.Integer\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  discussion_board_category_tag_relations discussion_board_category_tag_relations[]\n  @@unique([name])\n  @@index([is_active])\n}","description":"Create a new category for classifying discussion posts and threads. Requires a unique name and may include a description, is_active flag, and sort_order. The operation integrates validation on uniqueness of the category name and adheres to schema constraints on field types and attributes.\n\nCreated categories become available for use by users (if is_active), or can be staged for moderation/admin review. Audit trails log creator and status. Only authorized staff (e.g., admins) are permitted to create categories, enforcing strict access control.","summary":"Create a new category for the discussion board.","parameters":[],"requestBody":{"description":"Data needed to create a new discussion board category.","typeName":"IDiscussionBoardCategory.ICreate"},"responseBody":{"description":"Full details of the newly created category.","typeName":"IDiscussionBoardCategory"},"authorizationRoles":["admin"],"name":"create","model_name":"discussion_board_categories","soft_delete_column":"deleted_at","authorizationRole":"admin","authorizationType":null},{"specification":"Update an existing discussion board category, identified by categoryId. All schema attributes—name, description, active status, sort order—are updatable with correct permissions. Leverages Prisma table discussion_board_categories for data integrity and business logic enforcement. Ensures uniqueness of name, proper sort order normalization, and synchronizes all attached relations and views.","path":"/discussionBoard/admin/categories/{categoryId}","method":"put","prisma_schemas":"model discussion_board_categories {\n  id String @id @db.Uuid\n  name String\n  description String?\n  is_active Boolean\n  sort_order Int @db.Integer\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  discussion_board_category_tag_relations discussion_board_category_tag_relations[]\n  @@unique([name])\n  @@index([is_active])\n}","description":"Update the attributes of an existing discussion board category. Can change name (must remain unique), description, is_active status, and sort_order. The API validates all updates against schema and business requirements—incorrect or duplicate parameters (such as non-unique name) result in errors.\n\nOnly admin users have access, and all changes are auditable. Updates may alter how categories appear in both public listings and admin panels, as well as their activation for post submission.","summary":"Update a discussion board category by ID.","parameters":[{"name":"categoryId","description":"Unique identifier of the category to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields and values to update for the target category.","typeName":"IDiscussionBoardCategory.IUpdate"},"responseBody":{"description":"Complete information about the updated category.","typeName":"IDiscussionBoardCategory"},"authorizationRoles":["admin"],"name":"update","model_name":"discussion_board_categories","soft_delete_column":"deleted_at","authorizationRole":"admin","authorizationType":null},{"specification":"Perform a soft delete on a discussion board category specified by categoryId. Instead of removing records, sets deleted_at field for compliance, auditing, and recovery. Acts on the discussion_board_categories table from the Prisma schema. Enforces proper authorizations and ensures category is not available for new posts once deleted.","path":"/discussionBoard/admin/categories/{categoryId}","method":"delete","prisma_schemas":"model discussion_board_categories {\n  id String @id @db.Uuid\n  name String\n  description String?\n  is_active Boolean\n  sort_order Int @db.Integer\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  discussion_board_category_tag_relations discussion_board_category_tag_relations[]\n  @@unique([name])\n  @@index([is_active])\n}","description":"Soft-deletes the target category by setting deleted_at to the current timestamp, preserving the record for compliance and potential recovery. Deleted categories are excluded from future listings and cannot be used for new post classification, though audit and system logs retain their information.\n\nThe operation is available solely to admin users due to its impact on forum structure. Attempts to delete already-deleted or non-existent categories return appropriate errors. Soft deletion preserves data integrity for audit trails and system history.","summary":"Soft delete a discussion board category by ID.","parameters":[{"name":"categoryId","description":"Unique identifier of the category to soft delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","model_name":"discussion_board_categories","soft_delete_column":"deleted_at","authorizationRole":"admin","authorizationType":null},{"specification":"Get a paginated and filterable list of tags used for content classification across categories and posts. Operates on the discussion_board_tags table. This endpoint is used for both administrative management (e.g., tag deactivation, merging) and for end-users to browse available tags. It supports filtering by label, is_active, and can be extended for tag suggestion or search UX workflows. Includes auditability and soft-delete filtering.","path":"/discussionBoard/admin/tags","method":"patch","prisma_schemas":"model discussion_board_tags {\n  id String @id @db.Uuid\n  label String\n  description String?\n  is_active Boolean\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  discussion_board_category_tag_relations discussion_board_category_tag_relations[]\n  @@unique([label])\n  @@index([is_active])\n}","description":"Fetch a paginated, searchable, and filterable list of tags for use in category and post management. Tags power faceted search, user suggestions, and advanced moderation workflows. The API enables filtering on tag label and is_active status, with ordering for user-facing or moderation needs.\n\nUsed both by admin users for backend tag management and by end-users for tag browsing or selection. Soft-deleted tags are excluded unless explicitly included by business logic. Supports growth and evolution of tag taxonomy.","summary":"Paginated, filterable list of discussion board tags.","parameters":[],"requestBody":{"description":"Filtering, search, and pagination options for retrieving tags.","typeName":"IDiscussionBoardTag.IRequest"},"responseBody":{"description":"Paginated list of tag summaries matching the query.","typeName":"IPageIDiscussionBoardTag.ISummary"},"authorizationRoles":["admin"],"name":"index","model_name":"discussion_board_tags","soft_delete_column":"deleted_at","authorizationRole":"admin","authorizationType":null},{"specification":"Retrieve all information for a single tag, using its unique identifier tagId. Operates on the discussion_board_tags table and returns full detail record including label, description, status, timestamps, and audit-relevant metadata. Designed for tag detail viewing in management consoles and for powering UI workflows like tag selection via search or tag clouds.","path":"/discussionBoard/admin/tags/{tagId}","method":"get","prisma_schemas":"model discussion_board_tags {\n  id String @id @db.Uuid\n  label String\n  description String?\n  is_active Boolean\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  discussion_board_category_tag_relations discussion_board_category_tag_relations[]\n  @@unique([label])\n  @@index([is_active])\n}","description":"Fetch a complete detail record for a single tag specified by its unique tagId. The response includes label, description, activation status, audit timestamps, and any admin-level details relevant to management or moderation.\n\nAccess is controlled for sensitive or inactive tags, but public tags may be visible depending on system configuration. Enables UI workflows such as tag editing, merging, or detail popovers in tag suggestion lists.","summary":"Get details about a specific discussion board tag.","parameters":[{"name":"tagId","description":"Unique identifier of the target tag.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full detail record of the requested tag.","typeName":"IDiscussionBoardTag"},"authorizationRoles":["admin"],"name":"at","model_name":"discussion_board_tags","soft_delete_column":"deleted_at","authorizationRole":"admin","authorizationType":null},{"specification":"Create a new tag for use in content and category labeling. Accepts a unique label, optional description, is_active flag. Acts on discussion_board_tags table and applies all uniqueness and business validation logic. Ensures new tags are immediately available (if active) for tagging categories and posts, with all required metadata. Admin level operation to restrict taxonomy sprawl and ensure quality control.","path":"/discussionBoard/admin/tags","method":"post","prisma_schemas":"model discussion_board_tags {\n  id String @id @db.Uuid\n  label String\n  description String?\n  is_active Boolean\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  discussion_board_category_tag_relations discussion_board_category_tag_relations[]\n  @@unique([label])\n  @@index([is_active])\n}","description":"Create a new tag instance for use within categories and as a tool for discussion board organization. Requires a unique label and optional description, with is_active controlling immediate usability in tagging flows.\n\nStrict controls prevent tag duplication and allow for moderation review where needed. Useful for evolving forum taxonomy, supporting user engagement, and enabling advanced content filtering. All actions are logged for audit.","summary":"Create a new tag for organizing content.","parameters":[],"requestBody":{"description":"Information required to create a new tag.","typeName":"IDiscussionBoardTag.ICreate"},"responseBody":{"description":"Full details of the newly created tag.","typeName":"IDiscussionBoardTag"},"authorizationRoles":["admin"],"name":"create","model_name":"discussion_board_tags","soft_delete_column":"deleted_at","authorizationRole":"admin","authorizationType":null},{"specification":"Update the properties of an existing tag in the discussion board system. This operation targets the discussion_board_tags table in the Prisma schema, allowing an admin to modify the tag's label, description, or active status. This endpoint ensures tags can be maintained, renamed, or temporarily deactivated to support evolving content categorization needs and moderation policies. Business logic restricts tag label changes to unique values and may trigger downstream cache or search updates. Only admin users may perform this operation, preserving taxonomy integrity.","path":"/discussionBoard/admin/tags/{tagId}","method":"put","prisma_schemas":"model discussion_board_tags {\n  id String @id @db.Uuid\n  label String\n  description String?\n  is_active Boolean\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  discussion_board_category_tag_relations discussion_board_category_tag_relations[]\n  @@unique([label])\n  @@index([is_active])\n}","description":"This API allows an admin to update the label, description, or active status of a tag used throughout the discussion board. Tag modifications may include correcting spelling, updating descriptions to reflect community standards, or toggling active status for moderation. The system enforces tag label uniqueness and updates affected relationships across categories. Only admin users have access to this endpoint to prevent unauthorized modifications to the platform's taxonomy. Related endpoints include tag creation (POST /tags), tag retrieval, and tag list endpoints for categorization management. In case of validation failure (e.g., duplicate tag label), a descriptive error message is returned.","summary":"Update an existing tag (label/description/status) in the discussion board (discussion_board_tags).","parameters":[{"name":"tagId","description":"Unique identifier of the tag to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields and new values for the tag update.","typeName":"IDiscussionBoardTag.IUpdate"},"responseBody":{"description":"Updated tag information after modification.","typeName":"IDiscussionBoardTag"},"authorizationRoles":["admin"],"name":"update","model_name":"discussion_board_tags","soft_delete_column":"deleted_at","authorizationRole":"admin","authorizationType":null},{"specification":"Remove a tag from the discussion board taxonomy system. This operation performs a soft delete by setting the deleted_at timestamp in the discussion_board_tags table, making the tag unavailable for new assignments but preserving it for historical data consistency and audit. Only admin users can perform this operation, and related assignments in categories or posts are updated accordingly. The actual record is not permanently deleted, supporting compliance and reversibility.","path":"/discussionBoard/admin/tags/{tagId}","method":"delete","prisma_schemas":"model discussion_board_tags {\n  id String @id @db.Uuid\n  label String\n  description String?\n  is_active Boolean\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  discussion_board_category_tag_relations discussion_board_category_tag_relations[]\n  @@unique([label])\n  @@index([is_active])\n}","description":"This endpoint allows administrators to disable or remove a tag from the taxonomy by performing a soft delete operation. The deleted_at field marks the tag as unavailable for new categorization, but the tag remains in the database for audit and compliance reasons. Existing category or post relationships referencing the tag remain unchanged, supporting historical analysis. Only admin users may access this endpoint to prevent loss of platform structure. Operation errors include not found and permission denial. To restore a tag, use a separate (not provided here) undelete/recover endpoint.","summary":"Soft delete a tag in the discussion_board_tags table (taxonomy/tag management).","parameters":[{"name":"tagId","description":"Unique identifier of the tag to soft delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","model_name":"discussion_board_tags","soft_delete_column":"deleted_at","authorizationRole":"admin","authorizationType":null},{"specification":"Retrieve a paginated and filterable list of all global or system-wide configuration settings used in the discussion board. The operation targets the discussion_board_settings table, supporting complex searches by key, value, description, or activity status. Used by admins to audit or manage live configuration. Pagination and sorting options facilitate management of large or dynamic settings collections.","path":"/discussionBoard/admin/settings","method":"patch","prisma_schemas":"model discussion_board_settings {\n  id String @id @db.Uuid\n  key String\n  value String\n  description String?\n  is_system Boolean\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  @@unique([key])\n  @@index([is_system])\n}","description":"This API endpoint delivers advanced search and pagination across discussion board system settings, enabling filtering by key, value, or description. Admins use this operation to quickly locate, review, or audit settings and their changes, especially for system configuration and compliance requirements. Pagination, sorting, and filter capabilities support efficient UI and backend management for growing systems. Returning results includes all metadata without exposing sensitive values to unauthorized users. Related endpoints include individual setting CRUD.","summary":"Search and paginate discussion_board_settings (system configuration/audit).","parameters":[],"requestBody":{"description":"Criteria and pagination options for filtering global settings.","typeName":"IDiscussionBoardSetting.IRequest"},"responseBody":{"description":"Paginated list of system settings matching the search.","typeName":"IPageIDiscussionBoardSetting"},"authorizationRoles":["admin"],"name":"index","model_name":"discussion_board_settings","soft_delete_column":"deleted_at","authorizationRole":"admin","authorizationType":null},{"specification":"Fetch detail for a single system or business configuration setting, as stored in the discussion_board_settings table. The endpoint accepts a settingId parameter (UUID), returning all columns, including key, value, and audit metadata. Used by admins to view or review specific settings, often as part of audit, maintenance, or live reconfiguration tasks.","path":"/discussionBoard/admin/settings/{settingId}","method":"get","prisma_schemas":"model discussion_board_settings {\n  id String @id @db.Uuid\n  key String\n  value String\n  description String?\n  is_system Boolean\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  @@unique([key])\n  @@index([is_system])\n}","description":"This endpoint retrieves complete information for a single configuration setting entry, supporting admin UI, direct API access, or automated audit reviews. The returned object includes key, value, whether the setting is system-level, and all metadata. Used to display or validate live or historical settings for the platform. Only accessible to admins. Not found or permission errors apply.","summary":"Get details of a discussion_board_settings row by id (setting detail).","parameters":[{"name":"settingId","description":"Unique identifier for the specific system setting to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Details of the requested system or business setting.","typeName":"IDiscussionBoardSetting"},"authorizationRoles":["admin"],"name":"at","model_name":"discussion_board_settings","soft_delete_column":"deleted_at","authorizationRole":"admin","authorizationType":null},{"specification":"Create a new system-wide configuration entry in the discussion_board_settings table. Used by administrators to define new feature toggles, update thresholds, or register new settings. Enforces key uniqueness and allows for setting metadata. Entries created via this endpoint become available instantly (subject to platform propagation).","path":"/discussionBoard/admin/settings","method":"post","prisma_schemas":"model discussion_board_settings {\n  id String @id @db.Uuid\n  key String\n  value String\n  description String?\n  is_system Boolean\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  @@unique([key])\n  @@index([is_system])\n}","description":"This API endpoint allows platform admins to register new configuration settings (e.g., feature flags, operational limits, system parameters) into the board configuration. Uniqueness is enforced for the key field, and the API returns full metadata for audit. Business logic may validate the key and value pattern, with errors returned for collisions or invalid settings. This enables fast, code-free reconfiguration of board/platform features as business requirements evolve. Related endpoints support update or delete. Audit logs are recorded automatically.","summary":"Create a new system/business setting (discussion_board_settings table).","parameters":[],"requestBody":{"description":"Fields for the new system or business setting entry.","typeName":"IDiscussionBoardSetting.ICreate"},"responseBody":{"description":"Created setting metadata as stored in the database.","typeName":"IDiscussionBoardSetting"},"authorizationRoles":["admin"],"name":"create","model_name":"discussion_board_settings","soft_delete_column":"deleted_at","authorizationRole":"admin","authorizationType":null},{"specification":"Update the value or description or metadata of an existing global system/business setting. Targets the discussion_board_settings table and allows admins to update key fields except for the primary key (id). Settings changes may trigger downstream configuration refresh, live propagation, and audit logs. Strict admin-only permission applies, with business logic enforcing key uniqueness where supported.","path":"/discussionBoard/admin/settings/{settingId}","method":"put","prisma_schemas":"model discussion_board_settings {\n  id String @id @db.Uuid\n  key String\n  value String\n  description String?\n  is_system Boolean\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  @@unique([key])\n  @@index([is_system])\n}","description":"This API updates the value, description, or metadata of a specific configuration setting by id. Only admins may call this endpoint, and changes are reflected in the returned setting object. Business logic applies validation on updated values, system-flag rules, and audit logging. Primary key id is immutable. Use related endpoints for listing or deleting settings. Error scenarios include duplicate keys, missing ids, or validation rule breaches.","summary":"Update an existing system/business setting (discussion_board_settings row).","parameters":[{"name":"settingId","description":"Unique identifier of the system setting to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields and new values to update for the setting row.","typeName":"IDiscussionBoardSetting.IUpdate"},"responseBody":{"description":"Updated metadata for the affected system or business setting.","typeName":"IDiscussionBoardSetting"},"authorizationRoles":["admin"],"name":"update","model_name":"discussion_board_settings","soft_delete_column":"deleted_at","authorizationRole":"admin","authorizationType":null},{"specification":"Deletes (soft deletes) a configuration setting from the discussion_board_settings table based on id. This sets the deleted_at timestamp for compliance and reversibility while removing the setting from active usage. Only admin users may perform, and active dependent systems/platform code may require reconfiguration if live settings are deleted. Related endpoints support permanent deletion or restoration in compliance scenarios.","path":"/discussionBoard/admin/settings/{settingId}","method":"delete","prisma_schemas":"model discussion_board_settings {\n  id String @id @db.Uuid\n  key String\n  value String\n  description String?\n  is_system Boolean\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  @@unique([key])\n  @@index([is_system])\n}","description":"This endpoint marks a system configuration setting as deleted (soft deletion), hiding it from normal system usage but retaining the row for audit and compliance. The deleted_at field is updated. Only admins may call this endpoint. It is used as part of configuration lifecycle management and ensures traceability. Not found and permission errors are handled, with related endpoints for listing and undelete. Deletion affects active system configuration upon propagation or cache invalidation.","summary":"Soft delete a system/business setting (compliance/audit, discussion_board_settings).","parameters":[{"name":"settingId","description":"Unique identifier of the setting to soft delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","model_name":"discussion_board_settings","soft_delete_column":"deleted_at","authorizationRole":"admin","authorizationType":null},{"specification":"Retrieve a paginated and searchable audit log of platform/system events by querying the discussion_board_audit_logs table. Designed for administrators to monitor, trace, and review critical activities for compliance, security, or business audit. Supports advanced queries by actor, role, action_type, target_object, created_at, and full-text search on descriptions. Search results are paginated and sortable to handle large-scale logs.","path":"/discussionBoard/admin/auditLogs","method":"patch","prisma_schemas":"model discussion_board_audit_logs {\n  id String @id @db.Uuid\n  actor_id String? @db.Uuid\n  actor_role String\n  action_type String\n  target_object String?\n  description String?\n  created_at DateTime @db.Timestamptz\n  discussion_board_action_logs discussion_board_action_logs[]\n  @@index([actor_id])\n  @@index([created_at])\n  @@index([action_type(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n}","description":"This API allows platform administrators to search and retrieve detailed audit logs of critical system activities, supporting multi-dimensional queries (filter by actor, time, event type, or description). The endpoint assists in compliance, breach investigation, or operational review for system administrators. Returned data respects privacy and access controls, ensuring that only authorized admins can view sensitive action details. The API is intended for backend audit panels and API-based compliance automation. Pagination and complex query filters are supported for large event volumes.","summary":"Search and retrieve paginated audit logs for platform/system events.","parameters":[],"requestBody":{"description":"Advanced query, filter, and pagination parameters for audit log search.","typeName":"IDiscussionBoardAuditLog.IRequest"},"responseBody":{"description":"Paginated audit logs matching query criteria for compliance usage.","typeName":"IPageIDiscussionBoardAuditLog"},"authorizationRoles":["admin"],"name":"index","model_name":"discussion_board_audit_logs","soft_delete_column":null,"authorizationRole":"admin","authorizationType":null},{"prisma_schemas":"model discussion_board_users {\n  id String @id @db.Uuid\n  email String\n  username String\n  display_name String?\n  password_hash String\n  is_verified Boolean\n  is_suspended Boolean\n  suspended_until DateTime? @db.Timestamptz\n  last_login_at DateTime? @db.Timestamptz\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  // ...other relations omitted for brevity\n}","authorizationRoles":["user"],"description":"Retrieve detailed information about a specific user account in the discussion board. This operation accesses the discussion_board_users table as defined in the Prisma schema and provides all configurable fields and associated user profile data, such as email, username, display_name, verification status, and account state properties.\n\nThis API is designed for viewing user profile information, viewing participant statistics, and supporting profile display operations in the frontend. The endpoint will enforce security rules so that only authenticated users or users with permissions (e.g., self or authorized roles) can view protected details. Sensitive attributes such as password hashes are not exposed in the response.\n\nThe API integrates with multiple user-centric operations, supports account moderation states (is_suspended, is_verified), and can be used for displaying user profile pages or self-service account management. Related operations include list, update, and erase endpoints for user management.\n\nThe API expects a valid userId path parameter in UUID format, matching an existing discussion_board_users record. Clients must handle not-found and unauthorized scenarios in accordance with API error handling conventions.","specification":"This operation retrieves complete user information from the discussion_board_users table based on the provided userId. It is intended to serve detailed profile views and backend account management use cases. All fields excluding sensitive authentication hashes are exposed, with support for role-based access filtering and compliance with privacy policies.","summary":"Retrieve detailed user account information by userId from discussion_board_users","path":"/discussionBoard/user/users/{userId}","parameters":[{"name":"userId","description":"Unique identifier of the target user","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete user account details (excluding sensitive hashes)","typeName":"IDiscussionBoardUser"},"name":"at","method":"get","model_name":"discussion_board_users","soft_delete_column":"deleted_at","authorizationRole":"user","authorizationType":null},{"prisma_schemas":"model discussion_board_users {\n  id String @id @db.Uuid\n  email String\n  username String\n  display_name String?\n  password_hash String\n  is_verified Boolean\n  is_suspended Boolean\n  suspended_until DateTime? @db.Timestamptz\n  last_login_at DateTime? @db.Timestamptz\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  // ...other relations omitted for brevity\n}","authorizationRoles":["user"],"description":"Update the mutable, non-sensitive fields of an existing user account identified by userId. This operation is rooted in the discussion_board_users table, allowing changes to the display_name, username, or other updatable fields as defined in the business logic and the Prisma schema.\n\nSecurity measures ensure only the account owner, or authorized roles (e.g., moderators or admins), may perform updates. Critical fields like password hashes, suspension status, or deletion cannot be updated via this endpoint—instead, such changes are handled by special-purpose APIs. The update timestamp is refreshed and an audit trail is maintained according to compliance policy.\n\nRelated APIs include the user profile retrieval, account suspension/role assignment, and account erasure endpoints. The expected behavior for updates is transactional integrity and complete validation per business rules (e.g., username uniqueness).\n\nClients must provide a valid userId in the path and a request body that validates against IDiscussionBoardUser.IUpdate.","specification":"Performs update operations for the provided userId in the discussion_board_users model using the fields defined as updatable. Validation ensures uniqueness and permission is enforced for role-based access.","summary":"Update mutable fields of a user profile by userId.","path":"/discussionBoard/user/users/{userId}","parameters":[{"name":"userId","description":"Unique identifier of the user to be updated","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update request data for the user profile (non-sensitive fields only)","typeName":"IDiscussionBoardUser.IUpdate"},"responseBody":{"description":"Updated user information with latest state","typeName":"IDiscussionBoardUser"},"name":"update","method":"put","model_name":"discussion_board_users","soft_delete_column":"deleted_at","authorizationRole":"user","authorizationType":null},{"prisma_schemas":"model discussion_board_users {\n  id String @id @db.Uuid\n  email String\n  username String\n  display_name String?\n  password_hash String\n  is_verified Boolean\n  is_suspended Boolean\n  suspended_until DateTime? @db.Timestamptz\n  last_login_at DateTime? @db.Timestamptz\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  // ...other relations omitted for brevity\n}","authorizationRoles":["user"],"description":"Soft-deletes a user account in the discussion board by marking the deleted_at field with the current timestamp for the user referenced by userId. This operation makes the account inaccessible to regular users but retains the record and key metadata for compliance, moderation, and auditing.\n\nAccount removal respects all standard soft deletion patterns, meaning all direct relations (posts, comments, etc.) are not removed but may be hidden or anonymized from public view according to business logic. The operation requires self-authorization unless escalated (e.g., by moderators/admins). Complies with user data erasure policies, enabling administrators and users to initiate their own account removal.\n\nA successful deletion will only affect logical removal—not physical deletion. Related APIs must handle visibility of soft-deleted records and include compliance with any legal erasure requirements.","specification":"Marks the deleted_at timestamp for the user account identified by userId in the discussion_board_users table, implementing a soft-delete and removing the account from all user-accessible operations.","summary":"Soft delete (deactivate) a user account by userId (sets deleted_at).","path":"/discussionBoard/user/users/{userId}","parameters":[{"name":"userId","description":"Unique identifier of the account to be soft-deleted","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"name":"erase","method":"delete","model_name":"discussion_board_users","soft_delete_column":"deleted_at","authorizationRole":"user","authorizationType":null},{"specification":"This API retrieves a paginated, filterable, and searchable list of users from the discussion_board_users table. Intended for moderators and administrators to efficiently manage, review, or audit member accounts. Supports multi-criteria search including email, username, verification/suspension status, registration date, and full-text search. Adheres strictly to the defined fields within the discussion_board_users Prisma schema.","path":"/discussionBoard/admin/users","method":"patch","prisma_schemas":"model discussion_board_users {\n  id String @id @db.Uuid\n  email String\n  username String\n  display_name String?\n  password_hash String\n  is_verified Boolean\n  is_suspended Boolean\n  suspended_until DateTime? @db.Timestamptz\n  last_login_at DateTime? @db.Timestamptz\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  @@unique([email])\n  @@unique([username])\n  @@index([created_at])\n  @@index([is_verified, is_suspended])\n  @@index([display_name(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n}","description":"Search and list registered users of the discussion board with advanced filtering by role-based access, sorting by registration, last login, and other profile attributes. The operation supports pagination for large user sets, and optionally restricts results to the caller's visibility according to their role (admin can view all, moderators can view most, standard users cannot access this endpoint).\n\nUser details may include email, username, account status (verified/suspended), and important timestamps. Sensitive data (like password hashes) is never exposed in responses. This endpoint helps moderators and admins enforce compliance, monitor growth, or intervene during incidents.\n\nRefer to the discussion_board_users Prisma schema for the full set of accessible/returnable fields and use appropriate request and response types to support scalable management workflows.","summary":"Paginated, advanced search of users (moderator/admin access)","parameters":[],"requestBody":{"description":"User search criteria, including pagination and filters","typeName":"IDiscussionBoardUser.IRequest"},"responseBody":{"description":"Paginated user list (role-restricted fields for compliance)","typeName":"IPageIDiscussionBoardUser"},"authorizationRoles":["admin","moderator"],"name":"index","model_name":"discussion_board_users","soft_delete_column":"deleted_at","authorizationRole":"admin","authorizationType":null},{"specification":"This operation retrieves a specific audit log entry by its unique identifier (auditLogId) from the discussion_board_audit_logs model. The endpoint is used primarily for compliance, security monitoring, and administrative review, allowing authorized users to inspect the detailed metadata and human-readable summary of critical platform actions (such as configuration changes, role assignments, moderation activities, and system events). The operation cross-references actor information and supports investigative workflows for administrators. All fields returned strictly align to the discussion_board_audit_logs Prisma schema.","path":"/discussionBoard/admin/auditLogs/{auditLogId}","method":"get","prisma_schemas":"model discussion_board_audit_logs {\n  id String @id @db.Uuid\n  actor_id String? @db.Uuid\n  actor_role String\n  action_type String\n  target_object String?\n  description String?\n  created_at DateTime @db.Timestamptz\n  discussion_board_action_logs discussion_board_action_logs[]\n  @@index([actor_id])\n  @@index([created_at])\n  @@index([action_type(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n}","description":"Retrieve a detailed audit log record by its unique identifier, exposing all major fields such as actor details, action type, target object, description, and timestamps. Typical use cases include compliance audit, review of administrative actions, and root-cause analysis during incident review. \n\nOnly administrators may access this endpoint, ensuring it is used strictly for legal, operational, or high-stake support purposes. The returned structure maps directly to the audit log schema and includes all available contextual and relationship data. Associated action logs (lower-level traces) can be separately queried using the actionLogs endpoints for advanced investigations. \n\nAppropriate error messages will be returned if the entry does not exist or if the requesting user's role is insufficient to view the information.","summary":"Get a single audit log entry by ID (admin-only)","parameters":[{"name":"auditLogId","description":"Unique identifier for the target audit log entry","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The matching audit log record with all metadata and actor/action context","typeName":"IDiscussionBoardAuditLog"},"authorizationRoles":["admin"],"name":"at","model_name":"discussion_board_audit_logs","soft_delete_column":null,"authorizationRole":"admin","authorizationType":null},{"specification":"This operation provides a paginated, filterable, and sortable list of action logs from the discussion_board_action_logs table. Each action log details granular system-level traces and sub-events associated with broader audit log entries, supporting compliance, operational debugging, and advanced investigations. Search criteria can include audit log IDs, status, metadata, creation times, and more, strictly adhering to the discussion_board_action_logs Prisma schema.","path":"/discussionBoard/admin/actionLogs","method":"patch","prisma_schemas":"model discussion_board_action_logs {\n  id String @id @db.Uuid\n  discussion_board_audit_log_id String @db.Uuid\n  status String\n  metadata String?\n  created_at DateTime @db.Timestamptz\n  auditLog discussion_board_audit_logs @relation(fields: [discussion_board_audit_log_id], references: [id], onDelete: Cascade)\n  @@index([discussion_board_audit_log_id])\n}","description":"Search and retrieve a paginated list of action log entries, which serve as detailed sub-events or system-level traces attached to audit logs. Each log details its status, metadata, and creation timestamp, providing granular visibility into the internal operations and compliance story of the platform.\n\nThis endpoint is commonly used by compliance auditors, admins, and (when appropriate) technical support personnel to investigate incidents, confirm audit trails, or debug complex sequences of platform actions. List results can be filtered, sorted, and paginated according to business rules and performance considerations.\n\nThis operation references the discussion_board_action_logs table, returning relevant child records that may be associated with larger audit events, all according to the Prisma schema fields and documented relationships.","summary":"List/search detailed action logs for compliance and administration","parameters":[],"requestBody":{"description":"Action log search criteria, filters, and pagination/sorting options","typeName":"IDiscussionBoardActionLog.IRequest"},"responseBody":{"description":"Paginated result of action logs matching query/filter criteria","typeName":"IPageIDiscussionBoardActionLog"},"authorizationRoles":["admin"],"name":"index","model_name":"discussion_board_action_logs","soft_delete_column":null,"authorizationRole":"admin","authorizationType":null},{"specification":"Retrieve the details of a single action log entry from the discussion_board_action_logs table by its unique identifier (actionLogId). Action logs offer a detailed trace of lower-level system activities linked to major audit logs, supporting in-depth operational review and compliance analysis. Accessible only to admins.","path":"/discussionBoard/admin/actionLogs/{actionLogId}","method":"get","prisma_schemas":"model discussion_board_action_logs {\n  id String @id @db.Uuid\n  discussion_board_audit_log_id String @db.Uuid\n  status String\n  metadata String?\n  created_at DateTime @db.Timestamptz\n  auditLog discussion_board_audit_logs @relation(fields: [discussion_board_audit_log_id], references: [id], onDelete: Cascade)\n  @@index([discussion_board_audit_log_id])\n}","description":"Fetch a single action log record by its unique ID, including embedded status, metadata, and timestamp. Useful for compliance audit, root-cause analysis, and advanced troubleshooting tasks. The endpoint cross-references parent audit log data for investigative context and is primarily intended for admin and compliance workflows.\n\nAccess is strictly limited to admin role to safeguard sensitive traces of platform logic or user actions. If the action log does not exist, a not-found error is returned. Each record maps directly to the discussion_board_action_logs Prisma schema and relates upward to an audit log for full event history.","summary":"Get a specific action log by ID (admin-only)","parameters":[{"name":"actionLogId","description":"Unique identifier of the action log record","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Action log detail with all trace metadata in schema","typeName":"IDiscussionBoardActionLog"},"authorizationRoles":["admin"],"name":"at","model_name":"discussion_board_action_logs","soft_delete_column":null,"authorizationRole":"admin","authorizationType":null},{"specification":"This API retrieves a paginated, filterable, and searchable list of users from the discussion_board_users table. Intended for moderators and administrators to efficiently manage, review, or audit member accounts. Supports multi-criteria search including email, username, verification/suspension status, registration date, and full-text search. Adheres strictly to the defined fields within the discussion_board_users Prisma schema.","path":"/discussionBoard/moderator/users","method":"patch","prisma_schemas":"model discussion_board_users {\n  id String @id @db.Uuid\n  email String\n  username String\n  display_name String?\n  password_hash String\n  is_verified Boolean\n  is_suspended Boolean\n  suspended_until DateTime? @db.Timestamptz\n  last_login_at DateTime? @db.Timestamptz\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  @@unique([email])\n  @@unique([username])\n  @@index([created_at])\n  @@index([is_verified, is_suspended])\n  @@index([display_name(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n}","description":"Search and list registered users of the discussion board with advanced filtering by role-based access, sorting by registration, last login, and other profile attributes. The operation supports pagination for large user sets, and optionally restricts results to the caller's visibility according to their role (admin can view all, moderators can view most, standard users cannot access this endpoint).\n\nUser details may include email, username, account status (verified/suspended), and important timestamps. Sensitive data (like password hashes) is never exposed in responses. This endpoint helps moderators and admins enforce compliance, monitor growth, or intervene during incidents.\n\nRefer to the discussion_board_users Prisma schema for the full set of accessible/returnable fields and use appropriate request and response types to support scalable management workflows.","summary":"Paginated, advanced search of users (moderator/admin access)","parameters":[],"requestBody":{"description":"User search criteria, including pagination and filters","typeName":"IDiscussionBoardUser.IRequest"},"responseBody":{"description":"Paginated user list (role-restricted fields for compliance)","typeName":"IPageIDiscussionBoardUser"},"authorizationRoles":["admin","moderator"],"name":"index","model_name":"discussion_board_users","soft_delete_column":"deleted_at","authorizationRole":"moderator","authorizationType":null},{"specification":"Retrieve the individual account and profile details for a specific user identified by userId. Fields and structure are strictly determined by the discussion_board_users table, exposing key attributes such as ID, email, username, display name, verification state, suspension, and all relevant timestamps. Sensitive or write-only fields like password_hash are excluded from responses.","path":"/discussionBoard/admin/users/{userId}","method":"get","prisma_schemas":"model discussion_board_users {\n  id String @id @db.Uuid\n  email String\n  username String\n  display_name String?\n  password_hash String\n  is_verified Boolean\n  is_suspended Boolean\n  suspended_until DateTime? @db.Timestamptz\n  last_login_at DateTime? @db.Timestamptz\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  @@unique([email])\n  @@unique([username])\n  @@index([created_at])\n  @@index([is_verified, is_suspended])\n  @@index([display_name(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n}","description":"Get detailed, role-appropriate information about a specific user by their unique ID. Typically used by moderators and admins to review a user's account health, status, last login, verification, and profile information.\n\nStandard users may not access this endpoint for others. Only authorized roles see sensitive administrative information (such as suspension, status, or timestamps), but password hashes and any confidential fields are never returned.\n\nResponse structure strictly reflects the schema for discussion_board_users and includes all compliance-required metadata for auditing purposes.","summary":"Get a user's detailed profile/info by userId","parameters":[{"name":"userId","description":"Unique identifier of the user to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full account details for the requested user (fields per role visibility)","typeName":"IDiscussionBoardUser"},"authorizationRoles":["admin","moderator"],"name":"at","model_name":"discussion_board_users","soft_delete_column":"deleted_at","authorizationRole":"admin","authorizationType":null},{"specification":"Retrieve the individual account and profile details for a specific user identified by userId. Fields and structure are strictly determined by the discussion_board_users table, exposing key attributes such as ID, email, username, display name, verification state, suspension, and all relevant timestamps. Sensitive or write-only fields like password_hash are excluded from responses.","path":"/discussionBoard/moderator/users/{userId}","method":"get","prisma_schemas":"model discussion_board_users {\n  id String @id @db.Uuid\n  email String\n  username String\n  display_name String?\n  password_hash String\n  is_verified Boolean\n  is_suspended Boolean\n  suspended_until DateTime? @db.Timestamptz\n  last_login_at DateTime? @db.Timestamptz\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  @@unique([email])\n  @@unique([username])\n  @@index([created_at])\n  @@index([is_verified, is_suspended])\n  @@index([display_name(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n}","description":"Get detailed, role-appropriate information about a specific user by their unique ID. Typically used by moderators and admins to review a user's account health, status, last login, verification, and profile information.\n\nStandard users may not access this endpoint for others. Only authorized roles see sensitive administrative information (such as suspension, status, or timestamps), but password hashes and any confidential fields are never returned.\n\nResponse structure strictly reflects the schema for discussion_board_users and includes all compliance-required metadata for auditing purposes.","summary":"Get a user's detailed profile/info by userId","parameters":[{"name":"userId","description":"Unique identifier of the user to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full account details for the requested user (fields per role visibility)","typeName":"IDiscussionBoardUser"},"authorizationRoles":["admin","moderator"],"name":"at","model_name":"discussion_board_users","soft_delete_column":"deleted_at","authorizationRole":"moderator","authorizationType":null},{"specification":"This API updates account profile fields for an existing user referenced by their userId. Permitted changes include display name, verification or suspension status, and other updatable attributes per the discussion_board_users schema. Only admins or moderators may update user accounts; password updates are handled separately for security reasons. The operation does not modify soft-deletion beyond compliance rules.","path":"/discussionBoard/admin/users/{userId}","method":"put","prisma_schemas":"model discussion_board_users {\n  id String @id @db.Uuid\n  email String\n  username String\n  display_name String?\n  password_hash String\n  is_verified Boolean\n  is_suspended Boolean\n  suspended_until DateTime? @db.Timestamptz\n  last_login_at DateTime? @db.Timestamptz\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  @@unique([email])\n  @@unique([username])\n  @@index([created_at])\n  @@index([is_verified, is_suspended])\n  @@index([display_name(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n}","description":"Update the profile and status of a user by userId. Allowed fields are set by business rules mapped closely to the discussion_board_users schema, such as display name, verification, suspension, and admin-controlled attributes. Password resets and other security updates must be performed using dedicated endpoints for audit and compliance.\n\nAuthorization is limited to moderator or admin roles. The update operation enforces all required validation and auditing, appending to the compliance log as needed.","summary":"Admin/moderator update to user account by userId","parameters":[{"name":"userId","description":"Unique identifier for the user being edited","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Attributes to update in the user account","typeName":"IDiscussionBoardUser.IUpdate"},"responseBody":{"description":"The updated user account with new values for editable fields","typeName":"IDiscussionBoardUser"},"authorizationRoles":["admin","moderator"],"name":"update","model_name":"discussion_board_users","soft_delete_column":"deleted_at","authorizationRole":"admin","authorizationType":null},{"specification":"This API updates account profile fields for an existing user referenced by their userId. Permitted changes include display name, verification or suspension status, and other updatable attributes per the discussion_board_users schema. Only admins or moderators may update user accounts; password updates are handled separately for security reasons. The operation does not modify soft-deletion beyond compliance rules.","path":"/discussionBoard/moderator/users/{userId}","method":"put","prisma_schemas":"model discussion_board_users {\n  id String @id @db.Uuid\n  email String\n  username String\n  display_name String?\n  password_hash String\n  is_verified Boolean\n  is_suspended Boolean\n  suspended_until DateTime? @db.Timestamptz\n  last_login_at DateTime? @db.Timestamptz\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  @@unique([email])\n  @@unique([username])\n  @@index([created_at])\n  @@index([is_verified, is_suspended])\n  @@index([display_name(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n}","description":"Update the profile and status of a user by userId. Allowed fields are set by business rules mapped closely to the discussion_board_users schema, such as display name, verification, suspension, and admin-controlled attributes. Password resets and other security updates must be performed using dedicated endpoints for audit and compliance.\n\nAuthorization is limited to moderator or admin roles. The update operation enforces all required validation and auditing, appending to the compliance log as needed.","summary":"Admin/moderator update to user account by userId","parameters":[{"name":"userId","description":"Unique identifier for the user being edited","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Attributes to update in the user account","typeName":"IDiscussionBoardUser.IUpdate"},"responseBody":{"description":"The updated user account with new values for editable fields","typeName":"IDiscussionBoardUser"},"authorizationRoles":["admin","moderator"],"name":"update","model_name":"discussion_board_users","soft_delete_column":"deleted_at","authorizationRole":"moderator","authorizationType":null},{"specification":"This endpoint performs a soft-delete of a user account, setting the deleted_at timestamp to hide the user from public APIs and prevent future authentication. It does not physically erase the row, complying with business and regulatory policy. Only moderators and admins can perform this action. Restoration, if supported, is managed elsewhere.","path":"/discussionBoard/admin/users/{userId}","method":"delete","prisma_schemas":"model discussion_board_users {\n  id String @id @db.Uuid\n  email String\n  username String\n  display_name String?\n  password_hash String\n  is_verified Boolean\n  is_suspended Boolean\n  suspended_until DateTime? @db.Timestamptz\n  last_login_at DateTime? @db.Timestamptz\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  @@unique([email])\n  @@unique([username])\n  @@index([created_at])\n  @@index([is_verified, is_suspended])\n  @@index([display_name(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n}","description":"Soft-delete (hide) an existing user by setting deleted_at, so they no longer appear in active API results or can authenticate, but are preserved for audit and regulatory compliance. Access is limited to moderators and admins. The operation ensures all references and compliance records are preserved. Additional recovery or erasure flows are managed via separate endpoints and workflows.\n\nIf a user is already soft-deleted, the operation is idempotent. Attempts to delete non-existent users return an error message. All actions are logged for audit and incident response purposes.","summary":"Soft-delete (deactivate) user by userId (mod/admin only)","parameters":[{"name":"userId","description":"Unique identifier of the user to soft-delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin","moderator"],"name":"erase","model_name":"discussion_board_users","soft_delete_column":"deleted_at","authorizationRole":"admin","authorizationType":null},{"specification":"This endpoint performs a soft-delete of a user account, setting the deleted_at timestamp to hide the user from public APIs and prevent future authentication. It does not physically erase the row, complying with business and regulatory policy. Only moderators and admins can perform this action. Restoration, if supported, is managed elsewhere.","path":"/discussionBoard/moderator/users/{userId}","method":"delete","prisma_schemas":"model discussion_board_users {\n  id String @id @db.Uuid\n  email String\n  username String\n  display_name String?\n  password_hash String\n  is_verified Boolean\n  is_suspended Boolean\n  suspended_until DateTime? @db.Timestamptz\n  last_login_at DateTime? @db.Timestamptz\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  @@unique([email])\n  @@unique([username])\n  @@index([created_at])\n  @@index([is_verified, is_suspended])\n  @@index([display_name(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n}","description":"Soft-delete (hide) an existing user by setting deleted_at, so they no longer appear in active API results or can authenticate, but are preserved for audit and regulatory compliance. Access is limited to moderators and admins. The operation ensures all references and compliance records are preserved. Additional recovery or erasure flows are managed via separate endpoints and workflows.\n\nIf a user is already soft-deleted, the operation is idempotent. Attempts to delete non-existent users return an error message. All actions are logged for audit and incident response purposes.","summary":"Soft-delete (deactivate) user by userId (mod/admin only)","parameters":[{"name":"userId","description":"Unique identifier of the user to soft-delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin","moderator"],"name":"erase","model_name":"discussion_board_users","soft_delete_column":"deleted_at","authorizationRole":"moderator","authorizationType":null},{"specification":"This endpoint retrieves the moderator record (status, assignment, and metadata) associated with a specific user by userId. It is used by admins and moderators to determine moderation privileges, status, and lifecycle for the user in question. Only accessible to privilege holders.","path":"/discussionBoard/admin/users/{userId}/moderator","method":"patch","prisma_schemas":"model discussion_board_moderators {\n  id String @id @db.Uuid\n  user_id String @db.Uuid\n  assigned_at DateTime @db.Timestamptz\n  revoked_at DateTime? @db.Timestamptz\n  is_active Boolean\n  suspended_until DateTime? @db.Timestamptz\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  @@unique([user_id])\n  @@index([is_active])\n  @@index([created_at])\n}","description":"Fetch a user's moderator status and assignment record, including active status, suspension history, assignment, and revocation timestamps, as managed in the discussion_board_moderators table. The endpoint is intended for admins and moderators to verify or audit a user's moderation privileges and compliance with assignment or revocation workflows.\n\nResponse provides only the moderator-specific record for the userId, not the base user account details. Use the /users/{userId} endpoint for general profile information; this endpoint provides moderation context only. Typical use cases include privileges checks, compliance audits, and evaluating eligibility for moderation actions.","summary":"Get moderator role status/assignment by userId","parameters":[{"name":"userId","description":"Unique identifier of the user whose moderator record is to be fetched","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Moderator record query parameters (future use)","typeName":"IDiscussionBoardModerator.IRequest"},"responseBody":{"description":"The moderator role assignment/status record for given userId","typeName":"IDiscussionBoardModerator"},"authorizationRoles":["admin","moderator"],"name":"moderatorStatus","model_name":"discussion_board_moderators","soft_delete_column":"deleted_at","authorizationRole":"admin","authorizationType":null},{"specification":"This endpoint retrieves the moderator record (status, assignment, and metadata) associated with a specific user by userId. It is used by admins and moderators to determine moderation privileges, status, and lifecycle for the user in question. Only accessible to privilege holders.","path":"/discussionBoard/moderator/users/{userId}/moderator","method":"patch","prisma_schemas":"model discussion_board_moderators {\n  id String @id @db.Uuid\n  user_id String @db.Uuid\n  assigned_at DateTime @db.Timestamptz\n  revoked_at DateTime? @db.Timestamptz\n  is_active Boolean\n  suspended_until DateTime? @db.Timestamptz\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  @@unique([user_id])\n  @@index([is_active])\n  @@index([created_at])\n}","description":"Fetch a user's moderator status and assignment record, including active status, suspension history, assignment, and revocation timestamps, as managed in the discussion_board_moderators table. The endpoint is intended for admins and moderators to verify or audit a user's moderation privileges and compliance with assignment or revocation workflows.\n\nResponse provides only the moderator-specific record for the userId, not the base user account details. Use the /users/{userId} endpoint for general profile information; this endpoint provides moderation context only. Typical use cases include privileges checks, compliance audits, and evaluating eligibility for moderation actions.","summary":"Get moderator role status/assignment by userId","parameters":[{"name":"userId","description":"Unique identifier of the user whose moderator record is to be fetched","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Moderator record query parameters (future use)","typeName":"IDiscussionBoardModerator.IRequest"},"responseBody":{"description":"The moderator role assignment/status record for given userId","typeName":"IDiscussionBoardModerator"},"authorizationRoles":["admin","moderator"],"name":"moderatorStatus","model_name":"discussion_board_moderators","soft_delete_column":"deleted_at","authorizationRole":"moderator","authorizationType":null},{"prisma_schemas":"model discussion_board_users {\n  id String @id @db.Uuid\n  ...\n}\nmodel discussion_board_moderators {\n  id String @id @db.Uuid\n  user_id String @db.Uuid\n  assigned_at DateTime @db.Timestamptz\n  revoked_at DateTime? @db.Timestamptz\n  is_active Boolean\n  suspended_until DateTime? @db.Timestamptz\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  @@unique([user_id])\n  @@index([is_active])\n}","authorizationRoles":["admin"],"description":"This operation assigns moderator privileges to a user with the specified userId. Upon execution, the user is given elevated permissions as defined by the discussion_board_moderators model, which supports audit and suspension fields. Moderator assignment is managed exclusively by admins, and the system will log the assignment event for auditing.\n\nSecurity is critical: Only admins can call this endpoint. The system checks user role and may require justification for the assignment. If the user is already a moderator, the call will have no effect.\n\nThe operation references the discussion_board_moderators table; it checks for existing active assignments, ensures no duplicates, and creates a new assignment record. Related actions include revoking moderator status and listing all moderators for admin management. The business rules follow the platform's escalation and role management guidelines.","specification":"Assign moderator status to a user (discussion_board_users) by creating or activating a record in discussion_board_moderators. Only admins may call this operation. This endpoint uses the userId as a path parameter to identify the user whose moderator status is being modified. The role assignment is audited and limited to unique and active users.","summary":"Assign moderator role to a user (discussion_board_users, discussion_board_moderators).","path":"/discussionBoard/admin/users/{userId}/moderator","parameters":[{"name":"userId","description":"Target user ID to assign moderator role.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Assignment details (if extra info is needed; generally empty for assignment)","typeName":"IDiscussionBoardModerator.ICreate"},"responseBody":{"description":"Moderator assignment confirmation and resulting moderator object.","typeName":"IDiscussionBoardModerator"},"name":"assignModerator","method":"put","model_name":"discussion_board_moderators","soft_delete_column":"deleted_at","authorizationRole":"admin","authorizationType":null},{"prisma_schemas":"model discussion_board_users {\n  id String @id @db.Uuid\n  ...\n}\nmodel discussion_board_moderators {\n  id String @id @db.Uuid\n  user_id String @db.Uuid\n  assigned_at DateTime @db.Timestamptz\n  revoked_at DateTime? @db.Timestamptz\n  is_active Boolean\n  suspended_until DateTime? @db.Timestamptz\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  @@unique([user_id])\n  @@index([is_active])\n}","authorizationRoles":["admin"],"description":"Revoke moderator privileges for the specified userId. This operation marks the moderator's record as deleted (soft delete) and records the revocation with a deleted_at timestamp.\n\nAdmins use this endpoint to remove moderator status and associated rights from users. The operation adds a compliance-auditable record and prevents this user from moderating until possibly re-assigned in the future. Security audit is maintained for all privilege changes.\n\nThe endpoint validates the user is currently a moderator and marks the assigned record deleted. Related endpoints manage assignment (PUT), listing moderators, or user detail inspection. All business rules and audit compliance are observed.","specification":"Deactivate a user's moderator role by soft deleting the corresponding row in discussion_board_moderators. The path parameter identifies the user. Only admins may execute this change. The revocation event is auditable, and any further moderator actions by this user will be prevented.","summary":"Revoke moderator role from a user (discussion_board_moderators).","path":"/discussionBoard/admin/users/{userId}/moderator","parameters":[{"name":"userId","description":"ID of the user whose moderator privileges are being revoked.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Confirmation of moderator role revocation (soft delete).","typeName":"IDiscussionBoardModerator"},"name":"revokeModerator","method":"delete","model_name":"discussion_board_moderators","soft_delete_column":"deleted_at","authorizationRole":"admin","authorizationType":null},{"prisma_schemas":"model discussion_board_users {\n  id String @id @db.Uuid\n  ...\n}\nmodel discussion_board_admins {\n  id String @id @db.Uuid\n  user_id String @db.Uuid\n  assigned_at DateTime @db.Timestamptz\n  revoked_at DateTime? @db.Timestamptz\n  is_active Boolean\n  suspended_until DateTime? @db.Timestamptz\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  @@unique([user_id])\n  @@index([is_active])\n}","authorizationRoles":["admin"],"description":"Restore the admin role for a user with the provided userId by reactivating or reinstating a previously-revoked administrator record. This endpoint allows the admin team to re-elevate prior admins who may have been suspended or revoked in the past.\n\nSecurity checks ensure only admins may access this feature. The response confirms the admin's privileges have been reinstated, with current status and metadata. All such actions are logged for audit/compliance.\n\nRelated operations include creating new admin assignments and revoking or suspending admin access. The admins table is the primary store for this privilege.","specification":"Reinstate administrator status for a given user in discussion_board_admins using the userId path parameter. If there is an existing admin record for the user, activate it (is_active = true, revoked_at = null). This operation requires admin privileges and ensures regulatory/audit compliance.","summary":"Restore/reinstate admin privilege for a user in discussion_board_admins.","path":"/discussionBoard/admin/users/{userId}/admin","parameters":[{"name":"userId","description":"User ID to reinstate as admin.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Details for admin reinstatement (generally minimal, but allows for justifications or assignment options).","typeName":"IDiscussionBoardAdmin.IUpdate"},"responseBody":{"description":"Resulting admin assignment with confirmation of reinstatement.","typeName":"IDiscussionBoardAdmin"},"name":"reinstateAdmin","method":"patch","model_name":"discussion_board_admins","soft_delete_column":"deleted_at","authorizationRole":"admin","authorizationType":null},{"prisma_schemas":"model discussion_board_users {\n  id String @id @db.Uuid\n  ...\n}\nmodel discussion_board_admins {\n  id String @id @db.Uuid\n  user_id String @db.Uuid\n  assigned_at DateTime @db.Timestamptz\n  revoked_at DateTime? @db.Timestamptz\n  is_active Boolean\n  suspended_until DateTime? @db.Timestamptz\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  @@unique([user_id])\n  @@index([is_active])\n}","authorizationRoles":["admin"],"description":"Grant administrator privileges to a user by creating or updating an admin record tied to the provided userId. This operation is restricted to existing administrators.\n\nPrivileges include the highest-level access on the platform, with assignment and revocation recorded for auditing. Each assignment should be unique and not overlap with suspended or revoked records. This endpoint follows regulatory role management rules and is fully auditable.\n\nAll admin assignments are managed via this single admin table. The endpoint validates user status, ensures idempotency, and triggers notifications if business logic so requires.","specification":"Assign or update admin role for a user by inserting/updating a record in discussion_board_admins identified by userId. Ensures no duplicate assignments, and only current admins may execute this endpoint. The privileges and action are recorded and linked for audit control.","summary":"Assign or update admin privileges for a user (discussion_board_admins).","path":"/discussionBoard/admin/users/{userId}/admin","parameters":[{"name":"userId","description":"Target user ID for admin privilege assignment.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Admin assignment details.","typeName":"IDiscussionBoardAdmin.ICreate"},"responseBody":{"description":"Admin privilege confirmation and assignment metadata.","typeName":"IDiscussionBoardAdmin"},"name":"assignAdmin","method":"put","model_name":"discussion_board_admins","soft_delete_column":"deleted_at","authorizationRole":"admin","authorizationType":null},{"prisma_schemas":"model discussion_board_users {\n  id String @id @db.Uuid\n  ...\n}\nmodel discussion_board_admins {\n  id String @id @db.Uuid\n  user_id String @db.Uuid\n  assigned_at DateTime @db.Timestamptz\n  revoked_at DateTime? @db.Timestamptz\n  is_active Boolean\n  suspended_until DateTime? @db.Timestamptz\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  @@unique([user_id])\n  @@index([is_active])\n}","authorizationRoles":["admin"],"description":"Revoke administrator privileges for the given user by soft deleting the corresponding record in discussion_board_admins. This operation updates the admin's assignment row with a deleted_at timestamp, inactivating their admin status, but retains audit history for compliance.\n\nRevocation is only available to users with admin role, and the system validates assignment before proceeding. Attempts to revoke non-existent or already-revoked admin privileges will result in a clear error.\n\nThis endpoint completes the privilege management cycle, allowing full compliance with escalation and demotion workflows. It also supports audit, export, and compliance tracing features.","specification":"Deactivate/revoke admin privileges from a user (via userId) by marking their admin record with a deleted_at timestamp (soft delete) in discussion_board_admins. Only admins can perform this operation. This modification is regulatory-compliant and fully auditable.","summary":"Revoke admin privilege from a user (discussion_board_admins).","path":"/discussionBoard/admin/users/{userId}/admin","parameters":[{"name":"userId","description":"ID of user to revoke admin privileges from.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Revocation confirmation and updated admin metadata.","typeName":"IDiscussionBoardAdmin"},"name":"revokeAdmin","method":"delete","model_name":"discussion_board_admins","soft_delete_column":"deleted_at","authorizationRole":"admin","authorizationType":null},{"prisma_schemas":"model discussion_board_visitors {\n  id String @id @db.Uuid\n  visitor_token String\n  ip_address String?\n  user_agent String?\n  created_at DateTime\n  updated_at DateTime\n  deleted_at DateTime?\n}\n","authorizationRoles":["admin"],"description":"Retrieves a paginated and searchable list of visitor accounts registered in the system. This endpoint provides viewing, searching, and filter capabilities for auditing, anti-abuse, or operational analytics purposes. Accessible only to admin users as visitor info is considered sensitive even without PII.\n\nThe result is a summary of visitor records, filtered and paginated according to the query parameters defined in the request body.\n\nThis endpoint references the discussion_board_visitors table and leverages its metadata columns for filtering and audit. Related operations may include retrieving visitor details or associating a visitor with an authenticated user for escalation.","specification":"Fetch a paginated, searchable list of visitor accounts (discussion_board_visitors) with support for filters such as status, creation time, and user agent. Intended for admin-only access and audit/analytics workflows. Request body defines search criteria and pagination/sort options.","summary":"List/search visitor accounts (discussion_board_visitors) with filtering and pagination.","path":"/discussionBoard/admin/visitors","parameters":[],"requestBody":{"description":"Visitor search, filter, pagination, and sort options.","typeName":"IDiscussionBoardVisitor.IRequest"},"responseBody":{"description":"Paginated summary of visitor accounts matching criteria.","typeName":"IPageIDiscussionBoardVisitor.ISummary"},"name":"index","method":"patch","model_name":"discussion_board_visitors","soft_delete_column":"deleted_at","authorizationRole":"admin","authorizationType":null},{"prisma_schemas":"model discussion_board_visitors {\n  id String @id @db.Uuid\n  visitor_token String\n  ip_address String?\n  user_agent String?\n  created_at DateTime\n  updated_at DateTime\n  deleted_at DateTime?\n}\n","authorizationRoles":["admin"],"description":"Retrieve the detail of a single visitor account by its visitorId. Supplies the full set of available non-PII metadata for auditing, operational analysis, or security context.\n\nThis endpoint references the discussion_board_visitors model, allowing inspection of any individual session or visitor identified by their UUID. Only accessible to platform admins for compliance and regulatory controls. Related endpoints include searching all visitors and associating sessions with user sign-ups.","specification":"Get a single visitor account's details (by visitorId), using the discussion_board_visitors table. Supports operational, audit, or admin review use cases. Only available to admins. The visitorId is a required path parameter and must be a valid UUID.","summary":"Retrieve visitor account details by visitorId (discussion_board_visitors).","path":"/discussionBoard/admin/visitors/{visitorId}","parameters":[{"name":"visitorId","description":"Unique identifier (UUID) of the visitor account.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full details of the referenced visitor account.","typeName":"IDiscussionBoardVisitor"},"name":"at","method":"get","model_name":"discussion_board_visitors","soft_delete_column":"deleted_at","authorizationRole":"admin","authorizationType":null},{"prisma_schemas":"model discussion_board_threads {\n  id String @id @db.Uuid\n  created_by_id String @db.Uuid\n  title String\n  is_locked Boolean\n  is_archived Boolean\n  created_at DateTime\n  updated_at DateTime\n  deleted_at DateTime?\n}\n","authorizationRoles":[],"description":"Get a filtered, paginated, and sorted list of discussion threads available on the platform. This endpoint is public and accessible by any user (including visitors and authenticated users), reflecting the public nature of most discussion threads.\n\nSupports advanced filters (by title, status, date range, or creator ID), keyword search (by title), pagination (page number/size), and sorting (by created_at or updated_at). Related endpoints provide methods for thread detail view, thread creation, or post-management within threads.\n\nThe operation uses the discussion_board_threads model; fields include title, status flags (locked/archived), and standard timestamps. Business rules restrict display of soft-deleted or locked threads as per platform guidelines. Results reflect the user's access level and platform-wide discovery rules.","specification":"Retrieve a list of discussion threads from the discussion_board_threads table, supporting text search, filter by lock/archive status, date ranges, creator, pagination, and sort. This is a public endpoint for all roles. Request body defines search options and pagination.","summary":"List/search discussion threads (discussion_board_threads) with advanced filters.","path":"/discussionBoard/threads","parameters":[],"requestBody":{"description":"Thread search, filter, pagination, and sort options.","typeName":"IDiscussionBoardThread.IRequest"},"responseBody":{"description":"Paginated list of discussion threads matching search criteria.","typeName":"IPageIDiscussionBoardThread.ISummary"},"name":"index","method":"patch","model_name":"discussion_board_threads","soft_delete_column":"deleted_at","authorizationRole":null,"authorizationType":null},{"specification":"This operation retrieves detailed information about a discussion thread, including its title, status (locked/archived), creation timestamp, and creator details. It uses the discussion_board_threads table from the Prisma schema. Related entities such as thread posts and author (user) are referenced, but this endpoint retrieves only the thread entity itself, not its associated posts. Soft-deleted threads (where deleted_at is set) should not be returned by default. Used to display main discussion topics in detail view.","path":"/discussionBoard/threads/{threadId}","method":"get","prisma_schemas":"model discussion_board_threads {\n  id String @id @db.Uuid\n  created_by_id String @db.Uuid\n  title String\n  is_locked Boolean\n  is_archived Boolean\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  createdBy discussion_board_users @relation(fields: [created_by_id], references: [id], onDelete: Cascade)\n  discussion_board_posts discussion_board_posts[]\n  @@unique([title])\n  @@index([created_by_id])\n  @@index([created_at])\n}","description":"Retrieve a single discussion thread by its unique identifier. This endpoint provides access to thread-level data, including core properties such as title, locked/archived flags, creation time, and the creator's user ID, as defined in the discussion_board_threads schema.\n\nOnly threads that have not been soft-deleted (where deleted_at is null) are accessible via this endpoint. The thread's associated metadata, such as the number of related posts or posts themselves, are available through other endpoints, but not included in this response by default.\n\nPermissions: All roles (visitor, user, moderator, admin) may access this endpoint to display public thread information. Thread-level access control is enforced elsewhere if thread privacy is enabled in the future. Review errors include thread not found, deleted, or permission denied based on user status.","summary":"Retrieve a single discussion thread by ID (discussion_board_threads).","parameters":[{"name":"threadId","description":"Unique identifier of the discussion thread to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full discussion thread data as defined in the schema.","typeName":"IDiscussionBoardThread"},"authorizationRoles":[],"name":"at","model_name":"discussion_board_threads","soft_delete_column":"deleted_at","authorizationRole":null,"authorizationType":null},{"specification":"This operation enables authenticated users to create a new discussion thread. The input must include the thread's title, and creation is bound to the current authenticated user as the creator. Upon creation, the thread is unlocked and unarchived by default. This endpoint works with the discussion_board_threads table, referencing the created_by_id (the creator's user ID) and initializing system fields automatically. Proper validation (title, uniqueness, content restrictions) is performed.","path":"/discussionBoard/user/threads","method":"post","prisma_schemas":"model discussion_board_threads {\n  id String @id @db.Uuid\n  created_by_id String @db.Uuid\n  title String\n  is_locked Boolean\n  is_archived Boolean\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  createdBy discussion_board_users @relation(fields: [created_by_id], references: [id], onDelete: Cascade)\n  discussion_board_posts discussion_board_posts[]\n  @@unique([title])\n  @@index([created_by_id])\n  @@index([created_at])\n}","description":"Create a new discussion thread under the current user's identity. This endpoint accepts the thread input payload, including the thread's title, and automatically populates creator, timestamps, and default status flags (unlocked/unarchived). Only authenticated users (user, moderator, admin roles) are allowed to create threads.\n\nThread titles must be unique and non-empty per validation rules in the discussion_board_threads schema. Attempts to create a thread with a duplicate title will result in a validation error. Additional thread management (locking/archiving) is performed through separate moderator/admin workflows.\n\nBusiness logic requires moderation or automatic flagging for prohibited thread content or rapid, duplicate thread creation. Upon success, full thread metadata including ID is returned. If a user is suspended or not verified, creation is forbidden.","summary":"Create a new discussion thread (discussion_board_threads).","parameters":[],"requestBody":{"description":"Information for creating a new thread (title, etc.)","typeName":"IDiscussionBoardThread.ICreate"},"responseBody":{"description":"Complete thread information after creation.","typeName":"IDiscussionBoardThread"},"authorizationRoles":["user"],"name":"create","model_name":"discussion_board_threads","soft_delete_column":"deleted_at","authorizationRole":"user","authorizationType":null},{"specification":"This operation allows the owner of a thread or a moderator/admin to update an existing discussion thread. Editable properties are restricted (title, locking, archiving flags); ownership and permissions are validated. Soft deletion field is not directly settable here. Input conforms to the discussion_board_threads schema. Updates are tracked via audit logging and edit histories for compliance.","path":"/discussionBoard/user/threads/{threadId}","method":"put","prisma_schemas":"model discussion_board_threads {\n  id String @id @db.Uuid\n  created_by_id String @db.Uuid\n  title String\n  is_locked Boolean\n  is_archived Boolean\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  createdBy discussion_board_users @relation(fields: [created_by_id], references: [id], onDelete: Cascade)\n  discussion_board_posts discussion_board_posts[]\n  @@unique([title])\n  @@index([created_by_id])\n  @@index([created_at])\n}","description":"Update a thread's properties, such as title or status (lock/archive), by its unique identifier. The request body should contain only the editable fields permitted by system policy. Thread ownership is required unless the acting user is a moderator or admin, who may update any thread per community or moderation guidelines.\n\nAll updates are tracked via the thread's updated_at field and may be accompanied by audit log entries or edit history per compliance. Soft deletion is not supported by this endpoint. Title changes are validated for uniqueness.\n\nErrors include thread not found, permission denied, and validation failures. Only authenticated users, moderators, or admins may perform updates.","summary":"Update an existing discussion thread by ID (discussion_board_threads).","parameters":[{"name":"threadId","description":"ID of the thread to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update payload for the discussion thread. Only editable fields should be sent.","typeName":"IDiscussionBoardThread.IUpdate"},"responseBody":{"description":"Updated thread information after modification.","typeName":"IDiscussionBoardThread"},"authorizationRoles":["user"],"name":"update","model_name":"discussion_board_threads","soft_delete_column":"deleted_at","authorizationRole":"user","authorizationType":null},{"specification":"This endpoint performs a soft delete (logical deletion) on a discussion thread. The thread is marked as deleted by populating the deleted_at timestamp rather than being physically removed. Only the thread owner or a moderator/admin can perform this operation. Based on the discussion_board_threads model, which supports soft deletion. Deleted threads become invisible to regular users but remain in the database for audit purposes.","path":"/discussionBoard/user/threads/{threadId}","method":"delete","prisma_schemas":"model discussion_board_threads {\n  id String @id @db.Uuid\n  created_by_id String @db.Uuid\n  title String\n  is_locked Boolean\n  is_archived Boolean\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  createdBy discussion_board_users @relation(fields: [created_by_id], references: [id], onDelete: Cascade)\n  discussion_board_posts discussion_board_posts[]\n  @@unique([title])\n  @@index([created_by_id])\n  @@index([created_at])\n}","description":"Soft delete a discussion thread so that it is no longer visible to regular users but is retained for compliance and potential restoration by moderators or admins. The endpoint sets the deleted_at timestamp for the thread, adhering to platform policy for logical deletion.\n\nOnly authenticated users, who are either the thread owners or possess moderator/admin privileges, may perform this action. Regular users cannot delete threads they do not own. Deletion actions are logged for audit purposes, ensuring traceability per compliance requirements. Physically removed threads are only supported by admin workflow, not by this endpoint.\n\nExpected errors include thread not found, permission denied, or already deleted. No response body is returned on success; relevant status and timestamp can be inferred elsewhere.","summary":"Soft delete a discussion thread by ID (discussion_board_threads).","parameters":[{"name":"threadId","description":"Unique identifier of the thread to be soft deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["user"],"name":"erase","model_name":"discussion_board_threads","soft_delete_column":"deleted_at","authorizationRole":"user","authorizationType":null},{"specification":"This operation lists all posts (primary messages) belonging to a specific discussion thread, supporting advanced filtering, pagination, and sorting. The endpoint leverages the discussion_board_posts model and accepts filtering/search criteria via request body. Related posts are returned with minimal thread metadata, intended for thread detail pages or search/discovery. Soft-deleted posts are excluded by default.","path":"/discussionBoard/threads/{threadId}/posts","method":"patch","prisma_schemas":"model discussion_board_posts {\n  id String @id @db.Uuid\n  thread_id String @db.Uuid\n  created_by_id String @db.Uuid\n  title String\n  body String\n  is_locked Boolean\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  thread discussion_board_threads @relation(fields: [thread_id], references: [id], onDelete: Cascade)\n  createdBy discussion_board_users @relation(fields: [created_by_id], references: [id], onDelete: Cascade)\n  discussion_board_post_edit_histories discussion_board_post_edit_histories[]\n  discussion_board_comments discussion_board_comments[]\n  discussion_board_attachments discussion_board_attachments[]\n  discussion_board_votes discussion_board_votes[]\n  discussion_board_polls discussion_board_polls?\n  discussion_board_flag_reports discussion_board_flag_reports[]\n  discussion_board_moderation_actions discussion_board_moderation_actions[]\n  discussion_board_notifications discussion_board_notifications[]\n  @@unique([thread_id, title])\n  @@index([thread_id, created_at])\n  @@index([created_by_id])\n  @@index([title(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n  @@index([body(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n}","description":"Retrieve a paginated and filtered list of discussion board posts for a given thread. This endpoint allows searching posts by title, body, author, date range, and sort order within the context of a single discussion thread.\n\nThe returned list is suitable for displaying thread content with the ability to paginate through posts. Only posts that have not been soft-deleted (deleted_at is null) are returned. Users may view thread posts if they have access to the parent thread; private threads, if implemented later, would restrict access according to business rules.\n\nSearch and filter options are provided via the request body schema IDiscussionBoardPost.IRequest, and paginated summary results are returned for efficient client consumption. Common uses include thread detail views and topic exploration workflows.","summary":"List/paginate posts for a thread (discussion_board_posts).","parameters":[{"name":"threadId","description":"Identifier of the parent discussion thread.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search, filter, and pagination request for thread posts.","typeName":"IDiscussionBoardPost.IRequest"},"responseBody":{"description":"Paginated summary of posts for the thread.","typeName":"IPageIDiscussionBoardPost.ISummary"},"authorizationRoles":[],"name":"index","model_name":"discussion_board_posts","soft_delete_column":"deleted_at","authorizationRole":null,"authorizationType":null},{"specification":"This operation retrieves a specific post (primary message) by its unique identifier, within a given thread. It returns detailed information about the post including title, body, status (locked), creation/update time, and author. The operation uses the discussion_board_posts schema. Post-level access control may be imposed if the parent thread is private. Soft-deleted posts cannot be retrieved.","path":"/discussionBoard/threads/{threadId}/posts/{postId}","method":"get","prisma_schemas":"model discussion_board_posts {\n  id String @id @db.Uuid\n  thread_id String @db.Uuid\n  created_by_id String @db.Uuid\n  title String\n  body String\n  is_locked Boolean\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  thread discussion_board_threads @relation(fields: [thread_id], references: [id], onDelete: Cascade)\n  createdBy discussion_board_users @relation(fields: [created_by_id], references: [id], onDelete: Cascade)\n  discussion_board_post_edit_histories discussion_board_post_edit_histories[]\n  discussion_board_comments discussion_board_comments[]\n  discussion_board_attachments discussion_board_attachments[]\n  discussion_board_votes discussion_board_votes[]\n  discussion_board_polls discussion_board_polls?\n  discussion_board_flag_reports discussion_board_flag_reports[]\n  discussion_board_moderation_actions discussion_board_moderation_actions[]\n  discussion_board_notifications discussion_board_notifications[]\n  @@unique([thread_id, title])\n  @@index([thread_id, created_at])\n  @@index([created_by_id])\n  @@index([title(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n  @@index([body(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n}","description":"Fetch a single post within a thread, identified by its unique post ID and thread ID. This endpoint returns all relevant fields from the discussion_board_posts schema, including title, body, author, locked status, and timestamps.\n\nOnly posts that are not soft-deleted (deleted_at is null) are accessible. Post content is only available to users who have access to the parent thread according to platform policy (all roles for public threads). Ownership and moderator/admin permissions are considered for access control. Errors may include not found, already deleted, or forbidden based on status.","summary":"Retrieve a single post by ID within a thread (discussion_board_posts).","parameters":[{"name":"threadId","description":"Unique identifier of the thread.","schema":{"type":"string","format":"uuid"}},{"name":"postId","description":"Unique identifier of the post.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete post object as defined in the schema.","typeName":"IDiscussionBoardPost"},"authorizationRoles":[],"name":"at","model_name":"discussion_board_posts","soft_delete_column":"deleted_at","authorizationRole":null,"authorizationType":null},{"specification":"This endpoint allows authenticated users to create a new post within a specified thread. The new post must include a title and body, and is initialized as unlocked. The parent thread ID is specified in the path. User validation and thread access/lock status are enforced according to the discussion_board_posts schema. The new post's metadata, such as author and creation date, are set automatically.","path":"/discussionBoard/user/threads/{threadId}/posts","method":"post","prisma_schemas":"model discussion_board_posts {\n  id String @id @db.Uuid\n  thread_id String @db.Uuid\n  created_by_id String @db.Uuid\n  title String\n  body String\n  is_locked Boolean\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  thread discussion_board_threads @relation(fields: [thread_id], references: [id], onDelete: Cascade)\n  createdBy discussion_board_users @relation(fields: [created_by_id], references: [id], onDelete: Cascade)\n  discussion_board_post_edit_histories discussion_board_post_edit_histories[]\n  discussion_board_comments discussion_board_comments[]\n  discussion_board_attachments discussion_board_attachments[]\n  discussion_board_votes discussion_board_votes[]\n  discussion_board_polls discussion_board_polls?\n  discussion_board_flag_reports discussion_board_flag_reports[]\n  discussion_board_moderation_actions discussion_board_moderation_actions[]\n  discussion_board_notifications discussion_board_notifications[]\n  @@unique([thread_id, title])\n  @@index([thread_id, created_at])\n  @@index([created_by_id])\n  @@index([title(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n  @@index([body(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n}","description":"Create a new post as part of a specified discussion thread. The request body should include required fields such as title and body; author/user context and timestamps are set by the backend. Newly created posts are unlocked by default and attributed to the authenticated user.\n\nThis operation supports only authenticated users (roles: user, moderator, admin). Access is forbidden if the target thread does not exist, is locked, or the user is suspended or not verified. Duplicate post titles within the same thread are rejected according to business and schema rules. Moderation queues, flagging, and post lifecycle management are handled elsewhere. Upon success, full post details are returned.","summary":"Create a new post in a thread (discussion_board_posts).","parameters":[{"name":"threadId","description":"Identifier of the thread in which to create the post.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields for creating a new post in the thread.","typeName":"IDiscussionBoardPost.ICreate"},"responseBody":{"description":"Full post object after creation.","typeName":"IDiscussionBoardPost"},"authorizationRoles":["user"],"name":"create","model_name":"discussion_board_posts","soft_delete_column":"deleted_at","authorizationRole":"user","authorizationType":null},{"specification":"This operation allows authorized users (the post owner or role with elevated privileges) to update an existing post within a given thread. Only editable fields (title, body, lock status) may be modified. User is validated for ownership or moderator/admin status. All updates are audit-logged, and edit histories are preserved per the discussion_board_posts and related histories schema.","path":"/discussionBoard/user/threads/{threadId}/posts/{postId}","method":"put","prisma_schemas":"model discussion_board_posts {\n  id String @id @db.Uuid\n  thread_id String @db.Uuid\n  created_by_id String @db.Uuid\n  title String\n  body String\n  is_locked Boolean\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  thread discussion_board_threads @relation(fields: [thread_id], references: [id], onDelete: Cascade)\n  createdBy discussion_board_users @relation(fields: [created_by_id], references: [id], onDelete: Cascade)\n  discussion_board_post_edit_histories discussion_board_post_edit_histories[]\n  discussion_board_comments discussion_board_comments[]\n  discussion_board_attachments discussion_board_attachments[]\n  discussion_board_votes discussion_board_votes[]\n  discussion_board_polls discussion_board_polls?\n  discussion_board_flag_reports discussion_board_flag_reports[]\n  discussion_board_moderation_actions discussion_board_moderation_actions[]\n  discussion_board_notifications discussion_board_notifications[]\n  @@unique([thread_id, title])\n  @@index([thread_id, created_at])\n  @@index([created_by_id])\n  @@index([title(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n  @@index([body(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n}","description":"Update an existing post identified by both thread and post ID. Only permitted fields as defined in the post update schema (title, body, lock status) may be altered. The system validates that the acting user is either the post owner or has moderator/admin privileges. Title must remain unique within the thread.\n\nOn update, the system records the modification in both the main post record (updated_at) and in the edit histories table for compliance. Posts that are locked or soft-deleted cannot be updated except by elevated roles. Errors include not found, forbidden, or validation failures.","summary":"Update a post in a thread (discussion_board_posts).","parameters":[{"name":"threadId","description":"ID of the thread containing the post.","schema":{"type":"string","format":"uuid"}},{"name":"postId","description":"Unique ID of the post to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update on the post.","typeName":"IDiscussionBoardPost.IUpdate"},"responseBody":{"description":"Updated post details after modification.","typeName":"IDiscussionBoardPost"},"authorizationRoles":["user"],"name":"update","model_name":"discussion_board_posts","soft_delete_column":"deleted_at","authorizationRole":"user","authorizationType":null},{"specification":"This operation performs a soft deletion of a specific post in a discussion thread. It targets the discussion_board_posts table and is used to hide a post from public view while preserving the record for audit and compliance purposes. Soft deletion is indicated by the deleted_at timestamp field. Only the post author, moderators, or admins may perform this deletion, in accordance with role permissions. The operation is designed to support member-driven deletion with subsequent moderation review and traceability.","path":"/discussionBoard/user/threads/{threadId}/posts/{postId}","method":"delete","prisma_schemas":"model discussion_board_posts {\n  id String @id @db.Uuid\n  thread_id String @db.Uuid\n  created_by_id String @db.Uuid\n  title String\n  body String\n  is_locked Boolean\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  thread discussion_board_threads @relation(fields: [thread_id], references: [id], onDelete: Cascade)\n  createdBy discussion_board_users @relation(fields: [created_by_id], references: [id], onDelete: Cascade)\n  discussion_board_post_edit_histories discussion_board_post_edit_histories[]\n  discussion_board_comments discussion_board_comments[]\n  discussion_board_attachments discussion_board_attachments[]\n  discussion_board_votes discussion_board_votes[]\n  discussion_board_polls discussion_board_polls?\n  discussion_board_flag_reports discussion_board_flag_reports[]\n  discussion_board_moderation_actions discussion_board_moderation_actions[]\n  discussion_board_notifications discussion_board_notifications[]\n}","description":"Delete a specific post within a thread by performing a soft deletion. This API sets the post's deleted_at timestamp, effectively hiding the post from standard user access while retaining it for compliance, moderation, or later auditing. Only authorized users (the post author, moderators, or admins) may invoke this operation. The operation does not erase associated comments or attachments, but those may become hidden through parent soft-deletion logic. A successful soft delete allows the forum to maintain audit trails and supports moderator review in case of disputes or appeals. If inappropriate users attempt deletion, an explicit permission denied error will be returned. Attempting to delete a non-existent or already-deleted post results in a 404 error with appropriate messaging.","summary":"Soft delete a specific post in a thread by setting its deleted_at timestamp.","parameters":[{"name":"threadId","description":"Unique identifier for the parent discussion thread.","schema":{"type":"string","format":"uuid"}},{"name":"postId","description":"Unique identifier for the target post within the thread.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["user","moderator","admin"],"name":"erase","model_name":"discussion_board_posts","soft_delete_column":"deleted_at","authorizationRole":"user","authorizationType":null},{"specification":"This operation performs a soft deletion of a specific post in a discussion thread. It targets the discussion_board_posts table and is used to hide a post from public view while preserving the record for audit and compliance purposes. Soft deletion is indicated by the deleted_at timestamp field. Only the post author, moderators, or admins may perform this deletion, in accordance with role permissions. The operation is designed to support member-driven deletion with subsequent moderation review and traceability.","path":"/discussionBoard/moderator/threads/{threadId}/posts/{postId}","method":"delete","prisma_schemas":"model discussion_board_posts {\n  id String @id @db.Uuid\n  thread_id String @db.Uuid\n  created_by_id String @db.Uuid\n  title String\n  body String\n  is_locked Boolean\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  thread discussion_board_threads @relation(fields: [thread_id], references: [id], onDelete: Cascade)\n  createdBy discussion_board_users @relation(fields: [created_by_id], references: [id], onDelete: Cascade)\n  discussion_board_post_edit_histories discussion_board_post_edit_histories[]\n  discussion_board_comments discussion_board_comments[]\n  discussion_board_attachments discussion_board_attachments[]\n  discussion_board_votes discussion_board_votes[]\n  discussion_board_polls discussion_board_polls?\n  discussion_board_flag_reports discussion_board_flag_reports[]\n  discussion_board_moderation_actions discussion_board_moderation_actions[]\n  discussion_board_notifications discussion_board_notifications[]\n}","description":"Delete a specific post within a thread by performing a soft deletion. This API sets the post's deleted_at timestamp, effectively hiding the post from standard user access while retaining it for compliance, moderation, or later auditing. Only authorized users (the post author, moderators, or admins) may invoke this operation. The operation does not erase associated comments or attachments, but those may become hidden through parent soft-deletion logic. A successful soft delete allows the forum to maintain audit trails and supports moderator review in case of disputes or appeals. If inappropriate users attempt deletion, an explicit permission denied error will be returned. Attempting to delete a non-existent or already-deleted post results in a 404 error with appropriate messaging.","summary":"Soft delete a specific post in a thread by setting its deleted_at timestamp.","parameters":[{"name":"threadId","description":"Unique identifier for the parent discussion thread.","schema":{"type":"string","format":"uuid"}},{"name":"postId","description":"Unique identifier for the target post within the thread.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["user","moderator","admin"],"name":"erase","model_name":"discussion_board_posts","soft_delete_column":"deleted_at","authorizationRole":"moderator","authorizationType":null},{"specification":"This operation performs a soft deletion of a specific post in a discussion thread. It targets the discussion_board_posts table and is used to hide a post from public view while preserving the record for audit and compliance purposes. Soft deletion is indicated by the deleted_at timestamp field. Only the post author, moderators, or admins may perform this deletion, in accordance with role permissions. The operation is designed to support member-driven deletion with subsequent moderation review and traceability.","path":"/discussionBoard/admin/threads/{threadId}/posts/{postId}","method":"delete","prisma_schemas":"model discussion_board_posts {\n  id String @id @db.Uuid\n  thread_id String @db.Uuid\n  created_by_id String @db.Uuid\n  title String\n  body String\n  is_locked Boolean\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  thread discussion_board_threads @relation(fields: [thread_id], references: [id], onDelete: Cascade)\n  createdBy discussion_board_users @relation(fields: [created_by_id], references: [id], onDelete: Cascade)\n  discussion_board_post_edit_histories discussion_board_post_edit_histories[]\n  discussion_board_comments discussion_board_comments[]\n  discussion_board_attachments discussion_board_attachments[]\n  discussion_board_votes discussion_board_votes[]\n  discussion_board_polls discussion_board_polls?\n  discussion_board_flag_reports discussion_board_flag_reports[]\n  discussion_board_moderation_actions discussion_board_moderation_actions[]\n  discussion_board_notifications discussion_board_notifications[]\n}","description":"Delete a specific post within a thread by performing a soft deletion. This API sets the post's deleted_at timestamp, effectively hiding the post from standard user access while retaining it for compliance, moderation, or later auditing. Only authorized users (the post author, moderators, or admins) may invoke this operation. The operation does not erase associated comments or attachments, but those may become hidden through parent soft-deletion logic. A successful soft delete allows the forum to maintain audit trails and supports moderator review in case of disputes or appeals. If inappropriate users attempt deletion, an explicit permission denied error will be returned. Attempting to delete a non-existent or already-deleted post results in a 404 error with appropriate messaging.","summary":"Soft delete a specific post in a thread by setting its deleted_at timestamp.","parameters":[{"name":"threadId","description":"Unique identifier for the parent discussion thread.","schema":{"type":"string","format":"uuid"}},{"name":"postId","description":"Unique identifier for the target post within the thread.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["user","moderator","admin"],"name":"erase","model_name":"discussion_board_posts","soft_delete_column":"deleted_at","authorizationRole":"admin","authorizationType":null},{"specification":"This operation retrieves a paginated and filterable list of comments associated with a specific post within a discussion thread. It targets the discussion_board_comments table, supporting advanced search/filtering by nesting level, author, creation date, and content. The operation is used for building collapsible comment trees and supporting client-side pagination for long discussions. Comments marked as deleted (deleted_at set) are excluded except for moderator/admin queries. Searching is available on the body field for keyword discovery.","path":"/discussionBoard/threads/{threadId}/posts/{postId}/comments","method":"patch","prisma_schemas":"model discussion_board_comments {\n  id String @id @db.Uuid\n  post_id String @db.Uuid\n  parent_id String? @db.Uuid\n  created_by_id String @db.Uuid\n  body String\n  nesting_level Int @db.Integer\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  post discussion_board_posts @relation(fields: [post_id], references: [id], onDelete: Cascade)\n  parent discussion_board_comments? @relation(\"recursive\", fields: [parent_id], references: [id], onDelete: Cascade)\n  createdBy discussion_board_users @relation(fields: [created_by_id], references: [id], onDelete: Cascade)\n  recursive discussion_board_comments[] @relation(\"recursive\")\n  discussion_board_comment_edit_histories discussion_board_comment_edit_histories[]\n  discussion_board_attachments discussion_board_attachments[]\n  discussion_board_votes discussion_board_votes[]\n  discussion_board_flag_reports discussion_board_flag_reports[]\n  discussion_board_moderation_actions discussion_board_moderation_actions[]\n  discussion_board_notifications discussion_board_notifications[]\n}","description":"Obtain a filtered, paginated list of comments for a specific post within a thread. This operation enables recursive comment structures up to five levels deep. Supports advanced search by author, keyword, nesting level, date range, and ordering. Excludes soft-deleted comments (those with deleted_at set) unless the user is a moderator or admin. Pagination and sorting parameters allow efficient display for posts with high comment volume. Includes support for building hierarchical/collapsible comment trees in the client UI. Requires appropriate permissions for viewing deleted or flagged comments. Returns summary/comment list data optimized for threaded views.","summary":"Search and retrieve a paginated, filterable list of comments for a post.","parameters":[{"name":"threadId","description":"Unique identifier for the parent thread.","schema":{"type":"string","format":"uuid"}},{"name":"postId","description":"Unique identifier for the specific post within the thread.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filter and pagination criteria for retrieving comments. Includes search keyword, nesting level, author filtering, date range, and sort options.","typeName":"IDiscussionBoardComment.IRequest"},"responseBody":{"description":"Paginated, filtered list of comments matching query parameters.","typeName":"IPageIDiscussionBoardComment.ISummary"},"authorizationRoles":[],"name":"index","model_name":"discussion_board_comments","soft_delete_column":"deleted_at","authorizationRole":null,"authorizationType":null},{"specification":"Retrieve detailed information for a specific comment within a post and thread. This operation reads the discussion_board_comments table and is commonly used for displaying full comment content, author, and context in the client UI. It supports use cases such as direct linking, comment permalinks, and moderator review. The operation is read-only and does not expose soft-deleted comments to non-privileged users. Returns the detailed structure of the comment, including nesting, parent/child status, and associated metadata.","path":"/discussionBoard/threads/{threadId}/posts/{postId}/comments/{commentId}","method":"get","prisma_schemas":"model discussion_board_comments {\n  id String @id @db.Uuid\n  post_id String @db.Uuid\n  parent_id String? @db.Uuid\n  created_by_id String @db.Uuid\n  body String\n  nesting_level Int @db.Integer\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  post discussion_board_posts @relation(fields: [post_id], references: [id], onDelete: Cascade)\n  parent discussion_board_comments? @relation(\"recursive\", fields: [parent_id], references: [id], onDelete: Cascade)\n  createdBy discussion_board_users @relation(fields: [created_by_id], references: [id], onDelete: Cascade)\n  recursive discussion_board_comments[] @relation(\"recursive\")\n  discussion_board_comment_edit_histories discussion_board_comment_edit_histories[]\n  discussion_board_attachments discussion_board_attachments[]\n  discussion_board_votes discussion_board_votes[]\n  discussion_board_flag_reports discussion_board_flag_reports[]\n  discussion_board_moderation_actions discussion_board_moderation_actions[]\n  discussion_board_notifications discussion_board_notifications[]\n}","description":"Retrieve a single comment in detail given its unique identifiers within thread and post. This operation provides client applications with the full content, author, created timestamp, nesting level, and parent/child structure. Only visible to non-privileged users if not soft-deleted. Moderators and admins may access soft-deleted comments for review or audit. Intended for comment detail views, direct comment links, moderator tools, and compliance reviews. Errors include not found or insufficient permission for blocked/deleted comments.","summary":"Get detailed information about a specific comment in a post/thread.","parameters":[{"name":"threadId","description":"Unique identifier for the parent thread.","schema":{"type":"string","format":"uuid"}},{"name":"postId","description":"Unique identifier for the parent post.","schema":{"type":"string","format":"uuid"}},{"name":"commentId","description":"Unique identifier of the target comment.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed comment object with all fields and nested metadata.","typeName":"IDiscussionBoardComment"},"authorizationRoles":[],"name":"at","model_name":"discussion_board_comments","soft_delete_column":null,"authorizationRole":null,"authorizationType":null},{"specification":"Create a new comment on a specific post within a thread. This operation writes to the discussion_board_comments table, performing validation such as body length, nesting level limit (max 5 levels), and parent/child structure. Only authenticated users may add comments. Supports both top-level and nested (replied) comments via optional parent_id. The operation updates all relevant metadata and indexes for discoverability. On creation, notifications and auto-subscribing may be triggered by business logic.","path":"/discussionBoard/user/threads/{threadId}/posts/{postId}/comments","method":"post","prisma_schemas":"model discussion_board_comments {\n  id String @id @db.Uuid\n  post_id String @db.Uuid\n  parent_id String? @db.Uuid\n  created_by_id String @db.Uuid\n  body String\n  nesting_level Int @db.Integer\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  post discussion_board_posts @relation(fields: [post_id], references: [id], onDelete: Cascade)\n  parent discussion_board_comments? @relation(\"recursive\", fields: [parent_id], references: [id], onDelete: Cascade)\n  createdBy discussion_board_users @relation(fields: [created_by_id], references: [id], onDelete: Cascade)\n  recursive discussion_board_comments[] @relation(\"recursive\")\n  discussion_board_comment_edit_histories discussion_board_comment_edit_histories[]\n  discussion_board_attachments discussion_board_attachments[]\n  discussion_board_votes discussion_board_votes[]\n  discussion_board_flag_reports discussion_board_flag_reports[]\n  discussion_board_moderation_actions discussion_board_moderation_actions[]\n  discussion_board_notifications discussion_board_notifications[]\n}","description":"Create a new comment under a post in a thread. This operation enforces business rules such as maximum comment length and nesting level, validates presence of mandatory fields, and updates indexing structures for future retrieval. It supports both root comments and replies. The API triggers business flows for notifications and subscription updates as appropriate. Only active (non-suspended) authenticated users may create comments. Rejected attempts for invalid input or permission results in error responses. The newly created comment object, including all meta fields, is returned on success.","summary":"Create a new comment on a post in a thread.","parameters":[{"name":"threadId","description":"Unique identifier for the parent thread.","schema":{"type":"string","format":"uuid"}},{"name":"postId","description":"Unique identifier for the parent post.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Information required to create a new comment, including parent id, body, and nesting.","typeName":"IDiscussionBoardComment.ICreate"},"responseBody":{"description":"The newly created comment object (including all relevant metadata).","typeName":"IDiscussionBoardComment"},"authorizationRoles":["user","moderator","admin"],"name":"create","model_name":"discussion_board_comments","soft_delete_column":null,"authorizationRole":"user","authorizationType":null},{"specification":"Create a new comment on a specific post within a thread. This operation writes to the discussion_board_comments table, performing validation such as body length, nesting level limit (max 5 levels), and parent/child structure. Only authenticated users may add comments. Supports both top-level and nested (replied) comments via optional parent_id. The operation updates all relevant metadata and indexes for discoverability. On creation, notifications and auto-subscribing may be triggered by business logic.","path":"/discussionBoard/moderator/threads/{threadId}/posts/{postId}/comments","method":"post","prisma_schemas":"model discussion_board_comments {\n  id String @id @db.Uuid\n  post_id String @db.Uuid\n  parent_id String? @db.Uuid\n  created_by_id String @db.Uuid\n  body String\n  nesting_level Int @db.Integer\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  post discussion_board_posts @relation(fields: [post_id], references: [id], onDelete: Cascade)\n  parent discussion_board_comments? @relation(\"recursive\", fields: [parent_id], references: [id], onDelete: Cascade)\n  createdBy discussion_board_users @relation(fields: [created_by_id], references: [id], onDelete: Cascade)\n  recursive discussion_board_comments[] @relation(\"recursive\")\n  discussion_board_comment_edit_histories discussion_board_comment_edit_histories[]\n  discussion_board_attachments discussion_board_attachments[]\n  discussion_board_votes discussion_board_votes[]\n  discussion_board_flag_reports discussion_board_flag_reports[]\n  discussion_board_moderation_actions discussion_board_moderation_actions[]\n  discussion_board_notifications discussion_board_notifications[]\n}","description":"Create a new comment under a post in a thread. This operation enforces business rules such as maximum comment length and nesting level, validates presence of mandatory fields, and updates indexing structures for future retrieval. It supports both root comments and replies. The API triggers business flows for notifications and subscription updates as appropriate. Only active (non-suspended) authenticated users may create comments. Rejected attempts for invalid input or permission results in error responses. The newly created comment object, including all meta fields, is returned on success.","summary":"Create a new comment on a post in a thread.","parameters":[{"name":"threadId","description":"Unique identifier for the parent thread.","schema":{"type":"string","format":"uuid"}},{"name":"postId","description":"Unique identifier for the parent post.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Information required to create a new comment, including parent id, body, and nesting.","typeName":"IDiscussionBoardComment.ICreate"},"responseBody":{"description":"The newly created comment object (including all relevant metadata).","typeName":"IDiscussionBoardComment"},"authorizationRoles":["user","moderator","admin"],"name":"create","model_name":"discussion_board_comments","soft_delete_column":null,"authorizationRole":"moderator","authorizationType":null},{"specification":"Create a new comment on a specific post within a thread. This operation writes to the discussion_board_comments table, performing validation such as body length, nesting level limit (max 5 levels), and parent/child structure. Only authenticated users may add comments. Supports both top-level and nested (replied) comments via optional parent_id. The operation updates all relevant metadata and indexes for discoverability. On creation, notifications and auto-subscribing may be triggered by business logic.","path":"/discussionBoard/admin/threads/{threadId}/posts/{postId}/comments","method":"post","prisma_schemas":"model discussion_board_comments {\n  id String @id @db.Uuid\n  post_id String @db.Uuid\n  parent_id String? @db.Uuid\n  created_by_id String @db.Uuid\n  body String\n  nesting_level Int @db.Integer\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  post discussion_board_posts @relation(fields: [post_id], references: [id], onDelete: Cascade)\n  parent discussion_board_comments? @relation(\"recursive\", fields: [parent_id], references: [id], onDelete: Cascade)\n  createdBy discussion_board_users @relation(fields: [created_by_id], references: [id], onDelete: Cascade)\n  recursive discussion_board_comments[] @relation(\"recursive\")\n  discussion_board_comment_edit_histories discussion_board_comment_edit_histories[]\n  discussion_board_attachments discussion_board_attachments[]\n  discussion_board_votes discussion_board_votes[]\n  discussion_board_flag_reports discussion_board_flag_reports[]\n  discussion_board_moderation_actions discussion_board_moderation_actions[]\n  discussion_board_notifications discussion_board_notifications[]\n}","description":"Create a new comment under a post in a thread. This operation enforces business rules such as maximum comment length and nesting level, validates presence of mandatory fields, and updates indexing structures for future retrieval. It supports both root comments and replies. The API triggers business flows for notifications and subscription updates as appropriate. Only active (non-suspended) authenticated users may create comments. Rejected attempts for invalid input or permission results in error responses. The newly created comment object, including all meta fields, is returned on success.","summary":"Create a new comment on a post in a thread.","parameters":[{"name":"threadId","description":"Unique identifier for the parent thread.","schema":{"type":"string","format":"uuid"}},{"name":"postId","description":"Unique identifier for the parent post.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Information required to create a new comment, including parent id, body, and nesting.","typeName":"IDiscussionBoardComment.ICreate"},"responseBody":{"description":"The newly created comment object (including all relevant metadata).","typeName":"IDiscussionBoardComment"},"authorizationRoles":["user","moderator","admin"],"name":"create","model_name":"discussion_board_comments","soft_delete_column":null,"authorizationRole":"admin","authorizationType":null},{"specification":"Update the content or metadata of a specific comment within a post/thread. This operation writes to the discussion_board_comments table. It enforces business rules such as author or moderator/admin privilege, ensures field validation, tracks nesting, and appends to edit history. The updated comment object is returned. Only the original author, moderators, or admins may modify the comment. All changes are tracked for audit and compliance, with edit snapshots saved in discussion_board_comment_edit_histories.","path":"/discussionBoard/user/threads/{threadId}/posts/{postId}/comments/{commentId}","method":"put","prisma_schemas":"model discussion_board_comments {\n  id String @id @db.Uuid\n  post_id String @db.Uuid\n  parent_id String? @db.Uuid\n  created_by_id String @db.Uuid\n  body String\n  nesting_level Int @db.Integer\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  post discussion_board_posts @relation(fields: [post_id], references: [id], onDelete: Cascade)\n  parent discussion_board_comments? @relation(\"recursive\", fields: [parent_id], references: [id], onDelete: Cascade)\n  createdBy discussion_board_users @relation(fields: [created_by_id], references: [id], onDelete: Cascade)\n  recursive discussion_board_comments[] @relation(\"recursive\")\n  discussion_board_comment_edit_histories discussion_board_comment_edit_histories[]\n  discussion_board_attachments discussion_board_attachments[]\n  discussion_board_votes discussion_board_votes[]\n  discussion_board_flag_reports discussion_board_flag_reports[]\n  discussion_board_moderation_actions discussion_board_moderation_actions[]\n  discussion_board_notifications discussion_board_notifications[]\n}","description":"Update an existing comment in a thread's post. The operation accepts new comment content and optionally metadata fields subject to validation. Checks for edit privilege: only the comment author or users with escalated permissions (moderator/admin) may edit. All edits append an edit history entry for audit trails. Attempts to update deleted, locked, or non-existent comments result in errors. Moderators and admins can override restricted update windows. Success returns detailed updated comment data.","summary":"Update the content or metadata of a specific comment.","parameters":[{"name":"threadId","description":"Unique identifier of the parent thread.","schema":{"type":"string","format":"uuid"}},{"name":"postId","description":"Unique identifier of the parent post.","schema":{"type":"string","format":"uuid"}},{"name":"commentId","description":"Unique identifier of the comment to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"New content and/or metadata for updating the comment.","typeName":"IDiscussionBoardComment.IUpdate"},"responseBody":{"description":"The updated comment object including all audit metadata.","typeName":"IDiscussionBoardComment"},"authorizationRoles":["user","moderator","admin"],"name":"update","model_name":"discussion_board_comments","soft_delete_column":null,"authorizationRole":"user","authorizationType":null},{"specification":"Update the content or metadata of a specific comment within a post/thread. This operation writes to the discussion_board_comments table. It enforces business rules such as author or moderator/admin privilege, ensures field validation, tracks nesting, and appends to edit history. The updated comment object is returned. Only the original author, moderators, or admins may modify the comment. All changes are tracked for audit and compliance, with edit snapshots saved in discussion_board_comment_edit_histories.","path":"/discussionBoard/moderator/threads/{threadId}/posts/{postId}/comments/{commentId}","method":"put","prisma_schemas":"model discussion_board_comments {\n  id String @id @db.Uuid\n  post_id String @db.Uuid\n  parent_id String? @db.Uuid\n  created_by_id String @db.Uuid\n  body String\n  nesting_level Int @db.Integer\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  post discussion_board_posts @relation(fields: [post_id], references: [id], onDelete: Cascade)\n  parent discussion_board_comments? @relation(\"recursive\", fields: [parent_id], references: [id], onDelete: Cascade)\n  createdBy discussion_board_users @relation(fields: [created_by_id], references: [id], onDelete: Cascade)\n  recursive discussion_board_comments[] @relation(\"recursive\")\n  discussion_board_comment_edit_histories discussion_board_comment_edit_histories[]\n  discussion_board_attachments discussion_board_attachments[]\n  discussion_board_votes discussion_board_votes[]\n  discussion_board_flag_reports discussion_board_flag_reports[]\n  discussion_board_moderation_actions discussion_board_moderation_actions[]\n  discussion_board_notifications discussion_board_notifications[]\n}","description":"Update an existing comment in a thread's post. The operation accepts new comment content and optionally metadata fields subject to validation. Checks for edit privilege: only the comment author or users with escalated permissions (moderator/admin) may edit. All edits append an edit history entry for audit trails. Attempts to update deleted, locked, or non-existent comments result in errors. Moderators and admins can override restricted update windows. Success returns detailed updated comment data.","summary":"Update the content or metadata of a specific comment.","parameters":[{"name":"threadId","description":"Unique identifier of the parent thread.","schema":{"type":"string","format":"uuid"}},{"name":"postId","description":"Unique identifier of the parent post.","schema":{"type":"string","format":"uuid"}},{"name":"commentId","description":"Unique identifier of the comment to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"New content and/or metadata for updating the comment.","typeName":"IDiscussionBoardComment.IUpdate"},"responseBody":{"description":"The updated comment object including all audit metadata.","typeName":"IDiscussionBoardComment"},"authorizationRoles":["user","moderator","admin"],"name":"update","model_name":"discussion_board_comments","soft_delete_column":null,"authorizationRole":"moderator","authorizationType":null},{"specification":"Update the content or metadata of a specific comment within a post/thread. This operation writes to the discussion_board_comments table. It enforces business rules such as author or moderator/admin privilege, ensures field validation, tracks nesting, and appends to edit history. The updated comment object is returned. Only the original author, moderators, or admins may modify the comment. All changes are tracked for audit and compliance, with edit snapshots saved in discussion_board_comment_edit_histories.","path":"/discussionBoard/admin/threads/{threadId}/posts/{postId}/comments/{commentId}","method":"put","prisma_schemas":"model discussion_board_comments {\n  id String @id @db.Uuid\n  post_id String @db.Uuid\n  parent_id String? @db.Uuid\n  created_by_id String @db.Uuid\n  body String\n  nesting_level Int @db.Integer\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  post discussion_board_posts @relation(fields: [post_id], references: [id], onDelete: Cascade)\n  parent discussion_board_comments? @relation(\"recursive\", fields: [parent_id], references: [id], onDelete: Cascade)\n  createdBy discussion_board_users @relation(fields: [created_by_id], references: [id], onDelete: Cascade)\n  recursive discussion_board_comments[] @relation(\"recursive\")\n  discussion_board_comment_edit_histories discussion_board_comment_edit_histories[]\n  discussion_board_attachments discussion_board_attachments[]\n  discussion_board_votes discussion_board_votes[]\n  discussion_board_flag_reports discussion_board_flag_reports[]\n  discussion_board_moderation_actions discussion_board_moderation_actions[]\n  discussion_board_notifications discussion_board_notifications[]\n}","description":"Update an existing comment in a thread's post. The operation accepts new comment content and optionally metadata fields subject to validation. Checks for edit privilege: only the comment author or users with escalated permissions (moderator/admin) may edit. All edits append an edit history entry for audit trails. Attempts to update deleted, locked, or non-existent comments result in errors. Moderators and admins can override restricted update windows. Success returns detailed updated comment data.","summary":"Update the content or metadata of a specific comment.","parameters":[{"name":"threadId","description":"Unique identifier of the parent thread.","schema":{"type":"string","format":"uuid"}},{"name":"postId","description":"Unique identifier of the parent post.","schema":{"type":"string","format":"uuid"}},{"name":"commentId","description":"Unique identifier of the comment to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"New content and/or metadata for updating the comment.","typeName":"IDiscussionBoardComment.IUpdate"},"responseBody":{"description":"The updated comment object including all audit metadata.","typeName":"IDiscussionBoardComment"},"authorizationRoles":["user","moderator","admin"],"name":"update","model_name":"discussion_board_comments","soft_delete_column":null,"authorizationRole":"admin","authorizationType":null},{"specification":"Delete (soft delete) a specific comment associated with a post in a thread. This operation sets the deleted_at field in the discussion_board_comments table. Soft-deleted comments are hidden from normal listing, preserved for compliance, moderation review, and possible later restoration if business policy allows. Deletion is permitted for the original author, moderators, or admins, enforcing business-driven permission checks. Associated attachments, votes, and flag reports remain in the database but are hidden through comment parent linkage. The operation maintains auditability, with errors for non-existent or already deleted comments.","path":"/discussionBoard/user/threads/{threadId}/posts/{postId}/comments/{commentId}","method":"delete","prisma_schemas":"model discussion_board_comments {\n  id String @id @db.Uuid\n  post_id String @db.Uuid\n  parent_id String? @db.Uuid\n  created_by_id String @db.Uuid\n  body String\n  nesting_level Int @db.Integer\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  post discussion_board_posts @relation(fields: [post_id], references: [id], onDelete: Cascade)\n  parent discussion_board_comments? @relation(\"recursive\", fields: [parent_id], references: [id], onDelete: Cascade)\n  createdBy discussion_board_users @relation(fields: [created_by_id], references: [id], onDelete: Cascade)\n  recursive discussion_board_comments[] @relation(\"recursive\")\n  discussion_board_comment_edit_histories discussion_board_comment_edit_histories[]\n  discussion_board_attachments discussion_board_attachments[]\n  discussion_board_votes discussion_board_votes[]\n  discussion_board_flag_reports discussion_board_flag_reports[]\n  discussion_board_moderation_actions discussion_board_moderation_actions[]\n  discussion_board_notifications discussion_board_notifications[]\n}","description":"Soft delete a specific comment within a post. This operation, available to the comment author, moderator, or admin, sets the comment's deleted_at timestamp. The comment is no longer returned in public results but remains in the database for compliance, moderation, and possible restoration. This preserves auditability and allows for regulatory response. Associated child comments, attachments, and votes are preserved but subject to parent visibility logic. The API returns 403 on insufficient permissions and 404 for already deleted or non-existent resources. The operation supports business rules on user-driven and privileged deletions, aligned with role-based access.","summary":"Soft delete a specific comment in a thread's post by setting its deleted_at timestamp.","parameters":[{"name":"threadId","description":"Unique identifier for the parent thread.","schema":{"type":"string","format":"uuid"}},{"name":"postId","description":"Unique identifier for the parent post.","schema":{"type":"string","format":"uuid"}},{"name":"commentId","description":"Unique identifier for the comment to be deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["user","moderator","admin"],"name":"erase","model_name":"discussion_board_comments","soft_delete_column":"deleted_at","authorizationRole":"user","authorizationType":null},{"specification":"Delete (soft delete) a specific comment associated with a post in a thread. This operation sets the deleted_at field in the discussion_board_comments table. Soft-deleted comments are hidden from normal listing, preserved for compliance, moderation review, and possible later restoration if business policy allows. Deletion is permitted for the original author, moderators, or admins, enforcing business-driven permission checks. Associated attachments, votes, and flag reports remain in the database but are hidden through comment parent linkage. The operation maintains auditability, with errors for non-existent or already deleted comments.","path":"/discussionBoard/moderator/threads/{threadId}/posts/{postId}/comments/{commentId}","method":"delete","prisma_schemas":"model discussion_board_comments {\n  id String @id @db.Uuid\n  post_id String @db.Uuid\n  parent_id String? @db.Uuid\n  created_by_id String @db.Uuid\n  body String\n  nesting_level Int @db.Integer\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  post discussion_board_posts @relation(fields: [post_id], references: [id], onDelete: Cascade)\n  parent discussion_board_comments? @relation(\"recursive\", fields: [parent_id], references: [id], onDelete: Cascade)\n  createdBy discussion_board_users @relation(fields: [created_by_id], references: [id], onDelete: Cascade)\n  recursive discussion_board_comments[] @relation(\"recursive\")\n  discussion_board_comment_edit_histories discussion_board_comment_edit_histories[]\n  discussion_board_attachments discussion_board_attachments[]\n  discussion_board_votes discussion_board_votes[]\n  discussion_board_flag_reports discussion_board_flag_reports[]\n  discussion_board_moderation_actions discussion_board_moderation_actions[]\n  discussion_board_notifications discussion_board_notifications[]\n}","description":"Soft delete a specific comment within a post. This operation, available to the comment author, moderator, or admin, sets the comment's deleted_at timestamp. The comment is no longer returned in public results but remains in the database for compliance, moderation, and possible restoration. This preserves auditability and allows for regulatory response. Associated child comments, attachments, and votes are preserved but subject to parent visibility logic. The API returns 403 on insufficient permissions and 404 for already deleted or non-existent resources. The operation supports business rules on user-driven and privileged deletions, aligned with role-based access.","summary":"Soft delete a specific comment in a thread's post by setting its deleted_at timestamp.","parameters":[{"name":"threadId","description":"Unique identifier for the parent thread.","schema":{"type":"string","format":"uuid"}},{"name":"postId","description":"Unique identifier for the parent post.","schema":{"type":"string","format":"uuid"}},{"name":"commentId","description":"Unique identifier for the comment to be deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["user","moderator","admin"],"name":"erase","model_name":"discussion_board_comments","soft_delete_column":"deleted_at","authorizationRole":"moderator","authorizationType":null},{"specification":"Delete (soft delete) a specific comment associated with a post in a thread. This operation sets the deleted_at field in the discussion_board_comments table. Soft-deleted comments are hidden from normal listing, preserved for compliance, moderation review, and possible later restoration if business policy allows. Deletion is permitted for the original author, moderators, or admins, enforcing business-driven permission checks. Associated attachments, votes, and flag reports remain in the database but are hidden through comment parent linkage. The operation maintains auditability, with errors for non-existent or already deleted comments.","path":"/discussionBoard/admin/threads/{threadId}/posts/{postId}/comments/{commentId}","method":"delete","prisma_schemas":"model discussion_board_comments {\n  id String @id @db.Uuid\n  post_id String @db.Uuid\n  parent_id String? @db.Uuid\n  created_by_id String @db.Uuid\n  body String\n  nesting_level Int @db.Integer\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  post discussion_board_posts @relation(fields: [post_id], references: [id], onDelete: Cascade)\n  parent discussion_board_comments? @relation(\"recursive\", fields: [parent_id], references: [id], onDelete: Cascade)\n  createdBy discussion_board_users @relation(fields: [created_by_id], references: [id], onDelete: Cascade)\n  recursive discussion_board_comments[] @relation(\"recursive\")\n  discussion_board_comment_edit_histories discussion_board_comment_edit_histories[]\n  discussion_board_attachments discussion_board_attachments[]\n  discussion_board_votes discussion_board_votes[]\n  discussion_board_flag_reports discussion_board_flag_reports[]\n  discussion_board_moderation_actions discussion_board_moderation_actions[]\n  discussion_board_notifications discussion_board_notifications[]\n}","description":"Soft delete a specific comment within a post. This operation, available to the comment author, moderator, or admin, sets the comment's deleted_at timestamp. The comment is no longer returned in public results but remains in the database for compliance, moderation, and possible restoration. This preserves auditability and allows for regulatory response. Associated child comments, attachments, and votes are preserved but subject to parent visibility logic. The API returns 403 on insufficient permissions and 404 for already deleted or non-existent resources. The operation supports business rules on user-driven and privileged deletions, aligned with role-based access.","summary":"Soft delete a specific comment in a thread's post by setting its deleted_at timestamp.","parameters":[{"name":"threadId","description":"Unique identifier for the parent thread.","schema":{"type":"string","format":"uuid"}},{"name":"postId","description":"Unique identifier for the parent post.","schema":{"type":"string","format":"uuid"}},{"name":"commentId","description":"Unique identifier for the comment to be deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["user","moderator","admin"],"name":"erase","model_name":"discussion_board_comments","soft_delete_column":"deleted_at","authorizationRole":"admin","authorizationType":null},{"specification":"Search for and retrieve the list of attachments uploaded to a specific post in a given thread. This operation supports pagination, filter by uploader, type, file name, and sort order to assist users in browsing, downloading, or moderating uploaded files. It operates on the discussion_board_attachments table, retrieving only attachments associated with the specified post (and not with comments). Soft-deleted files are excluded from results unless the API is queried by moderators or admins. This allows for compliance as well as standard user workflows (downloading, reusing post-attached media).","path":"/discussionBoard/threads/{threadId}/posts/{postId}/attachments","method":"patch","prisma_schemas":"model discussion_board_attachments {\n  id String @id @db.Uuid\n  post_id String? @db.Uuid\n  comment_id String? @db.Uuid\n  uploaded_by_id String @db.Uuid\n  file_name String\n  file_url String @db.VarChar(80000)\n  content_type String\n  size_bytes Int @db.Integer\n  created_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  post discussion_board_posts? @relation(fields: [post_id], references: [id], onDelete: Cascade)\n  comment discussion_board_comments? @relation(fields: [comment_id], references: [id], onDelete: Cascade)\n  uploadedBy discussion_board_users @relation(fields: [uploaded_by_id], references: [id], onDelete: Cascade)\n}","description":"Obtain a filtered, paginated list of attachments for a specific post in a thread (not for comment-attached files). The API supports filtering by file name, uploader, content type, and range. Sort and pagination allow efficient handling for posts with multiple media or file uploads. Only non-deleted (deleted_at is null) attachments are shown to normal users. Moderators/admins may view soft-deleted files for audit purposes. Use cases include user file management, moderator content review, and compliance evidence download. Errors may arise if the post does not exist or user lacks permission to view certain attachment types.","summary":"Retrieve a paginated, filtered list of file/media attachments for a post.","parameters":[{"name":"threadId","description":"Unique identifier for the parent thread.","schema":{"type":"string","format":"uuid"}},{"name":"postId","description":"Unique identifier for the parent post.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search, pagination, and filter criteria for retrieving attachments. May include file name, uploader, date, or type.","typeName":"IDiscussionBoardAttachment.IRequest"},"responseBody":{"description":"Paginated list of attachments associated exclusively with the post.","typeName":"IPageIDiscussionBoardAttachment.ISummary"},"authorizationRoles":[],"name":"index","model_name":"discussion_board_attachments","soft_delete_column":"deleted_at","authorizationRole":null,"authorizationType":null},{"specification":"Retrieve detailed metadata for a specific file or media attachment associated with a post in a thread. This operation reads the discussion_board_attachments table, allowing both users and moderators to obtain file URL, content type, uploader, and audit fields for a given attachment. Only attachments associated with the specific post (not comments) are eligible. Files that have been soft deleted (deleted_at set) are not shown to regular users, but are available for moderation/audit purposes. This supports file download, compliance review, and admin investigation workflows.","path":"/discussionBoard/threads/{threadId}/posts/{postId}/attachments/{attachmentId}","method":"get","prisma_schemas":"model discussion_board_attachments {\n  id String @id @db.Uuid\n  post_id String? @db.Uuid\n  comment_id String? @db.Uuid\n  uploaded_by_id String @db.Uuid\n  file_name String\n  file_url String @db.VarChar(80000)\n  content_type String\n  size_bytes Int @db.Integer\n  created_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  post discussion_board_posts? @relation(fields: [post_id], references: [id], onDelete: Cascade)\n  comment discussion_board_comments? @relation(fields: [comment_id], references: [id], onDelete: Cascade)\n  uploadedBy discussion_board_users @relation(fields: [uploaded_by_id], references: [id], onDelete: Cascade)\n}","description":"Fetch the full metadata and access information for a specific file/media attachment tied to a post in a thread. The operation is available for both users (with access rights) and moderators. Regular users cannot see metadata for soft-deleted files, while privileged actors can access for compliance and moderation. Typical output includes upload info, audit fields, and download URI. Supports both client UI renderings and backend compliance processes. API returns permission errors for unqualified users, and 404 errors if the attachment does not exist or is not associated with the post/thread specified.","summary":"Get metadata and download information for a single attachment on a post.","parameters":[{"name":"threadId","description":"Unique identifier for the parent thread.","schema":{"type":"string","format":"uuid"}},{"name":"postId","description":"Unique identifier for the post containing this attachment.","schema":{"type":"string","format":"uuid"}},{"name":"attachmentId","description":"Unique identifier for the target attachment file.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed metadata record for the requested post-level attachment.","typeName":"IDiscussionBoardAttachment"},"authorizationRoles":[],"name":"at","model_name":"discussion_board_attachments","soft_delete_column":null,"authorizationRole":null,"authorizationType":null},{"specification":"This operation allows an authenticated user to upload a new attachment (such as an image, document, or media file) to a specific post within a thread. The attachment is linked to both the post and the uploading user, with file metadata such as file name, URL, content type, and size. Only authenticated users may upload attachments, and the file is referenced via a unique URI on successful creation. This operation applies to the discussion_board_attachments table, enforcing business rules on allowed file types and file size per system settings.","path":"/discussionBoard/user/threads/{threadId}/posts/{postId}/attachments","method":"post","prisma_schemas":"model discussion_board_attachments {\n  id String @id @db.Uuid\n  post_id String? @db.Uuid\n  comment_id String? @db.Uuid\n  uploaded_by_id String @db.Uuid\n  file_name String\n  file_url String @db.VarChar(80000)\n  content_type String\n  size_bytes Int @db.Integer\n  created_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  post discussion_board_posts? @relation(fields: [post_id], references: [id], onDelete: Cascade)\n  comment discussion_board_comments? @relation(fields: [comment_id], references: [id], onDelete: Cascade)\n  uploadedBy discussion_board_users @relation(fields: [uploaded_by_id], references: [id], onDelete: Cascade)\n  @@unique([file_url])\n  @@index([post_id])\n  @@index([comment_id])\n  @@index([uploaded_by_id])\n}","description":"Create a new file or media attachment for a post within a discussion thread. The user must be authenticated and authorized to upload, and the post must not be locked or archived. If successful, the file metadata and access URI is returned. File uploads are audited for compliance and are subject to moderation and content policy review. Only the post author and moderators may manage attachments. Security rules validate MIME type and enforce per-file size limits. Error handling includes invalid format, exceeding size quotas, or uploading to a deleted/locked/archived post.\n\nAuthorization requires user authentication as either a regular user, moderator, or admin. All uploads are logged in the audit log for compliance. The operation references the discussion_board_attachments model and ensures relational integrity with the parent post.","summary":"Upload a new attachment to a specified post in a thread.","parameters":[{"name":"threadId","description":"Unique identifier of the thread containing the post.","schema":{"type":"string","format":"uuid"}},{"name":"postId","description":"Unique identifier of the post to attach the file to.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Attachment metadata including file details, uploaded by the user.","typeName":"IDiscussionBoardAttachment.ICreate"},"responseBody":{"description":"Metadata and URI of the uploaded attachment, including ID and file info.","typeName":"IDiscussionBoardAttachment"},"authorizationRoles":["user"],"name":"create","model_name":"discussion_board_attachments","soft_delete_column":"deleted_at","authorizationRole":"user","authorizationType":null},{"specification":"This operation allows an authenticated user (author or moderator/admin) to update the metadata of a specific attachment belonging to a post, such as the file name or content type. The attachment record is validated for edit permissions and referenced via both the parent thread, post, and its unique attachment ID. File content replacement is not supported through this endpoint—only metadata updates. Fully covers the discussion_board_attachments table for edit operations, referencing field constraints as defined in the schema.","path":"/discussionBoard/user/threads/{threadId}/posts/{postId}/attachments/{attachmentId}","method":"put","prisma_schemas":"model discussion_board_attachments {\n  id String @id @db.Uuid\n  post_id String? @db.Uuid\n  comment_id String? @db.Uuid\n  uploaded_by_id String @db.Uuid\n  file_name String\n  file_url String @db.VarChar(80000)\n  content_type String\n  size_bytes Int @db.Integer\n  created_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  post discussion_board_posts? @relation(fields: [post_id], references: [id], onDelete: Cascade)\n  comment discussion_board_comments? @relation(fields: [comment_id], references: [id], onDelete: Cascade)\n  uploadedBy discussion_board_users @relation(fields: [uploaded_by_id], references: [id], onDelete: Cascade)\n  @@unique([file_url])\n  @@index([post_id])\n  @@index([comment_id])\n  @@index([uploaded_by_id])\n}","description":"Update file attachment metadata for a specific attachment belonging to a post. Only the user who uploaded the file, a moderator, or an admin may update attachment metadata (such as file name or content type). Changing the physical file contents or URL is not supported through this operation. The parent post must not be locked or archived, and the attachment must not be soft deleted.\n\nAll update actions are logged for compliance in audit logs. Business validation ensures only allowed fields are changed and all field constraints are respected. If attachment does not exist, is not owned by the user, or permissions are insufficient, access is denied with an error. Refer to discussion_board_attachments schema for updatable fields.","summary":"Update metadata for a specific attachment on a post within a thread.","parameters":[{"name":"threadId","description":"Unique identifier of the thread containing the post.","schema":{"type":"string","format":"uuid"}},{"name":"postId","description":"Unique identifier of the post that owns the attachment.","schema":{"type":"string","format":"uuid"}},{"name":"attachmentId","description":"Unique identifier of the attachment to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated attachment metadata (file name, content type, etc.).","typeName":"IDiscussionBoardAttachment.IUpdate"},"responseBody":{"description":"Updated attachment metadata and current details.","typeName":"IDiscussionBoardAttachment"},"authorizationRoles":["user"],"name":"update","model_name":"discussion_board_attachments","soft_delete_column":"deleted_at","authorizationRole":"user","authorizationType":null},{"specification":"This operation allows an authorized user to soft-delete an attachment belonging to a post. The attachment is referenced by attachmentId, postId, and threadId to ensure context and relational integrity. Deletion is soft, meaning the file metadata remains in the system for potential restoration or for audit/regulatory compliance, but is no longer visible or accessible to general users. Applicable to the discussion_board_attachments table per field specifications.","path":"/discussionBoard/user/threads/{threadId}/posts/{postId}/attachments/{attachmentId}","method":"delete","prisma_schemas":"model discussion_board_attachments {\n  id String @id @db.Uuid\n  post_id String? @db.Uuid\n  comment_id String? @db.Uuid\n  uploaded_by_id String @db.Uuid\n  file_name String\n  file_url String @db.VarChar(80000)\n  content_type String\n  size_bytes Int @db.Integer\n  created_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  post discussion_board_posts? @relation(fields: [post_id], references: [id], onDelete: Cascade)\n  comment discussion_board_comments? @relation(fields: [comment_id], references: [id], onDelete: Cascade)\n  uploadedBy discussion_board_users @relation(fields: [uploaded_by_id], references: [id], onDelete: Cascade)\n  @@unique([file_url])\n  @@index([post_id])\n  @@index([comment_id])\n  @@index([uploaded_by_id])\n}","description":"Soft-delete a file or media attachment from a post in a thread. Only the upload owner, moderator, or admin can perform this operation. Deletion is recorded by setting the \"deleted_at\" timestamp, retaining the record for audit and compliance. Once deleted, the attachment is no longer accessible or displayed in user-facing APIs or the post/thread content view. Operations are fully audited as per platform regulations.\n\nIf the attachment or its parent post is already deleted or does not exist, an appropriate error is returned. Business logic ensures no permanent erase unless enforced by regulatory action. This endpoint operates on the discussion_board_attachments model and requires validation of threadId, postId, and attachmentId.","summary":"Soft-delete an attachment from a post in a thread, retaining record for compliance.","parameters":[{"name":"threadId","description":"Unique identifier for the discussion thread.","schema":{"type":"string","format":"uuid"}},{"name":"postId","description":"Unique identifier for the post from which the attachment will be deleted.","schema":{"type":"string","format":"uuid"}},{"name":"attachmentId","description":"Identifier for the attachment to soft-delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["user"],"name":"erase","model_name":"discussion_board_attachments","soft_delete_column":"deleted_at","authorizationRole":"user","authorizationType":null},{"specification":"This operation retrieves a list of all attachments associated with a specific comment on a post, supporting advanced filtering, searching, and sorting based on metadata such as file type, upload date, and status. Results are paginated to handle large comment threads and focus on performance. Only authorized users (post/comment author, moderators, and admins) may view attachment details for non-public or moderated comments. Based on the discussion_board_attachments schema, especially with comment_id relations.","path":"/discussionBoard/user/threads/{threadId}/posts/{postId}/comments/{commentId}/attachments","method":"patch","prisma_schemas":"model discussion_board_attachments {\n  id String @id @db.Uuid\n  post_id String? @db.Uuid\n  comment_id String? @db.Uuid\n  uploaded_by_id String @db.Uuid\n  file_name String\n  file_url String @db.VarChar(80000)\n  content_type String\n  size_bytes Int @db.Integer\n  created_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  post discussion_board_posts? @relation(fields: [post_id], references: [id], onDelete: Cascade)\n  comment discussion_board_comments? @relation(fields: [comment_id], references: [id], onDelete: Cascade)\n  uploadedBy discussion_board_users @relation(fields: [uploaded_by_id], references: [id], onDelete: Cascade)\n  @@unique([file_url])\n  @@index([post_id])\n  @@index([comment_id])\n  @@index([uploaded_by_id])\n}","description":"Retrieve a paginated, filterable, and sortable list of file or media attachments for a specific comment on a post within a thread. This endpoint supports advanced filtering by file type, upload date, or status, and allows sorting and pagination for efficient navigation in threads with many attachments. Only users with access to the comment (author, moderators, admins) can view attachment metadata that isn't public.\n\nRelies on the discussion_board_attachments schema, especially leveraging the comment_id field to filter results. Filtering criteria and pagination must be provided in the request body. Useful for users wishing to see all files attached to a comment, for moderation review, or for managing their own uploads.","summary":"List and search attachments linked to a specific comment on a post in a thread.","parameters":[{"name":"threadId","description":"Unique identifier of the thread containing the comment and post.","schema":{"type":"string","format":"uuid"}},{"name":"postId","description":"Unique identifier of the parent post.","schema":{"type":"string","format":"uuid"}},{"name":"commentId","description":"Unique identifier of the comment whose attachments are listed.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filtering, sorting, and pagination query parameters for attachment list.","typeName":"IDiscussionBoardAttachment.IRequest"},"responseBody":{"description":"Paginated list of attachments for the target comment.","typeName":"IPageIDiscussionBoardAttachment"},"authorizationRoles":["user"],"name":"index","model_name":"discussion_board_attachments","soft_delete_column":"deleted_at","authorizationRole":"user","authorizationType":null},{"specification":"This operation retrieves detailed metadata about a specific attachment associated with a comment on a post within a thread. The attachment is referenced via threadId, postId, commentId, and attachmentId to ensure strict context. Only authorized users can access non-public attachments. Provides information such as file name, file url, content type, size, upload date, and uploader identity. Queries the discussion_board_attachments table for the given identifiers.","path":"/discussionBoard/user/threads/{threadId}/posts/{postId}/comments/{commentId}/attachments/{attachmentId}","method":"get","prisma_schemas":"model discussion_board_attachments {\n  id String @id @db.Uuid\n  post_id String? @db.Uuid\n  comment_id String? @db.Uuid\n  uploaded_by_id String @db.Uuid\n  file_name String\n  file_url String @db.VarChar(80000)\n  content_type String\n  size_bytes Int @db.Integer\n  created_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  post discussion_board_posts? @relation(fields: [post_id], references: [id], onDelete: Cascade)\n  comment discussion_board_comments? @relation(fields: [comment_id], references: [id], onDelete: Cascade)\n  uploadedBy discussion_board_users @relation(fields: [uploaded_by_id], references: [id], onDelete: Cascade)\n  @@unique([file_url])\n  @@index([post_id])\n  @@index([comment_id])\n  @@index([uploaded_by_id])\n}","description":"Fetch full metadata for a single attachment linked to a comment on a specific post within a thread. Users must be authenticated and have proper authorization (comment author, post author, moderators, or admin) to access restricted or non-public file information. Response includes metadata such as attachment ID, file name, URL, content type, file size, upload timestamp, and uploader identity. Results are drawn from the discussion_board_attachments model using thread, post, comment, and attachment IDs as context.\n\nReturns access error if attachment does not exist, is deleted, or the user lacks sufficient privileges.","summary":"Get full metadata for a specified attachment on a comment in a thread/post.","parameters":[{"name":"threadId","description":"Thread ID containing the comment.","schema":{"type":"string","format":"uuid"}},{"name":"postId","description":"Post ID containing the target comment.","schema":{"type":"string","format":"uuid"}},{"name":"commentId","description":"Comment ID for the parent comment.","schema":{"type":"string","format":"uuid"}},{"name":"attachmentId","description":"Attachment ID to query for full details.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full details of the comment's attachment including file metadata, upload info, and user IDs.","typeName":"IDiscussionBoardAttachment"},"authorizationRoles":["user"],"name":"at","model_name":"discussion_board_attachments","soft_delete_column":"deleted_at","authorizationRole":"user","authorizationType":null},{"specification":"This operation allows a user with appropriate permissions to upload a new file or media attachment to a comment in a post (within a thread). The attachment is recorded in the discussion_board_attachments model, linked to the comment and uploader. The parent comment must permit attachments and not exceed regulatory moderation status. Uploads are subject to file type and size constraints enforced by business policy and referenced from system settings. Permissions are validated for the user, and successful operations return the new attachment metadata and URI.","path":"/discussionBoard/user/threads/{threadId}/posts/{postId}/comments/{commentId}/attachments","method":"post","prisma_schemas":"model discussion_board_attachments {\n  id String @id @db.Uuid\n  post_id String? @db.Uuid\n  comment_id String? @db.Uuid\n  uploaded_by_id String @db.Uuid\n  file_name String\n  file_url String @db.VarChar(80000)\n  content_type String\n  size_bytes Int @db.Integer\n  created_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  post discussion_board_posts? @relation(fields: [post_id], references: [id], onDelete: Cascade)\n  comment discussion_board_comments? @relation(fields: [comment_id], references: [id], onDelete: Cascade)\n  uploadedBy discussion_board_users @relation(fields: [uploaded_by_id], references: [id], onDelete: Cascade)\n  @@unique([file_url])\n  @@index([post_id])\n  @@index([comment_id])\n  @@index([uploaded_by_id])\n}","description":"Attach a new file to a comment on a post in a thread. The file is saved and linked to the parent comment, and must comply with business and regulatory rules on allowed attachments. Users must be authenticated and own/write the comment or have moderator/admin privileges. All file attachments are monitored for prohibited content and violations.\n\nUpon success, file metadata (id, file name, URL, content type, uploader id, upload timestamp) is returned. The parent comment must not be locked, archived, or deleted. Security logic enforces file type and file size quotas. The operation references the discussion_board_attachments schema for compliance and moderation protocols.","summary":"Upload a new attachment file to a specific comment within a post/thread.","parameters":[{"name":"threadId","description":"ID of the thread containing the comment.","schema":{"type":"string","format":"uuid"}},{"name":"postId","description":"ID of the parent post.","schema":{"type":"string","format":"uuid"}},{"name":"commentId","description":"ID of the comment to attach the file to.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Attachment details including file information, uploader, and link to comment ID.","typeName":"IDiscussionBoardAttachment.ICreate"},"responseBody":{"description":"Details of the newly created comment attachment (metadata, URI, user, etc.).","typeName":"IDiscussionBoardAttachment"},"authorizationRoles":["user"],"name":"create","model_name":"discussion_board_attachments","soft_delete_column":"deleted_at","authorizationRole":"user","authorizationType":null},{"specification":"This operation allows an authorized user (uploader, moderator, or admin) to update file attachment metadata for a given attachment linked to a comment. Only metadata (e.g., file name, content type) may be changed, not the physical file/media. The operation is strictly scoped to attachments belonging to the comment, post, and thread specified in the path. The system enforces upload ownership and role permissions per schema and business rules.","path":"/discussionBoard/user/threads/{threadId}/posts/{postId}/comments/{commentId}/attachments/{attachmentId}","method":"put","prisma_schemas":"model discussion_board_attachments {\n  id String @id @db.Uuid\n  post_id String? @db.Uuid\n  comment_id String? @db.Uuid\n  uploaded_by_id String @db.Uuid\n  file_name String\n  file_url String @db.VarChar(80000)\n  content_type String\n  size_bytes Int @db.Integer\n  created_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  post discussion_board_posts? @relation(fields: [post_id], references: [id], onDelete: Cascade)\n  comment discussion_board_comments? @relation(fields: [comment_id], references: [id], onDelete: Cascade)\n  uploadedBy discussion_board_users @relation(fields: [uploaded_by_id], references: [id], onDelete: Cascade)\n  @@unique([file_url])\n  @@index([post_id])\n  @@index([comment_id])\n  @@index([uploaded_by_id])\n}","description":"Edit (update) the metadata for a specific file attachment on a comment. Only permitted for the file owner (uploader) or privileged actors (moderator/admin). The API accepts updates only for allowed attributes (file name, content type), with strict validation, audit, and compliance logging. Attempts to update non-editable properties such as the file content or URL are rejected. If the attachment is deleted or the user lacks permission, the system responds with proper error handling and audit record.\n\nAll changes are routed through the discussion_board_attachments schema’s update logic, ensuring proper relationship with comment, post, and thread.","summary":"Update attachment metadata for a file attached to a comment in a post/thread.","parameters":[{"name":"threadId","description":"Thread ID for parent context.","schema":{"type":"string","format":"uuid"}},{"name":"postId","description":"Post ID holding the target comment.","schema":{"type":"string","format":"uuid"}},{"name":"commentId","description":"Comment ID owning the attachment.","schema":{"type":"string","format":"uuid"}},{"name":"attachmentId","description":"Attachment ID to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"New metadata values (file name, content type) to update.","typeName":"IDiscussionBoardAttachment.IUpdate"},"responseBody":{"description":"Attachment details after successful update.","typeName":"IDiscussionBoardAttachment"},"authorizationRoles":["user"],"name":"update","model_name":"discussion_board_attachments","soft_delete_column":"deleted_at","authorizationRole":"user","authorizationType":null},{"specification":"This operation soft-deletes an attachment belonging to a comment by marking it as deleted without erasing the record. Only the uploader or a moderator/admin can delete. Context is enforced with all relevant IDs, and relational checks are performed. Attachment becomes invisible to general users and is referenced only for audit, regulatory, or possible restoration scenarios. Implements business and compliance policies according to the discussion_board_attachments schema.","path":"/discussionBoard/user/threads/{threadId}/posts/{postId}/comments/{commentId}/attachments/{attachmentId}","method":"delete","prisma_schemas":"model discussion_board_attachments {\n  id String @id @db.Uuid\n  post_id String? @db.Uuid\n  comment_id String? @db.Uuid\n  uploaded_by_id String @db.Uuid\n  file_name String\n  file_url String @db.VarChar(80000)\n  content_type String\n  size_bytes Int @db.Integer\n  created_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  post discussion_board_posts? @relation(fields: [post_id], references: [id], onDelete: Cascade)\n  comment discussion_board_comments? @relation(fields: [comment_id], references: [id], onDelete: Cascade)\n  uploadedBy discussion_board_users @relation(fields: [uploaded_by_id], references: [id], onDelete: Cascade)\n  @@unique([file_url])\n  @@index([post_id])\n  @@index([comment_id])\n  @@index([uploaded_by_id])\n}","description":"Soft-delete a file/media attachment from a comment (within a post/thread). The operation sets the attachment's deleted_at timestamp. Only the uploader, moderator, or admin can access the endpoint, and the parent comment must not be deleted or locked. Soft-deleted attachments remain for audit and regulatory review, but are no longer visible in user APIs. If the attachment does not exist or is already deleted, the endpoint returns an error. All actions are audited.","summary":"Soft-delete an attachment from a comment, retaining metadata for compliance.","parameters":[{"name":"threadId","description":"Thread ID for parent container.","schema":{"type":"string","format":"uuid"}},{"name":"postId","description":"Post ID housing the comment and attachment.","schema":{"type":"string","format":"uuid"}},{"name":"commentId","description":"Comment ID for the parent comment.","schema":{"type":"string","format":"uuid"}},{"name":"attachmentId","description":"Attachment ID to be soft deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["user"],"name":"erase","model_name":"discussion_board_attachments","soft_delete_column":"deleted_at","authorizationRole":"user","authorizationType":null},{"specification":"Retrieves a paginated, structured list of all replies (nested comments) to a specific comment on a given post within a thread. This operation operates on the discussion_board_comments table, which supports hierarchical (nested) comments up to five levels, associating each reply via the parent_id and nesting_level fields. It supports advanced search and filtering (e.g., by author/user, creation date, nesting level) as well as pagination for high-volume discussions.","path":"/discussionBoard/user/threads/{threadId}/posts/{postId}/comments/{commentId}/replies","method":"patch","prisma_schemas":"model discussion_board_threads {\n  id String @id @db.Uuid\n  created_by_id String @db.Uuid\n  title String\n  is_locked Boolean\n  is_archived Boolean\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  createdBy discussion_board_users @relation(fields: [created_by_id], references: [id], onDelete: Cascade)\n  discussion_board_posts discussion_board_posts[]\n  @@unique([title])\n  @@index([created_by_id])\n  @@index([created_at])\n}\nmodel discussion_board_posts {\n  id String @id @db.Uuid\n  thread_id String @db.Uuid\n  created_by_id String @db.Uuid\n  title String\n  body String\n  is_locked Boolean\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  thread discussion_board_threads @relation(fields: [thread_id], references: [id], onDelete: Cascade)\n  createdBy discussion_board_users @relation(fields: [created_by_id], references: [id], onDelete: Cascade)\n  discussion_board_post_edit_histories discussion_board_post_edit_histories[]\n  discussion_board_comments discussion_board_comments[]\n  discussion_board_attachments discussion_board_attachments[]\n  discussion_board_votes discussion_board_votes[]\n  discussion_board_polls discussion_board_polls?\n  discussion_board_flag_reports discussion_board_flag_reports[]\n  discussion_board_moderation_actions discussion_board_moderation_actions[]\n  discussion_board_notifications discussion_board_notifications[]\n  @@unique([thread_id, title])\n  @@index([thread_id, created_at])\n  @@index([created_by_id])\n  @@index([title(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n  @@index([body(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n}\nmodel discussion_board_comments {\n  id String @id @db.Uuid\n  post_id String @db.Uuid\n  parent_id String? @db.Uuid\n  created_by_id String @db.Uuid\n  body String\n  nesting_level Int @db.Integer\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  post discussion_board_posts @relation(fields: [post_id], references: [id], onDelete: Cascade)\n  parent discussion_board_comments? @relation(\"recursive\", fields: [parent_id], references: [id], onDelete: Cascade)\n  createdBy discussion_board_users @relation(fields: [created_by_id], references: [id], onDelete: Cascade)\n  recursive discussion_board_comments[] @relation(\"recursive\")\n  discussion_board_comment_edit_histories discussion_board_comment_edit_histories[]\n  discussion_board_attachments discussion_board_attachments[]\n  discussion_board_votes discussion_board_votes[]\n  discussion_board_flag_reports discussion_board_flag_reports[]\n  discussion_board_moderation_actions discussion_board_moderation_actions[]\n  discussion_board_notifications discussion_board_notifications[]\n  @@index([post_id, created_at])\n  @@index([parent_id])\n  @@index([created_by_id])\n  @@index([body(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n}","description":"This operation retrieves all replies (nested comments) under a specific parent comment for a given thread and post. Replies are modeled as discussion_board_comments with their parent_id field referencing the parent comment, and the nesting_level field capturing how deep this comment is in the hierarchy (up to five). The operation returns results with full reply information (text, author, time, nesting, and soft-deletion status), supports filtering by date/user/nesting_level, paginates results for performance, and ensures only non-soft-deleted replies are visible to normal users. Moderators may use additional filters to review hidden/deleted replies. This endpoint is fundamental for rendering threaded conversations and supports sorting (by created_at, nesting_level, etc.).\n\nSecurity: Only authenticated users may see their own hidden/deleted replies; otherwise, replies with deleted_at set are excluded. Moderator/admin roles may receive all results including soft-deleted comments for moderation workflows.","summary":"Paginated, filtered retrieval of all replies to a comment (discussion_board_comments)","parameters":[{"name":"threadId","description":"Target thread's unique identifier (UUID format)","schema":{"type":"string","format":"uuid"}},{"name":"postId","description":"Target post's unique identifier (UUID format)","schema":{"type":"string","format":"uuid"}},{"name":"commentId","description":"Target parent comment's unique identifier (UUID format)","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search/filtering and pagination specification for fetching comment replies.","typeName":"IDiscussionBoardComment.IRequest"},"responseBody":{"description":"Paginated results of replies to the specified parent comment.","typeName":"IPageIDiscussionBoardComment"},"authorizationRoles":["user"],"name":"index","model_name":"discussion_board_comments","soft_delete_column":"deleted_at","authorizationRole":"user","authorizationType":null},{"specification":"Retrieves full detail for an individual reply (nested comment) under a given comment for a post/thread. This operation targets the discussion_board_comments model, which supports rich metadata (author, nesting, timestamps) and links back up to the parent comment, post, and thread. Ensures authorization and soft delete visibility constraints per user role.","path":"/discussionBoard/user/threads/{threadId}/posts/{postId}/comments/{commentId}/replies/{replyId}","method":"get","prisma_schemas":"model discussion_board_comments {\n  id String @id @db.Uuid\n  post_id String @db.Uuid\n  parent_id String? @db.Uuid\n  created_by_id String @db.Uuid\n  body String\n  nesting_level Int @db.Integer\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  post discussion_board_posts @relation(fields: [post_id], references: [id], onDelete: Cascade)\n  parent discussion_board_comments? @relation(\"recursive\", fields: [parent_id], references: [id], onDelete: Cascade)\n  createdBy discussion_board_users @relation(fields: [created_by_id], references: [id], onDelete: Cascade)\n  recursive discussion_board_comments[] @relation(\"recursive\")\n  discussion_board_comment_edit_histories discussion_board_comment_edit_histories[]\n  discussion_board_attachments discussion_board_attachments[]\n  discussion_board_votes discussion_board_votes[]\n  discussion_board_flag_reports discussion_board_flag_reports[]\n  discussion_board_moderation_actions discussion_board_moderation_actions[]\n  discussion_board_notifications discussion_board_notifications[]\n  @@index([post_id, created_at])\n  @@index([parent_id])\n  @@index([created_by_id])\n  @@index([body(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n}","description":"Retrieve the full details of a specific reply (nested comment) belonging to a parent comment under a given thread and post. Replies are tracked in the discussion_board_comments table, with fields including author, content, nesting level (for threaded hierarchy up to 5 levels), creation and update timestamps, and optional soft-delete. For normal users, soft-deleted replies are hidden; moderators/admins may retrieve deleted replies as part of moderation. The full reply object includes links to related post and thread, along with edit history if needed for compliance or audit.\n\nSecurity: User authentication is required. Moderators and admins have extended visibility. Returns not found if reply is not visible in context or access is denied.\n\nUseful for rendering reply context, supporting moderation, or navigating to specific reply locations in the UI.","summary":"Fetch a single reply's detailed information by its ID (discussion_board_comments)","parameters":[{"name":"threadId","description":"Thread UUID to scope lookup","schema":{"type":"string","format":"uuid"}},{"name":"postId","description":"Post UUID for reply context","schema":{"type":"string","format":"uuid"}},{"name":"commentId","description":"Parent comment UUID for reply","schema":{"type":"string","format":"uuid"}},{"name":"replyId","description":"The reply (discussion_board_comments.id) UUID to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full reply record with all relevant metadata.","typeName":"IDiscussionBoardComment"},"authorizationRoles":["user"],"name":"at","model_name":"discussion_board_comments","soft_delete_column":"deleted_at","authorizationRole":"user","authorizationType":null},{"specification":"Creates (posts) a new reply to an existing parent comment under a specific post and thread. This operation inserts a new item into the discussion_board_comments table, with correct parent_id and post_id associations. It enforces validation for reply body, maximum nesting level (5), and author authentication. Soft deletion and edit tracking are enabled for compliance/audit purposes.","path":"/discussionBoard/user/threads/{threadId}/posts/{postId}/comments/{commentId}/replies","method":"post","prisma_schemas":"model discussion_board_comments {\n  id String @id @db.Uuid\n  post_id String @db.Uuid\n  parent_id String? @db.Uuid\n  created_by_id String @db.Uuid\n  body String\n  nesting_level Int @db.Integer\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  post discussion_board_posts @relation(fields: [post_id], references: [id], onDelete: Cascade)\n  parent discussion_board_comments? @relation(\"recursive\", fields: [parent_id], references: [id], onDelete: Cascade)\n  createdBy discussion_board_users @relation(fields: [created_by_id], references: [id], onDelete: Cascade)\n  recursive discussion_board_comments[] @relation(\"recursive\")\n  discussion_board_comment_edit_histories discussion_board_comment_edit_histories[]\n  discussion_board_attachments discussion_board_attachments[]\n  discussion_board_votes discussion_board_votes[]\n  discussion_board_flag_reports discussion_board_flag_reports[]\n  discussion_board_moderation_actions discussion_board_moderation_actions[]\n  discussion_board_notifications discussion_board_notifications[]\n  @@index([post_id, created_at])\n  @@index([parent_id])\n  @@index([created_by_id])\n  @@index([body(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n}","description":"This operation allows an authenticated user to post a new reply beneath an existing comment (as a nested comment) within a thread and post. It records the association via the parent_id and post_id fields, increments the nesting_level, and ensures replies do not exceed a maximum hierarchy depth (usually 5). The request validates presence and length of reply body, checks authorization, and automatically links the reply to the creating user for audit. Soft-deletion and moderation workflows are supported; actions are retained in compliance/audit trails. The response returns the full reply object as created, with standard metadata.","summary":"Create a new reply to a comment (discussion_board_comments)","parameters":[{"name":"threadId","description":"Thread UUID for the reply tree","schema":{"type":"string","format":"uuid"}},{"name":"postId","description":"Post UUID to which this reply belongs","schema":{"type":"string","format":"uuid"}},{"name":"commentId","description":"Parent comment UUID under which to add the reply","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Body, author, and hierarchy details for new reply creation.","typeName":"IDiscussionBoardComment.ICreate"},"responseBody":{"description":"Reply record as created, with all supplied metadata.","typeName":"IDiscussionBoardComment"},"authorizationRoles":["user"],"name":"create","model_name":"discussion_board_comments","soft_delete_column":"deleted_at","authorizationRole":"user","authorizationType":null},{"specification":"Updates an existing reply (nested comment) under a given post/thread/comment using the discussion_board_comments table. Only the author, moderators, or admins can update replies. Validates reply body content, enforces nesting depth rules, and ensures soft-deletion state is respected (cannot update deleted replies unless moderator). Update time is recorded for audit purposes.","path":"/discussionBoard/user/threads/{threadId}/posts/{postId}/comments/{commentId}/replies/{replyId}","method":"put","prisma_schemas":"model discussion_board_comments {\n  id String @id @db.Uuid\n  post_id String @db.Uuid\n  parent_id String? @db.Uuid\n  created_by_id String @db.Uuid\n  body String\n  nesting_level Int @db.Integer\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  post discussion_board_posts @relation(fields: [post_id], references: [id], onDelete: Cascade)\n  parent discussion_board_comments? @relation(\"recursive\", fields: [parent_id], references: [id], onDelete: Cascade)\n  createdBy discussion_board_users @relation(fields: [created_by_id], references: [id], onDelete: Cascade)\n  recursive discussion_board_comments[] @relation(\"recursive\")\n  discussion_board_comment_edit_histories discussion_board_comment_edit_histories[]\n  discussion_board_attachments discussion_board_attachments[]\n  discussion_board_votes discussion_board_votes[]\n  discussion_board_flag_reports discussion_board_flag_reports[]\n  discussion_board_moderation_actions discussion_board_moderation_actions[]\n  discussion_board_notifications discussion_board_notifications[]\n  @@index([post_id, created_at])\n  @@index([parent_id])\n  @@index([created_by_id])\n  @@index([body(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n}","description":"This operation updates the content of an existing reply beneath a comment on a given thread and post. The reply must be active (not soft-deleted), unless a moderator/admin is performing the update. Only the reply's author, moderators, or admins are permitted to update. Fields subject to update include the reply body and optionally status fields. All updates are tracked with edit histories for full audit compliance. Validation rules enforce proper nesting and soft-delete semantics. Returns full reply object with current state.","summary":"Update content of a reply (discussion_board_comments)","parameters":[{"name":"threadId","description":"Thread UUID for reply tree context","schema":{"type":"string","format":"uuid"}},{"name":"postId","description":"Post UUID the reply belongs to","schema":{"type":"string","format":"uuid"}},{"name":"commentId","description":"Parent comment UUID","schema":{"type":"string","format":"uuid"}},{"name":"replyId","description":"Reply UUID to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated reply content and metadata. Only updatable fields are allowed.","typeName":"IDiscussionBoardComment.IUpdate"},"responseBody":{"description":"Reply as updated, including audit metadata.","typeName":"IDiscussionBoardComment"},"authorizationRoles":["user"],"name":"update","model_name":"discussion_board_comments","soft_delete_column":"deleted_at","authorizationRole":"user","authorizationType":null},{"specification":"Deletes (soft-deletes) an individual reply (nested comment) within a comment hierarchy beneath a specific thread and post. This operation marks the target reply's deleted_at field in the discussion_board_comments table, ensuring visibility is restricted for regular users, but reply is retained for moderation, restoration, and regulatory/compliance audit. Only the author, moderators, or admins may delete replies. Moderators/admins may immediately effect deletion, and all actions are tracked for audit purposes.","path":"/discussionBoard/user/threads/{threadId}/posts/{postId}/comments/{commentId}/replies/{replyId}","method":"delete","prisma_schemas":"model discussion_board_comments {\n  id String @id @db.Uuid\n  post_id String @db.Uuid\n  parent_id String? @db.Uuid\n  created_by_id String @db.Uuid\n  body String\n  nesting_level Int @db.Integer\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  post discussion_board_posts @relation(fields: [post_id], references: [id], onDelete: Cascade)\n  parent discussion_board_comments? @relation(\"recursive\", fields: [parent_id], references: [id], onDelete: Cascade)\n  createdBy discussion_board_users @relation(fields: [created_by_id], references: [id], onDelete: Cascade)\n  recursive discussion_board_comments[] @relation(\"recursive\")\n  discussion_board_comment_edit_histories discussion_board_comment_edit_histories[]\n  discussion_board_attachments discussion_board_attachments[]\n  discussion_board_votes discussion_board_votes[]\n  discussion_board_flag_reports discussion_board_flag_reports[]\n  discussion_board_moderation_actions discussion_board_moderation_actions[]\n  discussion_board_notifications discussion_board_notifications[]\n  @@index([post_id, created_at])\n  @@index([parent_id])\n  @@index([created_by_id])\n  @@index([body(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n}","description":"Deletes a specific reply (nested comment) from a comment thread. This operation performs a soft delete by setting the deleted_at timestamp on the targeted reply (discussion_board_comments record). The reply will no longer be visible to standard users but is retained for moderators, possible restoration, and compliance audits. Only the reply author, moderators, or administrators may execute this operation. All deletions are logged for compliance. If a moderator/admin performs the deletion, the system immediately hides the reply from all users. Soft-deleted data can support future recovery, if needed.","summary":"Soft-delete a reply under a comment (discussion_board_comments)","parameters":[{"name":"threadId","description":"Thread UUID","schema":{"type":"string","format":"uuid"}},{"name":"postId","description":"Post UUID","schema":{"type":"string","format":"uuid"}},{"name":"commentId","description":"Parent comment UUID","schema":{"type":"string","format":"uuid"}},{"name":"replyId","description":"Reply UUID (comment id) to be soft-deleted","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["user"],"name":"erase","model_name":"discussion_board_comments","soft_delete_column":"deleted_at","authorizationRole":"user","authorizationType":null},{"specification":"Retrieves a paginated, filtered list of user votes on posts and comments for the discussion board. This operation targets the discussion_board_votes model, which tracks all upvote/downvote actions by users on posts and comments. Filtering supports fields such as user, target type, target id, vote_type, and creation date. Supports pagination and sorting for large-scale voting history review and analytics.","path":"/discussionBoard/user/votes","method":"patch","prisma_schemas":"model discussion_board_votes {\n  id String @id @db.Uuid\n  discussion_board_user_id String @db.Uuid\n  discussion_board_post_id String? @db.Uuid\n  discussion_board_comment_id String? @db.Uuid\n  vote_type String\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  user discussion_board_users @relation(fields: [discussion_board_user_id], references: [id], onDelete: Cascade)\n  post discussion_board_posts? @relation(fields: [discussion_board_post_id], references: [id], onDelete: Cascade)\n  comment discussion_board_comments? @relation(fields: [discussion_board_comment_id], references: [id], onDelete: Cascade)\n  discussion_board_vote_histories discussion_board_vote_histories[]\n  @@unique([discussion_board_user_id, discussion_board_post_id], map: \"discussion_board_votes_discussion_board_user_id_discus_640e3c94\")\n  @@unique([discussion_board_user_id, discussion_board_comment_id], map: \"discussion_board_votes_discussion_board_user_id_discus_e701ad9f\")\n  @@index([created_at])\n  @@index([discussion_board_post_id])\n  @@index([discussion_board_comment_id])\n}","description":"This operation retrieves a searchable, paginated list of all votes (upvotes/downvotes) cast by users on posts and comments. Each vote record is tracked in the discussion_board_votes table and includes links to the voting user, post/comment, vote_type (up/down), timestamps, and soft-delete marker. Filtering options allow result restriction by voter's id, target post/comment, vote type, and creation ranges. Paginated and sorted response enables use in analytics dashboards, user profile voting history, or moderation review panels. Soft-deleted votes are excluded from normal queries; moderators may view for auditing. Essential for engagement analytics and user transparency.","summary":"Search and list user votes with filtering and pagination (discussion_board_votes)","parameters":[],"requestBody":{"description":"Flexible search and pagination options for vote query.","typeName":"IDiscussionBoardVote.IRequest"},"responseBody":{"description":"Paginated vote records list.","typeName":"IPageIDiscussionBoardVote"},"authorizationRoles":["user"],"name":"index","model_name":"discussion_board_votes","soft_delete_column":"deleted_at","authorizationRole":"user","authorizationType":null},{"specification":"Retrieves a specific vote record (upvote/downvote) by its unique identifier. This operation targets the discussion_board_votes table, which encapsulates all voting events on posts/comments for compliance, moderation, and analytics. The operation supports vote history, target context (post/comment), author, and audit details.","path":"/discussionBoard/user/votes/{voteId}","method":"get","prisma_schemas":"model discussion_board_votes {\n  id String @id @db.Uuid\n  discussion_board_user_id String @db.Uuid\n  discussion_board_post_id String? @db.Uuid\n  discussion_board_comment_id String? @db.Uuid\n  vote_type String\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  user discussion_board_users @relation(fields: [discussion_board_user_id], references: [id], onDelete: Cascade)\n  post discussion_board_posts? @relation(fields: [discussion_board_post_id], references: [id], onDelete: Cascade)\n  comment discussion_board_comments? @relation(fields: [discussion_board_comment_id], references: [id], onDelete: Cascade)\n  discussion_board_vote_histories discussion_board_vote_histories[]\n  @@unique([discussion_board_user_id, discussion_board_post_id], map: \"discussion_board_votes_discussion_board_user_id_discus_640e3c94\")\n  @@unique([discussion_board_user_id, discussion_board_comment_id], map: \"discussion_board_votes_discussion_board_user_id_discus_e701ad9f\")\n  @@index([created_at])\n  @@index([discussion_board_post_id])\n  @@index([discussion_board_comment_id])\n}","description":"Get detailed information about a single vote (upvote or downvote) by its vote ID. Each vote object includes details on the voter (user), the target content (post or comment), the type ('up'/'down'), creation and update timestamps, and soft-deletion status. The discussion_board_votes model ensures all votes are unique per user/content target and supports retention for compliance/audit. Normal users may only view their own votes; moderators/admins have extended access for moderation and platform analysis. Provides context for application UI (has user already voted, show vote status, etc.) and audit panels.","summary":"Get a single vote record by its ID (discussion_board_votes)","parameters":[{"name":"voteId","description":"Unique identifier of the vote (UUID format)","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Vote record with all provided metadata.","typeName":"IDiscussionBoardVote"},"authorizationRoles":["user"],"name":"at","model_name":"discussion_board_votes","soft_delete_column":"deleted_at","authorizationRole":"user","authorizationType":null},{"specification":"Records a new user vote, either upvote or downvote, on a post or comment in the discussion board. This operation creates a new entry in the discussion_board_votes table. Enforces unique active vote per user/target, and validates vote_type and permissions as per business rules (cannot vote on own content, no duplicate votes, only 'up'/'down' allowed). Creation triggers analytic updates and audit logs. Voting is a key engagement/feedback signal for posts and comments.","path":"/discussionBoard/user/votes","method":"post","prisma_schemas":"model discussion_board_votes {\n  id String @id @db.Uuid\n  discussion_board_user_id String @db.Uuid\n  discussion_board_post_id String? @db.Uuid\n  discussion_board_comment_id String? @db.Uuid\n  vote_type String\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  user discussion_board_users @relation(fields: [discussion_board_user_id], references: [id], onDelete: Cascade)\n  post discussion_board_posts? @relation(fields: [discussion_board_post_id], references: [id], onDelete: Cascade)\n  comment discussion_board_comments? @relation(fields: [discussion_board_comment_id], references: [id], onDelete: Cascade)\n  discussion_board_vote_histories discussion_board_vote_histories[]\n  @@unique([discussion_board_user_id, discussion_board_post_id], map: \"discussion_board_votes_discussion_board_user_id_discus_640e3c94\")\n  @@unique([discussion_board_user_id, discussion_board_comment_id], map: \"discussion_board_votes_discussion_board_user_id_discus_e701ad9f\")\n  @@index([created_at])\n  @@index([discussion_board_post_id])\n  @@index([discussion_board_comment_id])\n}","description":"This operation creates a new vote (upvote/downvote) for a post or comment. Each vote must be unique per user/content combination. On creation, the system validates vote_type ('up' or 'down'), confirms no duplicate votes, and enforces business rules (no self-voting). On passing validation, the new vote record is inserted with links to user and target, audit timestamps, and vote status. Compliance with analytic and moderation policies is enforced. The returned object contains full vote metadata. Important for recording user engagement and powering content quality algorithms.","summary":"Submit a new vote (upvote/downvote) on a post or comment (discussion_board_votes)","parameters":[],"requestBody":{"description":"Vote creation input: user, content target, vote type ('up'/'down'), audit basis.","typeName":"IDiscussionBoardVote.ICreate"},"responseBody":{"description":"Vote record as created, with full metadata.","typeName":"IDiscussionBoardVote"},"authorizationRoles":["user"],"name":"create","model_name":"discussion_board_votes","soft_delete_column":"deleted_at","authorizationRole":"user","authorizationType":null},{"specification":"This operation updates an existing user vote (either upvote or downvote) on a post or comment. It directly modifies the 'discussion_board_votes' table from the Prisma schema. The operation validates the voteId, ensures the current user is the owner of the vote, and guarantees that only 'up' or 'down' values are accepted for the update. All changes are tracked in the related vote audit trail for compliance. If the vote being updated is associated with a deleted or soft-deleted post/comment or the operation would violate deduplication constraints, the operation is rejected with a business error. Only authenticated users can update their own votes.","path":"/discussionBoard/user/votes/{voteId}","method":"put","prisma_schemas":"model discussion_board_votes {\n  id String @id @db.Uuid\n  discussion_board_user_id String @db.Uuid\n  discussion_board_post_id String? @db.Uuid\n  discussion_board_comment_id String? @db.Uuid\n  vote_type String\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  user discussion_board_users @relation(fields: [discussion_board_user_id], references: [id], onDelete: Cascade)\n  post discussion_board_posts? @relation(fields: [discussion_board_post_id], references: [id], onDelete: Cascade)\n  comment discussion_board_comments? @relation(fields: [discussion_board_comment_id], references: [id], onDelete: Cascade)\n  discussion_board_vote_histories discussion_board_vote_histories[]\n  @@unique([discussion_board_user_id, discussion_board_post_id], map: \"discussion_board_votes_discussion_board_user_id_discus_640e3c94\")\n  @@unique([discussion_board_user_id, discussion_board_comment_id], map: \"discussion_board_votes_discussion_board_user_id_discus_e701ad9f\")\n  @@index([created_at])\n  @@index([discussion_board_post_id])\n  @@index([discussion_board_comment_id])\n}","description":"This API allows an authenticated user to update an existing vote (upvote or downvote) that they have previously cast on a post or comment. The operation validates that the voteId belongs to the current user and that the new vote type is valid ('up' or 'down'), as constrained by the schema. All modifications are logged in the associated history table for audit purposes.\n\nRole-based access control ensures only the owner of the vote may update it. Attempts by other users or unauthenticated actors are denied with a clear error message. The endpoint enforces deduplication rules to prevent duplicate voting by the same user on a single piece of content.\n\nBusiness logic ensures that votes cannot be updated for soft-deleted or deleted content, and any attempts to update non-existent votes will return a not found or access denied error. The response includes the updated vote details for immediate UI feedback.\n\nIf the operation is performed on a vote linked to a soft-deleted post or comment, a business-level error is returned. All updates are reflected in the main table and the detailed vote history log for compliance and traceability. Related endpoints include vote creation (POST), vote retrieval (GET), vote deletion (DELETE), and vote audit trail (GET).","summary":"Update an existing vote (upvote/downvote) for a post or comment by voteId.","parameters":[{"name":"voteId","description":"Target vote's unique identifier to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Information needed to perform the vote update, including the new vote type ('up' or 'down').","typeName":"IDiscussionBoardVote.IUpdate"},"responseBody":{"description":"The updated vote record after successful modification.","typeName":"IDiscussionBoardVote"},"authorizationRoles":["user"],"name":"update","model_name":"discussion_board_votes","soft_delete_column":"deleted_at","authorizationRole":"user","authorizationType":null},{"specification":"This operation permanently deletes (hard deletion, not soft) a vote record from the 'discussion_board_votes' table by a specific voteId. This is permitted only for the authenticated user who owns the vote. It enforces that only the owner may delete their vote and does not permit retrieval after deletion. All deletions are logged in the associated vote history for audit and compliance. The operation cannot be performed on non-existent votes or for votes the user does not own, returning an appropriate error in those cases. The response will confirm the deletion or indicate an error state. No soft delete is used—even though the schema has 'deleted_at', vote deletion removes the row as votes are not meant to be retained once removed by the user.","path":"/discussionBoard/user/votes/{voteId}","method":"delete","prisma_schemas":"model discussion_board_votes {\n  id String @id @db.Uuid\n  discussion_board_user_id String @db.Uuid\n  discussion_board_post_id String? @db.Uuid\n  discussion_board_comment_id String? @db.Uuid\n  vote_type String\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  user discussion_board_users @relation(fields: [discussion_board_user_id], references: [id], onDelete: Cascade)\n  post discussion_board_posts? @relation(fields: [discussion_board_post_id], references: [id], onDelete: Cascade)\n  comment discussion_board_comments? @relation(fields: [discussion_board_comment_id], references: [id], onDelete: Cascade)\n  discussion_board_vote_histories discussion_board_vote_histories[]\n  @@unique([discussion_board_user_id, discussion_board_post_id], map: \"discussion_board_votes_discussion_board_user_id_discus_640e3c94\")\n  @@unique([discussion_board_user_id, discussion_board_comment_id], map: \"discussion_board_votes_discussion_board_user_id_discus_e701ad9f\")\n  @@index([created_at])\n  @@index([discussion_board_post_id])\n  @@index([discussion_board_comment_id])\n}","description":"This API provides a hard deletion operation for votes by their unique voteId. The endpoint validates that the requesting user owns the vote to be deleted and that the vote exists. If the vote does not exist or the user is not authorized, a not-found or forbidden error code is returned.\n\nVote deletions are performed by completely removing the vote record from the database, even though a 'deleted_at' field exists. This is to avoid duplicate voting and maintain integrity with the deduplication logic.\n\nAudit trails are maintained by inserting a deletion event into the vote history, including actor and timestamp, for regulatory and compliance requirements. No restoration is possible after deletion.","summary":"Permanently delete (hard delete) the authenticated user's vote by voteId. This action cannot be undone.","parameters":[{"name":"voteId","description":"Unique identifier of the vote to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["user"],"name":"erase","model_name":"discussion_board_votes","soft_delete_column":null,"authorizationRole":"user","authorizationType":null},{"specification":"This operation provides a paginated, filtered list of all polls attached to a specific post. It operates on the 'discussion_board_polls' table and supports advanced search parameters for postId, poll status (open/closed), poll type (single or multiple choice), and date ranges. Pagination and sorting options are required to handle potentially large poll sets on active posts. This is typically used for administration or detailed post analysis rather than standard user-facing contexts.","path":"/discussionBoard/moderator/posts/{postId}/polls","method":"patch","prisma_schemas":"model discussion_board_polls {\n  id String @id @db.Uuid\n  discussion_board_post_id String @db.Uuid\n  title String\n  description String?\n  multi_choice Boolean\n  opened_at DateTime @db.Timestamptz\n  closed_at DateTime? @db.Timestamptz\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  post discussion_board_posts @relation(fields: [discussion_board_post_id], references: [id], onDelete: Cascade)\n  discussion_board_poll_options discussion_board_poll_options[]\n  discussion_board_poll_votes discussion_board_poll_votes[]\n  @@unique([discussion_board_post_id])\n  @@index([opened_at])\n  @@index([closed_at])\n  @@index([title(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n}","description":"Returns a paginated and filterable list of all polls associated with a specific post, supporting filters such as poll status, type, and date range. This endpoint is intended primarily for moderators and admins for the purpose of audit, review, or bulk analysis rather than regular users.\n\nAccess enforcement ensures that only privileged roles (moderator, admin) can perform bulk retrieval or search of poll data on posts. Payloads are optimized for both search/sort and for integration with UI dashboards.\n\nIf there are no polls for the post, an empty result set is returned with pagination metadata. This endpoint complements single poll GETs and poll management operations.","summary":"Retrieve a filtered, paginated list of polls for a given postId.","parameters":[{"name":"postId","description":"Identifier of the parent post to retrieve polls for.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search, filter, and pagination options for polls associated with the postId.","typeName":"IDiscussionBoardPoll.IRequest"},"responseBody":{"description":"Paginated list of poll summaries for the target post.","typeName":"IPageIDiscussionBoardPoll.ISummary"},"authorizationRoles":["moderator","admin"],"name":"index","model_name":"discussion_board_polls","soft_delete_column":"deleted_at","authorizationRole":"moderator","authorizationType":null},{"specification":"This operation provides a paginated, filtered list of all polls attached to a specific post. It operates on the 'discussion_board_polls' table and supports advanced search parameters for postId, poll status (open/closed), poll type (single or multiple choice), and date ranges. Pagination and sorting options are required to handle potentially large poll sets on active posts. This is typically used for administration or detailed post analysis rather than standard user-facing contexts.","path":"/discussionBoard/admin/posts/{postId}/polls","method":"patch","prisma_schemas":"model discussion_board_polls {\n  id String @id @db.Uuid\n  discussion_board_post_id String @db.Uuid\n  title String\n  description String?\n  multi_choice Boolean\n  opened_at DateTime @db.Timestamptz\n  closed_at DateTime? @db.Timestamptz\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  post discussion_board_posts @relation(fields: [discussion_board_post_id], references: [id], onDelete: Cascade)\n  discussion_board_poll_options discussion_board_poll_options[]\n  discussion_board_poll_votes discussion_board_poll_votes[]\n  @@unique([discussion_board_post_id])\n  @@index([opened_at])\n  @@index([closed_at])\n  @@index([title(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n}","description":"Returns a paginated and filterable list of all polls associated with a specific post, supporting filters such as poll status, type, and date range. This endpoint is intended primarily for moderators and admins for the purpose of audit, review, or bulk analysis rather than regular users.\n\nAccess enforcement ensures that only privileged roles (moderator, admin) can perform bulk retrieval or search of poll data on posts. Payloads are optimized for both search/sort and for integration with UI dashboards.\n\nIf there are no polls for the post, an empty result set is returned with pagination metadata. This endpoint complements single poll GETs and poll management operations.","summary":"Retrieve a filtered, paginated list of polls for a given postId.","parameters":[{"name":"postId","description":"Identifier of the parent post to retrieve polls for.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search, filter, and pagination options for polls associated with the postId.","typeName":"IDiscussionBoardPoll.IRequest"},"responseBody":{"description":"Paginated list of poll summaries for the target post.","typeName":"IPageIDiscussionBoardPoll.ISummary"},"authorizationRoles":["moderator","admin"],"name":"index","model_name":"discussion_board_polls","soft_delete_column":"deleted_at","authorizationRole":"admin","authorizationType":null},{"specification":"This operation returns detailed metadata for a single poll by pollId, including options, vote status, whether the poll is open or closed, and additional descriptive data. Works with the 'discussion_board_polls' schema and returns nested related data for UI display. The API will also indicate if the requesting user has voted and will provide open/closed status based on current timestamps. Intended for all authenticated users. Performs soft-deletion checks for compliance.","path":"/discussionBoard/user/posts/{postId}/polls/{pollId}","method":"get","prisma_schemas":"model discussion_board_polls {\n  id String @id @db.Uuid\n  discussion_board_post_id String @db.Uuid\n  title String\n  description String?\n  multi_choice Boolean\n  opened_at DateTime @db.Timestamptz\n  closed_at DateTime? @db.Timestamptz\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  post discussion_board_posts @relation(fields: [discussion_board_post_id], references: [id], onDelete: Cascade)\n  discussion_board_poll_options discussion_board_poll_options[]\n  discussion_board_poll_votes discussion_board_poll_votes[]\n  @@unique([discussion_board_post_id])\n  @@index([opened_at])\n  @@index([closed_at])\n  @@index([title(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n}","description":"Retrieves the full details of a specific poll by pollId, including poll options, vote counts, and current status (open/closed). If the poll belongs to a soft-deleted post, the operation returns a 'not found' or compliance error. Returns icons or flags for whether poll is multiple choice, and provides the user's voting status if applicable.\n\nThis endpoint is open to any authenticated user. Access may be restricted on soft-deleted content. Errors are accompanied by actionable messages for UI integration.\n\nThis endpoint is usually consumed for rendering poll UIs or for voting interactions in post threads.","summary":"Get detailed metadata for a specific poll on a post by pollId.","parameters":[{"name":"postId","description":"Identifier of the post this poll belongs to.","schema":{"type":"string","format":"uuid"}},{"name":"pollId","description":"Unique identifier of the poll to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The full detailed poll record, including all poll options, current vote counts, and metadata.","typeName":"IDiscussionBoardPoll"},"authorizationRoles":["user"],"name":"at","model_name":"discussion_board_polls","soft_delete_column":"deleted_at","authorizationRole":"user","authorizationType":null},{"specification":"This operation allows a user (with proper privileges) to create a new poll linked to an existing post. The new poll will contain a required title, options, and multi-choice flag. Polls cannot be created on posts that are locked or archived. The operation performs all necessary input validation, including options count and poll constraints as defined by the schema. This writes a new row to the 'discussion_board_polls' table and cascades options creation. Only the author of the post, moderators, or admins may create polls. Audit/compliance logs capture poll creation event.","path":"/discussionBoard/user/posts/{postId}/polls","method":"post","prisma_schemas":"model discussion_board_polls {\n  id String @id @db.Uuid\n  discussion_board_post_id String @db.Uuid\n  title String\n  description String?\n  multi_choice Boolean\n  opened_at DateTime @db.Timestamptz\n  closed_at DateTime? @db.Timestamptz\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  post discussion_board_posts @relation(fields: [discussion_board_post_id], references: [id], onDelete: Cascade)\n  discussion_board_poll_options discussion_board_poll_options[]\n  discussion_board_poll_votes discussion_board_poll_votes[]\n  @@unique([discussion_board_post_id])\n  @@index([opened_at])\n  @@index([closed_at])\n}","description":"Creates a new poll on an existing post by postId. The poll can be single- or multi-choice, with validation enforcing both the poll format and the post's ability to accept new polls (not locked or archived). Only the post author, moderators, and admins can use this endpoint. All input data such as poll title, description, and poll options must meet validation as defined in the request DTO schema.\n\nThe operation logs successful poll creation along with option records for audit and compliance. Attempts to create more than one poll per post or on locked/archived posts are rejected by business logic. Poll creation is atomic—either all records are written or none are saved in case of error.","summary":"Create a new poll attached to an existing post. Only authors, moderators, and admins are allowed.","parameters":[{"name":"postId","description":"Identifier of the post to which the poll is being attached.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Full poll creation data, including required title, options list, and constraints per the schema.","typeName":"IDiscussionBoardPoll.ICreate"},"responseBody":{"description":"The fully defined, created poll record.","typeName":"IDiscussionBoardPoll"},"authorizationRoles":["user","moderator","admin"],"name":"create","model_name":"discussion_board_polls","soft_delete_column":"deleted_at","authorizationRole":"user","authorizationType":null},{"specification":"This operation allows a user (with proper privileges) to create a new poll linked to an existing post. The new poll will contain a required title, options, and multi-choice flag. Polls cannot be created on posts that are locked or archived. The operation performs all necessary input validation, including options count and poll constraints as defined by the schema. This writes a new row to the 'discussion_board_polls' table and cascades options creation. Only the author of the post, moderators, or admins may create polls. Audit/compliance logs capture poll creation event.","path":"/discussionBoard/moderator/posts/{postId}/polls","method":"post","prisma_schemas":"model discussion_board_polls {\n  id String @id @db.Uuid\n  discussion_board_post_id String @db.Uuid\n  title String\n  description String?\n  multi_choice Boolean\n  opened_at DateTime @db.Timestamptz\n  closed_at DateTime? @db.Timestamptz\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  post discussion_board_posts @relation(fields: [discussion_board_post_id], references: [id], onDelete: Cascade)\n  discussion_board_poll_options discussion_board_poll_options[]\n  discussion_board_poll_votes discussion_board_poll_votes[]\n  @@unique([discussion_board_post_id])\n  @@index([opened_at])\n  @@index([closed_at])\n}","description":"Creates a new poll on an existing post by postId. The poll can be single- or multi-choice, with validation enforcing both the poll format and the post's ability to accept new polls (not locked or archived). Only the post author, moderators, and admins can use this endpoint. All input data such as poll title, description, and poll options must meet validation as defined in the request DTO schema.\n\nThe operation logs successful poll creation along with option records for audit and compliance. Attempts to create more than one poll per post or on locked/archived posts are rejected by business logic. Poll creation is atomic—either all records are written or none are saved in case of error.","summary":"Create a new poll attached to an existing post. Only authors, moderators, and admins are allowed.","parameters":[{"name":"postId","description":"Identifier of the post to which the poll is being attached.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Full poll creation data, including required title, options list, and constraints per the schema.","typeName":"IDiscussionBoardPoll.ICreate"},"responseBody":{"description":"The fully defined, created poll record.","typeName":"IDiscussionBoardPoll"},"authorizationRoles":["user","moderator","admin"],"name":"create","model_name":"discussion_board_polls","soft_delete_column":"deleted_at","authorizationRole":"moderator","authorizationType":null},{"specification":"This operation allows a user (with proper privileges) to create a new poll linked to an existing post. The new poll will contain a required title, options, and multi-choice flag. Polls cannot be created on posts that are locked or archived. The operation performs all necessary input validation, including options count and poll constraints as defined by the schema. This writes a new row to the 'discussion_board_polls' table and cascades options creation. Only the author of the post, moderators, or admins may create polls. Audit/compliance logs capture poll creation event.","path":"/discussionBoard/admin/posts/{postId}/polls","method":"post","prisma_schemas":"model discussion_board_polls {\n  id String @id @db.Uuid\n  discussion_board_post_id String @db.Uuid\n  title String\n  description String?\n  multi_choice Boolean\n  opened_at DateTime @db.Timestamptz\n  closed_at DateTime? @db.Timestamptz\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  post discussion_board_posts @relation(fields: [discussion_board_post_id], references: [id], onDelete: Cascade)\n  discussion_board_poll_options discussion_board_poll_options[]\n  discussion_board_poll_votes discussion_board_poll_votes[]\n  @@unique([discussion_board_post_id])\n  @@index([opened_at])\n  @@index([closed_at])\n}","description":"Creates a new poll on an existing post by postId. The poll can be single- or multi-choice, with validation enforcing both the poll format and the post's ability to accept new polls (not locked or archived). Only the post author, moderators, and admins can use this endpoint. All input data such as poll title, description, and poll options must meet validation as defined in the request DTO schema.\n\nThe operation logs successful poll creation along with option records for audit and compliance. Attempts to create more than one poll per post or on locked/archived posts are rejected by business logic. Poll creation is atomic—either all records are written or none are saved in case of error.","summary":"Create a new poll attached to an existing post. Only authors, moderators, and admins are allowed.","parameters":[{"name":"postId","description":"Identifier of the post to which the poll is being attached.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Full poll creation data, including required title, options list, and constraints per the schema.","typeName":"IDiscussionBoardPoll.ICreate"},"responseBody":{"description":"The fully defined, created poll record.","typeName":"IDiscussionBoardPoll"},"authorizationRoles":["user","moderator","admin"],"name":"create","model_name":"discussion_board_polls","soft_delete_column":"deleted_at","authorizationRole":"admin","authorizationType":null},{"specification":"This operation allows update (edit) of an existing poll, such as changing the title, description, or opening/closing the poll. Only post authors, moderators, and admins can perform updates. Editing is disallowed on locked or closed polls. Edits are validated for compliance with all schema constraints. Upon update, all changes are logged for audit and compliance requirements. This operation modifies the 'discussion_board_polls' table in accordance with update semantics.","path":"/discussionBoard/user/posts/{postId}/polls/{pollId}","method":"put","prisma_schemas":"model discussion_board_polls {\n  id String @id @db.Uuid\n  discussion_board_post_id String @db.Uuid\n  title String\n  description String?\n  multi_choice Boolean\n  opened_at DateTime @db.Timestamptz\n  closed_at DateTime? @db.Timestamptz\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  post discussion_board_posts @relation(fields: [discussion_board_post_id], references: [id], onDelete: Cascade)\n  discussion_board_poll_options discussion_board_poll_options[]\n  discussion_board_poll_votes discussion_board_poll_votes[]\n  @@unique([discussion_board_post_id])\n  @@index([opened_at])\n  @@index([closed_at])\n}","description":"Updates an existing poll (such as changing the title, description, or poll window). Only permitted for post authors, moderators, and admins. Locks and closure dates are considered before modification is allowed. Edits must remain compliant with schema and business logic. All updates are logged for compliance, including changes to poll open/close state.\n\nBusiness logic prevents edits on locked or closed polls and ensures that only the correct users (author, moderator, admin) can perform the update. An error is returned if conditions are not met, such as insufficient privileges, locked polls, or invalid state.","summary":"Edit an existing poll on a post. Restricted to authors, moderators, or admins and not allowed if locked/closed.","parameters":[{"name":"postId","description":"Identifier of the post that owns this poll.","schema":{"type":"string","format":"uuid"}},{"name":"pollId","description":"Identifier of the poll to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Poll update information including fields to be modified, such as title, description, and timestamps.","typeName":"IDiscussionBoardPoll.IUpdate"},"responseBody":{"description":"The updated poll record after successful modification.","typeName":"IDiscussionBoardPoll"},"authorizationRoles":["user","moderator","admin"],"name":"update","model_name":"discussion_board_polls","soft_delete_column":"deleted_at","authorizationRole":"user","authorizationType":null},{"specification":"This operation allows update (edit) of an existing poll, such as changing the title, description, or opening/closing the poll. Only post authors, moderators, and admins can perform updates. Editing is disallowed on locked or closed polls. Edits are validated for compliance with all schema constraints. Upon update, all changes are logged for audit and compliance requirements. This operation modifies the 'discussion_board_polls' table in accordance with update semantics.","path":"/discussionBoard/moderator/posts/{postId}/polls/{pollId}","method":"put","prisma_schemas":"model discussion_board_polls {\n  id String @id @db.Uuid\n  discussion_board_post_id String @db.Uuid\n  title String\n  description String?\n  multi_choice Boolean\n  opened_at DateTime @db.Timestamptz\n  closed_at DateTime? @db.Timestamptz\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  post discussion_board_posts @relation(fields: [discussion_board_post_id], references: [id], onDelete: Cascade)\n  discussion_board_poll_options discussion_board_poll_options[]\n  discussion_board_poll_votes discussion_board_poll_votes[]\n  @@unique([discussion_board_post_id])\n  @@index([opened_at])\n  @@index([closed_at])\n}","description":"Updates an existing poll (such as changing the title, description, or poll window). Only permitted for post authors, moderators, and admins. Locks and closure dates are considered before modification is allowed. Edits must remain compliant with schema and business logic. All updates are logged for compliance, including changes to poll open/close state.\n\nBusiness logic prevents edits on locked or closed polls and ensures that only the correct users (author, moderator, admin) can perform the update. An error is returned if conditions are not met, such as insufficient privileges, locked polls, or invalid state.","summary":"Edit an existing poll on a post. Restricted to authors, moderators, or admins and not allowed if locked/closed.","parameters":[{"name":"postId","description":"Identifier of the post that owns this poll.","schema":{"type":"string","format":"uuid"}},{"name":"pollId","description":"Identifier of the poll to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Poll update information including fields to be modified, such as title, description, and timestamps.","typeName":"IDiscussionBoardPoll.IUpdate"},"responseBody":{"description":"The updated poll record after successful modification.","typeName":"IDiscussionBoardPoll"},"authorizationRoles":["user","moderator","admin"],"name":"update","model_name":"discussion_board_polls","soft_delete_column":"deleted_at","authorizationRole":"moderator","authorizationType":null},{"specification":"This operation allows update (edit) of an existing poll, such as changing the title, description, or opening/closing the poll. Only post authors, moderators, and admins can perform updates. Editing is disallowed on locked or closed polls. Edits are validated for compliance with all schema constraints. Upon update, all changes are logged for audit and compliance requirements. This operation modifies the 'discussion_board_polls' table in accordance with update semantics.","path":"/discussionBoard/admin/posts/{postId}/polls/{pollId}","method":"put","prisma_schemas":"model discussion_board_polls {\n  id String @id @db.Uuid\n  discussion_board_post_id String @db.Uuid\n  title String\n  description String?\n  multi_choice Boolean\n  opened_at DateTime @db.Timestamptz\n  closed_at DateTime? @db.Timestamptz\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  post discussion_board_posts @relation(fields: [discussion_board_post_id], references: [id], onDelete: Cascade)\n  discussion_board_poll_options discussion_board_poll_options[]\n  discussion_board_poll_votes discussion_board_poll_votes[]\n  @@unique([discussion_board_post_id])\n  @@index([opened_at])\n  @@index([closed_at])\n}","description":"Updates an existing poll (such as changing the title, description, or poll window). Only permitted for post authors, moderators, and admins. Locks and closure dates are considered before modification is allowed. Edits must remain compliant with schema and business logic. All updates are logged for compliance, including changes to poll open/close state.\n\nBusiness logic prevents edits on locked or closed polls and ensures that only the correct users (author, moderator, admin) can perform the update. An error is returned if conditions are not met, such as insufficient privileges, locked polls, or invalid state.","summary":"Edit an existing poll on a post. Restricted to authors, moderators, or admins and not allowed if locked/closed.","parameters":[{"name":"postId","description":"Identifier of the post that owns this poll.","schema":{"type":"string","format":"uuid"}},{"name":"pollId","description":"Identifier of the poll to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Poll update information including fields to be modified, such as title, description, and timestamps.","typeName":"IDiscussionBoardPoll.IUpdate"},"responseBody":{"description":"The updated poll record after successful modification.","typeName":"IDiscussionBoardPoll"},"authorizationRoles":["user","moderator","admin"],"name":"update","model_name":"discussion_board_polls","soft_delete_column":"deleted_at","authorizationRole":"admin","authorizationType":null},{"specification":"This operation deletes (soft delete) an existing poll from a post, using the poll's unique pollId. The operation prevents deletion if the poll is actively used in locked or archived threads, or if there are ongoing votes (subject to business logic). Only moderators and admins have authority to delete polls for compliance. Upon execution, the endpoint sets the 'deleted_at' field and logs the action for audit. The operation is performed on the 'discussion_board_polls' schema and is fully reversible by restoring the record until physical deletion occurs per retention policy. Attempts to delete non-existent or already soft-deleted polls return an error.","path":"/discussionBoard/moderator/posts/{postId}/polls/{pollId}","method":"delete","prisma_schemas":"model discussion_board_polls {\n  id String @id @db.Uuid\n  discussion_board_post_id String @db.Uuid\n  title String\n  description String?\n  multi_choice Boolean\n  opened_at DateTime @db.Timestamptz\n  closed_at DateTime? @db.Timestamptz\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  post discussion_board_posts @relation(fields: [discussion_board_post_id], references: [id], onDelete: Cascade)\n  discussion_board_poll_options discussion_board_poll_options[]\n  discussion_board_poll_votes discussion_board_poll_votes[]\n  @@unique([discussion_board_post_id])\n  @@index([opened_at])\n  @@index([closed_at])\n}","description":"Deletes (soft delete) a poll attached to a post by setting the 'deleted_at' timestamp. Only moderators and admins can perform poll deletions. The operation is denied if the poll is in active use or is protected by a locked or archived parent post. On success, the poll remains recoverable for compliance until a subsequent hard deletion by a system process. Audit trail logs are created for all deletions. Users without privilege, or those attempting to delete already-soft-deleted polls receive a business error.","summary":"Soft delete a poll attached to a post. Only moderators and admins are authorized.","parameters":[{"name":"postId","description":"Identifier of the parent post for this poll.","schema":{"type":"string","format":"uuid"}},{"name":"pollId","description":"Identifier of the poll to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["moderator","admin"],"name":"erase","model_name":"discussion_board_polls","soft_delete_column":"deleted_at","authorizationRole":"moderator","authorizationType":null},{"specification":"This operation deletes (soft delete) an existing poll from a post, using the poll's unique pollId. The operation prevents deletion if the poll is actively used in locked or archived threads, or if there are ongoing votes (subject to business logic). Only moderators and admins have authority to delete polls for compliance. Upon execution, the endpoint sets the 'deleted_at' field and logs the action for audit. The operation is performed on the 'discussion_board_polls' schema and is fully reversible by restoring the record until physical deletion occurs per retention policy. Attempts to delete non-existent or already soft-deleted polls return an error.","path":"/discussionBoard/admin/posts/{postId}/polls/{pollId}","method":"delete","prisma_schemas":"model discussion_board_polls {\n  id String @id @db.Uuid\n  discussion_board_post_id String @db.Uuid\n  title String\n  description String?\n  multi_choice Boolean\n  opened_at DateTime @db.Timestamptz\n  closed_at DateTime? @db.Timestamptz\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  post discussion_board_posts @relation(fields: [discussion_board_post_id], references: [id], onDelete: Cascade)\n  discussion_board_poll_options discussion_board_poll_options[]\n  discussion_board_poll_votes discussion_board_poll_votes[]\n  @@unique([discussion_board_post_id])\n  @@index([opened_at])\n  @@index([closed_at])\n}","description":"Deletes (soft delete) a poll attached to a post by setting the 'deleted_at' timestamp. Only moderators and admins can perform poll deletions. The operation is denied if the poll is in active use or is protected by a locked or archived parent post. On success, the poll remains recoverable for compliance until a subsequent hard deletion by a system process. Audit trail logs are created for all deletions. Users without privilege, or those attempting to delete already-soft-deleted polls receive a business error.","summary":"Soft delete a poll attached to a post. Only moderators and admins are authorized.","parameters":[{"name":"postId","description":"Identifier of the parent post for this poll.","schema":{"type":"string","format":"uuid"}},{"name":"pollId","description":"Identifier of the poll to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["moderator","admin"],"name":"erase","model_name":"discussion_board_polls","soft_delete_column":"deleted_at","authorizationRole":"admin","authorizationType":null},{"specification":"This operation provides a paginated and filterable list of poll options for a specific poll on a given post. It operates on the 'discussion_board_poll_options' table and supports query options such as text search, sequence/sort, and active/inactive filtering. Primarily used by moderators and admins to audit, review, or manage poll option sets. Soft-deleted options are included only when requested by an admin. Supports UI integration with rich filter controls.","path":"/discussionBoard/moderator/posts/{postId}/polls/{pollId}/pollOptions","method":"patch","prisma_schemas":"model discussion_board_poll_options {\n  id String @id @db.Uuid\n  discussion_board_poll_id String @db.Uuid\n  option_text String\n  sequence Int @db.Integer\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  poll discussion_board_polls @relation(fields: [discussion_board_poll_id], references: [id], onDelete: Cascade)\n  discussion_board_poll_votes discussion_board_poll_votes[]\n  @@unique([discussion_board_poll_id, sequence], map: \"discussion_board_poll_options_discussion_board_poll_id_f27289d5\")\n  @@index([discussion_board_poll_id])\n  @@index([option_text(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n}","description":"Lists and filters poll options for a given pollId, supporting advanced filters (sequence ordering, text match, state). Output is paginated for UI consumption. Moderators and admins use this endpoint for routine audits or quality reviews.\n\nSoft-deleted options are only included in the response when requested by an admin role. Optionally, the endpoint allows sorting by sequence or updated date. This endpoint complements single-poll metadata retrieval and poll option CRUD operations.","summary":"List and filter poll options for a poll on a post. Moderators and admins only.","parameters":[{"name":"postId","description":"Identifier of the parent post for the poll.","schema":{"type":"string","format":"uuid"}},{"name":"pollId","description":"Identifier of the poll whose options are to be listed.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search and pagination input for poll options attached to the given pollId.","typeName":"IDiscussionBoardPollOption.IRequest"},"responseBody":{"description":"Paginated list of poll options for the target poll.","typeName":"IPageIDiscussionBoardPollOption.ISummary"},"authorizationRoles":["moderator","admin"],"name":"index","model_name":"discussion_board_poll_options","soft_delete_column":"deleted_at","authorizationRole":"moderator","authorizationType":null},{"specification":"This operation provides a paginated and filterable list of poll options for a specific poll on a given post. It operates on the 'discussion_board_poll_options' table and supports query options such as text search, sequence/sort, and active/inactive filtering. Primarily used by moderators and admins to audit, review, or manage poll option sets. Soft-deleted options are included only when requested by an admin. Supports UI integration with rich filter controls.","path":"/discussionBoard/admin/posts/{postId}/polls/{pollId}/pollOptions","method":"patch","prisma_schemas":"model discussion_board_poll_options {\n  id String @id @db.Uuid\n  discussion_board_poll_id String @db.Uuid\n  option_text String\n  sequence Int @db.Integer\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  poll discussion_board_polls @relation(fields: [discussion_board_poll_id], references: [id], onDelete: Cascade)\n  discussion_board_poll_votes discussion_board_poll_votes[]\n  @@unique([discussion_board_poll_id, sequence], map: \"discussion_board_poll_options_discussion_board_poll_id_f27289d5\")\n  @@index([discussion_board_poll_id])\n  @@index([option_text(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n}","description":"Lists and filters poll options for a given pollId, supporting advanced filters (sequence ordering, text match, state). Output is paginated for UI consumption. Moderators and admins use this endpoint for routine audits or quality reviews.\n\nSoft-deleted options are only included in the response when requested by an admin role. Optionally, the endpoint allows sorting by sequence or updated date. This endpoint complements single-poll metadata retrieval and poll option CRUD operations.","summary":"List and filter poll options for a poll on a post. Moderators and admins only.","parameters":[{"name":"postId","description":"Identifier of the parent post for the poll.","schema":{"type":"string","format":"uuid"}},{"name":"pollId","description":"Identifier of the poll whose options are to be listed.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search and pagination input for poll options attached to the given pollId.","typeName":"IDiscussionBoardPollOption.IRequest"},"responseBody":{"description":"Paginated list of poll options for the target poll.","typeName":"IPageIDiscussionBoardPollOption.ISummary"},"authorizationRoles":["moderator","admin"],"name":"index","model_name":"discussion_board_poll_options","soft_delete_column":"deleted_at","authorizationRole":"admin","authorizationType":null},{"specification":"Retrieves a single poll option detail for a specific poll attached to a post, providing label, sequence order, and option meta-data for voting use. This operation is critical for displaying the available choices in a poll, enabling the front-end to show the option's label, order, and whether the option is still active. Relies on foreign key relationship between discussion_board_posts, discussion_board_polls, and discussion_board_poll_options. Enforces permissions: only authenticated users can view voting options, and poll ownership rules may apply for privacy.","path":"/discussionBoard/user/posts/{postId}/polls/{pollId}/pollOptions/{pollOptionId}","method":"get","prisma_schemas":"model discussion_board_poll_options {\n  id String @id @db.Uuid\n  discussion_board_poll_id String @db.Uuid\n  option_text String\n  sequence Int @db.Integer\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  poll discussion_board_polls @relation(fields: [discussion_board_poll_id], references: [id], onDelete: Cascade)\n  discussion_board_poll_votes discussion_board_poll_votes[]\n  @@unique([discussion_board_poll_id, sequence], map: \"discussion_board_poll_options_discussion_board_poll_id_f27289d5\")\n  @@index([discussion_board_poll_id])\n  @@index([option_text(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n}","description":"This operation fetches the detailed information of a specific poll option belonging to a poll under a given post. The endpoint requires valid post, poll, and pollOption IDs and is used to retrieve option label, its sequence order, and status for rendering poll voting interfaces, reviewing poll setups, or displaying historical polls for audit or analytics.\n\nAccess is restricted to authenticated users, and additional business logic may filter results based on poll privacy or poll closure status. If a poll or its parent post is deleted or inactive, this operation will respond with a clear error, ensuring compliance with business rules. This endpoint supports admin and moderator review for poll management and troubleshooting.","summary":"Get a specific poll option under a poll attached to a post.","parameters":[{"name":"postId","description":"Unique identifier for the parent post.","schema":{"type":"string","format":"uuid"}},{"name":"pollId","description":"Unique identifier for the poll belonging to the post.","schema":{"type":"string","format":"uuid"}},{"name":"pollOptionId","description":"Unique identifier for the poll option to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Details of the requested poll option, including option text, sequence, and status.","typeName":"IDiscussionBoardPollOption"},"authorizationRoles":["user"],"name":"at","model_name":"discussion_board_poll_options","soft_delete_column":"deleted_at","authorizationRole":"user","authorizationType":null},{"specification":"Creates a new poll option within an existing poll attached to a post. This endpoint is required for authenticated users who wish to add new choices to an open poll. Only poll creators, moderators, or admins are authorized to add new options before voting opens or as allowed by poll lifecycle rules. The endpoint connects the new poll option to its parent poll via a foreign key and ensures unique sequence enforcement per poll.","path":"/discussionBoard/user/posts/{postId}/polls/{pollId}/pollOptions","method":"post","prisma_schemas":"model discussion_board_poll_options {\n  id String @id @db.Uuid\n  discussion_board_poll_id String @db.Uuid\n  option_text String\n  sequence Int @db.Integer\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  poll discussion_board_polls @relation(fields: [discussion_board_poll_id], references: [id], onDelete: Cascade)\n  discussion_board_poll_votes discussion_board_poll_votes[]\n  @@unique([discussion_board_poll_id, sequence], map: \"discussion_board_poll_options_discussion_board_poll_id_f27289d5\")\n  @@index([discussion_board_poll_id])\n  @@index([option_text(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n}","description":"This endpoint allows eligible users to create a new option for a poll that belongs to a specific post. The request requires poll and post context to ensure referential integrity and proper sequence ordering. Validation ensures that the new option label is not duplicated within the same poll, and that the poll is not closed (no options may be added after closure).\n\nOnly authenticated users with correct ownership or moderator/admin roles can perform this action; users may only add options to polls they created or have explicit rights to manage. Moderators and admins may override lifecycle restrictions for extraordinary governance or compliance needs. If the poll is deleted or closed, creation requests are rejected with a clear business error.","summary":"Add a new option to a poll under a post.","parameters":[{"name":"postId","description":"Unique identifier for the parent post.","schema":{"type":"string","format":"uuid"}},{"name":"pollId","description":"Unique identifier for the poll.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Information needed to create a new poll option, including label and optional sequence placement.","typeName":"IDiscussionBoardPollOption.ICreate"},"responseBody":{"description":"The created poll option, with all relevant details.","typeName":"IDiscussionBoardPollOption"},"authorizationRoles":["user"],"name":"create","model_name":"discussion_board_poll_options","soft_delete_column":"deleted_at","authorizationRole":"user","authorizationType":null},{"specification":"Updates an existing poll option in a poll that is part of a post. The operation lets authorized users modify poll option text or sequence prior to poll open or, depending on policy, even after opening for moderation. Access control ensures only poll creators, moderators, or admins can update poll options. The endpoint finds the poll option using postId, pollId, and pollOptionId, with validation to prevent edits on deleted, closed, or locked polls.","path":"/discussionBoard/user/posts/{postId}/polls/{pollId}/pollOptions/{pollOptionId}","method":"put","prisma_schemas":"model discussion_board_poll_options {\n  id String @id @db.Uuid\n  discussion_board_poll_id String @db.Uuid\n  option_text String\n  sequence Int @db.Integer\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  poll discussion_board_polls @relation(fields: [discussion_board_poll_id], references: [id], onDelete: Cascade)\n  discussion_board_poll_votes discussion_board_poll_votes[]\n  @@unique([discussion_board_poll_id, sequence], map: \"discussion_board_poll_options_discussion_board_poll_id_f27289d5\")\n  @@index([discussion_board_poll_id])\n  @@index([option_text(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n}","description":"This endpoint facilitates modification of an existing poll option's label (option_text) or display sequence for a poll under a post. It is used to correct typos, reorder options, or adapt options in active poll drafts. Ownership and poll lifecycle rules are enforced: poll creators may update before voting starts, while moderators and admins may update for policy enforcement or correcting violations.\n\nEdits to options in closed or deleted polls are rejected. All updates are tracked in the audit log for compliance review. If an update attempts to duplicate a sequence or label within the poll, a business error is returned.","summary":"Update a poll option in a poll under a post.","parameters":[{"name":"postId","description":"Unique identifier for the parent post.","schema":{"type":"string","format":"uuid"}},{"name":"pollId","description":"Unique identifier for the parent poll.","schema":{"type":"string","format":"uuid"}},{"name":"pollOptionId","description":"Unique identifier of the poll option to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update for this poll option (label, sequence, etc).","typeName":"IDiscussionBoardPollOption.IUpdate"},"responseBody":{"description":"The updated poll option with new values applied.","typeName":"IDiscussionBoardPollOption"},"authorizationRoles":["user"],"name":"update","model_name":"discussion_board_poll_options","soft_delete_column":"deleted_at","authorizationRole":"user","authorizationType":null},{"specification":"Removes a poll option from a poll under a post. This action performs a soft delete: the poll option is marked with a deleted_at timestamp and hidden from further voting without fully removing the record, supporting audit and moderation. Only poll creators, moderators, or admins may delete an option, and only if poll is not closed or locked (unless moderator/admin override for compliance). The operation enforces referential and business rules to prevent orphaned votes.","path":"/discussionBoard/user/posts/{postId}/polls/{pollId}/pollOptions/{pollOptionId}","method":"delete","prisma_schemas":"model discussion_board_poll_options {\n  id String @id @db.Uuid\n  discussion_board_poll_id String @db.Uuid\n  option_text String\n  sequence Int @db.Integer\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  poll discussion_board_polls @relation(fields: [discussion_board_poll_id], references: [id], onDelete: Cascade)\n  discussion_board_poll_votes discussion_board_poll_votes[]\n  @@unique([discussion_board_poll_id, sequence], map: \"discussion_board_poll_options_discussion_board_poll_id_f27289d5\")\n  @@index([discussion_board_poll_id])\n  @@index([option_text(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n}","description":"Performs a soft deletion of a specific poll option. Once deleted, the option becomes unavailable for user voting but remains in the database for regulatory and audit purposes. Only authorized actors (poll creator, moderator, or admin) may perform deletions. Poll status is checked: options may only be deleted pre-poll open or by privileged roles post-open in the case of abuse, error, or compliance needs.\n\nA deleted poll option cannot be restored via this API; a new option must be created in its place. The endpoint audits all operations for compliance and may trigger notifications depending on notification policy. Errors from trying to delete options in active, locked, or non-existing polls will return explicit business error codes.","summary":"Soft delete a poll option (remove from voting, keep for audit).","parameters":[{"name":"postId","description":"Unique identifier for the parent post.","schema":{"type":"string","format":"uuid"}},{"name":"pollId","description":"Unique identifier for the parent poll.","schema":{"type":"string","format":"uuid"}},{"name":"pollOptionId","description":"Unique identifier for the poll option to be deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["user"],"name":"erase","model_name":"discussion_board_poll_options","soft_delete_column":"deleted_at","authorizationRole":"user","authorizationType":null},{"specification":"Retrieves a filtered, paginated list of all votes for a specific poll, optionally supporting advanced filtering (by user, option, vote time) and sorting. Supports analytics, audit, and exposing public poll results based on poll status and user permissions. Requires appropriate business logic to restrict access to private or ongoing (not-yet-closed) polls if privacy is enforced. Integrates with poll result dashboards and visualizations.","path":"/discussionBoard/user/polls/{pollId}/pollVotes","method":"patch","prisma_schemas":"model discussion_board_poll_votes {\n  id String @id @db.Uuid\n  discussion_board_poll_id String @db.Uuid\n  discussion_board_poll_option_id String @db.Uuid\n  discussion_board_user_id String @db.Uuid\n  created_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  poll discussion_board_polls @relation(fields: [discussion_board_poll_id], references: [id], onDelete: Cascade)\n  option discussion_board_poll_options @relation(fields: [discussion_board_poll_option_id], references: [id], onDelete: Cascade, map: \"discussion_board_poll_votes_discussion_board_poll_opti_b69d4397\")\n  user discussion_board_users @relation(fields: [discussion_board_user_id], references: [id], onDelete: Cascade)\n  @@index([discussion_board_poll_option_id], map: \"discussion_board_poll_votes_discussion_board_poll_opti_19837b8b\")\n  @@index([discussion_board_user_id])\n  @@unique([discussion_board_poll_id, discussion_board_poll_option_id, discussion_board_user_id], map: \"discussion_board_poll_votes_discussion_board_poll_id_d_00a3173e\")\n  @@index([created_at])\n}","description":"Returns a paginated set of poll votes for the specified poll. Useful for poll result tallies, identifying user voting patterns (where permitted), or for situational analysis in audits. Supports advanced query filtering by user, option, date, or vote status (where enabled). May be restricted: in-progress polls may hide full results from regular users but show to creators/moderators, while concluded polls usually expose full voting statistics.\n\nOnly users with authorization (poll creator, moderator/admin, or user who participated) may see full details if the poll is not public. Pagination and sorting are supported. All accesses are logged for compliance as voting data may be sensitive.","summary":"Search and paginate poll votes for a given poll.","parameters":[{"name":"pollId","description":"Unique identifier for the poll whose votes are being searched.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filtering, search, and pagination parameters for poll votes.","typeName":"IDiscussionBoardPollVote.IRequest"},"responseBody":{"description":"A paginated list of poll votes, each with voter and option choice information.","typeName":"IPageIDiscussionBoardPollVote"},"authorizationRoles":["user"],"name":"index","model_name":"discussion_board_poll_votes","soft_delete_column":"deleted_at","authorizationRole":"user","authorizationType":null},{"specification":"Retrieves the details of a specific poll vote by ID for a given poll. Used for showing a user's own voting record, for audit or moderator review, or for systems that support voting transparency. Requires pollId and pollVoteId for precise identification. Only the vote owner, poll creator, moderators, or admins may view sensitive/user-specific votes to prevent privacy leaks.","path":"/discussionBoard/user/polls/{pollId}/pollVotes/{pollVoteId}","method":"get","prisma_schemas":"model discussion_board_poll_votes {\n  id String @id @db.Uuid\n  discussion_board_poll_id String @db.Uuid\n  discussion_board_poll_option_id String @db.Uuid\n  discussion_board_user_id String @db.Uuid\n  created_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  poll discussion_board_polls @relation(fields: [discussion_board_poll_id], references: [id], onDelete: Cascade)\n  option discussion_board_poll_options @relation(fields: [discussion_board_poll_option_id], references: [id], onDelete: Cascade, map: \"discussion_board_poll_votes_discussion_board_poll_opti_b69d4397\")\n  user discussion_board_users @relation(fields: [discussion_board_user_id], references: [id], onDelete: Cascade)\n  @@index([discussion_board_poll_option_id], map: \"discussion_board_poll_votes_discussion_board_poll_opti_19837b8b\")\n  @@index([discussion_board_user_id])\n  @@unique([discussion_board_poll_id, discussion_board_poll_option_id, discussion_board_user_id], map: \"discussion_board_poll_votes_discussion_board_poll_id_d_00a3173e\")\n  @@index([created_at])\n}","description":"Returns the detailed record for a specific poll vote associated with a poll. Commonly used for moderation review or to confirm a user's participation/vote in a poll. Access is strictly controlled—only the owner of the vote, moderators, or admins are permitted to retrieve this information unless poll is configured for full transparency.\n\nPermission checks prevent users from accessing the votes of others unless privileged. Attempting to access non-existent or soft-deleted votes results in clear business errors with appropriate audit logging. Compliance rules may require additional data suppression for certain privacy-sensitive polls.","summary":"Get user voting record for a poll by pollVoteId.","parameters":[{"name":"pollId","description":"Unique identifier for the poll.","schema":{"type":"string","format":"uuid"}},{"name":"pollVoteId","description":"Unique identifier for the poll vote.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed poll vote record including voter, option, and timestamp.","typeName":"IDiscussionBoardPollVote"},"authorizationRoles":["user"],"name":"at","model_name":"discussion_board_poll_votes","soft_delete_column":"deleted_at","authorizationRole":"user","authorizationType":null},{"specification":"Records a user's vote for one or more poll options in an existing poll, enforcing all rules for participation (single/multi-choice, one vote per poll/option, restrictions). This creates a new row in discussion_board_poll_votes for each selected option. Only authenticated users who have not already voted for these options may cast votes. Handles poll privacy, open/closed state, and updates aggregate stats appropriately. Validates poll and option existence, prevents duplicate votes.","path":"/discussionBoard/user/polls/{pollId}/pollVotes","method":"post","prisma_schemas":"model discussion_board_poll_votes {\n  id String @id @db.Uuid\n  discussion_board_poll_id String @db.Uuid\n  discussion_board_poll_option_id String @db.Uuid\n  discussion_board_user_id String @db.Uuid\n  created_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  poll discussion_board_polls @relation(fields: [discussion_board_poll_id], references: [id], onDelete: Cascade)\n  option discussion_board_poll_options @relation(fields: [discussion_board_poll_option_id], references: [id], onDelete: Cascade, map: \"discussion_board_poll_votes_discussion_board_poll_opti_b69d4397\")\n  user discussion_board_users @relation(fields: [discussion_board_user_id], references: [id], onDelete: Cascade)\n  @@index([discussion_board_poll_option_id], map: \"discussion_board_poll_votes_discussion_board_poll_opti_19837b8b\")\n  @@index([discussion_board_user_id])\n  @@unique([discussion_board_poll_id, discussion_board_poll_option_id, discussion_board_user_id], map: \"discussion_board_poll_votes_discussion_board_poll_id_d_00a3173e\")\n  @@index([created_at])\n}","description":"Enables authenticated users to submit their vote in a poll by selecting one or more poll options. The operation enforces poll state (must be open), user eligibility (one vote per option), and respects poll configuration (single-choice or multi-choice). Votes can only be cast if the poll and selected options are active and not marked as deleted.\n\nDuplicate voting, attempts to vote in closed or deleted polls, or invalid option selection will result in explicit error responses. Successful vote submission updates aggregate results and may trigger notification or audit log updates per compliance rules. Voting is traceable to user for transparency and abuse prevention. Multiple votes per poll/option submitted in a batch may be supported for multi-choice polls.","summary":"Vote in a poll (single or multiple choice as poll allows).","parameters":[{"name":"pollId","description":"Unique identifier for the poll to vote in.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Payload describing the vote(s): user-selected poll option(s), batch eligibility, and any relevant assignment data.","typeName":"IDiscussionBoardPollVote.ICreate"},"responseBody":{"description":"Confirmation of created poll vote(s) including option and time.","typeName":"IDiscussionBoardPollVote"},"authorizationRoles":["user"],"name":"create","model_name":"discussion_board_poll_votes","soft_delete_column":"deleted_at","authorizationRole":"user","authorizationType":null},{"specification":"Allows modification (correction/override by moderators/admins) of an existing poll vote, such as if a vote was cast in error or to enforce policy during moderation. Only privileged actors (moderators, admins) or, with specific rules, the vote owner, may update a vote. Ensures idempotency and audit compliance. Normal users are not allowed to update their vote via this endpoint; instead, they should use the voting endpoint when voting is open. All changes are logged for compliance.","path":"/discussionBoard/user/polls/{pollId}/pollVotes/{pollVoteId}","method":"put","prisma_schemas":"model discussion_board_poll_votes {\n  id String @id @db.Uuid\n  discussion_board_poll_id String @db.Uuid\n  discussion_board_poll_option_id String @db.Uuid\n  discussion_board_user_id String @db.Uuid\n  created_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  poll discussion_board_polls @relation(fields: [discussion_board_poll_id], references: [id], onDelete: Cascade)\n  option discussion_board_poll_options @relation(fields: [discussion_board_poll_option_id], references: [id], onDelete: Cascade, map: \"discussion_board_poll_votes_discussion_board_poll_opti_b69d4397\")\n  user discussion_board_users @relation(fields: [discussion_board_user_id], references: [id], onDelete: Cascade)\n  @@index([discussion_board_poll_option_id], map: \"discussion_board_poll_votes_discussion_board_poll_opti_19837b8b\")\n  @@index([discussion_board_user_id])\n  @@unique([discussion_board_poll_id, discussion_board_poll_option_id, discussion_board_user_id], map: \"discussion_board_poll_votes_discussion_board_poll_id_d_00a3173e\")\n  @@index([created_at])\n}","description":"This operation updates the selection or meta-data of a specific poll vote—typically used in moderation cases where an incorrect vote or abuse is detected. Only allowed for privileged users. Ensures that voting rules (such as one vote per poll option per user) are preserved. Changes are tracked in the audit log with old and new states recorded for traceability.\n\nImproper attempts (such as normal users updating votes after submission, or votes in closed/deleted polls) result in explicit business errors. The endpoint validates poll, vote, and user eligibility and ensures all modifications are consistent with poll configuration policies. Audit/compliance and notification hooks are triggered as appropriate.","summary":"Update a poll vote (moderator/admin override or correction).","parameters":[{"name":"pollId","description":"Unique identifier for the target poll.","schema":{"type":"string","format":"uuid"}},{"name":"pollVoteId","description":"Unique identifier of the poll vote.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update in an existing poll vote. Only privileged users allowed.","typeName":"IDiscussionBoardPollVote.IUpdate"},"responseBody":{"description":"The updated poll vote with revised fields as applicable.","typeName":"IDiscussionBoardPollVote"},"authorizationRoles":["user"],"name":"update","model_name":"discussion_board_poll_votes","soft_delete_column":"deleted_at","authorizationRole":"user","authorizationType":null},{"specification":"Retrieves a paginated list of all flag reports submitted by users regarding potentially inappropriate, abusive, or policy-violating posts or comments. The operation allows moderators and administrators to filter, sort, and search flag reports by status, reporter, content type (post/comment), creation date, and reason. This enables efficient moderation triage workflows and prioritization. Operates on the discussion_board_flag_reports table, referencing the associated user, post, or comment and capturing all required details according to business logic and regulatory audit needs.","prisma_schemas":"model discussion_board_flag_reports {\n  id String @id @db.Uuid\n  reporter_id String @db.Uuid\n  post_id String? @db.Uuid\n  comment_id String? @db.Uuid\n  reason String\n  details String?\n  status String\n  reviewed_at DateTime? @db.Timestamptz\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  reporter discussion_board_users @relation(fields: [reporter_id], references: [id], onDelete: Cascade)\n  post discussion_board_posts? @relation(fields: [post_id], references: [id], onDelete: Cascade)\n  comment discussion_board_comments? @relation(fields: [comment_id], references: [id], onDelete: Cascade)\n  discussion_board_appeals discussion_board_appeals[]\n  @@unique([reporter_id, post_id, comment_id], map: \"discussion_board_flag_reports_reporter_id_post_id_comm_7d29473d\")\n  @@index([status])\n  @@index([created_at])\n  @@index([post_id])\n  @@index([comment_id])\n  @@index([details(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n}","authorizationRoles":["moderator","admin"],"description":"Retrieve a paginated list of all content flag reports for moderation review. This endpoint exposes all flag reports submitted by users who have observed inappropriate, abusive, or policy-violating behavior in posts or comments. The operation supports advanced filtering by flag status (pending, triaged, dismissed, accepted, escalated), content type (post/comment), report reason, reporter, creation timestamp, and reviewed status.\n\nThe response is designed for use by moderators and administrators. It allows rapid triage and decision-making on reported content. Integration with user, post, and comment information enables moderators to investigate the flagged context fully. Deleted (soft deleted) reports are excluded from general review lists unless specifically requested, fulfilling audit and compliance expectations.\n\nPagination, sorting, and search capabilities follow platform-wide standards for moderator tooling, enabling large-volume queue management and efficient workflow prioritization.","summary":"Search, filter, and retrieve a paginated list of all user-submitted content flag reports.","parameters":[],"requestBody":{"description":"Filtering, pagination, and sorting criteria for flag report retrieval, with support for status filtering, content type filters, and free-text keyword search.","typeName":"IDiscussionBoardFlagReport.IRequest"},"responseBody":{"description":"Paginated list of flag reports matching the request criteria.","typeName":"IPageIDiscussionBoardFlagReport.ISummary"},"name":"index","path":"/discussionBoard/moderator/flagReports","method":"patch","model_name":"discussion_board_flag_reports","soft_delete_column":"deleted_at","authorizationRole":"moderator","authorizationType":null},{"specification":"Retrieves a single content flag report, specified by its unique ID. Returns full details including the reporting user, flagged post or comment, report reason, review status, and timestamps. This endpoint enables moderators and admins to investigate individual reports and associated context for moderation or audit purposes. Operates on the discussion_board_flag_reports table and returns a complete entity view for internal review screens or detailed status displays.","prisma_schemas":"model discussion_board_flag_reports {\n  id String @id @db.Uuid\n  reporter_id String @db.Uuid\n  post_id String? @db.Uuid\n  comment_id String? @db.Uuid\n  reason String\n  details String?\n  status String\n  reviewed_at DateTime? @db.Timestamptz\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  reporter discussion_board_users @relation(fields: [reporter_id], references: [id], onDelete: Cascade)\n  post discussion_board_posts? @relation(fields: [post_id], references: [id], onDelete: Cascade)\n  comment discussion_board_comments? @relation(fields: [comment_id], references: [id], onDelete: Cascade)\n  discussion_board_appeals discussion_board_appeals[]\n  @@unique([reporter_id, post_id, comment_id], map: \"discussion_board_flag_reports_reporter_id_post_id_comm_7d29473d\")\n  @@index([status])\n  @@index([created_at])\n  @@index([post_id])\n  @@index([comment_id])\n  @@index([details(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n}","authorizationRoles":["moderator","admin"],"description":"Retrieve the full details of a specific content flag report identified by its unique flagReportId. The operation exposes all relevant report information, including the reporter identities (user), flagged post/comment context, reason for reporting, and all review lifecycle metadata.\n\nIntended for use by moderators and admins for in-depth investigation or audit. Includes review timestamps, moderation actions, and status (pending, dismissed, accepted, escalated, etc.). The endpoint enforces required permission checks to restrict detailed report data to authorized staff only.\n\nThis endpoint supports business logic for moderation triage, follow-up actions, audit trails, and compliance with transparency requirements.","summary":"Retrieve details of a single content flag report by its unique identifier.","parameters":[{"name":"flagReportId","description":"Unique identifier of the flag report to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information about the requested flag report and its moderation/review status.","typeName":"IDiscussionBoardFlagReport"},"name":"at","path":"/discussionBoard/moderator/flagReports/{flagReportId}","method":"get","model_name":"discussion_board_flag_reports","soft_delete_column":"deleted_at","authorizationRole":"moderator","authorizationType":null},{"specification":"Creates a new content flag report when a user flags a post or comment for inappropriate, abusive, or policy-violating content. This operation records all required details — including the reporting user, associated post or comment, reason for reporting, any additional justification, and sets the status as pending review. The operation ensures all primary flagging requirements are satisfied, supporting moderation workflows, community safety, and audit compliance. Operates on the discussion_board_flag_reports table. Duplicate reporting by the same user for the same post or comment is not permitted by unique ticket constraint.","prisma_schemas":"model discussion_board_flag_reports {\n  id String @id @db.Uuid\n  reporter_id String @db.Uuid\n  post_id String? @db.Uuid\n  comment_id String? @db.Uuid\n  reason String\n  details String?\n  status String\n  reviewed_at DateTime? @db.Timestamptz\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  reporter discussion_board_users @relation(fields: [reporter_id], references: [id], onDelete: Cascade)\n  post discussion_board_posts? @relation(fields: [post_id], references: [id], onDelete: Cascade)\n  comment discussion_board_comments? @relation(fields: [comment_id], references: [id], onDelete: Cascade)\n  discussion_board_appeals discussion_board_appeals[]\n  @@unique([reporter_id, post_id, comment_id], map: \"discussion_board_flag_reports_reporter_id_post_id_comm_7d29473d\")\n  @@index([status])\n  @@index([created_at])\n  @@index([post_id])\n  @@index([comment_id])\n  @@index([details(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n}","authorizationRoles":["user"],"description":"Create a new flag report in response to a user's request to flag content. This operation requires the reporting user to provide a valid reason category (e.g., 'abuse', 'spam', 'misinformation') and optionally include detailed justification. The API ensures all necessary information is provided and stored securely, allowing future moderation triage. Duplicate flag submissions by the same user for the same content are prevented.\n\nUpon successful submission, the flag report is set as 'pending' and queued for moderator review. If the flagged item has already exceeded a reporting threshold, it may be automatically hidden from public view pending review. The response includes the new flag report's unique identifier and associated metadata for user feedback and moderation queueing.\n\nThe endpoint enforces permissions to restrict flag submission to authenticated users in good standing (not suspended or banned).","summary":"Flag a post or comment by creating a new user content flag report.","parameters":[],"requestBody":{"description":"Details of the flagged content, the reason, and any extra justification from the reporting user.","typeName":"IDiscussionBoardFlagReport.ICreate"},"responseBody":{"description":"The newly created flag report, including unique identifier and all provided attributes.","typeName":"IDiscussionBoardFlagReport"},"name":"create","path":"/discussionBoard/user/flagReports","method":"post","model_name":"discussion_board_flag_reports","soft_delete_column":"deleted_at","authorizationRole":"user","authorizationType":null},{"specification":"Update an existing flag report, typically to mark it as triaged, change its review status, or adjust report details during moderation processing. Only accessible to moderators and admins. This API supports moderator workflows for managing the flag review queue, updating review timestamps, and keeping audit trails of workflow decisions. Operates on the discussion_board_flag_reports table. Only allows modification of fields authorized by business logic and schema constraints — e.g., status, reviewed_at, and moderator notes. Does not permit arbitrary overwriting of immutable data such as the original reporter or flagged content identity.","prisma_schemas":"model discussion_board_flag_reports {\n  id String @id @db.Uuid\n  reporter_id String @db.Uuid\n  post_id String? @db.Uuid\n  comment_id String? @db.Uuid\n  reason String\n  details String?\n  status String\n  reviewed_at DateTime? @db.Timestamptz\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  reporter discussion_board_users @relation(fields: [reporter_id], references: [id], onDelete: Cascade)\n  post discussion_board_posts? @relation(fields: [post_id], references: [id], onDelete: Cascade)\n  comment discussion_board_comments? @relation(fields: [comment_id], references: [id], onDelete: Cascade)\n  discussion_board_appeals discussion_board_appeals[]\n  @@unique([reporter_id, post_id, comment_id], map: \"discussion_board_flag_reports_reporter_id_post_id_comm_7d29473d\")\n  @@index([status])\n  @@index([created_at])\n  @@index([post_id])\n  @@index([comment_id])\n  @@index([details(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n}","authorizationRoles":["moderator","admin"],"description":"Update an existing content flag report as part of the moderation workflow. Moderators and admins may change the status (such as from 'pending' to 'triaged', 'accepted', 'dismissed', or 'escalated'), set reviewed timestamps, or update moderator notes based on the investigation outcome.\n\nImmutable fields such as reporter, post, comment, and original submission data remain unchanged. The operation enforces audit trails by updating the updated_at field and may append moderator comments as permitted by schema and business rules. Fields subject to update must reflect business process constraints and ensure accuracy for compliance review.\n\nPermission checks require the actor to have moderator or admin status. The API response includes the updated flag report entity for further workflow integration, such as status display or audit export.","summary":"Update an existing content flag report to reflect review or status changes.","parameters":[{"name":"flagReportId","description":"Unique identifier of the flag report to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update in the flag report; typically moderation status and notes.","typeName":"IDiscussionBoardFlagReport.IUpdate"},"responseBody":{"description":"The updated flag report, including new status, moderation processing timestamps, and reviewer notes.","typeName":"IDiscussionBoardFlagReport"},"name":"update","path":"/discussionBoard/moderator/flagReports/{flagReportId}","method":"put","model_name":"discussion_board_flag_reports","soft_delete_column":"deleted_at","authorizationRole":"moderator","authorizationType":null},{"specification":"Deletes (soft deletes) a content flag report specified by unique flagReportId, typically as part of administrative or moderation queue maintenance. The operation marks the flag report record as deleted_at (soft deletion), retaining the entry in the database for audit, compliance, and future investigation while excluding it from standard flag queues. Operates on the discussion_board_flag_reports table and enforces role-based access. Actual hard delete is not performed to preserve the moderation audit trail as mandated by platform compliance policies.","prisma_schemas":"model discussion_board_flag_reports {\n  id String @id @db.Uuid\n  reporter_id String @db.Uuid\n  post_id String? @db.Uuid\n  comment_id String? @db.Uuid\n  reason String\n  details String?\n  status String\n  reviewed_at DateTime? @db.Timestamptz\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  reporter discussion_board_users @relation(fields: [reporter_id], references: [id], onDelete: Cascade)\n  post discussion_board_posts? @relation(fields: [post_id], references: [id], onDelete: Cascade)\n  comment discussion_board_comments? @relation(fields: [comment_id], references: [id], onDelete: Cascade)\n  discussion_board_appeals discussion_board_appeals[]\n  @@unique([reporter_id, post_id, comment_id], map: \"discussion_board_flag_reports_reporter_id_post_id_comm_7d29473d\")\n  @@index([status])\n  @@index([created_at])\n  @@index([post_id])\n  @@index([comment_id])\n  @@index([details(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n}","authorizationRoles":["moderator","admin"],"description":"Perform a soft deletion of a content flag report, removing it from routine moderation review and user interfaces while preserving the record for compliance, investigation, and future audits. This operation sets the deleted_at field to the current timestamp, making the entry invisible to ordinary queries but retrievable for privileged or audit access as needed by policy.\n\nOnly moderators and administrators may execute this operation. The deletion does not erase the original report details, context, or review history, in alignment with documented business requirements for compliance and moderation trace reliability.","summary":"Soft delete a content flag report by marking it as deleted (retained for compliance).","parameters":[{"name":"flagReportId","description":"Unique identifier of the flag report to delete (soft delete).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"name":"erase","path":"/discussionBoard/moderator/flagReports/{flagReportId}","method":"delete","model_name":"discussion_board_flag_reports","soft_delete_column":"deleted_at","authorizationRole":"moderator","authorizationType":null},{"specification":"Retrieve a paginated, filtered list of all moderation actions performed on posts, comments, or users. This operation is essential for compliance audits, moderator activity review, and operational reporting. Moderators and admins can apply filters by action type, actor, affected entity, and date range.","path":"/discussionBoard/moderator/moderationActions","method":"patch","prisma_schemas":"model discussion_board_moderation_actions {\n  id String @id @db.Uuid\n  moderator_id String @db.Uuid\n  user_id String? @db.Uuid\n  post_id String? @db.Uuid\n  comment_id String? @db.Uuid\n  action_type String\n  action_reason String\n  details String?\n  effective_from DateTime @db.Timestamptz\n  effective_until DateTime? @db.Timestamptz\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  moderator discussion_board_moderators @relation(fields: [moderator_id], references: [id], onDelete: Cascade)\n  user discussion_board_users? @relation(fields: [user_id], references: [id], onDelete: Cascade)\n  post discussion_board_posts? @relation(fields: [post_id], references: [id], onDelete: Cascade)\n  comment discussion_board_comments? @relation(fields: [comment_id], references: [id], onDelete: Cascade)\n  discussion_board_moderation_audit_logs discussion_board_moderation_audit_logs[]\n  discussion_board_appeals discussion_board_appeals[]\n  discussion_board_escalation_logs discussion_board_escalation_logs[]\n  @@unique([moderator_id, user_id, post_id, comment_id, action_type, created_at], map: \"discussion_board_moderation_actions_moderator_id_user__0c91b139\")\n  @@index([action_type])\n  @@index([created_at])\n  @@index([user_id])\n  @@index([post_id])\n  @@index([comment_id])\n  @@index([details(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n}\n","description":"Fetch a paginated and optionally filtered list of all moderation actions, such as removal, warning, edit, restrict, restore, or escalate, performed by moderators and admins. Enables management and review of platform moderation events for auditability and staff training.\n\nThe list supports filtering by actor (moderator), target user/content, date window, and action type. This is a privileged endpoint requiring at least moderator role.","summary":"Search and review moderation actions taken on posts, users, and comments.","parameters":[],"requestBody":{"description":"Pagination, filter, and search parameters for moderation actions.","typeName":"IDiscussionBoardModerationAction.IRequest"},"responseBody":{"description":"Paginated moderation action summaries matching search criteria.","typeName":"IPageIDiscussionBoardModerationAction.ISummary"},"authorizationRoles":["moderator"],"name":"index","model_name":"discussion_board_moderation_actions","soft_delete_column":"deleted_at","authorizationRole":"moderator","authorizationType":null},{"specification":"Get the detailed record for a specific moderation action, including responsible moderator, target user/content, action type, reason, and associated timeline. Allows in-depth audit and compliance review.","path":"/discussionBoard/moderator/moderationActions/{moderationActionId}","method":"get","prisma_schemas":"model discussion_board_moderation_actions {\n  id String @id @db.Uuid\n  moderator_id String @db.Uuid\n  user_id String? @db.Uuid\n  post_id String? @db.Uuid\n  comment_id String? @db.Uuid\n  action_type String\n  action_reason String\n  details String?\n  effective_from DateTime @db.Timestamptz\n  effective_until DateTime? @db.Timestamptz\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  moderator discussion_board_moderators @relation(fields: [moderator_id], references: [id], onDelete: Cascade)\n  user discussion_board_users? @relation(fields: [user_id], references: [id], onDelete: Cascade)\n  post discussion_board_posts? @relation(fields: [post_id], references: [id], onDelete: Cascade)\n  comment discussion_board_comments? @relation(fields: [comment_id], references: [id], onDelete: Cascade)\n  discussion_board_moderation_audit_logs discussion_board_moderation_audit_logs[]\n  discussion_board_appeals discussion_board_appeals[]\n  discussion_board_escalation_logs discussion_board_escalation_logs[]\n  @@unique([moderator_id, user_id, post_id, comment_id, action_type, created_at], map: \"discussion_board_moderation_actions_moderator_id_user__0c91b139\")\n  @@index([action_type])\n  @@index([created_at])\n  @@index([user_id])\n  @@index([post_id])\n  @@index([comment_id])\n  @@index([details(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n}\n","description":"Retrieve the full detail of a specific moderation action, including all relational context and action notes. Accessible only by moderation staff for security, audit, and operational clarity.\n\nEnsures compliance requirements regarding moderation transparency and traceability are met, supporting integrity in community governance.","summary":"Get details of a specific moderation action taken by staff.","parameters":[{"name":"moderationActionId","description":"Unique identifier of the moderation action to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Complete moderation action record with all details and relationships.","typeName":"IDiscussionBoardModerationAction"},"authorizationRoles":["moderator"],"name":"at","model_name":"discussion_board_moderation_actions","soft_delete_column":"deleted_at","authorizationRole":"moderator","authorizationType":null},{"specification":"Retrieves a paginated list of all flag reports submitted by users regarding potentially inappropriate, abusive, or policy-violating posts or comments. The operation allows moderators and administrators to filter, sort, and search flag reports by status, reporter, content type (post/comment), creation date, and reason. This enables efficient moderation triage workflows and prioritization. Operates on the discussion_board_flag_reports table, referencing the associated user, post, or comment and capturing all required details according to business logic and regulatory audit needs.","prisma_schemas":"model discussion_board_flag_reports {\n  id String @id @db.Uuid\n  reporter_id String @db.Uuid\n  post_id String? @db.Uuid\n  comment_id String? @db.Uuid\n  reason String\n  details String?\n  status String\n  reviewed_at DateTime? @db.Timestamptz\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  reporter discussion_board_users @relation(fields: [reporter_id], references: [id], onDelete: Cascade)\n  post discussion_board_posts? @relation(fields: [post_id], references: [id], onDelete: Cascade)\n  comment discussion_board_comments? @relation(fields: [comment_id], references: [id], onDelete: Cascade)\n  discussion_board_appeals discussion_board_appeals[]\n  @@unique([reporter_id, post_id, comment_id], map: \"discussion_board_flag_reports_reporter_id_post_id_comm_7d29473d\")\n  @@index([status])\n  @@index([created_at])\n  @@index([post_id])\n  @@index([comment_id])\n  @@index([details(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n}","authorizationRoles":["moderator","admin"],"description":"Retrieve a paginated list of all content flag reports for moderation review. This endpoint exposes all flag reports submitted by users who have observed inappropriate, abusive, or policy-violating behavior in posts or comments. The operation supports advanced filtering by flag status (pending, triaged, dismissed, accepted, escalated), content type (post/comment), report reason, reporter, creation timestamp, and reviewed status.\n\nThe response is designed for use by moderators and administrators. It allows rapid triage and decision-making on reported content. Integration with user, post, and comment information enables moderators to investigate the flagged context fully. Deleted (soft deleted) reports are excluded from general review lists unless specifically requested, fulfilling audit and compliance expectations.\n\nPagination, sorting, and search capabilities follow platform-wide standards for moderator tooling, enabling large-volume queue management and efficient workflow prioritization.","summary":"Search, filter, and retrieve a paginated list of all user-submitted content flag reports.","parameters":[],"requestBody":{"description":"Filtering, pagination, and sorting criteria for flag report retrieval, with support for status filtering, content type filters, and free-text keyword search.","typeName":"IDiscussionBoardFlagReport.IRequest"},"responseBody":{"description":"Paginated list of flag reports matching the request criteria.","typeName":"IPageIDiscussionBoardFlagReport.ISummary"},"name":"index","path":"/discussionBoard/admin/flagReports","method":"patch","model_name":"discussion_board_flag_reports","soft_delete_column":"deleted_at","authorizationRole":"admin","authorizationType":null},{"specification":"Retrieves a single content flag report, specified by its unique ID. Returns full details including the reporting user, flagged post or comment, report reason, review status, and timestamps. This endpoint enables moderators and admins to investigate individual reports and associated context for moderation or audit purposes. Operates on the discussion_board_flag_reports table and returns a complete entity view for internal review screens or detailed status displays.","prisma_schemas":"model discussion_board_flag_reports {\n  id String @id @db.Uuid\n  reporter_id String @db.Uuid\n  post_id String? @db.Uuid\n  comment_id String? @db.Uuid\n  reason String\n  details String?\n  status String\n  reviewed_at DateTime? @db.Timestamptz\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  reporter discussion_board_users @relation(fields: [reporter_id], references: [id], onDelete: Cascade)\n  post discussion_board_posts? @relation(fields: [post_id], references: [id], onDelete: Cascade)\n  comment discussion_board_comments? @relation(fields: [comment_id], references: [id], onDelete: Cascade)\n  discussion_board_appeals discussion_board_appeals[]\n  @@unique([reporter_id, post_id, comment_id], map: \"discussion_board_flag_reports_reporter_id_post_id_comm_7d29473d\")\n  @@index([status])\n  @@index([created_at])\n  @@index([post_id])\n  @@index([comment_id])\n  @@index([details(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n}","authorizationRoles":["moderator","admin"],"description":"Retrieve the full details of a specific content flag report identified by its unique flagReportId. The operation exposes all relevant report information, including the reporter identities (user), flagged post/comment context, reason for reporting, and all review lifecycle metadata.\n\nIntended for use by moderators and admins for in-depth investigation or audit. Includes review timestamps, moderation actions, and status (pending, dismissed, accepted, escalated, etc.). The endpoint enforces required permission checks to restrict detailed report data to authorized staff only.\n\nThis endpoint supports business logic for moderation triage, follow-up actions, audit trails, and compliance with transparency requirements.","summary":"Retrieve details of a single content flag report by its unique identifier.","parameters":[{"name":"flagReportId","description":"Unique identifier of the flag report to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information about the requested flag report and its moderation/review status.","typeName":"IDiscussionBoardFlagReport"},"name":"at","path":"/discussionBoard/admin/flagReports/{flagReportId}","method":"get","model_name":"discussion_board_flag_reports","soft_delete_column":"deleted_at","authorizationRole":"admin","authorizationType":null},{"specification":"Update an existing flag report, typically to mark it as triaged, change its review status, or adjust report details during moderation processing. Only accessible to moderators and admins. This API supports moderator workflows for managing the flag review queue, updating review timestamps, and keeping audit trails of workflow decisions. Operates on the discussion_board_flag_reports table. Only allows modification of fields authorized by business logic and schema constraints — e.g., status, reviewed_at, and moderator notes. Does not permit arbitrary overwriting of immutable data such as the original reporter or flagged content identity.","prisma_schemas":"model discussion_board_flag_reports {\n  id String @id @db.Uuid\n  reporter_id String @db.Uuid\n  post_id String? @db.Uuid\n  comment_id String? @db.Uuid\n  reason String\n  details String?\n  status String\n  reviewed_at DateTime? @db.Timestamptz\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  reporter discussion_board_users @relation(fields: [reporter_id], references: [id], onDelete: Cascade)\n  post discussion_board_posts? @relation(fields: [post_id], references: [id], onDelete: Cascade)\n  comment discussion_board_comments? @relation(fields: [comment_id], references: [id], onDelete: Cascade)\n  discussion_board_appeals discussion_board_appeals[]\n  @@unique([reporter_id, post_id, comment_id], map: \"discussion_board_flag_reports_reporter_id_post_id_comm_7d29473d\")\n  @@index([status])\n  @@index([created_at])\n  @@index([post_id])\n  @@index([comment_id])\n  @@index([details(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n}","authorizationRoles":["moderator","admin"],"description":"Update an existing content flag report as part of the moderation workflow. Moderators and admins may change the status (such as from 'pending' to 'triaged', 'accepted', 'dismissed', or 'escalated'), set reviewed timestamps, or update moderator notes based on the investigation outcome.\n\nImmutable fields such as reporter, post, comment, and original submission data remain unchanged. The operation enforces audit trails by updating the updated_at field and may append moderator comments as permitted by schema and business rules. Fields subject to update must reflect business process constraints and ensure accuracy for compliance review.\n\nPermission checks require the actor to have moderator or admin status. The API response includes the updated flag report entity for further workflow integration, such as status display or audit export.","summary":"Update an existing content flag report to reflect review or status changes.","parameters":[{"name":"flagReportId","description":"Unique identifier of the flag report to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update in the flag report; typically moderation status and notes.","typeName":"IDiscussionBoardFlagReport.IUpdate"},"responseBody":{"description":"The updated flag report, including new status, moderation processing timestamps, and reviewer notes.","typeName":"IDiscussionBoardFlagReport"},"name":"update","path":"/discussionBoard/admin/flagReports/{flagReportId}","method":"put","model_name":"discussion_board_flag_reports","soft_delete_column":"deleted_at","authorizationRole":"admin","authorizationType":null},{"specification":"Deletes (soft deletes) a content flag report specified by unique flagReportId, typically as part of administrative or moderation queue maintenance. The operation marks the flag report record as deleted_at (soft deletion), retaining the entry in the database for audit, compliance, and future investigation while excluding it from standard flag queues. Operates on the discussion_board_flag_reports table and enforces role-based access. Actual hard delete is not performed to preserve the moderation audit trail as mandated by platform compliance policies.","prisma_schemas":"model discussion_board_flag_reports {\n  id String @id @db.Uuid\n  reporter_id String @db.Uuid\n  post_id String? @db.Uuid\n  comment_id String? @db.Uuid\n  reason String\n  details String?\n  status String\n  reviewed_at DateTime? @db.Timestamptz\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  reporter discussion_board_users @relation(fields: [reporter_id], references: [id], onDelete: Cascade)\n  post discussion_board_posts? @relation(fields: [post_id], references: [id], onDelete: Cascade)\n  comment discussion_board_comments? @relation(fields: [comment_id], references: [id], onDelete: Cascade)\n  discussion_board_appeals discussion_board_appeals[]\n  @@unique([reporter_id, post_id, comment_id], map: \"discussion_board_flag_reports_reporter_id_post_id_comm_7d29473d\")\n  @@index([status])\n  @@index([created_at])\n  @@index([post_id])\n  @@index([comment_id])\n  @@index([details(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n}","authorizationRoles":["moderator","admin"],"description":"Perform a soft deletion of a content flag report, removing it from routine moderation review and user interfaces while preserving the record for compliance, investigation, and future audits. This operation sets the deleted_at field to the current timestamp, making the entry invisible to ordinary queries but retrievable for privileged or audit access as needed by policy.\n\nOnly moderators and administrators may execute this operation. The deletion does not erase the original report details, context, or review history, in alignment with documented business requirements for compliance and moderation trace reliability.","summary":"Soft delete a content flag report by marking it as deleted (retained for compliance).","parameters":[{"name":"flagReportId","description":"Unique identifier of the flag report to delete (soft delete).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"name":"erase","path":"/discussionBoard/admin/flagReports/{flagReportId}","method":"delete","model_name":"discussion_board_flag_reports","soft_delete_column":"deleted_at","authorizationRole":"admin","authorizationType":null},{"specification":"This operation allows a moderator or admin to create a new moderation action, such as warning, muting, removing, editing, restricting, restoring, or escalating actions against users, posts, or comments. The moderation_actions table in the Prisma schema represents all actionable moderation decisions and is referenced for compliance, audit, and content management functionality. The action can target a user, a post, or a comment; the actor must have moderation privileges and the action is logged for compliance/audit. Business logic will ensure appropriate validation and linkage with the related entities. Mod actions are critical for upholding community guidelines, dealing with abuse, and maintaining a robust record of enforcement across the discussion board.","prisma_schemas":"model discussion_board_moderation_actions {\n  id String @id @db.Uuid\n  moderator_id String @db.Uuid\n  user_id String? @db.Uuid\n  post_id String? @db.Uuid\n  comment_id String? @db.Uuid\n  action_type String\n  action_reason String\n  details String?\n  effective_from DateTime @db.Timestamptz\n  effective_until DateTime? @db.Timestamptz\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  moderator discussion_board_moderators @relation(fields: [moderator_id], references: [id], onDelete: Cascade)\n  user discussion_board_users? @relation(fields: [user_id], references: [id], onDelete: Cascade)\n  post discussion_board_posts? @relation(fields: [post_id], references: [id], onDelete: Cascade)\n  comment discussion_board_comments? @relation(fields: [comment_id], references: [id], onDelete: Cascade)\n  discussion_board_moderation_audit_logs discussion_board_moderation_audit_logs[]\n  discussion_board_appeals discussion_board_appeals[]\n  discussion_board_escalation_logs discussion_board_escalation_logs[]\n  @@unique([moderator_id, user_id, post_id, comment_id, action_type, created_at], map: \"discussion_board_moderation_actions_moderator_id_user__0c91b139\")\n  @@index([action_type])\n  @@index([created_at])\n  @@index([user_id])\n  @@index([post_id])\n  @@index([comment_id])\n  @@index([details(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n}","description":"Create a new moderation action record to log activity performed by moderators or admins for enforcement of platform policies. This includes actions against users, posts, or comments—such as warning, restricting, muting, removing, or restoring content. The API requires identifying the acting moderator, the target (user, post, or comment), specifying the type of moderation action (e.g., warn, mute, remove, restore), the reason for the action, and relevant effective timing. All actions are recorded in the moderation_actions schema for audit and compliance.\n\nSecurity is ensured by restricting this endpoint to users with moderator or admin roles; each action taken is logged and auditable. Linked records must exist in the target tables (users, posts, or comments). Business logic will validate action-specific requirements (such as only allowing restore actions on content previously removed), and rejection reasons are clearly reported.\n\nExpected behavior includes auditing/traceability and propagation of moderation effects to related user/content state. This endpoint upholds community integrity, enables regulatory compliance, and is a primary interface for staff moderation activities.","summary":"Create a new moderation action (warn, remove, restrict, etc.) by a moderator or admin.","parameters":[],"requestBody":{"description":"Information about the moderation action to record, including action type, target, reason, and timing.","typeName":"IDiscussionBoardModerationAction.ICreate"},"responseBody":{"description":"The created moderation action record with all moderation attributes and linkage.","typeName":"IDiscussionBoardModerationAction"},"authorizationRoles":["moderator","admin"],"name":"create","path":"/discussionBoard/moderator/moderationActions","method":"post","model_name":"discussion_board_moderation_actions","soft_delete_column":"deleted_at","authorizationRole":"moderator","authorizationType":null},{"specification":"This operation allows a moderator or admin to create a new moderation action, such as warning, muting, removing, editing, restricting, restoring, or escalating actions against users, posts, or comments. The moderation_actions table in the Prisma schema represents all actionable moderation decisions and is referenced for compliance, audit, and content management functionality. The action can target a user, a post, or a comment; the actor must have moderation privileges and the action is logged for compliance/audit. Business logic will ensure appropriate validation and linkage with the related entities. Mod actions are critical for upholding community guidelines, dealing with abuse, and maintaining a robust record of enforcement across the discussion board.","prisma_schemas":"model discussion_board_moderation_actions {\n  id String @id @db.Uuid\n  moderator_id String @db.Uuid\n  user_id String? @db.Uuid\n  post_id String? @db.Uuid\n  comment_id String? @db.Uuid\n  action_type String\n  action_reason String\n  details String?\n  effective_from DateTime @db.Timestamptz\n  effective_until DateTime? @db.Timestamptz\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  moderator discussion_board_moderators @relation(fields: [moderator_id], references: [id], onDelete: Cascade)\n  user discussion_board_users? @relation(fields: [user_id], references: [id], onDelete: Cascade)\n  post discussion_board_posts? @relation(fields: [post_id], references: [id], onDelete: Cascade)\n  comment discussion_board_comments? @relation(fields: [comment_id], references: [id], onDelete: Cascade)\n  discussion_board_moderation_audit_logs discussion_board_moderation_audit_logs[]\n  discussion_board_appeals discussion_board_appeals[]\n  discussion_board_escalation_logs discussion_board_escalation_logs[]\n  @@unique([moderator_id, user_id, post_id, comment_id, action_type, created_at], map: \"discussion_board_moderation_actions_moderator_id_user__0c91b139\")\n  @@index([action_type])\n  @@index([created_at])\n  @@index([user_id])\n  @@index([post_id])\n  @@index([comment_id])\n  @@index([details(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n}","description":"Create a new moderation action record to log activity performed by moderators or admins for enforcement of platform policies. This includes actions against users, posts, or comments—such as warning, restricting, muting, removing, or restoring content. The API requires identifying the acting moderator, the target (user, post, or comment), specifying the type of moderation action (e.g., warn, mute, remove, restore), the reason for the action, and relevant effective timing. All actions are recorded in the moderation_actions schema for audit and compliance.\n\nSecurity is ensured by restricting this endpoint to users with moderator or admin roles; each action taken is logged and auditable. Linked records must exist in the target tables (users, posts, or comments). Business logic will validate action-specific requirements (such as only allowing restore actions on content previously removed), and rejection reasons are clearly reported.\n\nExpected behavior includes auditing/traceability and propagation of moderation effects to related user/content state. This endpoint upholds community integrity, enables regulatory compliance, and is a primary interface for staff moderation activities.","summary":"Create a new moderation action (warn, remove, restrict, etc.) by a moderator or admin.","parameters":[],"requestBody":{"description":"Information about the moderation action to record, including action type, target, reason, and timing.","typeName":"IDiscussionBoardModerationAction.ICreate"},"responseBody":{"description":"The created moderation action record with all moderation attributes and linkage.","typeName":"IDiscussionBoardModerationAction"},"authorizationRoles":["moderator","admin"],"name":"create","path":"/discussionBoard/admin/moderationActions","method":"post","model_name":"discussion_board_moderation_actions","soft_delete_column":"deleted_at","authorizationRole":"admin","authorizationType":null},{"specification":"This operation allows modification of an existing moderation action by a moderator or admin. It updates attributes such as the action type, reason, timing, or affected entities for an existing moderation decision in the moderation_actions table. It supports scenarios such as extending the duration of a restriction, changing the reason on record, or correcting a target. All modifications are audited, and changes are validated for consistency with business and compliance policy. The moderation_actions table ensures independent management and auditing of all enforcement interventions related to users, posts, or comments.","prisma_schemas":"model discussion_board_moderation_actions {\n  id String @id @db.Uuid\n  moderator_id String @db.Uuid\n  user_id String? @db.Uuid\n  post_id String? @db.Uuid\n  comment_id String? @db.Uuid\n  action_type String\n  action_reason String\n  details String?\n  effective_from DateTime @db.Timestamptz\n  effective_until DateTime? @db.Timestamptz\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  moderator discussion_board_moderators @relation(fields: [moderator_id], references: [id], onDelete: Cascade)\n  user discussion_board_users? @relation(fields: [user_id], references: [id], onDelete: Cascade)\n  post discussion_board_posts? @relation(fields: [post_id], references: [id], onDelete: Cascade)\n  comment discussion_board_comments? @relation(fields: [comment_id], references: [id], onDelete: Cascade)\n  discussion_board_moderation_audit_logs discussion_board_moderation_audit_logs[]\n  discussion_board_appeals discussion_board_appeals[]\n  discussion_board_escalation_logs discussion_board_escalation_logs[]\n  @@unique([moderator_id, user_id, post_id, comment_id, action_type, created_at], map: \"discussion_board_moderation_actions_moderator_id_user__0c91b139\")\n  @@index([action_type])\n  @@index([created_at])\n  @@index([user_id])\n  @@index([post_id])\n  @@index([comment_id])\n  @@index([details(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n}","description":"Update (modify) an existing moderation action. This endpoint allows moderators or admins to change the moderation action parameters, such as action type, affected user/post/comment, reason, or restriction timeframe. Changes are fully audited and tracked in the database to preserve historical state and regulatory compliance.\n\nThis operation ensures consistency and traceability for all moderation enforcement history. Security is strict, with access limited to users having moderator or admin roles. The operation checks existence of the moderation action and validates appropriate permissions on both the action and the affected target.\n\nAll updates are logged for compliance, with business validation on which fields may be changed post-creation, and responses include updated moderation action records.","summary":"Update an existing moderation action record (e.g., restriction reason/time).","parameters":[{"name":"moderationActionId","description":"Unique identifier for the target moderation action to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updates to apply to the moderation action, such as reason, type, timing, or affected entity.","typeName":"IDiscussionBoardModerationAction.IUpdate"},"responseBody":{"description":"The updated moderation action record after modification.","typeName":"IDiscussionBoardModerationAction"},"authorizationRoles":["moderator","admin"],"name":"update","path":"/discussionBoard/moderator/moderationActions/{moderationActionId}","method":"put","model_name":"discussion_board_moderation_actions","soft_delete_column":"deleted_at","authorizationRole":"moderator","authorizationType":null},{"specification":"This operation allows modification of an existing moderation action by a moderator or admin. It updates attributes such as the action type, reason, timing, or affected entities for an existing moderation decision in the moderation_actions table. It supports scenarios such as extending the duration of a restriction, changing the reason on record, or correcting a target. All modifications are audited, and changes are validated for consistency with business and compliance policy. The moderation_actions table ensures independent management and auditing of all enforcement interventions related to users, posts, or comments.","prisma_schemas":"model discussion_board_moderation_actions {\n  id String @id @db.Uuid\n  moderator_id String @db.Uuid\n  user_id String? @db.Uuid\n  post_id String? @db.Uuid\n  comment_id String? @db.Uuid\n  action_type String\n  action_reason String\n  details String?\n  effective_from DateTime @db.Timestamptz\n  effective_until DateTime? @db.Timestamptz\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  moderator discussion_board_moderators @relation(fields: [moderator_id], references: [id], onDelete: Cascade)\n  user discussion_board_users? @relation(fields: [user_id], references: [id], onDelete: Cascade)\n  post discussion_board_posts? @relation(fields: [post_id], references: [id], onDelete: Cascade)\n  comment discussion_board_comments? @relation(fields: [comment_id], references: [id], onDelete: Cascade)\n  discussion_board_moderation_audit_logs discussion_board_moderation_audit_logs[]\n  discussion_board_appeals discussion_board_appeals[]\n  discussion_board_escalation_logs discussion_board_escalation_logs[]\n  @@unique([moderator_id, user_id, post_id, comment_id, action_type, created_at], map: \"discussion_board_moderation_actions_moderator_id_user__0c91b139\")\n  @@index([action_type])\n  @@index([created_at])\n  @@index([user_id])\n  @@index([post_id])\n  @@index([comment_id])\n  @@index([details(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n}","description":"Update (modify) an existing moderation action. This endpoint allows moderators or admins to change the moderation action parameters, such as action type, affected user/post/comment, reason, or restriction timeframe. Changes are fully audited and tracked in the database to preserve historical state and regulatory compliance.\n\nThis operation ensures consistency and traceability for all moderation enforcement history. Security is strict, with access limited to users having moderator or admin roles. The operation checks existence of the moderation action and validates appropriate permissions on both the action and the affected target.\n\nAll updates are logged for compliance, with business validation on which fields may be changed post-creation, and responses include updated moderation action records.","summary":"Update an existing moderation action record (e.g., restriction reason/time).","parameters":[{"name":"moderationActionId","description":"Unique identifier for the target moderation action to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updates to apply to the moderation action, such as reason, type, timing, or affected entity.","typeName":"IDiscussionBoardModerationAction.IUpdate"},"responseBody":{"description":"The updated moderation action record after modification.","typeName":"IDiscussionBoardModerationAction"},"authorizationRoles":["moderator","admin"],"name":"update","path":"/discussionBoard/admin/moderationActions/{moderationActionId}","method":"put","model_name":"discussion_board_moderation_actions","soft_delete_column":"deleted_at","authorizationRole":"admin","authorizationType":null},{"specification":"This operation performs a soft deletion (retirement) of a moderation action record, as denoted by the deleted_at field in the moderation_actions table. Only moderators or admins may perform this operation, and the API is suitable for retiring outdated, obsolete, or improperly entered moderation actions for compliance. Soft deletion ensures that records are not shown in normal queries but retained for audit/regulatory evidence. The moderation_actions table supports soft deletion for every moderation event, with careful business logic for compliance and audit retention.","prisma_schemas":"model discussion_board_moderation_actions {\n  id String @id @db.Uuid\n  moderator_id String @db.Uuid\n  user_id String? @db.Uuid\n  post_id String? @db.Uuid\n  comment_id String? @db.Uuid\n  action_type String\n  action_reason String\n  details String?\n  effective_from DateTime @db.Timestamptz\n  effective_until DateTime? @db.Timestamptz\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  moderator discussion_board_moderators @relation(fields: [moderator_id], references: [id], onDelete: Cascade)\n  user discussion_board_users? @relation(fields: [user_id], references: [id], onDelete: Cascade)\n  post discussion_board_posts? @relation(fields: [post_id], references: [id], onDelete: Cascade)\n  comment discussion_board_comments? @relation(fields: [comment_id], references: [id], onDelete: Cascade)\n  discussion_board_moderation_audit_logs discussion_board_moderation_audit_logs[]\n  discussion_board_appeals discussion_board_appeals[]\n  discussion_board_escalation_logs discussion_board_escalation_logs[]\n  @@unique([moderator_id, user_id, post_id, comment_id, action_type, created_at], map: \"discussion_board_moderation_actions_moderator_id_user__0c91b139\")\n  @@index([action_type])\n  @@index([created_at])\n  @@index([user_id])\n  @@index([post_id])\n  @@index([comment_id])\n  @@index([details(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n}","description":"Soft delete (retire) a specific moderation action, setting its deleted_at timestamp for logical deletion and audit compliance. The record remains visible in audits but not returned in regular API queries. Only moderators or admins can perform this function; the API enforces permissions and validates action existence. Soft-deleted moderation actions cannot be enforced and are treated as obsolete in business workflows.\n\nEvery record soft-deleted here is auditable and traceable. Attempting to delete a non-existent or already retired moderation action will result in a clear error. Soft deletion supports legal compliance, as all moderation changes remain discoverable in case of investigation.","summary":"Soft delete (retire) a moderation action for audit compliance.","parameters":[{"name":"moderationActionId","description":"Unique ID of the moderation action to soft delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Confirmation of soft-deletion (retirement) of the moderation action.","typeName":"IDiscussionBoardModerationAction"},"authorizationRoles":["moderator","admin"],"name":"erase","path":"/discussionBoard/moderator/moderationActions/{moderationActionId}","method":"delete","model_name":"discussion_board_moderation_actions","soft_delete_column":"deleted_at","authorizationRole":"moderator","authorizationType":null},{"specification":"This operation performs a soft deletion (retirement) of a moderation action record, as denoted by the deleted_at field in the moderation_actions table. Only moderators or admins may perform this operation, and the API is suitable for retiring outdated, obsolete, or improperly entered moderation actions for compliance. Soft deletion ensures that records are not shown in normal queries but retained for audit/regulatory evidence. The moderation_actions table supports soft deletion for every moderation event, with careful business logic for compliance and audit retention.","prisma_schemas":"model discussion_board_moderation_actions {\n  id String @id @db.Uuid\n  moderator_id String @db.Uuid\n  user_id String? @db.Uuid\n  post_id String? @db.Uuid\n  comment_id String? @db.Uuid\n  action_type String\n  action_reason String\n  details String?\n  effective_from DateTime @db.Timestamptz\n  effective_until DateTime? @db.Timestamptz\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  moderator discussion_board_moderators @relation(fields: [moderator_id], references: [id], onDelete: Cascade)\n  user discussion_board_users? @relation(fields: [user_id], references: [id], onDelete: Cascade)\n  post discussion_board_posts? @relation(fields: [post_id], references: [id], onDelete: Cascade)\n  comment discussion_board_comments? @relation(fields: [comment_id], references: [id], onDelete: Cascade)\n  discussion_board_moderation_audit_logs discussion_board_moderation_audit_logs[]\n  discussion_board_appeals discussion_board_appeals[]\n  discussion_board_escalation_logs discussion_board_escalation_logs[]\n  @@unique([moderator_id, user_id, post_id, comment_id, action_type, created_at], map: \"discussion_board_moderation_actions_moderator_id_user__0c91b139\")\n  @@index([action_type])\n  @@index([created_at])\n  @@index([user_id])\n  @@index([post_id])\n  @@index([comment_id])\n  @@index([details(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n}","description":"Soft delete (retire) a specific moderation action, setting its deleted_at timestamp for logical deletion and audit compliance. The record remains visible in audits but not returned in regular API queries. Only moderators or admins can perform this function; the API enforces permissions and validates action existence. Soft-deleted moderation actions cannot be enforced and are treated as obsolete in business workflows.\n\nEvery record soft-deleted here is auditable and traceable. Attempting to delete a non-existent or already retired moderation action will result in a clear error. Soft deletion supports legal compliance, as all moderation changes remain discoverable in case of investigation.","summary":"Soft delete (retire) a moderation action for audit compliance.","parameters":[{"name":"moderationActionId","description":"Unique ID of the moderation action to soft delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Confirmation of soft-deletion (retirement) of the moderation action.","typeName":"IDiscussionBoardModerationAction"},"authorizationRoles":["moderator","admin"],"name":"erase","path":"/discussionBoard/admin/moderationActions/{moderationActionId}","method":"delete","model_name":"discussion_board_moderation_actions","soft_delete_column":"deleted_at","authorizationRole":"admin","authorizationType":null},{"specification":"Search and retrieve a filtered, paginated list of appeals submitted against moderation actions or flag reports. The appeals table is the primary entity, recording end-user appeals, status, resolution, and moderation history. Search allows filtering by appellant, status (pending, resolved, etc.), associated moderation action or flag report, and date. This is key for moderator or admin review, tracking user rights to appeal, and compliance auditing. Supports pagination, sorting, and business-centric filtering for workflow triage.","prisma_schemas":"model discussion_board_appeals {\n  id String @id @db.Uuid\n  appellant_id String @db.Uuid\n  moderation_action_id String? @db.Uuid\n  flag_report_id String? @db.Uuid\n  appeal_reason String\n  status String\n  resolution_comment String?\n  resolved_at DateTime? @db.Timestamptz\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  appellant discussion_board_users @relation(fields: [appellant_id], references: [id], onDelete: Cascade)\n  moderationAction discussion_board_moderation_actions? @relation(fields: [moderation_action_id], references: [id], onDelete: Cascade)\n  flagReport discussion_board_flag_reports? @relation(fields: [flag_report_id], references: [id], onDelete: Cascade)\n  discussion_board_escalation_logs discussion_board_escalation_logs[]\n  @@index([moderation_action_id])\n  @@index([flag_report_id])\n  @@unique([appellant_id, moderation_action_id, flag_report_id], map: \"discussion_board_appeals_appellant_id_moderation_actio_301b4c57\")\n  @@index([status])\n  @@index([created_at])\n  @@index([appeal_reason(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n  @@index([resolution_comment(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n}","description":"Retrieve a filtered, paginated list of appeals against moderation actions or flag reports. Supports advanced search/filtering by appellant user, status, reason, related moderation action or flag report, and submission/resolution timestamps. Includes pagination controls, keyword search, and sorting options for workflow efficiency.\n\nSecurity rules prevent disclosure of sensitive details to unauthorized users; only moderators and admins can access all appeals, while users may see their own. The endpoint supports compliance needs and moderation workflow management. Related appeals, moderation actions, and report status are included for triage and compliance review.\n\nSearch is optimized for volume and includes filtering and ordering consistent with administrative/triage use cases.","summary":"Search and retrieve appeals with filtering, pagination, and workflow sorting.","parameters":[],"requestBody":{"description":"Search, filtering, and pagination information for appeal triage.","typeName":"IDiscussionBoardAppeal.IRequest"},"responseBody":{"description":"Paginated list of appeals matching the search/filter criteria.","typeName":"IPageIDiscussionBoardAppeal"},"authorizationRoles":["user","moderator","admin"],"name":"index","path":"/discussionBoard/user/appeals","method":"patch","model_name":"discussion_board_appeals","soft_delete_column":"deleted_at","authorizationRole":"user","authorizationType":null},{"specification":"Search and retrieve a filtered, paginated list of appeals submitted against moderation actions or flag reports. The appeals table is the primary entity, recording end-user appeals, status, resolution, and moderation history. Search allows filtering by appellant, status (pending, resolved, etc.), associated moderation action or flag report, and date. This is key for moderator or admin review, tracking user rights to appeal, and compliance auditing. Supports pagination, sorting, and business-centric filtering for workflow triage.","prisma_schemas":"model discussion_board_appeals {\n  id String @id @db.Uuid\n  appellant_id String @db.Uuid\n  moderation_action_id String? @db.Uuid\n  flag_report_id String? @db.Uuid\n  appeal_reason String\n  status String\n  resolution_comment String?\n  resolved_at DateTime? @db.Timestamptz\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  appellant discussion_board_users @relation(fields: [appellant_id], references: [id], onDelete: Cascade)\n  moderationAction discussion_board_moderation_actions? @relation(fields: [moderation_action_id], references: [id], onDelete: Cascade)\n  flagReport discussion_board_flag_reports? @relation(fields: [flag_report_id], references: [id], onDelete: Cascade)\n  discussion_board_escalation_logs discussion_board_escalation_logs[]\n  @@index([moderation_action_id])\n  @@index([flag_report_id])\n  @@unique([appellant_id, moderation_action_id, flag_report_id], map: \"discussion_board_appeals_appellant_id_moderation_actio_301b4c57\")\n  @@index([status])\n  @@index([created_at])\n  @@index([appeal_reason(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n  @@index([resolution_comment(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n}","description":"Retrieve a filtered, paginated list of appeals against moderation actions or flag reports. Supports advanced search/filtering by appellant user, status, reason, related moderation action or flag report, and submission/resolution timestamps. Includes pagination controls, keyword search, and sorting options for workflow efficiency.\n\nSecurity rules prevent disclosure of sensitive details to unauthorized users; only moderators and admins can access all appeals, while users may see their own. The endpoint supports compliance needs and moderation workflow management. Related appeals, moderation actions, and report status are included for triage and compliance review.\n\nSearch is optimized for volume and includes filtering and ordering consistent with administrative/triage use cases.","summary":"Search and retrieve appeals with filtering, pagination, and workflow sorting.","parameters":[],"requestBody":{"description":"Search, filtering, and pagination information for appeal triage.","typeName":"IDiscussionBoardAppeal.IRequest"},"responseBody":{"description":"Paginated list of appeals matching the search/filter criteria.","typeName":"IPageIDiscussionBoardAppeal"},"authorizationRoles":["user","moderator","admin"],"name":"index","path":"/discussionBoard/moderator/appeals","method":"patch","model_name":"discussion_board_appeals","soft_delete_column":"deleted_at","authorizationRole":"moderator","authorizationType":null},{"specification":"Search and retrieve a filtered, paginated list of appeals submitted against moderation actions or flag reports. The appeals table is the primary entity, recording end-user appeals, status, resolution, and moderation history. Search allows filtering by appellant, status (pending, resolved, etc.), associated moderation action or flag report, and date. This is key for moderator or admin review, tracking user rights to appeal, and compliance auditing. Supports pagination, sorting, and business-centric filtering for workflow triage.","prisma_schemas":"model discussion_board_appeals {\n  id String @id @db.Uuid\n  appellant_id String @db.Uuid\n  moderation_action_id String? @db.Uuid\n  flag_report_id String? @db.Uuid\n  appeal_reason String\n  status String\n  resolution_comment String?\n  resolved_at DateTime? @db.Timestamptz\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  appellant discussion_board_users @relation(fields: [appellant_id], references: [id], onDelete: Cascade)\n  moderationAction discussion_board_moderation_actions? @relation(fields: [moderation_action_id], references: [id], onDelete: Cascade)\n  flagReport discussion_board_flag_reports? @relation(fields: [flag_report_id], references: [id], onDelete: Cascade)\n  discussion_board_escalation_logs discussion_board_escalation_logs[]\n  @@index([moderation_action_id])\n  @@index([flag_report_id])\n  @@unique([appellant_id, moderation_action_id, flag_report_id], map: \"discussion_board_appeals_appellant_id_moderation_actio_301b4c57\")\n  @@index([status])\n  @@index([created_at])\n  @@index([appeal_reason(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n  @@index([resolution_comment(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n}","description":"Retrieve a filtered, paginated list of appeals against moderation actions or flag reports. Supports advanced search/filtering by appellant user, status, reason, related moderation action or flag report, and submission/resolution timestamps. Includes pagination controls, keyword search, and sorting options for workflow efficiency.\n\nSecurity rules prevent disclosure of sensitive details to unauthorized users; only moderators and admins can access all appeals, while users may see their own. The endpoint supports compliance needs and moderation workflow management. Related appeals, moderation actions, and report status are included for triage and compliance review.\n\nSearch is optimized for volume and includes filtering and ordering consistent with administrative/triage use cases.","summary":"Search and retrieve appeals with filtering, pagination, and workflow sorting.","parameters":[],"requestBody":{"description":"Search, filtering, and pagination information for appeal triage.","typeName":"IDiscussionBoardAppeal.IRequest"},"responseBody":{"description":"Paginated list of appeals matching the search/filter criteria.","typeName":"IPageIDiscussionBoardAppeal"},"authorizationRoles":["user","moderator","admin"],"name":"index","path":"/discussionBoard/admin/appeals","method":"patch","model_name":"discussion_board_appeals","soft_delete_column":"deleted_at","authorizationRole":"admin","authorizationType":null},{"specification":"Retrieve details of a single appeal by unique identifier. Utilizes the appeals table for status, reason, related moderation action or flag report, and resolution state. Provides full traceability for appeal lifecycle and supports user/member, moderator, or admin audit and tracking. Ensures details returned match permissions—users may retrieve their own appeals, staff can retrieve any. Includes related status, reason, and resolution details.","prisma_schemas":"model discussion_board_appeals {\n  id String @id @db.Uuid\n  appellant_id String @db.Uuid\n  moderation_action_id String? @db.Uuid\n  flag_report_id String? @db.Uuid\n  appeal_reason String\n  status String\n  resolution_comment String?\n  resolved_at DateTime? @db.Timestamptz\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  appellant discussion_board_users @relation(fields: [appellant_id], references: [id], onDelete: Cascade)\n  moderationAction discussion_board_moderation_actions? @relation(fields: [moderation_action_id], references: [id], onDelete: Cascade)\n  flagReport discussion_board_flag_reports? @relation(fields: [flag_report_id], references: [id], onDelete: Cascade)\n  discussion_board_escalation_logs discussion_board_escalation_logs[]\n  @@index([moderation_action_id])\n  @@index([flag_report_id])\n  @@unique([appellant_id, moderation_action_id, flag_report_id], map: \"discussion_board_appeals_appellant_id_moderation_actio_301b4c57\")\n  @@index([status])\n  @@index([created_at])\n  @@index([appeal_reason(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n  @@index([resolution_comment(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n}","description":"Retrieve appeal detail for the identified appeal. Returns all relevant information for the appeal—including status, reason, timestamps, related moderation/flag actions, and resolution comments. Permission logic ensures that end users can retrieve their own appeals, while moderators/admins access all details for their review purposes. The operation responds with full detail for compliant auditing and user communications.","summary":"Get details for a specific appeal by its ID.","parameters":[{"name":"appealId","description":"Unique identifier of the appeal to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The detail record for the appeal with full status and context.","typeName":"IDiscussionBoardAppeal"},"authorizationRoles":["user","moderator","admin"],"name":"at","path":"/discussionBoard/user/appeals/{appealId}","method":"get","model_name":"discussion_board_appeals","soft_delete_column":"deleted_at","authorizationRole":"user","authorizationType":null},{"specification":"Retrieve details of a single appeal by unique identifier. Utilizes the appeals table for status, reason, related moderation action or flag report, and resolution state. Provides full traceability for appeal lifecycle and supports user/member, moderator, or admin audit and tracking. Ensures details returned match permissions—users may retrieve their own appeals, staff can retrieve any. Includes related status, reason, and resolution details.","prisma_schemas":"model discussion_board_appeals {\n  id String @id @db.Uuid\n  appellant_id String @db.Uuid\n  moderation_action_id String? @db.Uuid\n  flag_report_id String? @db.Uuid\n  appeal_reason String\n  status String\n  resolution_comment String?\n  resolved_at DateTime? @db.Timestamptz\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  appellant discussion_board_users @relation(fields: [appellant_id], references: [id], onDelete: Cascade)\n  moderationAction discussion_board_moderation_actions? @relation(fields: [moderation_action_id], references: [id], onDelete: Cascade)\n  flagReport discussion_board_flag_reports? @relation(fields: [flag_report_id], references: [id], onDelete: Cascade)\n  discussion_board_escalation_logs discussion_board_escalation_logs[]\n  @@index([moderation_action_id])\n  @@index([flag_report_id])\n  @@unique([appellant_id, moderation_action_id, flag_report_id], map: \"discussion_board_appeals_appellant_id_moderation_actio_301b4c57\")\n  @@index([status])\n  @@index([created_at])\n  @@index([appeal_reason(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n  @@index([resolution_comment(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n}","description":"Retrieve appeal detail for the identified appeal. Returns all relevant information for the appeal—including status, reason, timestamps, related moderation/flag actions, and resolution comments. Permission logic ensures that end users can retrieve their own appeals, while moderators/admins access all details for their review purposes. The operation responds with full detail for compliant auditing and user communications.","summary":"Get details for a specific appeal by its ID.","parameters":[{"name":"appealId","description":"Unique identifier of the appeal to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The detail record for the appeal with full status and context.","typeName":"IDiscussionBoardAppeal"},"authorizationRoles":["user","moderator","admin"],"name":"at","path":"/discussionBoard/moderator/appeals/{appealId}","method":"get","model_name":"discussion_board_appeals","soft_delete_column":"deleted_at","authorizationRole":"moderator","authorizationType":null},{"specification":"Retrieve details of a single appeal by unique identifier. Utilizes the appeals table for status, reason, related moderation action or flag report, and resolution state. Provides full traceability for appeal lifecycle and supports user/member, moderator, or admin audit and tracking. Ensures details returned match permissions—users may retrieve their own appeals, staff can retrieve any. Includes related status, reason, and resolution details.","prisma_schemas":"model discussion_board_appeals {\n  id String @id @db.Uuid\n  appellant_id String @db.Uuid\n  moderation_action_id String? @db.Uuid\n  flag_report_id String? @db.Uuid\n  appeal_reason String\n  status String\n  resolution_comment String?\n  resolved_at DateTime? @db.Timestamptz\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  appellant discussion_board_users @relation(fields: [appellant_id], references: [id], onDelete: Cascade)\n  moderationAction discussion_board_moderation_actions? @relation(fields: [moderation_action_id], references: [id], onDelete: Cascade)\n  flagReport discussion_board_flag_reports? @relation(fields: [flag_report_id], references: [id], onDelete: Cascade)\n  discussion_board_escalation_logs discussion_board_escalation_logs[]\n  @@index([moderation_action_id])\n  @@index([flag_report_id])\n  @@unique([appellant_id, moderation_action_id, flag_report_id], map: \"discussion_board_appeals_appellant_id_moderation_actio_301b4c57\")\n  @@index([status])\n  @@index([created_at])\n  @@index([appeal_reason(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n  @@index([resolution_comment(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n}","description":"Retrieve appeal detail for the identified appeal. Returns all relevant information for the appeal—including status, reason, timestamps, related moderation/flag actions, and resolution comments. Permission logic ensures that end users can retrieve their own appeals, while moderators/admins access all details for their review purposes. The operation responds with full detail for compliant auditing and user communications.","summary":"Get details for a specific appeal by its ID.","parameters":[{"name":"appealId","description":"Unique identifier of the appeal to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The detail record for the appeal with full status and context.","typeName":"IDiscussionBoardAppeal"},"authorizationRoles":["user","moderator","admin"],"name":"at","path":"/discussionBoard/admin/appeals/{appealId}","method":"get","model_name":"discussion_board_appeals","soft_delete_column":"deleted_at","authorizationRole":"admin","authorizationType":null},{"specification":"Create a new appeal for a moderation action or flag report. End users may submit appeals when they want to challenge or request review of a moderator/admin decision (such as a warning, post removal, or restriction). The appeals table represents the primary business entity and stores appellant, target moderation/flag report, reason, and status. Validation will ensure that appeals are only allowed for eligible moderation actions or flags, and duplicates for the same user/action are prevented. All appeals are tracked for compliance and moderation workflows.","prisma_schemas":"model discussion_board_appeals {\n  id String @id @db.Uuid\n  appellant_id String @db.Uuid\n  moderation_action_id String? @db.Uuid\n  flag_report_id String? @db.Uuid\n  appeal_reason String\n  status String\n  resolution_comment String?\n  resolved_at DateTime? @db.Timestamptz\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  appellant discussion_board_users @relation(fields: [appellant_id], references: [id], onDelete: Cascade)\n  moderationAction discussion_board_moderation_actions? @relation(fields: [moderation_action_id], references: [id], onDelete: Cascade)\n  flagReport discussion_board_flag_reports? @relation(fields: [flag_report_id], references: [id], onDelete: Cascade)\n  discussion_board_escalation_logs discussion_board_escalation_logs[]\n  @@index([moderation_action_id])\n  @@index([flag_report_id])\n  @@unique([appellant_id, moderation_action_id, flag_report_id], map: \"discussion_board_appeals_appellant_id_moderation_actio_301b4c57\")\n  @@index([status])\n  @@index([created_at])\n  @@index([appeal_reason(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n  @@index([resolution_comment(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n}","description":"Submit a new appeal to challenge a moderation action or flag report. Users provide a reason, reference to the moderation action or flag report being appealed, and any supporting narrative. Only authorized users may submit appeals for affected actions/reports; duplicates are disallowed. Successful creation records the lifecycle start for the appeal and notifies moderation for handling.\n\nEnd users can only appeal moderation actions or reports affecting their own activity. Permissions and eligibility are validated. All appeal creation actions are recorded for compliance review and appeal queueing. This endpoint helps uphold user rights and platform transparency.","summary":"Create a new appeal against a moderation action or flag report.","parameters":[],"requestBody":{"description":"Information required to start a new appeal, specifying appellant, moderation action or flag, and narrative.","typeName":"IDiscussionBoardAppeal.ICreate"},"responseBody":{"description":"Created appeal record along with references to the relevant moderation/flag/report targets.","typeName":"IDiscussionBoardAppeal"},"authorizationRoles":["user"],"name":"create","path":"/discussionBoard/user/appeals","method":"post","model_name":"discussion_board_appeals","soft_delete_column":"deleted_at","authorizationRole":"user","authorizationType":null},{"specification":"Update an existing appeal record. Permitted modifications include correcting the appeal narrative, updating resolution comments or status after moderator/admin review, and changing linked moderation or flag report reference if needed. The entity supports regulatory compliance, with all changes logged for audit. Only the original appellant, moderator, or admin can perform updates, depending on state and platform workflow. Updates can influence appeal workflow and post-resolution transparency.","prisma_schemas":"model discussion_board_appeals {\n  id String @id @db.Uuid\n  appellant_id String @db.Uuid\n  moderation_action_id String? @db.Uuid\n  flag_report_id String? @db.Uuid\n  appeal_reason String\n  status String\n  resolution_comment String?\n  resolved_at DateTime? @db.Timestamptz\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  appellant discussion_board_users @relation(fields: [appellant_id], references: [id], onDelete: Cascade)\n  moderationAction discussion_board_moderation_actions? @relation(fields: [moderation_action_id], references: [id], onDelete: Cascade)\n  flagReport discussion_board_flag_reports? @relation(fields: [flag_report_id], references: [id], onDelete: Cascade)\n  discussion_board_escalation_logs discussion_board_escalation_logs[]\n  @@index([moderation_action_id])\n  @@index([flag_report_id])\n  @@unique([appellant_id, moderation_action_id, flag_report_id], map: \"discussion_board_appeals_appellant_id_moderation_actio_301b4c57\")\n  @@index([status])\n  @@index([created_at])\n  @@index([appeal_reason(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n  @@index([resolution_comment(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n}","description":"Update an existing appeal against a moderation action or flag report. Allows correction or addition of appeal narrative, adjust status (e.g., moderator/admin review), update resolution comments, or amend linked moderation/flag report reference if appropriate. All updates are logged for regulatory compliance and audit, and responses include the full updated appeal record.\n\nPermission logic enforces that only the original appellant, a moderator, or an admin may update an appeal in allowed workflow states. Attempts by unauthorized or out-of-sequence actors will be denied and logged. This ensures appeal integrity, audit trails, and structured workflow management while retaining a complete history of modifications.","summary":"Update or correct an existing appeal, reason, status, or linkage.","parameters":[{"name":"appealId","description":"Unique identifier for the appeal to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Appeal updates or corrections, such as narrative, status, resolution comments, or linkage.","typeName":"IDiscussionBoardAppeal.IUpdate"},"responseBody":{"description":"Updated appeal record after modifications, including resolution/comment fields if present.","typeName":"IDiscussionBoardAppeal"},"authorizationRoles":["user","moderator","admin"],"name":"update","path":"/discussionBoard/user/appeals/{appealId}","method":"put","model_name":"discussion_board_appeals","soft_delete_column":"deleted_at","authorizationRole":"user","authorizationType":null},{"specification":"Update an existing appeal record. Permitted modifications include correcting the appeal narrative, updating resolution comments or status after moderator/admin review, and changing linked moderation or flag report reference if needed. The entity supports regulatory compliance, with all changes logged for audit. Only the original appellant, moderator, or admin can perform updates, depending on state and platform workflow. Updates can influence appeal workflow and post-resolution transparency.","prisma_schemas":"model discussion_board_appeals {\n  id String @id @db.Uuid\n  appellant_id String @db.Uuid\n  moderation_action_id String? @db.Uuid\n  flag_report_id String? @db.Uuid\n  appeal_reason String\n  status String\n  resolution_comment String?\n  resolved_at DateTime? @db.Timestamptz\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  appellant discussion_board_users @relation(fields: [appellant_id], references: [id], onDelete: Cascade)\n  moderationAction discussion_board_moderation_actions? @relation(fields: [moderation_action_id], references: [id], onDelete: Cascade)\n  flagReport discussion_board_flag_reports? @relation(fields: [flag_report_id], references: [id], onDelete: Cascade)\n  discussion_board_escalation_logs discussion_board_escalation_logs[]\n  @@index([moderation_action_id])\n  @@index([flag_report_id])\n  @@unique([appellant_id, moderation_action_id, flag_report_id], map: \"discussion_board_appeals_appellant_id_moderation_actio_301b4c57\")\n  @@index([status])\n  @@index([created_at])\n  @@index([appeal_reason(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n  @@index([resolution_comment(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n}","description":"Update an existing appeal against a moderation action or flag report. Allows correction or addition of appeal narrative, adjust status (e.g., moderator/admin review), update resolution comments, or amend linked moderation/flag report reference if appropriate. All updates are logged for regulatory compliance and audit, and responses include the full updated appeal record.\n\nPermission logic enforces that only the original appellant, a moderator, or an admin may update an appeal in allowed workflow states. Attempts by unauthorized or out-of-sequence actors will be denied and logged. This ensures appeal integrity, audit trails, and structured workflow management while retaining a complete history of modifications.","summary":"Update or correct an existing appeal, reason, status, or linkage.","parameters":[{"name":"appealId","description":"Unique identifier for the appeal to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Appeal updates or corrections, such as narrative, status, resolution comments, or linkage.","typeName":"IDiscussionBoardAppeal.IUpdate"},"responseBody":{"description":"Updated appeal record after modifications, including resolution/comment fields if present.","typeName":"IDiscussionBoardAppeal"},"authorizationRoles":["user","moderator","admin"],"name":"update","path":"/discussionBoard/moderator/appeals/{appealId}","method":"put","model_name":"discussion_board_appeals","soft_delete_column":"deleted_at","authorizationRole":"moderator","authorizationType":null},{"specification":"Update an existing appeal record. Permitted modifications include correcting the appeal narrative, updating resolution comments or status after moderator/admin review, and changing linked moderation or flag report reference if needed. The entity supports regulatory compliance, with all changes logged for audit. Only the original appellant, moderator, or admin can perform updates, depending on state and platform workflow. Updates can influence appeal workflow and post-resolution transparency.","prisma_schemas":"model discussion_board_appeals {\n  id String @id @db.Uuid\n  appellant_id String @db.Uuid\n  moderation_action_id String? @db.Uuid\n  flag_report_id String? @db.Uuid\n  appeal_reason String\n  status String\n  resolution_comment String?\n  resolved_at DateTime? @db.Timestamptz\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  appellant discussion_board_users @relation(fields: [appellant_id], references: [id], onDelete: Cascade)\n  moderationAction discussion_board_moderation_actions? @relation(fields: [moderation_action_id], references: [id], onDelete: Cascade)\n  flagReport discussion_board_flag_reports? @relation(fields: [flag_report_id], references: [id], onDelete: Cascade)\n  discussion_board_escalation_logs discussion_board_escalation_logs[]\n  @@index([moderation_action_id])\n  @@index([flag_report_id])\n  @@unique([appellant_id, moderation_action_id, flag_report_id], map: \"discussion_board_appeals_appellant_id_moderation_actio_301b4c57\")\n  @@index([status])\n  @@index([created_at])\n  @@index([appeal_reason(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n  @@index([resolution_comment(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n}","description":"Update an existing appeal against a moderation action or flag report. Allows correction or addition of appeal narrative, adjust status (e.g., moderator/admin review), update resolution comments, or amend linked moderation/flag report reference if appropriate. All updates are logged for regulatory compliance and audit, and responses include the full updated appeal record.\n\nPermission logic enforces that only the original appellant, a moderator, or an admin may update an appeal in allowed workflow states. Attempts by unauthorized or out-of-sequence actors will be denied and logged. This ensures appeal integrity, audit trails, and structured workflow management while retaining a complete history of modifications.","summary":"Update or correct an existing appeal, reason, status, or linkage.","parameters":[{"name":"appealId","description":"Unique identifier for the appeal to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Appeal updates or corrections, such as narrative, status, resolution comments, or linkage.","typeName":"IDiscussionBoardAppeal.IUpdate"},"responseBody":{"description":"Updated appeal record after modifications, including resolution/comment fields if present.","typeName":"IDiscussionBoardAppeal"},"authorizationRoles":["user","moderator","admin"],"name":"update","path":"/discussionBoard/admin/appeals/{appealId}","method":"put","model_name":"discussion_board_appeals","soft_delete_column":"deleted_at","authorizationRole":"admin","authorizationType":null},{"specification":"Soft delete (retire) an appeal record by setting its deleted_at timestamp. Once soft-deleted, the appeal is no longer available in default queries but is retained for audit and compliance access. The operation is allowed for end users (if they are the appellant), moderators, or admins, according to platform workflow and permissions. This action supports regulatory and transparency requirements while preserving history for investigation or restoration. Retired appeals are marked and summarized as inactive within business APIs.","prisma_schemas":"model discussion_board_appeals {\n  id String @id @db.Uuid\n  appellant_id String @db.Uuid\n  moderation_action_id String? @db.Uuid\n  flag_report_id String? @db.Uuid\n  appeal_reason String\n  status String\n  resolution_comment String?\n  resolved_at DateTime? @db.Timestamptz\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  appellant discussion_board_users @relation(fields: [appellant_id], references: [id], onDelete: Cascade)\n  moderationAction discussion_board_moderation_actions? @relation(fields: [moderation_action_id], references: [id], onDelete: Cascade)\n  flagReport discussion_board_flag_reports? @relation(fields: [flag_report_id], references: [id], onDelete: Cascade)\n  discussion_board_escalation_logs discussion_board_escalation_logs[]\n  @@index([moderation_action_id])\n  @@index([flag_report_id])\n  @@unique([appellant_id, moderation_action_id, flag_report_id], map: \"discussion_board_appeals_appellant_id_moderation_actio_301b4c57\")\n  @@index([status])\n  @@index([created_at])\n  @@index([appeal_reason(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n  @@index([resolution_comment(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n}","description":"Soft delete (retire) an appeal record. This marks the appeal as deleted (sets deleted_at), rendering it inaccessible in public queries but maintaining the record for audit/compliance. Permission logic enforces that only the appellant, moderators, or admins may retire appeals, and only in allowed workflow states (e.g., after closure/resolution or where personal data rights permit). Attempts to retire ineligible appeals are denied and logged for transparency.\n\nSoft-deletion is audit-safe, preserves data for regulatory and compliance checks, and cannot be reversed without admin intervention. The API provides confirmation and updated record of retirement state.","summary":"Soft delete (retire) an appeal for compliance/audit purposes.","parameters":[{"name":"appealId","description":"Unique ID of the appeal to soft delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Confirmation and updated record of the soft-deleted appeal.","typeName":"IDiscussionBoardAppeal"},"authorizationRoles":["user","moderator","admin"],"name":"erase","path":"/discussionBoard/user/appeals/{appealId}","method":"delete","model_name":"discussion_board_appeals","soft_delete_column":"deleted_at","authorizationRole":"user","authorizationType":null},{"specification":"Soft delete (retire) an appeal record by setting its deleted_at timestamp. Once soft-deleted, the appeal is no longer available in default queries but is retained for audit and compliance access. The operation is allowed for end users (if they are the appellant), moderators, or admins, according to platform workflow and permissions. This action supports regulatory and transparency requirements while preserving history for investigation or restoration. Retired appeals are marked and summarized as inactive within business APIs.","prisma_schemas":"model discussion_board_appeals {\n  id String @id @db.Uuid\n  appellant_id String @db.Uuid\n  moderation_action_id String? @db.Uuid\n  flag_report_id String? @db.Uuid\n  appeal_reason String\n  status String\n  resolution_comment String?\n  resolved_at DateTime? @db.Timestamptz\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  appellant discussion_board_users @relation(fields: [appellant_id], references: [id], onDelete: Cascade)\n  moderationAction discussion_board_moderation_actions? @relation(fields: [moderation_action_id], references: [id], onDelete: Cascade)\n  flagReport discussion_board_flag_reports? @relation(fields: [flag_report_id], references: [id], onDelete: Cascade)\n  discussion_board_escalation_logs discussion_board_escalation_logs[]\n  @@index([moderation_action_id])\n  @@index([flag_report_id])\n  @@unique([appellant_id, moderation_action_id, flag_report_id], map: \"discussion_board_appeals_appellant_id_moderation_actio_301b4c57\")\n  @@index([status])\n  @@index([created_at])\n  @@index([appeal_reason(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n  @@index([resolution_comment(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n}","description":"Soft delete (retire) an appeal record. This marks the appeal as deleted (sets deleted_at), rendering it inaccessible in public queries but maintaining the record for audit/compliance. Permission logic enforces that only the appellant, moderators, or admins may retire appeals, and only in allowed workflow states (e.g., after closure/resolution or where personal data rights permit). Attempts to retire ineligible appeals are denied and logged for transparency.\n\nSoft-deletion is audit-safe, preserves data for regulatory and compliance checks, and cannot be reversed without admin intervention. The API provides confirmation and updated record of retirement state.","summary":"Soft delete (retire) an appeal for compliance/audit purposes.","parameters":[{"name":"appealId","description":"Unique ID of the appeal to soft delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Confirmation and updated record of the soft-deleted appeal.","typeName":"IDiscussionBoardAppeal"},"authorizationRoles":["user","moderator","admin"],"name":"erase","path":"/discussionBoard/moderator/appeals/{appealId}","method":"delete","model_name":"discussion_board_appeals","soft_delete_column":"deleted_at","authorizationRole":"moderator","authorizationType":null},{"specification":"Soft delete (retire) an appeal record by setting its deleted_at timestamp. Once soft-deleted, the appeal is no longer available in default queries but is retained for audit and compliance access. The operation is allowed for end users (if they are the appellant), moderators, or admins, according to platform workflow and permissions. This action supports regulatory and transparency requirements while preserving history for investigation or restoration. Retired appeals are marked and summarized as inactive within business APIs.","prisma_schemas":"model discussion_board_appeals {\n  id String @id @db.Uuid\n  appellant_id String @db.Uuid\n  moderation_action_id String? @db.Uuid\n  flag_report_id String? @db.Uuid\n  appeal_reason String\n  status String\n  resolution_comment String?\n  resolved_at DateTime? @db.Timestamptz\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  appellant discussion_board_users @relation(fields: [appellant_id], references: [id], onDelete: Cascade)\n  moderationAction discussion_board_moderation_actions? @relation(fields: [moderation_action_id], references: [id], onDelete: Cascade)\n  flagReport discussion_board_flag_reports? @relation(fields: [flag_report_id], references: [id], onDelete: Cascade)\n  discussion_board_escalation_logs discussion_board_escalation_logs[]\n  @@index([moderation_action_id])\n  @@index([flag_report_id])\n  @@unique([appellant_id, moderation_action_id, flag_report_id], map: \"discussion_board_appeals_appellant_id_moderation_actio_301b4c57\")\n  @@index([status])\n  @@index([created_at])\n  @@index([appeal_reason(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n  @@index([resolution_comment(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n}","description":"Soft delete (retire) an appeal record. This marks the appeal as deleted (sets deleted_at), rendering it inaccessible in public queries but maintaining the record for audit/compliance. Permission logic enforces that only the appellant, moderators, or admins may retire appeals, and only in allowed workflow states (e.g., after closure/resolution or where personal data rights permit). Attempts to retire ineligible appeals are denied and logged for transparency.\n\nSoft-deletion is audit-safe, preserves data for regulatory and compliance checks, and cannot be reversed without admin intervention. The API provides confirmation and updated record of retirement state.","summary":"Soft delete (retire) an appeal for compliance/audit purposes.","parameters":[{"name":"appealId","description":"Unique ID of the appeal to soft delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Confirmation and updated record of the soft-deleted appeal.","typeName":"IDiscussionBoardAppeal"},"authorizationRoles":["user","moderator","admin"],"name":"erase","path":"/discussionBoard/admin/appeals/{appealId}","method":"delete","model_name":"discussion_board_appeals","soft_delete_column":"deleted_at","authorizationRole":"admin","authorizationType":null},{"specification":"Retrieves a paginated and filtered list of notifications for the authenticated user. The operation supports searching, sorting, and filtering by notification types, status (read/unread/archived), relevant dates, and related posts or comments. It leverages the discussion_board_notifications table, which contains all delivery instances of notifications with fields such as recipient_user_id, type, status, and timestamps for creation, delivery, and reading. Complex queries allow users to manage large volumes of notifications efficiently while respecting in-app, email, or push channels as defined by notification preference settings.","path":"/discussionBoard/user/notifications","method":"patch","prisma_schemas":"model discussion_board_notifications {\n  id String @id @db.Uuid\n  recipient_user_id String @db.Uuid\n  actor_user_id String? @db.Uuid\n  post_id String? @db.Uuid\n  comment_id String? @db.Uuid\n  type String\n  status String\n  title String?\n  body String?\n  action_url String? @db.VarChar(80000)\n  failure_reason String?\n  created_at DateTime @db.Timestamptz\n  delivered_at DateTime?\n  read_at DateTime?\n  deleted_at DateTime?\n  recipientUser discussion_board_users @relation(\"discussion_board_notifications_of_recipient_user_id\", fields: [recipient_user_id], references: [id], onDelete: Cascade)\n  actorUser discussion_board_users? @relation(\"discussion_board_notifications_of_actor_user_id\", fields: [actor_user_id], references: [id], onDelete: Cascade)\n  post discussion_board_posts? @relation(fields: [post_id], references: [id], onDelete: Cascade)\n  comment discussion_board_comments? @relation(fields: [comment_id], references: [id], onDelete: Cascade)\n  @@unique([recipient_user_id, type, action_url, created_at], map: \"discussion_board_notifications_recipient_user_id_type__7283f99a\")\n  @@index([recipient_user_id, status, created_at], map: \"discussion_board_notifications_recipient_user_id_statu_382ed7fb\")\n  @@index([actor_user_id])\n  @@index([post_id])\n  @@index([comment_id])\n  @@index([title(ops: raw(\\\"gin_trgm_ops\\\"))], type: Gin)\n  @@index([body(ops: raw(\\\"gin_trgm_ops\\\"))], type: Gin)\n}","description":"This endpoint allows authenticated users to retrieve their notifications in a flexible and efficient manner. Users can filter notifications by type (reply, mention, flag, moderator action, system alert, poll close, etc.), status (unread, read, archived, or failed), and time windows based on creation or delivery timestamps. The operation supports sorting (e.g., newest first, group by status) and paginated delivery for performance at scale.\n\nAccess control is enforced such that users can only access notifications sent to themselves, with appropriate role and ownership checking. Notification content (title, body, and action_url) is included based on preference and status. Security considerations ensure that notification visibility complies with privacy, moderation, and system alert policies.\n\nRelated notification operations include marking as read (PUT), deleting (DELETE), and retrieving individual notification (GET by ID). Failure scenarios such as invalid pagination options, inaccessible notifications, or attempts to access others' notifications return precise business errors in accordance with audit policy.","summary":"Retrieve a filtered, paginated list of notifications for the authenticated user.","parameters":[],"requestBody":{"description":"Filter, search, and pagination criteria for retrieving notifications.","typeName":"IDiscussionBoardNotification.IRequest"},"responseBody":{"description":"Paginated list of notifications matching the filters, sorted according to user request.","typeName":"IPageIDiscussionBoardNotification"},"authorizationRoles":["user"],"name":"index","model_name":"discussion_board_notifications","soft_delete_column":"deleted_at","authorizationRole":"user","authorizationType":null},{"specification":"Retrieves the full details of a specific notification by its unique identifier, allowing an authenticated user to view information about notification type, status, origin, and context. Tied to the discussion_board_notifications table, each record tracks recipient, related post/comment, delivery status, category, title/body, and URIs. Typically used to populate the detailed notification view page or modal within the user's notification center.","path":"/discussionBoard/user/notifications/{notificationId}","method":"get","prisma_schemas":"model discussion_board_notifications {\n  id String @id @db.Uuid\n  recipient_user_id String @db.Uuid\n  actor_user_id String? @db.Uuid\n  post_id String? @db.Uuid\n  comment_id String? @db.Uuid\n  type String\n  status String\n  title String?\n  body String?\n  action_url String? @db.VarChar(80000)\n  failure_reason String?\n  created_at DateTime @db.Timestamptz\n  delivered_at DateTime?\n  read_at DateTime?\n  deleted_at DateTime?\n  recipientUser discussion_board_users @relation(\"discussion_board_notifications_of_recipient_user_id\", fields: [recipient_user_id], references: [id], onDelete: Cascade)\n  actorUser discussion_board_users? @relation(\"discussion_board_notifications_of_actor_user_id\", fields: [actor_user_id], references: [id], onDelete: Cascade)\n  post discussion_board_posts? @relation(fields: [post_id], references: [id], onDelete: Cascade)\n  comment discussion_board_comments? @relation(fields: [comment_id], references: [id], onDelete: Cascade)\n  @@unique([recipient_user_id, type, action_url, created_at], map: \"discussion_board_notifications_recipient_user_id_type__7283f99a\")\n  @@index([recipient_user_id, status, created_at], map: \"discussion_board_notifications_recipient_user_id_statu_382ed7fb\")\n  @@index([actor_user_id])\n  @@index([post_id])\n  @@index([comment_id])\n  @@index([title(ops: raw(\\\"gin_trgm_ops\\\"))], type: Gin)\n  @@index([body(ops: raw(\\\"gin_trgm_ops\\\"))], type: Gin)\n}","description":"Allows an authenticated user to fetch the full details of a single notification sent to them. The response includes all notification metadata (type, status, related actor and post/comment, content, delivery state, and timestamps). Ownership and security checks are enforced to ensure only the intended recipient may access the record. Privacy considerations prohibit any user or role from accessing notifications not addressed to them.\n\nComprehensive notification data supports user interface features such as notification previews, linking back to relevant posts or comments, and context-sensitive actions. Typical failure modes include not found, insufficient permissions, or attempts to access notifications deleted or belonging to others.","summary":"Retrieve notification details by notificationId for the authenticated user.","parameters":[{"name":"notificationId","description":"The unique identifier of the notification to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information for the specified notification.","typeName":"IDiscussionBoardNotification"},"authorizationRoles":["user"],"name":"at","model_name":"discussion_board_notifications","soft_delete_column":"deleted_at","authorizationRole":"user","authorizationType":null},{"specification":"Allows the authenticated recipient to update an existing notification's status, e.g., marking it as read, archived, or restoring it to unread. Operates on the discussion_board_notifications table, which includes status, recipient_user_id, and metadata for tracking notification lifecycle. Supports use cases such as clearing notification badges, organizing the notification center, and archiving read notifications for later review.","path":"/discussionBoard/user/notifications/{notificationId}","method":"put","prisma_schemas":"model discussion_board_notifications {\n  id String @id @db.Uuid\n  recipient_user_id String @db.Uuid\n  actor_user_id String? @db.Uuid\n  post_id String? @db.Uuid\n  comment_id String? @db.Uuid\n  type String\n  status String\n  title String?\n  body String?\n  action_url String? @db.VarChar(80000)\n  failure_reason String?\n  created_at DateTime @db.Timestamptz\n  delivered_at DateTime?\n  read_at DateTime?\n  deleted_at DateTime?\n  recipientUser discussion_board_users @relation(\"discussion_board_notifications_of_recipient_user_id\", fields: [recipient_user_id], references: [id], onDelete: Cascade)\n  actorUser discussion_board_users? @relation(\"discussion_board_notifications_of_actor_user_id\", fields: [actor_user_id], references: [id], onDelete: Cascade)\n  post discussion_board_posts? @relation(fields: [post_id], references: [id], onDelete: Cascade)\n  comment discussion_board_comments? @relation(fields: [comment_id], references: [id], onDelete: Cascade)\n  @@unique([recipient_user_id, type, action_url, created_at], map: \"discussion_board_notifications_recipient_user_id_type__7283f99a\")\n  @@index([recipient_user_id, status, created_at], map: \"discussion_board_notifications_recipient_user_id_statu_382ed7fb\")\n  @@index([actor_user_id])\n  @@index([post_id])\n  @@index([comment_id])\n  @@index([title(ops: raw(\\\"gin_trgm_ops\\\"))], type: Gin)\n  @@index([body(ops: raw(\\\"gin_trgm_ops\\\"))], type: Gin)\n}","description":"Authenticated users can use this endpoint to update the status of a notification they have received. Common actions include marking notifications as read, archiving them to declutter the notification center, or restoring notifications to unread if action is needed later.\n\nThis operation emphasizes strict ownership verification, ensuring users can only update notifications addressed to them. Business logic controls transitions between notification statuses and timestamps related to reading or archiving. Related endpoints allow listing all notifications and fetching details.\n\nError handling includes invalid state transitions and attempts to update already deleted or irreversible notifications. Attempts to manipulate notifications not owned by the user are denied with an explicit business error.","summary":"Update the status of a notification (read, unread, archived, etc.) by notificationId.","parameters":[{"name":"notificationId","description":"Identifier of the notification to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"New status or updates to apply to the notification (e.g., read, archived).","typeName":"IDiscussionBoardNotification.IUpdate"},"responseBody":{"description":"Updated notification record reflecting the new status.","typeName":"IDiscussionBoardNotification"},"authorizationRoles":["user"],"name":"update","model_name":"discussion_board_notifications","soft_delete_column":"deleted_at","authorizationRole":"user","authorizationType":null},{"specification":"Permanently deletes or soft-deletes a notification owned by the authenticated user, removing it from their notification center. Utilizes the deleted_at field of the discussion_board_notifications table for soft deletion, in line with compliance and audit requirements. Deletes are only allowed by the notification's recipient and will not affect notifications for other users. System and critical compliance notifications may be protected from deletion by business logic.","path":"/discussionBoard/user/notifications/{notificationId}","method":"delete","prisma_schemas":"model discussion_board_notifications {\n  id String @id @db.Uuid\n  recipient_user_id String @db.Uuid\n  actor_user_id String? @db.Uuid\n  post_id String? @db.Uuid\n  comment_id String? @db.Uuid\n  type String\n  status String\n  title String?\n  body String?\n  action_url String? @db.VarChar(80000)\n  failure_reason String?\n  created_at DateTime @db.Timestamptz\n  delivered_at DateTime?\n  read_at DateTime?\n  deleted_at DateTime?\n  recipientUser discussion_board_users @relation(\"discussion_board_notifications_of_recipient_user_id\", fields: [recipient_user_id], references: [id], onDelete: Cascade)\n  actorUser discussion_board_users? @relation(\"discussion_board_notifications_of_actor_user_id\", fields: [actor_user_id], references: [id], onDelete: Cascade)\n  post discussion_board_posts? @relation(fields: [post_id], references: [id], onDelete: Cascade)\n  comment discussion_board_comments? @relation(fields: [comment_id], references: [id], onDelete: Cascade)\n  @@unique([recipient_user_id, type, action_url, created_at], map: \"discussion_board_notifications_recipient_user_id_type__7283f99a\")\n  @@index([recipient_user_id, status, created_at], map: \"discussion_board_notifications_recipient_user_id_statu_382ed7fb\")\n  @@index([actor_user_id])\n  @@index([post_id])\n  @@index([comment_id])\n  @@index([title(ops: raw(\\\"gin_trgm_ops\\\"))], type: Gin)\n  @@index([body(ops: raw(\\\"gin_trgm_ops\\\"))], type: Gin)\n}","description":"Allows the authenticated user to delete (soft-delete) a notification from their own notification center. The notification is marked as deleted using the deleted_at field, ensuring it is no longer visible to the user but retained for compliance/audit. Only the notification's recipient may perform this operation, and some business rules may prevent deletion of mandatory system or compliance notifications.\n\nRelated notification endpoints include listing (PATCH), viewing details (GET), and updating status (PUT). Attempts to delete notifications not owned by the user or already deleted notifications will result in clear error messages with audit trail compliance.","summary":"Soft-delete a notification by its identifier, removing it from the user's notification center.","parameters":[{"name":"notificationId","description":"Unique identifier of the notification to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["user"],"name":"erase","model_name":"discussion_board_notifications","soft_delete_column":"deleted_at","authorizationRole":"user","authorizationType":null},{"specification":"Retrieve a filtered, paginated list of notification preferences for the authenticated user. Each record specifies delivery channel options (in-app, email, push), frequency (immediate, digest), muted intervals, and categories. This operation queries the discussion_board_notification_preferences table, where each record is linked to a user and can cover multiple notification types. Used to display, manage, or export notification preferences per user.","path":"/discussionBoard/user/notificationPreferences","method":"patch","prisma_schemas":"model discussion_board_notification_preferences {\n  id String @id @db.Uuid\n  user_id String @db.Uuid\n  email_enabled Boolean\n  push_enabled Boolean\n  in_app_enabled Boolean\n  frequency String\n  categories String\n  mute_until DateTime? @db.Timestamptz\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  user discussion_board_users @relation(fields: [user_id], references: [id], onDelete: Cascade)\n  @@unique([user_id])\n  @@index([categories(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n}","description":"Allows the authenticated user to list and filter their notification channel preferences. Users can search preferences by delivery type (in-app, email, push), frequency, and categories. Responses include pertinent details, such as mute settings and coverage intervals. This enables users to optimize notification delivery across all categories and event types, ensuring alignment with privacy and engagement goals.\n\nAccess is always limited to the requesting user's own preferences; security checks prevent access to other users' preferences. This operation is typically used for displaying in profile, account, or notification settings screens.\n\nPotential error cases include searching for preferences before any are defined, attempting to access another user's preferences, or providing invalid pagination/filter parameters.","summary":"List and filter notification preferences for the authenticated user.","parameters":[],"requestBody":{"description":"Search, filter, or pagination options for listing notification preferences.","typeName":"IDiscussionBoardNotificationPreference.IRequest"},"responseBody":{"description":"Paginated and filtered list of notification channel preferences.","typeName":"IPageIDiscussionBoardNotificationPreference"},"authorizationRoles":["user"],"name":"index","model_name":"discussion_board_notification_preferences","soft_delete_column":null,"authorizationRole":"user","authorizationType":null},{"specification":"Retrieve the details of a specific notification preference record by its unique identifier. Each notification preference specifies user options for notification delivery, channel settings, muted/unmuted state, frequency (immediate or batch), and applicable categories. This operation queries the discussion_board_notification_preferences table, with strong access control (user can only view their own preferences).","path":"/discussionBoard/user/notificationPreferences/{preferenceId}","method":"get","prisma_schemas":"model discussion_board_notification_preferences {\n  id String @id @db.Uuid\n  user_id String @db.Uuid\n  email_enabled Boolean\n  push_enabled Boolean\n  in_app_enabled Boolean\n  frequency String\n  categories String\n  mute_until DateTime? @db.Timestamptz\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  user discussion_board_users @relation(fields: [user_id], references: [id], onDelete: Cascade)\n  @@unique([user_id])\n  @@index([categories(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n}","description":"Allows an authenticated user to retrieve the full details of a single notification preference configuration. The operation only permits access to preferences owned by the requesting user. Results include active channel selections (in-app, email, push), notification frequency, mute interval, and covered event categories.\n\nStrong ownership rules and security checks are enforced to prevent access to another user's preferences. Error responses are returned when the specified record does not exist, has been deleted, or does not belong to the requesting user.","summary":"Retrieve details of notification preference by preferenceId for the current user.","parameters":[{"name":"preferenceId","description":"Unique identifier of the notification preference record.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The detailed configuration for the requested notification preference.","typeName":"IDiscussionBoardNotificationPreference"},"authorizationRoles":["user"],"name":"at","model_name":"discussion_board_notification_preferences","soft_delete_column":null,"authorizationRole":"user","authorizationType":null},{"specification":"Allows users to update their notification preferences record by identifier, including changing delivery settings (enabling/disabling email, push, or in-app), updating the frequency (immediate, batch/digest), categories, or mute-until settings. Works with the discussion_board_notification_preferences table, with each record belonging to only one user. Strict access control ensures only the owner may update their preferences.","path":"/discussionBoard/user/notificationPreferences/{preferenceId}","method":"put","prisma_schemas":"model discussion_board_notification_preferences {\n  id String @id @db.Uuid\n  user_id String @db.Uuid\n  email_enabled Boolean\n  push_enabled Boolean\n  in_app_enabled Boolean\n  frequency String\n  categories String\n  mute_until DateTime? @db.Timestamptz\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  user discussion_board_users @relation(fields: [user_id], references: [id], onDelete: Cascade)\n  @@unique([user_id])\n  @@index([categories(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n}","description":"This endpoint enables authenticated users to update their notification preference configurations. Supported updates include changing which channels are enabled (such as toggling email, push, or in-app notifications), adjusting the delivery frequency, choosing applicable categories/events, or setting a new muted interval. This facilitates personalized notification control for each user.\n\nOwnership and authorization are strictly enforced. Attempts to update another user's notification preferences or settings not owned by the requester will fail with a precise business error. The update is reflected immediately and is available in subsequent operations to fetch or list preferences.","summary":"Update the configuration of a notification preference record by preferenceId.","parameters":[{"name":"preferenceId","description":"Identifier of the notification preference to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated configuration details for the notification preference.","typeName":"IDiscussionBoardNotificationPreference.IUpdate"},"responseBody":{"description":"The updated notification preference record.","typeName":"IDiscussionBoardNotificationPreference"},"authorizationRoles":["user"],"name":"update","model_name":"discussion_board_notification_preferences","soft_delete_column":null,"authorizationRole":"user","authorizationType":null},{"specification":"Allows a user to remove their notification preference configuration by identifier. Deletions are hard, reflecting business logic that only preferences (not notification records) are physically removed. The operation verifies user ownership and ensures that only the affected user may delete their own notification preferences. After deletion, notifications will follow default application settings for delivery.","path":"/discussionBoard/user/notificationPreferences/{preferenceId}","method":"delete","prisma_schemas":"model discussion_board_notification_preferences {\n  id String @id @db.Uuid\n  user_id String @db.Uuid\n  email_enabled Boolean\n  push_enabled Boolean\n  in_app_enabled Boolean\n  frequency String\n  categories String\n  mute_until DateTime? @db.Timestamptz\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  user discussion_board_users @relation(fields: [user_id], references: [id], onDelete: Cascade)\n  @@unique([user_id])\n  @@index([categories(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n}","description":"Enables authenticated users to delete (hard-delete) their notification preference configuration. This operation is irreversible and results in the removal of the preferences from the data store. Ownership checks ensure that only the requesting user may delete their own preference record. After deletion, system or default notification settings apply for the affected notification categories or channels.\n\nRelated operations include listing preferences, viewing by ID, and updating (PUT). Deletion attempts for non-existent or non-owned preferences are denied with explicit business error responses. Once deleted, preference configurations cannot be restored.","summary":"Delete a notification preference configuration by its identifier for the authenticated user.","parameters":[{"name":"preferenceId","description":"Unique identifier of the notification preference to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["user"],"name":"erase","model_name":"discussion_board_notification_preferences","soft_delete_column":null,"authorizationRole":"user","authorizationType":null},{"specification":"Retrieves a paginated and filtered list of notification subscription records for the authenticated user. This operation operates on the discussion_board_notification_subscriptions table, which stores subscriptions for in-app, push, or email notifications linked to resource updates (e.g., threads, categories, posts). Filtering and pagination enable users to efficiently manage and audit their active or inactive notification follow states, as well as search by target type/entity.","prisma_schemas":"model discussion_board_notification_subscriptions {\n  id String @id @db.Uuid\n  user_id String @db.Uuid\n  subscription_target_type String\n  subscription_target_id String @db.Uuid\n  created_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  user discussion_board_users @relation(fields: [user_id], references: [id], onDelete: Cascade)\n  @@unique([user_id, subscription_target_type, subscription_target_id], map: \"discussion_board_notification_subscriptions_user_id_su_160be914\")\n  @@index([subscription_target_type, subscription_target_id], map: \"discussion_board_notification_subscriptions_subscripti_eac49167\")\n}\nmodel discussion_board_users {\n  id String @id @db.Uuid\n  ...\n}\n","authorizationRoles":["user"],"description":"Retrieve a list of notification subscription records for the current authenticated user. This allows users to view and audit which discussions, categories, or entities they are currently following and receiving notifications for, based on preference.\n\nThe response contains paginated results, supports searching/filtering by notification target type (post, thread, category, tag), and enables inspection of subscription creation or deleted/unsubscribed state for compliance.\n\nSecurity checks ensure that only the requesting user's records are returned, protecting privacy and complying with business rules for user-managed notification subscriptions. Unauthenticated users are not permitted to access this endpoint.","summary":"Get a paginated list of the user's notification subscriptions.","parameters":[],"requestBody":{"description":"Search/filter and paging criteria for subscription query.","typeName":"IDiscussionBoardNotificationSubscription.IRequest"},"responseBody":{"description":"Paginated list of notification subscription summaries for the requesting user.","typeName":"IPageIDiscussionBoardNotificationSubscription.ISummary"},"name":"index","path":"/discussionBoard/user/notificationSubscriptions","method":"patch","model_name":"discussion_board_notification_subscriptions","soft_delete_column":"deleted_at","authorizationRole":"user","authorizationType":null},{"specification":"Retrieves the details of a specific notification subscription by its unique identifier. This operation is tied to the discussion_board_notification_subscriptions model and allows users to view the full metadata for a particular subscription, including what resource it is attached to, when it was created, and its current active or deleted status.","prisma_schemas":"model discussion_board_notification_subscriptions {\n  id String @id @db.Uuid\n  user_id String @db.Uuid\n  subscription_target_type String\n  subscription_target_id String @db.Uuid\n  created_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  user discussion_board_users @relation(fields: [user_id], references: [id], onDelete: Cascade)\n  @@unique([user_id, subscription_target_type, subscription_target_id], map: \"discussion_board_notification_subscriptions_user_id_su_160be914\")\n  @@index([subscription_target_type, subscription_target_id], map: \"discussion_board_notification_subscriptions_subscripti_eac49167\")\n}\nmodel discussion_board_users {\n  id String @id @db.Uuid\n  ...\n}\n","authorizationRoles":["user"],"description":"Fetch details about a specific notification subscription by its unique id. Users can inspect which thread, post, category, or tag they are watching and audit its creation time, target type/id, and active/deleted state.\n\nThe operation verifies that the subscription belongs to the requesting user. Security rules deny access to resources not owned by the user, supporting privacy requirements and compliance. This is typically used when a client drills down from a subscription list to view details about one subscription.","summary":"Get detailed information for a single notification subscription by id.","parameters":[{"name":"subscriptionId","description":"Unique notification subscription id (UUID) to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full notification subscription information.","typeName":"IDiscussionBoardNotificationSubscription"},"name":"at","path":"/discussionBoard/user/notificationSubscriptions/{subscriptionId}","method":"get","model_name":"discussion_board_notification_subscriptions","soft_delete_column":"deleted_at","authorizationRole":"user","authorizationType":null},{"specification":"Update a particular notification subscription, such as unsubscribing, modifying target, or toggling state. This endpoint allows users to manage which events or resources they receive notifications for. It modifies the discussion_board_notification_subscriptions model for a single record by id.","prisma_schemas":"model discussion_board_notification_subscriptions {\n  id String @id @db.Uuid\n  user_id String @db.Uuid\n  subscription_target_type String\n  subscription_target_id String @db.Uuid\n  created_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  user discussion_board_users @relation(fields: [user_id], references: [id], onDelete: Cascade)\n  @@unique([user_id, subscription_target_type, subscription_target_id], map: \"discussion_board_notification_subscriptions_user_id_su_160be914\")\n  @@index([subscription_target_type, subscription_target_id], map: \"discussion_board_notification_subscriptions_subscripti_eac49167\")\n}\n","authorizationRoles":["user"],"description":"Update a specific notification subscription by id for the authenticated user.\n\nThis enables users to unsubscribe, change which specific resource (post, category, etc.) they are following, or otherwise modify their subscription state. Only the subscription record belonging to the requesting user can be modified. Attempts to update others' subscriptions are denied.\n\nValidation rules enforce proper resource existence, correct target types, and compliance with unique constraints per user. Soft deletion is supported by setting deleted_at. The endpoint also updates the record's timestamp.\n","summary":"Update the properties of a user's notification subscription by id.","parameters":[{"name":"subscriptionId","description":"Unique id for the notification subscription to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update on the notification subscription.","typeName":"IDiscussionBoardNotificationSubscription.IUpdate"},"responseBody":{"description":"The updated notification subscription entity.","typeName":"IDiscussionBoardNotificationSubscription"},"name":"update","path":"/discussionBoard/user/notificationSubscriptions/{subscriptionId}","method":"put","model_name":"discussion_board_notification_subscriptions","soft_delete_column":"deleted_at","authorizationRole":"user","authorizationType":null},{"specification":"Deletes (soft deletes) a notification subscription by id. Uses the discussion_board_notification_subscriptions.deleted_at column to mark unsubscribed or removed records for retention and audit compliance, without permanent removal from the database.","prisma_schemas":"model discussion_board_notification_subscriptions {\n  id String @id @db.Uuid\n  user_id String @db.Uuid\n  subscription_target_type String\n  subscription_target_id String @db.Uuid\n  created_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  user discussion_board_users @relation(fields: [user_id], references: [id], onDelete: Cascade)\n  @@unique([user_id, subscription_target_type, subscription_target_id], map: \"discussion_board_notification_subscriptions_user_id_su_160be914\")\n  @@index([subscription_target_type, subscription_target_id], map: \"discussion_board_notification_subscriptions_subscripti_eac49167\")\n}\n","authorizationRoles":["user"],"description":"Unsubscribe or remove a notification subscription by marking it as deleted using the deleted_at field. This hides the subscription from a user's active subscription list but does not permanently erase it from the system, supporting audit/compliance policy.\n\nOnly records belonging to the requesting authenticated user can be deleted through this endpoint. Attempts to delete other users' subscriptions are forbidden. If the subscription is already deleted or does not exist, a descriptive error is returned.","summary":"Soft delete (unsubscribe) a user's notification subscription by id.","parameters":[{"name":"subscriptionId","description":"The unique id of the notification subscription to be deleted (soft deleted).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"name":"erase","path":"/discussionBoard/user/notificationSubscriptions/{subscriptionId}","method":"delete","model_name":"discussion_board_notification_subscriptions","soft_delete_column":"deleted_at","authorizationRole":"user","authorizationType":null},{"specification":"Provides a paginated, queryable list of the current user's active JWT token sessions. This enables users to see which devices and locations have active sessions, supporting device/session management features such as forced logout, audit, and compliance review. Uses the discussion_board_jwt_tokens table. Tokens returned are only for the authenticated user, never others.","prisma_schemas":"model discussion_board_jwt_tokens {\n  id String @id @db.Uuid\n  discussion_board_user_id String @db.Uuid\n  token String\n  issued_at DateTime @db.Timestamptz\n  expires_at DateTime @db.Timestamptz\n  revoked_at DateTime? @db.Timestamptz\n  device_info String?\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  user discussion_board_users @relation(fields: [discussion_board_user_id], references: [id], onDelete: Cascade)\n  @@unique([token])\n  @@index([discussion_board_user_id])\n  @@index([issued_at])\n  @@index([expires_at])\n}\nmodel discussion_board_users {\n  id String @id @db.Uuid\n  ...\n}\n","authorizationRoles":["user"],"description":"Retrieve a paginated set of active and historical JWT session tokens associated with the current user.\n\nThis endpoint supports device/session management, audit, and security workflows by allowing users to audit which devices, browsers, and locations have valid tokens for their account. Only tokens belonging to the requesting user are shown.\n\nVarious filtering criteria, such as token status (active, expired, revoked), issue time/range, and device metadata, may be supported in the query model. Use cases include reviewing suspicious sessions, logging out other devices, and visibility into active sessions for compliance.","summary":"List/manage a user's active and historical JWT token sessions.","parameters":[],"requestBody":{"description":"Filtering, sorting, and pagination options for JWT token query.","typeName":"IDiscussionBoardJwtToken.IRequest"},"responseBody":{"description":"Paginated set of JWT token session summaries for the user.","typeName":"IPageIDiscussionBoardJwtToken.ISummary"},"name":"index","path":"/discussionBoard/user/jwtTokens","method":"patch","model_name":"discussion_board_jwt_tokens","soft_delete_column":"deleted_at","authorizationRole":"user","authorizationType":null},{"specification":"Returns complete information for a specific JWT token session by its unique identifier (UUID). Provides session token, issue/expiry/revocation state, device metadata, and compliance/audit information for user self-service session review. Targets the discussion_board_jwt_tokens table and ensures the session is owned by the current user.","prisma_schemas":"model discussion_board_jwt_tokens {\n  id String @id @db.Uuid\n  discussion_board_user_id String @db.Uuid\n  token String\n  issued_at DateTime @db.Timestamptz\n  expires_at DateTime @db.Timestamptz\n  revoked_at DateTime? @db.Timestamptz\n  device_info String?\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  user discussion_board_users @relation(fields: [discussion_board_user_id], references: [id], onDelete: Cascade)\n  @@unique([token])\n  @@index([discussion_board_user_id])\n  @@index([issued_at])\n  @@index([expires_at])\n}\nmodel discussion_board_users {\n  id String @id @db.Uuid\n  ...\n}\n","authorizationRoles":["user"],"description":"Fetch JWT token details for a session matching the provided id. This enables the user to see token metadata including device/browser info, times of issue and expiry, forced logout/revocation state, etc.\n\nRequires session ownership: only the requesting user's JWT tokens may be accessed. Used in workflow where a user is reviewing their own authentication sessions for suspicious activity or security audit. Enables compliance with security and privacy policies.","summary":"Retrieve all information about a single JWT token session by id.","parameters":[{"name":"jwtTokenId","description":"The UUID id of the JWT token session to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full JWT token session information.","typeName":"IDiscussionBoardJwtToken"},"name":"at","path":"/discussionBoard/user/jwtTokens/{jwtTokenId}","method":"get","model_name":"discussion_board_jwt_tokens","soft_delete_column":"deleted_at","authorizationRole":"user","authorizationType":null},{"specification":"Update or revoke a specific JWT token session by its unique id. This operation lets users log out a particular device/session, revoke access, or update audit metadata. Targets only tokens owned by the requesting user using the discussion_board_jwt_tokens table. Security checks enforce session ownership and status (e.g., cannot update already-revoked tokens).","prisma_schemas":"model discussion_board_jwt_tokens {\n  id String @id @db.Uuid\n  discussion_board_user_id String @db.Uuid\n  token String\n  issued_at DateTime @db.Timestamptz\n  expires_at DateTime @db.Timestamptz\n  revoked_at DateTime? @db.Timestamptz\n  device_info String?\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  user discussion_board_users @relation(fields: [discussion_board_user_id], references: [id], onDelete: Cascade)\n  @@unique([token])\n  @@index([discussion_board_user_id])\n  @@index([issued_at])\n  @@index([expires_at])\n}\n","authorizationRoles":["user"],"description":"Update (or revoke) a JWT token session record by id for the authenticated user. Permits device/session logout and state change for auditable control over which sessions remain valid.\n\nSecurity checks prevent modifying token records not owned by the user. Revocation timestamps and updated device_info or metadata may be set. No access to other users' JWT sessions is allowed. Used in security/audit scenarios such as forced device logout or session metadata correction.","summary":"Update (e.g. revoke) a user's JWT token session by id.","parameters":[{"name":"jwtTokenId","description":"JWT token session id (UUID) to update/revoke.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update or revoke the JWT session token (e.g. revoked_at, device_info).","typeName":"IDiscussionBoardJwtToken.IUpdate"},"responseBody":{"description":"Updated JWT token session entity with new state.","typeName":"IDiscussionBoardJwtToken"},"name":"update","path":"/discussionBoard/user/jwtTokens/{jwtTokenId}","method":"put","model_name":"discussion_board_jwt_tokens","soft_delete_column":"deleted_at","authorizationRole":"user","authorizationType":null},{"specification":"Deletes (soft-deletes) a JWT session token for the authenticated user by its unique id. The soft deletion sets the deleted_at column in discussion_board_jwt_tokens, making the token session invisible to the user but available for audits and compliance—this does not physically erase the record or invalidate the session if not revoked in advance.","prisma_schemas":"model discussion_board_jwt_tokens {\n  id String @id @db.Uuid\n  discussion_board_user_id String @db.Uuid\n  token String\n  issued_at DateTime @db.Timestamptz\n  expires_at DateTime @db.Timestamptz\n  revoked_at DateTime? @db.Timestamptz\n  device_info String?\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  user discussion_board_users @relation(fields: [discussion_board_user_id], references: [id], onDelete: Cascade)\n  @@unique([token])\n  @@index([discussion_board_user_id])\n  @@index([issued_at])\n  @@index([expires_at])\n}\n","authorizationRoles":["user"],"description":"Soft delete (remove) a JWT token session from visibility for the authenticated user. The deleted_at field is set to hide the session in user interfaces, but the record is retained for audit and compliance. This does not terminate the actual session if the token itself is still valid and not previously revoked.\n\nThe operation verifies the session's ownership by the requesting user. Attempts to delete (soft-delete) sessions not owned by the user are denied. Already deleted or non-existent sessions result in an error message. This supports user-driven session hygiene and privacy controls.","summary":"Soft delete a user's JWT token session by id for privacy/audit hygiene.","parameters":[{"name":"jwtTokenId","description":"Unique identifier of the JWT token session to be soft deleted (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"name":"erase","path":"/discussionBoard/user/jwtTokens/{jwtTokenId}","method":"delete","model_name":"discussion_board_jwt_tokens","soft_delete_column":"deleted_at","authorizationRole":"user","authorizationType":null},{"specification":"Retrieves a paginated, filterable list of all refresh tokens currently stored in the system. This endpoint operates on the discussion_board_refresh_tokens table defined in the Prisma schema. Clients can use advanced search parameters such as user ID, issue date, expiration range, device info, and revoked status to audit or manage user sessions. It supports compliance, security audits, and allows admins or users with appropriate roles to see their own refresh tokens. The request utilizes a complex filter DTO and the response returns results in a standard paginated form with metadata including total count and current page.","path":"/discussionBoard/admin/refreshTokens","method":"patch","prisma_schemas":"model discussion_board_refresh_tokens {\n  id String @id @db.Uuid\n  discussion_board_user_id String @db.Uuid\n  refresh_token String\n  issued_at DateTime @db.Timestamptz\n  expires_at DateTime @db.Timestamptz\n  revoked_at DateTime? @db.Timestamptz\n  device_info String?\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  user discussion_board_users @relation(fields: [discussion_board_user_id], references: [id], onDelete: Cascade)\n  @@unique([refresh_token])\n  @@index([discussion_board_user_id])\n  @@index([issued_at])\n  @@index([expires_at])\n}","description":"This operation allows retrieval of a filtered and paginated list of refresh token entities in the discussion board system. It enables clients (such as admins or system users) to audit, search, and review refresh tokens that have been issued to users for maintaining session continuity. The operation supports filtering by user, token status, issuance/expiration time, and device metadata. Security is paramount as this operation exposes sensitive session data—access should be limited to users with proper authority, such as 'admin' or the user themselves viewing their own token list. Sensitive data such as raw token values should be masked as appropriate within business logic. Error handling includes returning clear messages for access denied, validation errors in filter parameters, and pagination out-of-range. This endpoint is crucial for users wishing to audit their own active sessions or for administrators conducting security and compliance reviews. Related endpoints include single token retrieval, revocation, and management of password and session policies.","summary":"Retrieve a paginated and filterable list of refresh tokens for session and security audit.","parameters":[],"requestBody":{"description":"Filter and pagination criteria for retrieving refresh tokens.","typeName":"IDiscussionBoardRefreshToken.IRequest"},"responseBody":{"description":"Paginated list of refresh tokens matching filter and search criteria.","typeName":"IPageIDiscussionBoardRefreshToken"},"authorizationRoles":["admin"],"name":"index","model_name":"discussion_board_refresh_tokens","soft_delete_column":"deleted_at","authorizationRole":"admin","authorizationType":null},{"specification":"Retrieves a single refresh token record, as defined in the discussion_board_refresh_tokens table, by its unique identifier (UUID). This operation is used to view session metadata, audit trails, and detect possible misuse or stale tokens. Returns all non-sensitive information about the token, including user reference, issued/expiry times, device context, and revocation status. Access is carefully controlled: typically only admins or the owner may access their own token.","path":"/discussionBoard/admin/refreshTokens/{refreshTokenId}","method":"get","prisma_schemas":"model discussion_board_refresh_tokens {\n  id String @id @db.Uuid\n  discussion_board_user_id String @db.Uuid\n  refresh_token String\n  issued_at DateTime @db.Timestamptz\n  expires_at DateTime @db.Timestamptz\n  revoked_at DateTime? @db.Timestamptz\n  device_info String?\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  user discussion_board_users @relation(fields: [discussion_board_user_id], references: [id], onDelete: Cascade)\n  @@unique([refresh_token])\n  @@index([discussion_board_user_id])\n  @@index([issued_at])\n  @@index([expires_at])\n}","description":"Allows retrieval of a single refresh token entity and its metadata by specifying its unique identifier in the path parameter. This endpoint provides details necessary for advanced session management, including audits, debugging user session issues, and detecting anomalous activity. The operation ensures sensitive information such as the actual token value is appropriately masked or excluded unless safely readable by a high-privilege actor (such as an admin). Authorization is enforced: only the user to whom the token belongs or an admin may use this endpoint. Handling includes not-found and access-denied error scenarios. Related endpoints: token list retrieval, token revocation or update, password reset flows.","summary":"Get detailed information for a specific refresh token by ID.","parameters":[{"name":"refreshTokenId","description":"The unique identifier (UUID) of the refresh token to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Refresh token details with metadata, excluding sensitive token value when not authorized.","typeName":"IDiscussionBoardRefreshToken"},"authorizationRoles":["admin"],"name":"at","model_name":"discussion_board_refresh_tokens","soft_delete_column":"deleted_at","authorizationRole":"admin","authorizationType":null},{"specification":"Updates the metadata of a specific refresh token by its unique ID. Supported updates may include revoking the token (for single-session logout), updating associated device metadata, or assigning additional audit markers. The endpoint operates on the discussion_board_refresh_tokens table and follows business rules for session revocation (e.g., users can revoke their own device tokens, admins can revoke any). The update payload must follow validation constraints, ensuring only fields such as revoked_at (to set revocation instantly), and device_info can be updated. Sensitive fields such as the token itself or user assignment cannot be changed. The response confirms the revision or revocation status in full detail.","path":"/discussionBoard/admin/refreshTokens/{refreshTokenId}","method":"put","prisma_schemas":"model discussion_board_refresh_tokens {\n  id String @id @db.Uuid\n  discussion_board_user_id String @db.Uuid\n  refresh_token String\n  issued_at DateTime @db.Timestamptz\n  expires_at DateTime @db.Timestamptz\n  revoked_at DateTime? @db.Timestamptz\n  device_info String?\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  user discussion_board_users @relation(fields: [discussion_board_user_id], references: [id], onDelete: Cascade)\n  @@unique([refresh_token])\n  @@index([discussion_board_user_id])\n  @@index([issued_at])\n  @@index([expires_at])\n}","description":"Updates a specific refresh token record's metadata, generally to revoke a session (set revoked_at) or update device/session information, for audit and compliance purposes. This action supports user-initiated single-device logout or administrative forced logout scenarios. Only mutable fields (revoked_at, device_info) are updatable; all other fields remain immutable for security and traceability. Endpoint enforces strict access control so that users may only update their own sessions and admins can act on all. Error conditions include invalid payload, forbidden field update attempts, and access denied. Related APIs include list, retrieve, and delete token operations.","summary":"Update (e.g., revoke) a refresh token to invalidate a session by ID.","parameters":[{"name":"refreshTokenId","description":"The unique identifier (UUID) of the refresh token to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields that may be updated for a refresh token, such as revoked_at and device_info.","typeName":"IDiscussionBoardRefreshToken.IUpdate"},"responseBody":{"description":"Updated refresh token entity after successful patching/revocation.","typeName":"IDiscussionBoardRefreshToken"},"authorizationRoles":["admin"],"name":"update","model_name":"discussion_board_refresh_tokens","soft_delete_column":"deleted_at","authorizationRole":"admin","authorizationType":null},{"specification":"Removes a specific refresh token from the system using hard or soft delete according to schema. This operation targets the discussion_board_refresh_tokens table and detaches the specified session reference, commonly as part of user logout from one device or system-admin session clean-up. The operation is generally a soft delete if deleted_at is present in the schema (token is marked as deleted, but record retained for audit/community compliance). Only session owners or administrators can perform this operation. The response is empty (HTTP 204).","path":"/discussionBoard/admin/refreshTokens/{refreshTokenId}","method":"delete","prisma_schemas":"model discussion_board_refresh_tokens {\n  id String @id @db.Uuid\n  discussion_board_user_id String @db.Uuid\n  refresh_token String\n  issued_at DateTime @db.Timestamptz\n  expires_at DateTime @db.Timestamptz\n  revoked_at DateTime? @db.Timestamptz\n  device_info String?\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  user discussion_board_users @relation(fields: [discussion_board_user_id], references: [id], onDelete: Cascade)\n  @@unique([refresh_token])\n  @@index([discussion_board_user_id])\n  @@index([issued_at])\n  @@index([expires_at])\n}","description":"Deletes a refresh token entry by its unique identifier by performing a soft delete (sets the deleted_at timestamp) for regulatory compliance and audit retention. This enables users or administrators to invalidate active sessions safely without irreversibly losing the audit trail. The endpoint applies strict authorization: only the owner user of the token or an admin may delete. Error conditions include access denied, resource not found, or token already invalidated. Associated operations include logout from all devices (mass-revocation), listing all tokens for a user, and session/token restoration under defined business flows.","summary":"Soft delete a refresh token to disable a session (logout from device).","parameters":[{"name":"refreshTokenId","description":"The unique identifier (UUID) of the refresh token to remove.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","model_name":"discussion_board_refresh_tokens","soft_delete_column":"deleted_at","authorizationRole":"admin","authorizationType":null},{"specification":"Searches and retrieves a paginated, filterable list of password reset requests and events from the discussion_board_password_resets table. This endpoint allows admins or self-service users to audit their password reset flows, see pending/used tokens, and review recent account recovery attempts. Supports filtering by user, reset token status, time of request/use, and other metadata. Designed for compliance, auditing, and security analyses.","path":"/discussionBoard/admin/passwordResets","method":"patch","prisma_schemas":"model discussion_board_password_resets {\n  id String @id @db.Uuid\n  discussion_board_user_id String @db.Uuid\n  reset_token String\n  expires_at DateTime @db.Timestamptz\n  used_at DateTime? @db.Timestamptz\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  user discussion_board_users @relation(fields: [discussion_board_user_id], references: [id], onDelete: Cascade)\n  @@unique([reset_token])\n  @@index([discussion_board_user_id])\n  @@index([expires_at])\n}","description":"Retrieves a filtered and paginated list of all password reset records. This allows clients to audit and review reset flows, rate-limiting, user status, and usage statistics for compliance and security. Filtering supports lookup by user, token status (used or pending), expiration window, and time-based review. Authorization is strictly enforced to admins or the owner. Sensitive reset token values are to be masked in business logic. Errors include access denied, validation failures, or out-of-range pagination queries. Related endpoints allow inspection, update, and deletion of individual password reset events.","summary":"Get filterable list of password reset token records for audit or account recovery management.","parameters":[],"requestBody":{"description":"Paginated search/filter definition for reset token events.","typeName":"IDiscussionBoardPasswordReset.IRequest"},"responseBody":{"description":"Paginated results of password reset records matching filter criteria.","typeName":"IPageIDiscussionBoardPasswordReset"},"authorizationRoles":["admin"],"name":"index","model_name":"discussion_board_password_resets","soft_delete_column":"deleted_at","authorizationRole":"admin","authorizationType":null},{"specification":"Fetches full metadata and status for a single password reset entry from the discussion_board_password_resets table using its unique ID. Used by account owners (typically via verified link) and admins to verify status during reset or investigate past events. Sensitive fields such as the reset token are masked or excluded as appropriate. Designed for regulatory and account recovery compliance. Only the token holder (owner) or admin may access details.","path":"/discussionBoard/admin/passwordResets/{passwordResetId}","method":"get","prisma_schemas":"model discussion_board_password_resets {\n  id String @id @db.Uuid\n  discussion_board_user_id String @db.Uuid\n  reset_token String\n  expires_at DateTime @db.Timestamptz\n  used_at DateTime? @db.Timestamptz\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  user discussion_board_users @relation(fields: [discussion_board_user_id], references: [id], onDelete: Cascade)\n  @@unique([reset_token])\n  @@index([discussion_board_user_id])\n  @@index([expires_at])\n}","description":"Retrieves details for a specific password reset flow event, given its unique identifier (UUID). Useful during ongoing reset for status verification or, for admins, to investigate anomalous password resets. Returns all metadata except for actual raw reset token (excluded for security compliance unless policy permits visibility to admins). Authorization is enforced for owners or admins. Handles not-found and unauthorized access as distinct error cases. Related: password reset request, verify, update/reset actions.","summary":"Get reset token flow detail by passwordResetId for support or account recovery.","parameters":[{"name":"passwordResetId","description":"Password reset record's unique ID (UUID) to view details for.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Password reset record details, including usage and expiry metadata.","typeName":"IDiscussionBoardPasswordReset"},"authorizationRoles":["admin"],"name":"at","model_name":"discussion_board_password_resets","soft_delete_column":"deleted_at","authorizationRole":"admin","authorizationType":null},{"specification":"Updates a password reset event for a given ID, usually to mark the token as used, extend expiry, or set audit metadata per admin or system logic (but generally, only certain fields should be mutable). The endpoint operates on the discussion_board_password_resets table. Only allowed fields (such as used_at, or expiry extension, not the raw reset token or user assignment) are updatable. Intended for password reset completion/confirmation flows and advanced support/audit scenarios. Restricts updates to token holders or admins. Cannot overwrite/modify sensitive immutable properties.","path":"/discussionBoard/admin/passwordResets/{passwordResetId}","method":"put","prisma_schemas":"model discussion_board_password_resets {\n  id String @id @db.Uuid\n  discussion_board_user_id String @db.Uuid\n  reset_token String\n  expires_at DateTime @db.Timestamptz\n  used_at DateTime? @db.Timestamptz\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  user discussion_board_users @relation(fields: [discussion_board_user_id], references: [id], onDelete: Cascade)\n  @@unique([reset_token])\n  @@index([discussion_board_user_id])\n  @@index([expires_at])\n}","description":"Updates information for a password reset event, typically to mark it as used after a successful reset, extend expiry under policy, or add support/audit metadata. This operation supports account recovery, support scenarios, and admin compliance investigations. Only specific fields (used_at, expires_at) are mutable; all others are immutable. Authorization is based on admin rights or token ownership. Error handling includes validation errors for invalid field modification and access control violations. Related endpoints: reset token list, single reset retrieval, deletion/cleanup of expired or used tokens.","summary":"Update a password reset request record (e.g., mark as used or extend) by ID.","parameters":[{"name":"passwordResetId","description":"Unique identifier (UUID) of the password reset entry to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update in one password reset record (e.g., used_at, expires_at).","typeName":"IDiscussionBoardPasswordReset.IUpdate"},"responseBody":{"description":"Full password reset record post-update, including latest use and expiry status.","typeName":"IDiscussionBoardPasswordReset"},"authorizationRoles":["admin"],"name":"update","model_name":"discussion_board_password_resets","soft_delete_column":"deleted_at","authorizationRole":"admin","authorizationType":null},{"specification":"Deletes a password reset record by its unique ID (UUID) from the discussion_board_password_resets table via soft deletion (sets deleted_at timestamp). Typical use cases: cleanup of expired tokens, compliance/GDPR erasure, or admin-driven incident response. Endpoints applies authorization rules to ensure only the token owner or admin can delete. The record is not physically removed, preserving audit and incident tracking. A 204/empty response is given on success.","path":"/discussionBoard/admin/passwordResets/{passwordResetId}","method":"delete","prisma_schemas":"model discussion_board_password_resets {\n  id String @id @db.Uuid\n  discussion_board_user_id String @db.Uuid\n  reset_token String\n  expires_at DateTime @db.Timestamptz\n  used_at DateTime? @db.Timestamptz\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  user discussion_board_users @relation(fields: [discussion_board_user_id], references: [id], onDelete: Cascade)\n  @@unique([reset_token])\n  @@index([discussion_board_user_id])\n  @@index([expires_at])\n}","description":"Deletes (soft-delete, by setting deleted_at) a password reset record in the system by its unique ID. Used for cleaning up expired or used tokens, or handling data retention in compliance scenarios. Only token owners or administrators may utilize this operation, with all deletions preserved for audit. Error responses are defined for cases where the resource is not found, already deleted, or when unauthorized access is attempted. Related APIs allow retrieval and update for both audit and recovery support.","summary":"Soft delete a password reset event for audit, cleanup, or GDPR compliance.","parameters":[{"name":"passwordResetId","description":"UUID of the password reset record to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","model_name":"discussion_board_password_resets","soft_delete_column":"deleted_at","authorizationRole":"admin","authorizationType":null},{"specification":"This operation searches and retrieves a paginated list of verification tokens based on advanced filters or administrative queries. The endpoint allows moderators or admins to query issued email verification, password reset, or multi-factor tokens, supporting investigations for account activation issues, token audits, abuse prevention, and compliance workflows. Filters can include status, purpose, issue time, or target user. The operation does not expose sensitive token values. It fully respects privacy boundaries set by the system and business logic, referring directly to the VerificationToken entity from the Prisma schema for all query parameters and response fields.","path":"/discussionBoard/admin/verificationTokens","method":"patch","prisma_schemas":"model discussion_board_verification_tokens {\n  id String @id @db.Uuid\n  discussion_board_user_id String @db.Uuid\n  verification_token String\n  purpose String\n  expires_at DateTime @db.Timestamptz\n  used_at DateTime? @db.Timestamptz\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  user discussion_board_users @relation(fields: [discussion_board_user_id], references: [id], onDelete: Cascade, map: \"discussion_board_verification_tokens_discussion_board__93fbe162\")\n}","description":"Retrieve a filtered, paginated list of verification tokens from the system for investigation or administration purposes.\n\nThis API allows authorized users (typically admin or moderator roles) to search, filter, and paginate verification tokens issued for account registration, password resets, or multi-factor authentication events. Query filters may include purpose (such as 'email_verification', 'password_reset'), issuance and expiration dates, and the user ID associated with the token. Tokens that are expired, used, or revoked will be included or excluded in results depending on filters.\n\nSecurity is paramount: token values are never returned directly. Only summary/admin-safe fields, such as creation/expiry timestamps, usage information, or token status, are exposed for administration and compliance. This operation serves as an audit mechanism supporting business and regulatory needs, with full traceability as described in the Prisma schema. Only users with proper administrative or moderation privileges can call this endpoint.","summary":"Search and retrieve a paginated list of verification tokens for audit and admin use","parameters":[],"requestBody":{"description":"Advanced search/filter and pagination criteria for verification tokens","typeName":"IDiscussionBoardVerificationToken.IRequest"},"responseBody":{"description":"Paginated set of verification token summary records matching search criteria","typeName":"IPageIDiscussionBoardVerificationToken.ISummary"},"authorizationRoles":["admin"],"name":"index","model_name":"discussion_board_verification_tokens","soft_delete_column":"deleted_at","authorizationRole":"admin","authorizationType":null},{"specification":"This operation fetches detailed information about a specific verification token, identified by its unique verificationTokenId, for administrative or auditing purposes. Typical use cases include resolving registration or recovery issues, investigating security incidents, and verifying token status in compliance workflows. The returned data includes status, user association, purpose, timestamps, and lifecycle state. Sensitive token value itself is not exposed, in line with best security practices. This corresponds to the VerificationToken entity from the Prisma DB schema.","path":"/discussionBoard/admin/verificationTokens/{verificationTokenId}","method":"get","prisma_schemas":"model discussion_board_verification_tokens {\n  id String @id @db.Uuid\n  discussion_board_user_id String @db.Uuid\n  verification_token String\n  purpose String\n  expires_at DateTime @db.Timestamptz\n  used_at DateTime? @db.Timestamptz\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  user discussion_board_users @relation(fields: [discussion_board_user_id], references: [id], onDelete: Cascade, map: \"discussion_board_verification_tokens_discussion_board__93fbe162\")\n}","description":"Retrieve full details about a verification token by its ID for audit, compliance, or troubleshooting use cases.\n\nThe endpoint supports administrative visibility into a specific verification token's lifecycle, including creation time, expiration, use status, and assigned user (via userId). This operation is designed for workflow troubleshooting, escalated support, and security incident analysis, and only available to authorized admin roles. Sensitive properties such as the raw verification token value are not exposed in the response.\n\nToken status and audit information must be handled in accordance with privacy and compliance rules described in the Prisma schema.","summary":"Retrieve detailed information about a specific verification token by ID","parameters":[{"name":"verificationTokenId","description":"Unique identifier for the target verification token","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full administrative details about the verification token","typeName":"IDiscussionBoardVerificationToken"},"authorizationRoles":["admin"],"name":"at","model_name":"discussion_board_verification_tokens","soft_delete_column":"deleted_at","authorizationRole":"admin","authorizationType":null},{"specification":"This operation updates a verification token record (excluding the actual token value) for administrative tasks such as marking it as used, adjusting lifecycle status, or correcting metadata. Admins might use this to adjust expiry or correct assignment in rare operational scenarios. The VerificationToken entity is referenced, and only non-sensitive mutable properties (excluding the raw token value) can be changed. Use cases include error correction, compliance-driven updates, or workflow escalation handling. All actions are logged for audit compliance.","path":"/discussionBoard/admin/verificationTokens/{verificationTokenId}","method":"put","prisma_schemas":"model discussion_board_verification_tokens {\n  id String @id @db.Uuid\n  discussion_board_user_id String @db.Uuid\n  verification_token String\n  purpose String\n  expires_at DateTime @db.Timestamptz\n  used_at DateTime? @db.Timestamptz\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  user discussion_board_users @relation(fields: [discussion_board_user_id], references: [id], onDelete: Cascade, map: \"discussion_board_verification_tokens_discussion_board__93fbe162\")\n}","description":"Update metadata or non-sensitive properties of a verification token, such as adjusting expiration, marking as used, or updating administrative notes.\n\nThis operation is restricted to administrative and compliance staff, as changes to verification tokens can impact security and account activation workflows. The operation never allows direct modification of the token value itself. All property updates are subject to detailed audit logging per compliance requirements. Only the fields allowed in the IDiscussionBoardVerificationToken.IUpdate schema may be changed.\n\nTypical use cases include resolving user support escalations, compliance-driven metadata updates, or exceptional case workflow adjustments. Full compliance with the Prisma schema's field definitions and relations is enforced.","summary":"Update non-sensitive verification token metadata (admin only)","parameters":[{"name":"verificationTokenId","description":"Unique identifier for the target verification token","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"New values for updatable verification token fields (excluding the token string)","typeName":"IDiscussionBoardVerificationToken.IUpdate"},"responseBody":{"description":"Verification token record after update","typeName":"IDiscussionBoardVerificationToken"},"authorizationRoles":["admin"],"name":"update","model_name":"discussion_board_verification_tokens","soft_delete_column":"deleted_at","authorizationRole":"admin","authorizationType":null},{"specification":"This operation irreversibly deletes a verification token for administrative or compliance reasons. The underlying model supports soft deletion via the deleted_at field, so this operation marks the record as deleted (soft delete), preserving record state for future audit. Permanent removal only occurs through compliance policy. Use cases include regulatory purges, resolution of security incidents, or cleaning up expired records during administrative operations. The model's Prisma schema is referenced for soft delete handling.","path":"/discussionBoard/admin/verificationTokens/{verificationTokenId}","method":"delete","prisma_schemas":"model discussion_board_verification_tokens {\n  id String @id @db.Uuid\n  discussion_board_user_id String @db.Uuid\n  verification_token String\n  purpose String\n  expires_at DateTime @db.Timestamptz\n  used_at DateTime? @db.Timestamptz\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  user discussion_board_users @relation(fields: [discussion_board_user_id], references: [id], onDelete: Cascade, map: \"discussion_board_verification_tokens_discussion_board__93fbe162\")\n}","description":"Soft delete a verification token by marking it as deleted, ensuring it is no longer used for authentication or workflow purposes, but is retained for audit and compliance traceability.\n\nAuthorized admins or compliance staff can use this operation for regulatory purposes, incident remediation, or to purge invalid/expired tokens. Actual record is not permanently removed from the database—deleted_at is set to current time for soft deletion. All actions are logged for compliance in accordance with the Prisma schema.","summary":"Soft delete a verification token by ID (admin only, audit retained)","parameters":[{"name":"verificationTokenId","description":"Unique identifier for the target verification token","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","model_name":"discussion_board_verification_tokens","soft_delete_column":"deleted_at","authorizationRole":"admin","authorizationType":null},{"specification":"Search and retrieve a paginated collection of data erasure requests. This operation enables compliance staff or users to review all data erasure requests (such as GDPR/CCPA data deletion), filtering by status, request date, user, or type. Key scenarios include privacy dashboard queries, regulatory audits, or user self-service request status checks. This operation references the DataErasureRequest entity in the Prisma schema and exposes only audit-appropriate details. The operation includes privacy controls for who can see which requests.","path":"/discussionBoard/admin/dataErasureRequests","method":"patch","prisma_schemas":"model discussion_board_data_erasure_requests {\n  id String @id @db.Uuid\n  discussion_board_user_id String @db.Uuid\n  request_type String\n  status String\n  submitted_at DateTime @db.Timestamptz\n  processed_at DateTime? @db.Timestamptz\n  justification String?\n  regulator_reference String?\n  verifier String?\n  verified_at DateTime? @db.Timestamptz\n  response_payload String?\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  user discussion_board_users @relation(fields: [discussion_board_user_id], references: [id], onDelete: Cascade, map: \"discussion_board_data_erasure_requests_discussion_boar_79e23a16\")\n}","description":"Retrieve a filtered, paginated list of data erasure requests.\n\nThis API allows administrators (or, where permitted, users) to find, filter, and paginate requests for account or data erasure under privacy regulations such as GDPR or CCPA. Filters support request status, type (full account, partial, post-only, etc.), time range, or user association.\n\nAll response records expose only summary or non-sensitive details to respect user privacy and regulatory boundaries. This operation inherently supports privacy dashboards, compliance monitoring, and proactive incident response as described in the business requirements and schema. Access is role-based: admins and compliance officers may see all; users may only see their own requests.","summary":"Search and retrieve data erasure requests for compliance, privacy, or user review","parameters":[],"requestBody":{"description":"Advanced search/filter/group criteria for data erasure requests","typeName":"IDiscussionBoardDataErasureRequest.IRequest"},"responseBody":{"description":"Paginated recovery of summary erasure requests matching search parameters","typeName":"IPageIDiscussionBoardDataErasureRequest.ISummary"},"authorizationRoles":["admin"],"name":"index","model_name":"discussion_board_data_erasure_requests","soft_delete_column":"deleted_at","authorizationRole":"admin","authorizationType":null},{"specification":"This operation fetches full details of a specific data erasure request, identified by its unique ID, for review or audit purposes. Use cases include user privacy dashboard inquiries, compliance investigations, and legal response workflows. The returned information includes request status, type, dates, justification, regulatory references, verifying entity, and other metadata. This aligns with the DataErasureRequest entity as defined in the Prisma schema.","path":"/discussionBoard/admin/dataErasureRequests/{dataErasureRequestId}","method":"get","prisma_schemas":"model discussion_board_data_erasure_requests {\n  id String @id @db.Uuid\n  discussion_board_user_id String @db.Uuid\n  request_type String\n  status String\n  submitted_at DateTime @db.Timestamptz\n  processed_at DateTime? @db.Timestamptz\n  justification String?\n  regulator_reference String?\n  verifier String?\n  verified_at DateTime? @db.Timestamptz\n  response_payload String?\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  user discussion_board_users @relation(fields: [discussion_board_user_id], references: [id], onDelete: Cascade, map: \"discussion_board_data_erasure_requests_discussion_boar_79e23a16\")\n}","description":"Retrieve the details and full history of a user data erasure request by its unique identifier.\n\nThis endpoint provides complete audit, compliance, and support insight into an individual erasure request, consistent with privacy law protocols. Exposed data includes request lifecycle status, type (full/partial), relevant timestamps, justification, agency references, and outcome payloads. The operation cross-references the user for full compliance context and business workflow integration. All actions are subject to user privacy and compliance disclosure policies specified in the schema.","summary":"Retrieve detailed information about a data erasure request by its ID","parameters":[{"name":"dataErasureRequestId","description":"Unique identifier for the data erasure request","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full details of the specified data erasure request","typeName":"IDiscussionBoardDataErasureRequest"},"authorizationRoles":["admin"],"name":"at","model_name":"discussion_board_data_erasure_requests","soft_delete_column":"deleted_at","authorizationRole":"admin","authorizationType":null},{"specification":"This operation enables users or compliance officers to submit a new data erasure request per applicable privacy laws (GDPR/CCPA). Submission requires specifying the type of erasure being requested and a justification if applicable. The system validates user eligibility, audits the submission, and triggers downstream compliance or operational workflows as required. Returned data includes a summary of the submitted request for later tracking and compliance evidence.","path":"/discussionBoard/admin/dataErasureRequests","method":"post","prisma_schemas":"model discussion_board_data_erasure_requests {\n  id String @id @db.Uuid\n  discussion_board_user_id String @db.Uuid\n  request_type String\n  status String\n  submitted_at DateTime @db.Timestamptz\n  processed_at DateTime? @db.Timestamptz\n  justification String?\n  regulator_reference String?\n  verifier String?\n  verified_at DateTime? @db.Timestamptz\n  response_payload String?\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  user discussion_board_users @relation(fields: [discussion_board_user_id], references: [id], onDelete: Cascade, map: \"discussion_board_data_erasure_requests_discussion_boar_79e23a16\")\n}","description":"Submit a new data erasure request to the platform, according to rights under GDPR, CCPA, or similar, for account or content deletion.\n\nThis POST endpoint receives all required erasure request data, such as type (full, partial, etc.), justification, and references to the submitting user. Validations occur for user status and eligibility, and detailed audit trail is created. A summary of the newly created request is returned in the response for recordkeeping, monitoring, or user-facing privacy dashboards. Privacy protocols and access restrictions align to those described in the schema and the business requirements.","summary":"Create and submit a new GDPR/CCPA data erasure request","parameters":[],"requestBody":{"description":"Data required for a new erasure request submission","typeName":"IDiscussionBoardDataErasureRequest.ICreate"},"responseBody":{"description":"The newly submitted data erasure request record","typeName":"IDiscussionBoardDataErasureRequest"},"authorizationRoles":["admin"],"name":"create","model_name":"discussion_board_data_erasure_requests","soft_delete_column":"deleted_at","authorizationRole":"admin","authorizationType":null},{"specification":"Update an existing data erasure request to reflect changes in status, outcome payload, compliance information, or administrative notes. Typical changes include status escalation, processed date, verification data, or regulator responses. The operation never allows changing the original submitting user or fundamental type post-creation. All updates are strictly logged for compliance, and the schema is checked to ensure field-level permissions. Used by compliance officers or admins to manage erasure lifecycle.","path":"/discussionBoard/admin/dataErasureRequests/{dataErasureRequestId}","method":"put","prisma_schemas":"model discussion_board_data_erasure_requests {\n  id String @id @db.Uuid\n  discussion_board_user_id String @db.Uuid\n  request_type String\n  status String\n  submitted_at DateTime @db.Timestamptz\n  processed_at DateTime? @db.Timestamptz\n  justification String?\n  regulator_reference String?\n  verifier String?\n  verified_at DateTime? @db.Timestamptz\n  response_payload String?\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  user discussion_board_users @relation(fields: [discussion_board_user_id], references: [id], onDelete: Cascade, map: \"discussion_board_data_erasure_requests_discussion_boar_79e23a16\")\n}","description":"Update compliance or administrative status fields for an existing data erasure request, aligning with business, privacy, and regulatory needs.\n\nAllowable updates include changing the request's status, admin/verification metadata, processed timestamp, or adding outcome details (response_payload). No alteration of the original submitting user or erasure request type is permitted for integrity. All changes are fully logged for legal and compliance safety. Only authorized compliance or admin roles may invoke this operation.","summary":"Update compliance details or status on a data erasure request","parameters":[{"name":"dataErasureRequestId","description":"ID of the data erasure request to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Data for compliance/admin fields to update on the erasure request","typeName":"IDiscussionBoardDataErasureRequest.IUpdate"},"responseBody":{"description":"Complete details of the updated erasure request record","typeName":"IDiscussionBoardDataErasureRequest"},"authorizationRoles":["admin"],"name":"update","model_name":"discussion_board_data_erasure_requests","soft_delete_column":"deleted_at","authorizationRole":"admin","authorizationType":null},{"specification":"Deletes a data erasure request by its unique identifier. This operation addresses the discussion_board_data_erasure_requests table, which holds user-initiated requests for account or data deletion, in accordance with GDPR/CCPA regulations. The deletion is a hard delete unless soft delete is supported by the model's deleted_at field. This API should be restricted to admin users only, ensuring that only authorized personnel can remove compliance-critical records. It does not perform actual user data erasure, but removes the request entry from the system for audit or compliance management.","prisma_schemas":"model discussion_board_data_erasure_requests {\n  id String @id @db.Uuid\n  discussion_board_user_id String @db.Uuid\n  request_type String\n  status String\n  submitted_at DateTime @db.Timestamptz\n  processed_at DateTime? @db.Timestamptz\n  justification String?\n  regulator_reference String?\n  verifier String?\n  verified_at DateTime? @db.Timestamptz\n  response_payload String?\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  user discussion_board_users @relation(fields: [discussion_board_user_id], references: [id], onDelete: Cascade, map: \"discussion_board_data_erasure_requests_discussion_boar_79e23a16\")\n  @@unique([discussion_board_user_id, request_type, submitted_at], map: \"discussion_board_data_erasure_requests_discussion_boar_0f72bde3\")\n  @@index([status])\n  @@index([submitted_at])\n  @@index([justification(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n}\n","description":"This operation permanently deletes a user data erasure request from the compliance records. The data erasure request is modelled in the discussion_board_data_erasure_requests table, which tracks user-initiated GDPR/CCPA-style requests for account/data removal.\n\nAdministrators use this endpoint to remove a specific erasure request after appropriate review or compliance handling. Deletion is performed via hard delete unless soft deletion (using deleted_at) is enabled. Access is strictly limited to admins to preserve regulatory compliance and auditability, ensuring that only authorized staff can manage or remove erasure records.\n\nIf the erasure request record includes personally identifiable justification, regulator references, or response payloads (per the schema), these are also irreversibly removed. Auditability must be preserved by logging all delete actions involving compliance records.","summary":"Permanently remove a data erasure request for compliance/audit management","parameters":[{"name":"dataErasureRequestId","description":"Unique ID of the data erasure request to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","model_name":"discussion_board_data_erasure_requests","soft_delete_column":"deleted_at","path":"/discussionBoard/admin/dataErasureRequests/{dataErasureRequestId}","method":"delete","authorizationRole":"admin","authorizationType":null},{"specification":"Retrieve a paginated, filtered, and sortable list of privacy dashboards, representing user privacy metrics and regulatory data access/portability exports. This operation queries the discussion_board_privacy_dashboards table, allowing admins to review summary records of user data access/export events. Results may be filtered by user, request date, or export status, supporting advanced compliance investigations.","prisma_schemas":"model discussion_board_privacy_dashboards {\n  id String @id @db.Uuid\n  discussion_board_user_id String @db.Uuid\n  access_requested_at DateTime @db.Timestamptz\n  access_fulfilled_at DateTime? @db.Timestamptz\n  dashboard_payload String\n  export_file_uri String? @db.VarChar(80000)\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  user discussion_board_users @relation(fields: [discussion_board_user_id], references: [id], onDelete: Cascade, map: \"discussion_board_privacy_dashboards_discussion_board_u_3d688974\")\n  @@unique([discussion_board_user_id, access_requested_at], map: \"discussion_board_privacy_dashboards_discussion_board_u_ee6f53f4\")\n  @@index([access_requested_at])\n  @@index([discussion_board_user_id], map: \"discussion_board_privacy_dashboards_discussion_board_u_1ef24e97\")\n}\n","description":"This operation provides compliance and admin users with a paginated/searchable collection of privacy dashboards. Each dashboard entry summarizes a user's data access/export history, including generated privacy reports, data portability files, and export URIs. Complex filtering by user, request time, or completion status is supported to facilitate regulatory review and incident-response investigations.\n\nPrivacy dashboard entries are generated when a user requests data access/export; this API allows staff to efficiently locate, examine, and verify fulfillment of such requests. Use-case examples include regular audit reviews, responding to regulatory inquiries, and supporting data subject rights fulfillment.\n\nSensitive fields in dashboard_payload and export_file_uri are redacted or filtered per role. Best practices are to allow only authorized admins access, and to trace all access for compliance.","summary":"Search and list privacy dashboards for compliance export/audit","parameters":[],"requestBody":{"description":"Filtering, searching, and paging criteria for privacy dashboard listing","typeName":"IDiscussionBoardPrivacyDashboard.IRequest"},"responseBody":{"description":"Paginated set of privacy dashboards conforming to query and filter parameters","typeName":"IPageIDiscussionBoardPrivacyDashboard"},"authorizationRoles":["admin"],"name":"index","model_name":"discussion_board_privacy_dashboards","soft_delete_column":"deleted_at","path":"/discussionBoard/admin/privacyDashboards","method":"patch","authorizationRole":"admin","authorizationType":null},{"specification":"Returns detailed information about a specific privacy dashboard entry, including user data access/export records, generated dashboard_payload, and associated export_file_uri if present. Targets the discussion_board_privacy_dashboards table for use in compliance, regulatory, or admin contexts, facilitating verification of data subject request fulfillment and regulatory export handling.","prisma_schemas":"model discussion_board_privacy_dashboards {\n  id String @id @db.Uuid\n  discussion_board_user_id String @db.Uuid\n  access_requested_at DateTime @db.Timestamptz\n  access_fulfilled_at DateTime? @db.Timestamptz\n  dashboard_payload String\n  export_file_uri String? @db.VarChar(80000)\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  user discussion_board_users @relation(fields: [discussion_board_user_id], references: [id], onDelete: Cascade, map: \"discussion_board_privacy_dashboards_discussion_board_u_3d688974\")\n  @@unique([discussion_board_user_id, access_requested_at], map: \"discussion_board_privacy_dashboards_discussion_board_u_ee6f53f4\")\n  @@index([access_requested_at])\n  @@index([discussion_board_user_id], map: \"discussion_board_privacy_dashboards_discussion_board_u_1ef24e97\")\n}\n","description":"Retrieves the full detail of a privacy dashboard export, including the time of user access request, fulfillment status, and links to any generated export files. This endpoint is intended for compliance audits or in response to user-initiated access/portability requests, so only admins or compliance officers may access it.\n\nAll details relating to fulfilled data portability, JSON dashboards, and associated files are exposed to admins. For privacy reasons, user ownership of the record must be validated. The operation should be fully auditable, tracking all accesses for compliance.","summary":"Retrieve details of a compliance privacy dashboard entry","parameters":[{"name":"privacyDashboardId","description":"Unique ID of the privacy dashboard to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full detail of requested privacy dashboard export and associated history","typeName":"IDiscussionBoardPrivacyDashboard"},"authorizationRoles":["admin"],"name":"at","model_name":"discussion_board_privacy_dashboards","soft_delete_column":"deleted_at","path":"/discussionBoard/admin/privacyDashboards/{privacyDashboardId}","method":"get","authorizationRole":"admin","authorizationType":null},{"specification":"Creates a new privacy dashboard entry representing a user data access/export request for compliance or regulatory purposes, typically reflecting a GDPR/CCPA user data download or privacy summary generation event. Records metadata, export status, and link to the data file if generated. Only compliance, admin, or system processes should access this endpoint.","prisma_schemas":"model discussion_board_privacy_dashboards {\n  id String @id @db.Uuid\n  discussion_board_user_id String @db.Uuid\n  access_requested_at DateTime @db.Timestamptz\n  access_fulfilled_at DateTime? @db.Timestamptz\n  dashboard_payload String\n  export_file_uri String? @db.VarChar(80000)\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  user discussion_board_users @relation(fields: [discussion_board_user_id], references: [id], onDelete: Cascade, map: \"discussion_board_privacy_dashboards_discussion_board_u_3d688974\")\n  @@unique([discussion_board_user_id, access_requested_at], map: \"discussion_board_privacy_dashboards_discussion_board_u_ee6f53f4\")\n  @@index([access_requested_at])\n  @@index([discussion_board_user_id], map: \"discussion_board_privacy_dashboards_discussion_board_u_1ef24e97\")\n}\n","description":"Creates a new privacy dashboard record, used to track a user's request for data access or privacy report export as required for regulatory (GDPR/CCPA) compliance. This operation is only used by compliance staff, automation, or admin workflows—not normal end users.\n\nRequest body captures all required metadata: user, time of request, (optionally) link to fulfillment/export, and the generated privacy summary information. All access and creation of privacy dashboard records must be auditable for regulatory reasons. Duplicate records for the same user and request datetime are prohibited by schema uniqueness.\n\nAppropriate validation is required to ensure only authorized staff/systems invoke this API, and that all provided information conforms to the schema and privacy requirements.","summary":"Create a new compliance privacy dashboard record for user data access/export","parameters":[],"requestBody":{"description":"Data access/export event metadata and details for privacy dashboard creation","typeName":"IDiscussionBoardPrivacyDashboard.ICreate"},"responseBody":{"description":"The resulting privacy dashboard record with assigned ID and all metadata fields","typeName":"IDiscussionBoardPrivacyDashboard"},"authorizationRoles":["admin"],"name":"create","model_name":"discussion_board_privacy_dashboards","soft_delete_column":"deleted_at","path":"/discussionBoard/admin/privacyDashboards","method":"post","authorizationRole":"admin","authorizationType":null},{"specification":"Updates fields on an existing privacy dashboard record, allowing compliance or admin staff to adjust status, fulfillment time, or export file links for a user's data access/portability request. This is necessary for regulatory review, post-export fixes, or correction of metadata/timestamps.","prisma_schemas":"model discussion_board_privacy_dashboards {\n  id String @id @db.Uuid\n  discussion_board_user_id String @db.Uuid\n  access_requested_at DateTime @db.Timestamptz\n  access_fulfilled_at DateTime? @db.Timestamptz\n  dashboard_payload String\n  export_file_uri String? @db.VarChar(80000)\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  user discussion_board_users @relation(fields: [discussion_board_user_id], references: [id], onDelete: Cascade, map: \"discussion_board_privacy_dashboards_discussion_board_u_3d688974\")\n  @@unique([discussion_board_user_id, access_requested_at], map: \"discussion_board_privacy_dashboards_discussion_board_u_ee6f53f4\")\n  @@index([access_requested_at])\n  @@index([discussion_board_user_id], map: \"discussion_board_privacy_dashboards_discussion_board_u_1ef24e97\")\n}\n","description":"Updates an existing privacy dashboard entry, used for adjusting fields such as fulfillment status, export file URI, or dashboard summary content for a user data access/export request. This supports compliance investigations, corrections based on regulatory queries, and repair of potentially incomplete or previously errored exports.\n\nOnly compliance, regulatory, or admin staff are permitted to invoke this operation, which enforces schema-level field constraints and uniqueness where applicable. All modifications must be logged and auditable for compliance review. The privacy dashboard updated by this endpoint is identified by its unique ID in the path.","summary":"Update a compliance privacy dashboard entry for user data export/access","parameters":[{"name":"privacyDashboardId","description":"Unique ID of the privacy dashboard to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields to update on the privacy dashboard record (status, export URI, summary)","typeName":"IDiscussionBoardPrivacyDashboard.IUpdate"},"responseBody":{"description":"The updated privacy dashboard record, including all current metadata","typeName":"IDiscussionBoardPrivacyDashboard"},"authorizationRoles":["admin"],"name":"update","model_name":"discussion_board_privacy_dashboards","soft_delete_column":"deleted_at","path":"/discussionBoard/admin/privacyDashboards/{privacyDashboardId}","method":"put","authorizationRole":"admin","authorizationType":null},{"specification":"Permanently deletes a privacy dashboard record, which tracks data subject access/export activity for compliance and regulatory review. Soft deletion is supported via deleted_at field; record removal must be traceable and logged for audit. Access should be restricted to compliance and admin staff only.","prisma_schemas":"model discussion_board_privacy_dashboards {\n  id String @id @db.Uuid\n  discussion_board_user_id String @db.Uuid\n  access_requested_at DateTime @db.Timestamptz\n  access_fulfilled_at DateTime? @db.Timestamptz\n  dashboard_payload String\n  export_file_uri String? @db.VarChar(80000)\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  user discussion_board_users @relation(fields: [discussion_board_user_id], references: [id], onDelete: Cascade, map: \"discussion_board_privacy_dashboards_discussion_board_u_3d688974\")\n  @@unique([discussion_board_user_id, access_requested_at], map: \"discussion_board_privacy_dashboards_discussion_board_u_ee6f53f4\")\n  @@index([access_requested_at])\n  @@index([discussion_board_user_id], map: \"discussion_board_privacy_dashboards_discussion_board_u_1ef24e97\")\n}\n","description":"Deletes a privacy dashboard record from the compliance management tables, reflecting removal of a data subject access/export event record. This operation supports soft deletion by populating the deleted_at timestamp. All deletion operations must be logged for compliance, and records should remain available for audit review until regulatory retention windows expire.\n\nAccess to this operation is strictly limited to compliance staff and system admins. The endpoint accepts the privacy dashboard ID in the path, and does not require a request body. Deletion is performed on the record, not on exported/user data itself.","summary":"Permanently (soft) delete a compliance privacy dashboard record by ID","parameters":[{"name":"privacyDashboardId","description":"Unique ID of the privacy dashboard entry to delete","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","model_name":"discussion_board_privacy_dashboards","soft_delete_column":"deleted_at","path":"/discussionBoard/admin/privacyDashboards/{privacyDashboardId}","method":"delete","authorizationRole":"admin","authorizationType":null},{"specification":"Provides a paginated and filterable index of compliance events for administrative and regulatory purposes, enabling compliance officers and system administrators to conduct audits, respond to investigations, and review all platform compliance actions such as data erasure, policy changes, and regulatory requests. Targets the discussion_board_compliance_events table.","prisma_schemas":"model discussion_board_compliance_events {\n  id String @id @db.Uuid\n  initiated_by_user_id String? @db.Uuid\n  event_type String\n  event_status String\n  event_details String?\n  detected_at DateTime @db.Timestamptz\n  resolved_at DateTime? @db.Timestamptz\n  regulatory_ticket String?\n  assigned_staff String?\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  initiator discussion_board_users? @relation(fields: [initiated_by_user_id], references: [id], onDelete: Cascade)\n  @@unique([event_type, detected_at])\n  @@index([event_status])\n  @@index([detected_at])\n  @@index([event_details(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n}\n","description":"This endpoint allows compliance and admin users to search, page, and filter through all compliance event records on the platform. Each compliance event entry may represent a regulatory request, data erasure, policy update, or any other compliance activity tracked in the table. Advanced queries by initiated user, event type, date, assignment, or status are supported.\n\nThe endpoint returns a paginated list of matching events suitable for review, reporting, or regulatory inquiry responses. Only admin users may perform this operation, and all searches and accesses must be logged for audit. This is a read-only operation; no modification or deletion of compliance events is supported here.","summary":"Search and retrieve paginated compliance events for audit/regulatory review","parameters":[],"requestBody":{"description":"Filtering, sorting, and paging parameters for compliance event search/index","typeName":"IDiscussionBoardComplianceEvent.IRequest"},"responseBody":{"description":"Paginated set of compliance events matching search criteria","typeName":"IPageIDiscussionBoardComplianceEvent"},"authorizationRoles":["admin"],"name":"index","model_name":"discussion_board_compliance_events","soft_delete_column":"deleted_at","path":"/discussionBoard/admin/complianceEvents","method":"patch","authorizationRole":"admin","authorizationType":null},{"specification":"Retrieves full details about a single compliance event for audit, regulatory, or admin review. Targets the discussion_board_compliance_events table; exposes all relevant data for a given compliance incident, including event type, status, details, timestamps, regulator references, and assigned staff. Supports compliance, audit, and investigation workflows.","prisma_schemas":"model discussion_board_compliance_events {\n  id String @id @db.Uuid\n  initiated_by_user_id String? @db.Uuid\n  event_type String\n  event_status String\n  event_details String?\n  detected_at DateTime @db.Timestamptz\n  resolved_at DateTime? @db.Timestamptz\n  regulatory_ticket String?\n  assigned_staff String?\n  created_at DateTime @db.Timestamptz\n  updated_at DateTime @db.Timestamptz\n  deleted_at DateTime? @db.Timestamptz\n  initiator discussion_board_users? @relation(fields: [initiated_by_user_id], references: [id], onDelete: Cascade)\n  @@unique([event_type, detected_at])\n  @@index([event_status])\n  @@index([detected_at])\n  @@index([event_details(ops: raw(\"gin_trgm_ops\"))], type: Gin)\n}\n","description":"Returns full compliance/audit-level details of an individual compliance event as tracked in the system. Typical use cases include regulatory reporting, internal admin review, or compliance workflow management. Only administrative or compliance users can access this endpoint.\n\nThe record contains type, status, assignment, timestamps, regulator reference if present, and all event-specific details. Any access to this endpoint should be logged to preserve the audit trail. Deletion or modification of event records is not provided by this API operation.","summary":"Get details for a single compliance event record by ID","parameters":[{"name":"complianceEventId","description":"Unique ID of the compliance event to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full detail of the compliance event matching the given identifier","typeName":"IDiscussionBoardComplianceEvent"},"authorizationRoles":["admin"],"name":"at","model_name":"discussion_board_compliance_events","soft_delete_column":"deleted_at","path":"/discussionBoard/admin/complianceEvents/{complianceEventId}","method":"get","authorizationRole":"admin","authorizationType":null},{"specification":"This operation retrieves detailed audit information for a specific export log entry, identified by its unique exportLogId. It operates on the discussion_board_export_logs table in the Prisma schema, returning all available details such as requester, file URI, status, export date, file type, and audit metadata. This is a read-only operation providing the full context needed by administrators or compliance staff to review individual export events, their status, and relevant audit details.","path":"/discussionBoard/admin/exportLogs/{exportLogId}","method":"get","prisma_schemas":"/// Tracks all exports and downloads of compliance, audit, or user privacy\n/// data (for regulatory evidence). Includes target type (user, regulator,\n/// legal), file info, requester, and status for traceability. Provides\n/// evidence for meeting data export/portability requirements. Distinct from\n/// privacy dashboards as this logs every generated file event.\n///\n/// @namespace Compliance\n/// @author AutoBE - https://github.com/wrtnlabs/autobe\nmodel discussion_board_export_logs {\n  //----\n  // COLUMNS\n  //----\n  /// Primary Key.\n  id String @id @db.Uuid\n  \n  /// The user (or staff) requesting the export file. FK to {@link\n  /// discussion_board_users.id}. Nullable to support external/automated\n  /// exports.\n  requested_by_user_id String? @db.Uuid\n  \n  /// Export target: user, regulator, admin, legal, etc. Used to segment export\n  /// type for audit.\n  target_type String\n  \n  /// Download URI for the exported data/logs file.\n  file_uri String @db.VarChar(80000)\n  \n  /// MIME type or descriptor of file (e.g. application/json, application/pdf,\n  /// csv, xml, etc.).\n  file_type String\n  \n  /// When export was generated.\n  exported_at DateTime @db.Timestamptz\n  \n  /// Export status (pending, available, expired, failed).\n  status String\n  \n  /// Timestamp when the export log was created.\n  created_at DateTime @db.Timestamptz\n  \n  /// Timestamp when this record was last updated.\n  updated_at DateTime @db.Timestamptz\n  \n  /// Soft-deleted timestamp (null for active/log-retained).\n  deleted_at DateTime? @db.Timestamptz\n  \n  //----\n  // RELATIONS\n  //----\n  requester discussion_board_users? @relation(fields: [requested_by_user_id], references: [id], onDelete: Cascade)\n  \n  @@unique([file_uri])\n  @@index([target_type])\n  @@index([requested_by_user_id])\n}\n","description":"Get the full details and audit record for a specific export log, identified by exportLogId. This read-only operation returns requester information, file location, export timing, type, status, and trace metadata for compliance or forensic review.\n\nThe endpoint ensures only authorized admins can access potentially sensitive export histories. It supports compliance and audit by providing all relevant context for a given export event logged in the system.\n\nIf the exportLogId does not correspond to an existing record, the operation should return an appropriate error response indicating not found or unauthorized access, as relevant.","summary":"Retrieve audit details for a specific export log record by ID.","parameters":[{"name":"exportLogId","description":"Unique identifier of the export log record to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information and audit data of the specified export log event.","typeName":"IDiscussionBoardExportLog"},"authorizationRoles":["admin"],"name":"at","model_name":"discussion_board_export_logs","soft_delete_column":"deleted_at","authorizationRole":"admin","authorizationType":null},{"specification":"This operation retrieves a paginated list of export log records for compliance, audit, or user privacy data exports in the discussion board system. It allows administrative users to search and filter export logs based on various criteria, including the type of export (user, regulator, legal), status (pending, available, expired, failed), file type, and user requester. This operation supports advanced search, sorting, and pagination capabilities.\n\nIt operates on the discussion_board_export_logs table from the Prisma schema. This table maintains audit and traceability records for every export file generated on the platform, including download URI, file type, requester, exported date, and overall export status. The operation helps compliance and admin roles efficiently review export activities and fulfill regulatory data portability obligations.\n\nAuthorization for this endpoint should be limited to users with the admin role. Result data includes only audit and export details permissible for such roles; no personal user PII (beyond IDs) should be exposed in the summary for privacy protection. Related endpoints include detail retrieval (GET /exportLogs/{exportLogId}) and export log creation/update.","path":"/discussionBoard/admin/exportLogs","method":"patch","prisma_schemas":"/// Tracks all exports and downloads of compliance, audit, or user privacy\n/// data (for regulatory evidence). Includes target type (user, regulator,\n/// legal), file info, requester, and status for traceability. Provides\n/// evidence for meeting data export/portability requirements. Distinct from\n/// privacy dashboards as this logs every generated file event.\n///\n/// @namespace Compliance\n/// @author AutoBE - https://github.com/wrtnlabs/autobe\nmodel discussion_board_export_logs {\n  //----\n  // COLUMNS\n  //----\n  /// Primary Key.\n  id String @id @db.Uuid\n  \n  /// The user (or staff) requesting the export file. FK to {@link\n  /// discussion_board_users.id}. Nullable to support external/automated\n  /// exports.\n  requested_by_user_id String? @db.Uuid\n  \n  /// Export target: user, regulator, admin, legal, etc. Used to segment export\n  /// type for audit.\n  target_type String\n  \n  /// Download URI for the exported data/logs file.\n  file_uri String @db.VarChar(80000)\n  \n  /// MIME type or descriptor of file (e.g. application/json, application/pdf,\n  /// csv, xml, etc.).\n  file_type String\n  \n  /// When export was generated.\n  exported_at DateTime @db.Timestamptz\n  \n  /// Export status (pending, available, expired, failed).\n  status String\n  \n  /// Timestamp when the export log was created.\n  created_at DateTime @db.Timestamptz\n  \n  /// Timestamp when this record was last updated.\n  updated_at DateTime @db.Timestamptz\n  \n  /// Soft-deleted timestamp (null for active/log-retained).\n  deleted_at DateTime? @db.Timestamptz\n  \n  //----\n  // RELATIONS\n  //----\n  requester discussion_board_users? @relation(fields: [requested_by_user_id], references: [id], onDelete: Cascade)\n  \n  @@unique([file_uri])\n  @@index([target_type])\n  @@index([requested_by_user_id])\n}\n","description":"Retrieve a filtered, paginated list of export log records used for tracking downloads and exports of compliance, audit, or privacy data. This operation enables administrators and compliance teams to monitor the lifecycle of export files, audit export activity, and investigate export history for regulatory and business needs.\n\nThe endpoint supports advanced searching, filtering (by target type, status, file type), and configurable sorting mechanisms. Administrators can use this API to review which users or staff requested particular exports, when files were made available, and the current status of each logged event.\n\nData returned does not include personal PII outside of user identifiers for audit. The endpoint only exposes information to authorized admin users. Use this operation together with detailed retrieval and update endpoints to audit or manage export log records.","summary":"Retrieve and filter export log records with pagination for compliance audit.","parameters":[],"requestBody":{"description":"Advanced search and pagination request for export log records.","typeName":"IDiscussionBoardExportLog.IRequest"},"responseBody":{"description":"Paginated list of export log records matching search criteria.","typeName":"IPageIDiscussionBoardExportLog.ISummary"},"authorizationRoles":["admin"],"name":"index","model_name":"discussion_board_export_logs","soft_delete_column":"deleted_at","authorizationRole":"admin","authorizationType":null},{"specification":"This operation creates a new export log record to track the generation or delivery of compliance, audit, or privacy data files in the platform. Administrators can record the outcome of export requests, including requester, type, file URI, file type, export date, and initial status. This is a write operation for managing compliance traceability and auditability in the discussion board system.","path":"/discussionBoard/admin/exportLogs","method":"post","prisma_schemas":"/// Tracks all exports and downloads of compliance, audit, or user privacy\n/// data (for regulatory evidence). Includes target type (user, regulator,\n/// legal), file info, requester, and status for traceability. Provides\n/// evidence for meeting data export/portability requirements. Distinct from\n/// privacy dashboards as this logs every generated file event.\n///\n/// @namespace Compliance\n/// @author AutoBE - https://github.com/wrtnlabs/autobe\nmodel discussion_board_export_logs {\n  //----\n  // COLUMNS\n  //----\n  /// Primary Key.\n  id String @id @db.Uuid\n  \n  /// The user (or staff) requesting the export file. FK to {@link\n  /// discussion_board_users.id}. Nullable to support external/automated\n  /// exports.\n  requested_by_user_id String? @db.Uuid\n  \n  /// Export target: user, regulator, admin, legal, etc. Used to segment export\n  /// type for audit.\n  target_type String\n  \n  /// Download URI for the exported data/logs file.\n  file_uri String @db.VarChar(80000)\n  \n  /// MIME type or descriptor of file (e.g. application/json, application/pdf,\n  /// csv, xml, etc.).\n  file_type String\n  \n  /// When export was generated.\n  exported_at DateTime @db.Timestamptz\n  \n  /// Export status (pending, available, expired, failed).\n  status String\n  \n  /// Timestamp when the export log was created.\n  created_at DateTime @db.Timestamptz\n  \n  /// Timestamp when this record was last updated.\n  updated_at DateTime @db.Timestamptz\n  \n  /// Soft-deleted timestamp (null for active/log-retained).\n  deleted_at DateTime? @db.Timestamptz\n  \n  //----\n  // RELATIONS\n  //----\n  requester discussion_board_users? @relation(fields: [requested_by_user_id], references: [id], onDelete: Cascade)\n  \n  @@unique([file_uri])\n  @@index([target_type])\n  @@index([requested_by_user_id])\n}\n","description":"Create and record a new export log entry for tracking compliance and audit file deliveries in the discussion board service. Administrators can provide all necessary details about the export event—requester (if any), export target type, the URI of the export file, its MIME type, export date, and initial status—for full compliance traceability.\n\nThe endpoint will validate that all required fields are provided and that file URIs remain unique. This helps maintain a complete audit trail and ensures regulatory and business export events are documented.\n\nThis operation should only be accessible to users with the admin role, as it involves sensitive audit/audit log data and compliance actions.","summary":"Create a new export log entry for compliance or audit file delivery.","parameters":[],"requestBody":{"description":"Details for the export log record to be created.","typeName":"IDiscussionBoardExportLog.ICreate"},"responseBody":{"description":"The newly created export log record with all details.","typeName":"IDiscussionBoardExportLog"},"authorizationRoles":["admin"],"name":"create","model_name":"discussion_board_export_logs","soft_delete_column":"deleted_at","authorizationRole":"admin","authorizationType":null},{"specification":"This operation updates a specific export log entry, identified by its exportLogId. Administrators may update fields such as export status, file URI, or other relevant audit fields to reflect the real-time state of a managed export event. This is essential for ensuring accurate, up-to-date compliance reporting and traceability in the discussion board.","path":"/discussionBoard/admin/exportLogs/{exportLogId}","method":"put","prisma_schemas":"/// Tracks all exports and downloads of compliance, audit, or user privacy\n/// data (for regulatory evidence). Includes target type (user, regulator,\n/// legal), file info, requester, and status for traceability. Provides\n/// evidence for meeting data export/portability requirements. Distinct from\n/// privacy dashboards as this logs every generated file event.\n///\n/// @namespace Compliance\n/// @author AutoBE - https://github.com/wrtnlabs/autobe\nmodel discussion_board_export_logs {\n  //----\n  // COLUMNS\n  //----\n  /// Primary Key.\n  id String @id @db.Uuid\n  \n  /// The user (or staff) requesting the export file. FK to {@link\n  /// discussion_board_users.id}. Nullable to support external/automated\n  /// exports.\n  requested_by_user_id String? @db.Uuid\n  \n  /// Export target: user, regulator, admin, legal, etc. Used to segment export\n  /// type for audit.\n  target_type String\n  \n  /// Download URI for the exported data/logs file.\n  file_uri String @db.VarChar(80000)\n  \n  /// MIME type or descriptor of file (e.g. application/json, application/pdf,\n  /// csv, xml, etc.).\n  file_type String\n  \n  /// When export was generated.\n  exported_at DateTime @db.Timestamptz\n  \n  /// Export status (pending, available, expired, failed).\n  status String\n  \n  /// Timestamp when the export log was created.\n  created_at DateTime @db.Timestamptz\n  \n  /// Timestamp when this record was last updated.\n  updated_at DateTime @db.Timestamptz\n  \n  /// Soft-deleted timestamp (null for active/log-retained).\n  deleted_at DateTime? @db.Timestamptz\n  \n  //----\n  // RELATIONS\n  //----\n  requester discussion_board_users? @relation(fields: [requested_by_user_id], references: [id], onDelete: Cascade)\n  \n  @@unique([file_uri])\n  @@index([target_type])\n  @@index([requested_by_user_id])\n}\n","description":"Update the details of an export log record by ID, such as its status, file location URI, or exported time to reflect delivery or final audit outcomes. Administrators use this operation to keep export tracking up to date for proper compliance and regulatory reporting.\n\nThe endpoint requires valid admin privileges and a valid exportLogId. Input will be validated for audit accuracy, uniqueness (for file URI), and proper update sequencing.\n\nIf exportLogId does not correspond to a current record, the service will return an error indicating missing resource or access permission denial.","summary":"Update an existing export log record's audit data by ID.","parameters":[{"name":"exportLogId","description":"Unique identifier of the export log record to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update fields for the export log record.","typeName":"IDiscussionBoardExportLog.IUpdate"},"responseBody":{"description":"The updated export log record with audit data.","typeName":"IDiscussionBoardExportLog"},"authorizationRoles":["admin"],"name":"update","model_name":"discussion_board_export_logs","soft_delete_column":"deleted_at","authorizationRole":"admin","authorizationType":null},{"specification":"This operation deletes (soft-deletes) a specific export log entry by its exportLogId. The export log record will be retained for audit and compliance, but not included in routine export tracking or listings. Administrators use this function to manage the lifecycle, retention, and compliance status of export log records within the discussion board system.","path":"/discussionBoard/admin/exportLogs/{exportLogId}","method":"delete","prisma_schemas":"/// Tracks all exports and downloads of compliance, audit, or user privacy\n/// data (for regulatory evidence). Includes target type (user, regulator,\n/// legal), file info, requester, and status for traceability. Provides\n/// evidence for meeting data export/portability requirements. Distinct from\n/// privacy dashboards as this logs every generated file event.\n///\n/// @namespace Compliance\n/// @author AutoBE - https://github.com/wrtnlabs/autobe\nmodel discussion_board_export_logs {\n  //----\n  // COLUMNS\n  //----\n  /// Primary Key.\n  id String @id @db.Uuid\n  \n  /// The user (or staff) requesting the export file. FK to {@link\n  /// discussion_board_users.id}. Nullable to support external/automated\n  /// exports.\n  requested_by_user_id String? @db.Uuid\n  \n  /// Export target: user, regulator, admin, legal, etc. Used to segment export\n  /// type for audit.\n  target_type String\n  \n  /// Download URI for the exported data/logs file.\n  file_uri String @db.VarChar(80000)\n  \n  /// MIME type or descriptor of file (e.g. application/json, application/pdf,\n  /// csv, xml, etc.).\n  file_type String\n  \n  /// When export was generated.\n  exported_at DateTime @db.Timestamptz\n  \n  /// Export status (pending, available, expired, failed).\n  status String\n  \n  /// Timestamp when the export log was created.\n  created_at DateTime @db.Timestamptz\n  \n  /// Timestamp when this record was last updated.\n  updated_at DateTime @db.Timestamptz\n  \n  /// Soft-deleted timestamp (null for active/log-retained).\n  deleted_at DateTime? @db.Timestamptz\n  \n  //----\n  // RELATIONS\n  //----\n  requester discussion_board_users? @relation(fields: [requested_by_user_id], references: [id], onDelete: Cascade)\n  \n  @@unique([file_uri])\n  @@index([target_type])\n  @@index([requested_by_user_id])\n}\n","description":"Soft-delete a single export log entry by exportLogId. This operation will mark the log record as deleted using the 'deleted_at' column, preserving it for future compliance or incident review. The record will be omitted from non-audit log lookups after deletion.\n\nOnly users with the admin role may execute this operation. For audit and compliance, the operation should log the deletion's actor and timestamp. If the export log record is not found, a not found or error response will be provided.","summary":"Soft-delete an export log entry for compliance lifecycle management.","parameters":[{"name":"exportLogId","description":"Unique identifier of the export log record to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["admin"],"name":"erase","model_name":"discussion_board_export_logs","soft_delete_column":"deleted_at","authorizationRole":"admin","authorizationType":null}],"components":{"authorization":[{"name":"visitor","description":"Unauthenticated users who can browse public discussions but cannot participate or interact beyond viewing and searching. Typically uses read-only features and can view limited public profiles.","kind":"guest"},{"name":"user","description":"Authenticated members who can create, edit, and delete their own posts and comments, participate in voting/polling, and flag inappropriate content. They have standard participation privileges in open forums.","kind":"member"},{"name":"moderator","description":"Experienced members trusted to oversee discussions, moderate content, handle user reports, enforce community guidelines, and manage flagged posts/comments. Can restrict or suspend user accounts for violations.","kind":"member"},{"name":"admin","description":"System administrators with the highest permissions. Can manage users, roles, categories, system-wide settings, oversee all discussions, integrate external APIs, and maintain service compliance and security.","kind":"admin"}],"schemas":{"IAuthorizationToken":{"type":"object","properties":{"access":{"type":"string","description":"JWT access token for authenticated requests.\n\nThis token should be included in the Authorization header for subsequent\nauthenticated API requests as `Bearer {token}`."},"refresh":{"type":"string","description":"Refresh token for obtaining new access tokens.\n\nThis token can be used to request new access tokens when the current access\ntoken expires, extending the user's session."},"expired_at":{"type":"string","format":"date-time","description":"Access token expiration timestamp.\n\nISO 8601 date-time string indicating when the access token will expire and\ncan no longer be used for authentication."},"refreshable_until":{"type":"string","format":"date-time","description":"Refresh token expiration timestamp.\n\nISO 8601 date-time string indicating the latest time until which the\nrefresh token can be used to obtain new access tokens."}},"required":["access","refresh","expired_at","refreshable_until"],"description":"Authorization token response structure.\n\nThis interface defines the structure of the authorization token response\nreturned after successful user authentication. It contains both access and\nrefresh tokens along with their expiration information.\n\nThis token structure is automatically included in API schemas when the system\ndetects authorization roles in the requirements analysis phase. It provides a\nstandard format for JWT-based authentication across the generated backend\napplications."},"IDiscussionBoardVisitor.IJoin":{"type":"object","properties":{"user_agent":{"type":"string","description":"The User-Agent string of the visitor's device, used for analytics and security auditing. Typically captured from the HTTP header.\n\nOptional property. Storing this information can help with fraud detection and audit, but is not PII per business description."},"ip_address":{"type":"string","description":"Optional IP address of the visitor as seen by the server. Used only for audit, analytics, and abuse prevention. Nullable and not required for visitor creation."}},"required":[],"description":"Payload for visitor registration, allowing guests to start a session. Includes optional user_agent and ip_address fields. These are not required but are recommended for audit/compliance."},"IDiscussionBoardVisitor.IAuthorized":{"type":"object","properties":{"visitor_token":{"type":"string","description":"The unique visitor token issued by the system for this guest session. Used by the client for future authentication or session refreshes. Always a new opaque token."},"role":{"const":"visitor","description":"Constant role assignment 'visitor' indicating guest access level."},"issued_at":{"type":"string","format":"date-time","description":"ISO 8601 date-time string indicating when the guest token/session was issued."},"expires_at":{"type":"string","format":"date-time","description":"ISO 8601 date-time string when this visitor session expires and a refresh will be needed."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["visitor_token","role","issued_at","expires_at","token"],"description":"Authorized session/visitor token for a guest session. Contains all metadata needed for future refresh and audit, and always grants 'visitor' role only."},"IDiscussionBoardVisitor.IRefresh":{"type":"object","properties":{"visitor_token":{"type":"string","description":"Existing visitor access token issued by system. Sent by the client for session refresh operations."}},"required":["visitor_token"],"description":"Request payload for refreshing a guest (visitor) session token. Only the visitor_token is required."},"IDiscussionBoardUser.ICreate":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Registration email (login identifier). Must be unique in the system and a valid email address. Required for notification and password recovery."},"username":{"type":"string","description":"Unique site display username. Used as a handle/reference by other users. Must be unique. Required."},"password":{"type":"string","description":"User's plain text password (will be hashed on the server). Must meet password policy (minimum 10 chars, at least 1 uppercase, number, special character). Required."},"display_name":{"type":"string","description":"Optional display name/nickname for use in the UI. May be set to personalize the profile. Not required."},"consent":{"type":"boolean","description":"Indicates that the user has given explicit consent to the terms of service and privacy policy. Required per compliance."}},"required":["email","username","password","consent"],"description":"Payload for user account creation (standard member). Requires unique email, username, valid password, and consent. Optional display_name."},"IDiscussionBoardUser.IAuthorized":{"type":"object","properties":{"user":{"$ref":"#/components/schemas/IDiscussionBoardUserSummary","description":"Summary info about the authenticated user account (non-sensitive, non-auth fields only)."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["user","token"],"description":"Authorized response to user login/register/refresh. Contains user summary and issued tokens."},"IDiscussionBoardUser.ILogin":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"User's email address for login. Either this or username must be provided."},"username":{"type":"string","description":"User's site username for login. Either this or email must be provided."},"password":{"type":"string","description":"Plain text password. Required for login. Will be checked against password_hash."}},"required":["password"],"description":"Payload for user login attempts. Must provide password and either email or username (or both)."},"IDiscussionBoardUser.IRefresh":{"type":"object","properties":{"refresh_token":{"type":"string","description":"Valid refresh token string as issued during authentication. Used to obtain a new access token. Required."}},"required":["refresh_token"],"description":"Request payload for user access token refresh. Requires the refresh_token."},"IDiscussionBoardModerator.IJoin":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Email for registering a moderator. Must be unique and valid. Required for credential delivery."},"username":{"type":"string","description":"Unique display username for moderator identification. Required."},"password":{"type":"string","description":"Plain text password for moderator's account. Subject to password policy. Required."},"display_name":{"type":"string","description":"Optional display name for the moderator. Personalized identification. Not required."},"consent":{"type":"boolean","description":"Indicates moderator has consented to all terms of service and privacy. Required for compliance."}},"required":["email","username","password","consent"],"description":"Payload for new moderator registration. Contains unique email, username, password, optional display_name, and required consent."},"IDiscussionBoardUserSummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique user identifier (UUID)."},"email":{"type":"string","format":"email","description":"User's email address (unique)."},"username":{"type":"string","description":"Unique display username or handle."},"display_name":{"type":"string","description":"Optional user-friendly display name."},"is_verified":{"type":"boolean","description":"Email/account verification state. True if verified."},"is_suspended":{"type":"boolean","description":"True if the user is currently suspended."}},"required":["id","email","username","is_verified","is_suspended"],"description":"Non-sensitive summary information about a user account, suitable for embedding in authorization tokens or account info views."},"IDiscussionBoardModerator.IAuthorized":{"type":"object","properties":{"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"},"moderator":{"$ref":"#/components/schemas/IDiscussionBoardModerator","description":"Moderator profile and credential information, linked to the current authenticated session."}},"required":["token","moderator"],"description":"Authorization response upon moderator join or login. Contains JWT session token payload and full moderator profile for secure session initiation and subsequent authorization verification. Follows JWT lifecycle and system authentication standards."},"IDiscussionBoardModerator.ILogin":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Moderator's unique email address used for authentication and identity verification."},"password":{"type":"string","format":"password","description":"Raw password for authentication. Only used for login and never persisted beyond secure hash storage."}},"required":["email","password"],"description":"Request body for moderator login operation. Expects email/username and password. Used for credential verification in login flow, returning IAuthorized payload on success."},"IDiscussionBoardModerator.IRefresh":{"type":"object","properties":{"refresh_token":{"type":"string","description":"Refresh token returned during login or previous session refresh, required to issue a new session access token. Must be currently valid and non-revoked."}},"required":["refresh_token"],"description":"Request body for refreshing moderator session. Supplies a valid refresh token for lifecycle management, obtaining a renewed access/refresh token pair upon successful verification."},"IDiscussionBoardAdmin.ICreate":{"type":"object","properties":{"user_id":{"type":"string","format":"uuid","description":"ID of the verified user account to be elevated to admin role and associated with the admin privilege record."}},"required":["user_id"],"description":"Admin registration payload for assigning admin role to a given verified user. Used by platform superusers or compliance staff to grant high-privilege admin access. Only user_id is required for association."},"IDiscussionBoardAdmin.IAuthorized":{"type":"object","properties":{"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"},"admin":{"$ref":"#/components/schemas/IDiscussionBoardAdmin","description":"Admin profile data associated with the authenticated token/session."}},"required":["token","admin"],"description":"Admin authorization response sent upon join/login for privileged admin users. Contains both session tokens and full admin record for subsequent context-based access."},"IDiscussionBoardAdmin.ILogin":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Email address for admin authentication during login, as per admin assignment."},"password":{"type":"string","format":"password","description":"Plaintext password for admin login verification, never stored in raw form."}},"required":["email","password"],"description":"Admin login request body, used to authenticate email/username and password for established system-level administrator accounts."},"IDiscussionBoardAdmin.IRefresh":{"type":"object","properties":{"refresh_token":{"type":"string","description":"Refresh token for admin user session, used to obtain new access token within session lifecycle."}},"required":["refresh_token"],"description":"Admin session renewal request, expects the refresh token for valid session continuation and assigns new session tokens on successful validation."},"IDiscussionBoardCategory.IRequest":{"type":"object","properties":{"page":{"type":"integer","description":"Page number for pagination (1-based)."},"limit":{"type":"integer","description":"Maximum number of records per page."},"search":{"type":"string","description":"Free-text search term for category name or description."},"is_active":{"type":"boolean","description":"Optional filter to retrieve only active/inactive categories."},"sort_by":{"oneOf":[{"const":"name","description":"Field by which to sort the results."},{"const":"sort_order","description":"Field by which to sort the results."},{"const":"created_at","description":"Field by which to sort the results."}],"description":"Field by which to sort the results."},"sort_dir":{"oneOf":[{"const":"asc","description":"Direction for sorting (ascending or descending)."},{"const":"desc","description":"Direction for sorting (ascending or descending)."}],"description":"Direction for sorting (ascending or descending)."}},"required":[],"description":"Filtering, searching, and pagination criteria for category listing endpoints."},"IDiscussionBoardCategory":{"type":"object","description":"A discussion board category entity, as defined in the Prisma schema discussion_board_categories. This entity is used for organizing posts and threads into topical groups and includes all primary fields with comprehensive metadata. \n\n- The 'id' is a UUID primary key.\n- The 'name' is a unique, user-facing label like 'Politics'.\n- 'description' is optional and visible to users and moderators.\n- 'is_active' determines if this category is visible in the UI.\n- 'sort_order' affects manual display order.\n- 'created_at', 'updated_at', and 'deleted_at' provide audit/compliance traces.\n\nEach property is mapped directly from the Prisma schema, which supports CRUD and independent administration. Soft deletion is supported via 'deleted_at'.\n","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for this discussion board category. Primary key as defined in the Prisma schema (UUID format)."},"name":{"type":"string","description":"Display name for the category. This value must be unique and is user-facing (e.g., 'Politics', 'Economics')."},"description":{"oneOf":[{"type":"string","description":"Optional, human-readable category description for users and moderators. Used for additional context or guidance within UI forms and admin tools."},{"type":"null","description":"Optional, human-readable category description for users and moderators. Used for additional context or guidance within UI forms and admin tools."}],"description":"Optional, human-readable category description for users and moderators. Used for additional context or guidance within UI forms and admin tools."},"is_active":{"type":"boolean","description":"Whether this category is currently active and available for content posting, listing, or search. Used for managing visible/archived categories."},"sort_order":{"type":"integer","description":"Manual sort order (integer) for custom display or prioritization. Lower values may be listed first in associated UI components."},"created_at":{"type":"string","format":"date-time","description":"Timestamp for when the category was created (ISO8601 UTC format)."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp for when the category was last updated (ISO8601 UTC format)."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Soft delete timestamp. If non-null, this category is logically considered deleted and excluded from standard listing queries, but preserved for compliance."},{"type":"null","format":"date-time","description":"Soft delete timestamp. If non-null, this category is logically considered deleted and excluded from standard listing queries, but preserved for compliance."}],"description":"Soft delete timestamp. If non-null, this category is logically considered deleted and excluded from standard listing queries, but preserved for compliance."}},"required":["id","name","is_active","sort_order","created_at","updated_at"]},"IDiscussionBoardCategory.ICreate":{"type":"object","properties":{"name":{"type":"string","description":"Unique, user-facing label for the category (e.g., 'Politics')."},"description":{"oneOf":[{"type":"string","description":"Optional, user-/admin-facing extra context for the category."},{"type":"null","description":"Optional, user-/admin-facing extra context for the category."}],"description":"Optional, user-/admin-facing extra context for the category."},"is_active":{"type":"boolean","description":"If true, category is usable for posting or browsing immediately upon creation."},"sort_order":{"type":"integer","description":"Determines manual display order among categories (lower = higher priority)."}},"required":["name","is_active","sort_order"],"description":"Payload for creating a new discussion board category. Excludes id, created_at, and updated_at fields, which are system-assigned. 'name' must be unique system-wide."},"IDiscussionBoardCategory.IUpdate":{"type":"object","properties":{"name":{"type":"string","description":"User-provided label to change the name of a category. Must remain unique."},"description":{"oneOf":[{"type":"string","description":"Optional, extra context for the category. May be set to null to clear."},{"type":"null","description":"Optional, extra context for the category. May be set to null to clear."}],"description":"Optional, extra context for the category. May be set to null to clear."},"is_active":{"type":"boolean","description":"If provided, updates the activation state of the category."},"sort_order":{"type":"integer","description":"Allows reordering categories for display or hierarchy control."}},"required":[],"description":"Payload for updating mutable properties of a category. All fields are optional (PATCH/PUT semantics)."},"IDiscussionBoardCategory.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"The UUID identifier for the category (primary key)."},"name":{"type":"string","description":"Unique display label for user navigation and selection."},"is_active":{"type":"boolean","description":"Whether the category is available for posting/listing."},"sort_order":{"type":"integer","description":"Ordering for display or priority in category listings."}},"required":["id","name","is_active","sort_order"],"description":"Condensed summary of a category for paginated/index views. Used in IPage listing responses."},"IPageIDiscussionBoardCategory.ISummary":{"type":"object","description":"A paginated collection of IDiscussionBoardCategory.ISummary objects with standard pagination metadata. Used for index/listing endpoints.","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Pagination information and record counts for client UI navigation."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardCategory.ISummary"},"description":"Array of category summary objects shown on the page."}},"required":["pagination","data"]},"IDiscussionBoardTag":{"type":"object","description":"A tag entity used for classifying categories and posts for faceted search, topic suggestions, and moderation logic. Direct mapping to discussion_board_tags. Includes label, description, and administrative state.\n\n- Fields:\n  - id: Unique identifier (UUID, PK).\n  - label: Unique user-/admin-facing tag (e.g., 'policy', 'event').\n  - description: Optional, provides extra context for moderators or UI tooltips.\n  - is_active: True if assignable to categories/posts currently.\n  - created_at/updated_at: Administrative and display metadata.\n  - deleted_at: Logical soft deletion for deactivation or retention.\n\nAdministers platform taxonomy and content discoverability with compliance/audit tracking.","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for this tag (UUID, primary key)."},"label":{"type":"string","description":"Unique tag label seen by users/admins. Used for tag search, navigation, and display."},"description":{"oneOf":[{"type":"string","description":"Optional description to provide extra context in admin UI, tooltips, or moderation workflows."},{"type":"null","description":"Optional description to provide extra context in admin UI, tooltips, or moderation workflows."}],"description":"Optional description to provide extra context in admin UI, tooltips, or moderation workflows."},"is_active":{"type":"boolean","description":"If true, this tag may be actively assigned to posts/categories. Tags are not available for selection if inactive."},"created_at":{"type":"string","format":"date-time","description":"Timestamp denoting tag creation (UTC ISO 8601 format)."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp for the last modification of this tag (UTC ISO 8601 format)."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Soft deletion timestamp. Tags with deleted_at are unavailable for normal assignment but retained for audit/compliance."},{"type":"null","format":"date-time","description":"Soft deletion timestamp. Tags with deleted_at are unavailable for normal assignment but retained for audit/compliance."}],"description":"Soft deletion timestamp. Tags with deleted_at are unavailable for normal assignment but retained for audit/compliance."}},"required":["id","label","is_active","created_at","updated_at"]},"IDiscussionBoardTag.ICreate":{"type":"object","properties":{"label":{"type":"string","description":"Unique, user-/admin-facing tag label (case-insensitive) to create."},"description":{"oneOf":[{"type":"string","description":"Optional detail/context for the tag."},{"type":"null","description":"Optional detail/context for the tag."}],"description":"Optional detail/context for the tag."},"is_active":{"type":"boolean","description":"If true, tag can be assigned immediately after creation."}},"required":["label","is_active"],"description":"Payload for creating a new tag to be used for categorization and faceted search. label must be unique platform-wide."},"IDiscussionBoardTag.IRequest":{"type":"object","properties":{"page":{"type":"integer","description":"Page number for paginated listing (1-based)."},"limit":{"type":"integer","description":"Number of tags to return per page."},"search":{"type":"string","description":"Free-text search for tag label or description."},"is_active":{"type":"boolean","description":"Optional filter to restrict results to active/inactive tags only."},"sort_by":{"oneOf":[{"const":"label","description":"Field for sorting tag records."},{"const":"created_at","description":"Field for sorting tag records."}],"description":"Field for sorting tag records."},"sort_dir":{"oneOf":[{"const":"asc","description":"Sorting direction (ascending/descending)."},{"const":"desc","description":"Sorting direction (ascending/descending)."}],"description":"Sorting direction (ascending/descending)."}},"required":[],"description":"Specification for searching, filtering, and paginating tags for list endpoints."},"IDiscussionBoardTag.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"The tag's unique identifier (UUID)."},"label":{"type":"string","description":"Tag label used in UI and search suggestions."},"is_active":{"type":"boolean","description":"Active status, determines assignability and display."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of tag creation."}},"required":["id","label","is_active","created_at"],"description":"Minimal tag information suitable for list or summary views (not including soft deletion/description/admin details)."},"IPageIDiscussionBoardTag.ISummary":{"type":"object","description":"Paginated result of tag summaries for search/index endpoints with standard pagination and data array structures.","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Client UI pagination/status info."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardTag.ISummary"},"description":"Summary records for each tag included in this page/result set."}},"required":["pagination","data"]},"IPage.IPagination":{"type":"object","properties":{"current":{"type":"number","description":"Current page number (starting at 1)."},"limit":{"type":"number","description":"Page size: number of records per page."},"records":{"type":"number","description":"Total records returned in the full query."},"pages":{"type":"number","description":"Total number of pages for the complete query result."}},"required":["current","limit","records","pages"],"description":"Paging metadata for all IPage-based paginated result types; used to efficiently slice large record sets and provide UX navigation information."},"IDiscussionBoardTag.IUpdate":{"type":"object","properties":{"label":{"type":"string","description":"Tag label as seen by users. Unique and user-facing. Changing this updates how tags are referenced and displayed."},"description":{"oneOf":[{"type":"string","description":"Optional human-readable description for users and moderators. Can be set to null to remove description."},{"type":"null","description":"Optional human-readable description for users and moderators. Can be set to null to remove description."}],"description":"Optional human-readable description for users and moderators. Can be set to null to remove description."},"is_active":{"type":"boolean","description":"Whether the tag is currently assignable and visible to users."}},"description":"Request body schema for updating a tag in the discussion board taxonomy. All fields are optional.","required":[]},"IDiscussionBoardSetting.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","format":"int32","description":"Page number for results pagination. Optional; defaults to 1 if omitted."},{"type":"null","format":"int32","description":"Page number for results pagination. Optional; defaults to 1 if omitted."}],"description":"Page number for results pagination. Optional; defaults to 1 if omitted."},"limit":{"oneOf":[{"type":"integer","format":"int32","description":"Maximum records to return per page. Optional; defaults to system standard (e.g., 100)."},{"type":"null","format":"int32","description":"Maximum records to return per page. Optional; defaults to system standard (e.g., 100)."}],"description":"Maximum records to return per page. Optional; defaults to system standard (e.g., 100)."},"keyword":{"type":"string","description":"Keyword for searching settings by key or description. Optional."},"is_system":{"type":"boolean","description":"If true, restricts query to only system-level settings. Optional."},"key":{"type":"string","description":"Query for exact match on setting key. Optional."}},"description":"Request schema for searching/paginating discussion board settings. All fields optional.","required":[]},"IPageIDiscussionBoardSetting":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Metadata about the current pagination of results."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardSetting"},"description":"List of Discussion Board Setting items in the current page."}},"required":["pagination","data"],"description":"Paginated structure of discussion board settings query results."},"IDiscussionBoardSetting":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key. Unique identifier for the setting."},"key":{"type":"string","description":"Unique identifier for this setting (e.g., 'max_post_length', 'flag_threshold')."},"value":{"type":"string","description":"Serialized config value for use by application logic."},"description":{"oneOf":[{"type":"string","description":"Human-readable description explaining the purpose of this setting. Nullable."},{"type":"null","description":"Human-readable description explaining the purpose of this setting. Nullable."}],"description":"Human-readable description explaining the purpose of this setting. Nullable."},"is_system":{"type":"boolean","description":"Indicates whether the setting is system-level (technical) or business-level."},"created_at":{"type":"string","format":"date-time","description":"ISO timestamp when the setting was created."},"updated_at":{"type":"string","format":"date-time","description":"ISO timestamp of last modification."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"ISO timestamp of soft deletion, or null if active."},{"type":"null","format":"date-time","description":"ISO timestamp of soft deletion, or null if active."}],"description":"ISO timestamp of soft deletion, or null if active."}},"required":["id","key","value","is_system","created_at","updated_at"],"description":"Represents a global or business configuration value in the discussion board platform."},"IDiscussionBoardSetting.ICreate":{"type":"object","properties":{"key":{"type":"string","description":"Unique key for the new setting."},"value":{"type":"string","description":"Serialized config value."},"description":{"oneOf":[{"type":"string","description":"Brief description of this setting. Nullable."},{"type":"null","description":"Brief description of this setting. Nullable."}],"description":"Brief description of this setting. Nullable."},"is_system":{"type":"boolean","description":"Is this a system-level setting?"}},"required":["key","value","is_system"],"description":"Schema for the payload to create a new configuration setting."},"IDiscussionBoardSetting.IUpdate":{"type":"object","properties":{"value":{"type":"string","description":"New serialized config value for the setting. Optional; only supply to update value."},"description":{"oneOf":[{"type":"string","description":"Human-readable description of the setting (nullable)."},{"type":"null","description":"Human-readable description of the setting (nullable)."}],"description":"Human-readable description of the setting (nullable)."},"is_system":{"type":"boolean","description":"Set true if the setting is a technical/system setting; false if business logic."}},"description":"Schema for payload to update a configuration setting. All fields optional.","required":[]},"IDiscussionBoardAuditLog.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","format":"int32","description":"Page number for results pagination. Optional."},{"type":"null","format":"int32","description":"Page number for results pagination. Optional."}],"description":"Page number for results pagination. Optional."},"limit":{"oneOf":[{"type":"integer","format":"int32","description":"Number of records to return per page. Optional; system default applies if omitted."},{"type":"null","format":"int32","description":"Number of records to return per page. Optional; system default applies if omitted."}],"description":"Number of records to return per page. Optional; system default applies if omitted."},"actor_id":{"type":"string","description":"Unique identifier of the actor whose audit logs are being queried. Optional."},"actor_role":{"type":"string","description":"Role of actor (e.g. 'user', 'moderator', 'admin') for filtering. Optional."},"action_type":{"type":"string","description":"Filter logs by action type (e.g. 'config_update', 'moderation'). Optional."},"target_object":{"type":"string","description":"Restrict search to logs affecting a specific object/entity. Optional."},"start_at":{"type":"string","format":"date-time","description":"Filter logs to those created at or after this ISO date/time. Optional."},"end_at":{"type":"string","format":"date-time","description":"Filter logs to those created before this ISO date/time. Optional."},"keyword":{"type":"string","description":"Keyword search over description field. Optional."}},"description":"Request schema for querying audit logs. All fields optional.","required":[]},"IPageIDiscussionBoardAuditLog":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Pagination metadata for audit log result set."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardAuditLog"},"description":"List of Discussion Board Audit Log records on this page."}},"required":["pagination","data"],"description":"Paginated structure for audit log result sets."},"IDiscussionBoardAuditLog":{"type":"object","description":"Discussion board platform/system audit log record.\n\nCaptures key audit events for security, compliance, moderation, or administrative reviews. Logs the actor, their role, type of action, target object, description, and timestamp. Used for audit log searches, detail views, or compliance audits. Mirrors discussion_board_audit_logs table.\n\nInfo-only: May include nullable fields for system-initiated actions.","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the audit log entry."},"actor_id":{"oneOf":[{"type":"string","format":"uuid","description":"Actor (user) id for this action, if applicable (nullable for system events)."},{"type":"null"}],"description":"Actor (user) id for this action, if applicable (nullable for system events)."},"actor_role":{"type":"string","description":"Role of the actor at time of action (visitor/user/moderator/admin/system)."},"action_type":{"type":"string","description":"Category/type of audit event (e.g., 'login', 'moderation', etc)."},"target_object":{"oneOf":[{"type":"string","description":"ID or name of the object affected by this action (nullable)."},{"type":"null"}],"description":"ID or name of the object affected by this action (nullable)."},"description":{"oneOf":[{"type":"string","description":"Human-readable description of action, for compliance."},{"type":"null"}],"description":"Human-readable description of action, for compliance."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of when the audit event occurred."}},"required":["id","actor_role","action_type","created_at"]},"IDiscussionBoardUser":{"type":"object","description":"Discussion board user account entity.\n\nIncludes core account fields: unique id (UUID), email, unique username, display name (optional), verification and suspension states, last login, creation/update timestamps, and optional deleted_at for soft deletion.\n\nClosely mirrors the 'discussion_board_users' table in the schema. Password hashes are omitted for security. This entity represents user metadata displayed and managed in both profile and administrative UIs. All date/time fields are ISO8601 strings.","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the user (UUID).\n\nCorresponds to 'id' in discussion_board_users."},"email":{"type":"string","description":"User's email address, unique and used for login.\n\nCorresponds to 'email' in discussion_board_users."},"username":{"type":"string","description":"Globally-unique username selected by the user, used in handles and @-mentions.\n\nCorresponds to 'username' in discussion_board_users."},"display_name":{"oneOf":[{"type":"string","description":"Publicly displayed name or nickname. Optional.\n\nCorresponds to 'display_name' in discussion_board_users."},{"type":"null"}],"description":"Publicly displayed name or nickname. Optional.\n\nCorresponds to 'display_name' in discussion_board_users."},"is_verified":{"type":"boolean","description":"If true, the user's email has been verified and account is fully enabled.\n\nCorresponds to 'is_verified' in discussion_board_users."},"is_suspended":{"type":"boolean","description":"True if the user is currently suspended (restricted from activities).\n\nCorresponds to 'is_suspended' in discussion_board_users."},"suspended_until":{"oneOf":[{"type":"string","format":"date-time","description":"If suspended, indicates date/time until which user cannot interact. Null if not suspended.\n\nCorresponds to 'suspended_until' in discussion_board_users."},{"type":"null"}],"description":"If suspended, indicates date/time until which user cannot interact. Null if not suspended.\n\nCorresponds to 'suspended_until' in discussion_board_users."},"last_login_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp of last successful login. Null if user has never logged in.\n\nCorresponds to 'last_login_at' in discussion_board_users."},{"type":"null"}],"description":"Timestamp of last successful login. Null if user has never logged in.\n\nCorresponds to 'last_login_at' in discussion_board_users."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the user was created.\n\nCorresponds to 'created_at' in discussion_board_users."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last user record update.\n\nCorresponds to 'updated_at' in discussion_board_users."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp if the user is soft-deleted (deactivated); null if active.\n\nCorresponds to 'deleted_at' in discussion_board_users."},{"type":"null"}],"description":"Timestamp if the user is soft-deleted (deactivated); null if active.\n\nCorresponds to 'deleted_at' in discussion_board_users."}},"required":["id","email","username","is_verified","is_suspended","created_at","updated_at"]},"IDiscussionBoardUser.IUpdate":{"type":"object","description":"Fields that can be updated in a user account profile.\n\nSupports partial updates to display_name, username, verification, and suspension attributes. Used in user profile edit endpoints and admin/moderator update workflows. All properties are optional to support PATCH/PUT operations.","properties":{"display_name":{"oneOf":[{"type":"string","description":"(Optional) Public display name or nickname to update."},{"type":"null"}],"description":"(Optional) Public display name or nickname to update."},"username":{"type":"string","description":"(Optional) New username to update, must be unique."},"is_verified":{"type":"boolean","description":"(Optional) Set verification state; only admins/moderators may modify."},"is_suspended":{"type":"boolean","description":"(Optional) Suspend/unsuspend user account; privilege-restricted."},"suspended_until":{"oneOf":[{"type":"string","format":"date-time","description":"(Optional) If suspending, set until-when timestamp. Null removes scheduled suspension."},{"type":"null"}],"description":"(Optional) If suspending, set until-when timestamp. Null removes scheduled suspension."}},"required":[]},"IDiscussionBoardUser.IRequest":{"type":"object","description":"Criteria for searching, filtering, or paginating users.\n\nUsed when listing users in admin/moderation panels or public search. Allows filter by page, limit, email, username, verification/suspension status, date windows, free search, and sort order.","properties":{"page":{"type":"integer","description":"Requested page number for pagination (1-based)."},"limit":{"type":"integer","description":"Maximum number of records per page."},"email":{"type":"string","description":"Filter by exact user email."},"username":{"type":"string","description":"Filter by username (exact, partial, or search)."},"is_verified":{"type":"boolean","description":"Filter by verification state."},"is_suspended":{"type":"boolean","description":"Filter by suspended/not-suspended users."},"created_at_from":{"type":"string","format":"date-time","description":"Filter: created after this date."},"created_at_to":{"type":"string","format":"date-time","description":"Filter: created before this date."},"search":{"type":"string","description":"Free-text search across usernames, emails, and display names."},"sort_by":{"type":"string","description":"Sort field (e.g. 'created_at', 'username', etc)."},"sort_order":{"oneOf":[{"const":"asc","description":"Sort direction: 'asc' for ascending, 'desc' for descending."},{"const":"desc","description":"Sort direction: 'asc' for ascending, 'desc' for descending."}],"description":"Sort direction: 'asc' for ascending, 'desc' for descending."}},"required":[]},"IPageIDiscussionBoardUser":{"type":"object","description":"Paginated results container for discussion board users.\n\nEach page contains pagination metadata and an array of user entities. Used for large user lists in backoffice, moderation, or public directories. The 'pagination' property is required per documentation, and 'data' rows always use IDiscussionBoardUser schema.","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information including current, limit, total records, total pages."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardUser"},"description":"Array of user account records."}},"required":["pagination","data"]},"IDiscussionBoardActionLog.IRequest":{"type":"object","description":"Criteria for searching, paginating, and filtering audit action logs.\n\nProvides advanced admin workflow for compliance/status review, filtering by audit_log_id, status, created_at window, text search, and output ordering.","properties":{"page":{"type":"integer","description":"Requested page number for pagination (1-based)."},"limit":{"type":"integer","description":"Size limit of records per page."},"audit_log_id":{"type":"string","format":"uuid","description":"Filter for only actions attached to a particular audit log."},"status":{"type":"string","description":"Filter actions by their status (success/fail/other)."},"created_at_from":{"type":"string","format":"date-time","description":"Filter: show records created from this time."},"created_at_to":{"type":"string","format":"date-time","description":"Filter: show records created up to this time."},"search":{"type":"string","description":"Free-form search across action log metadata/content."},"sort_by":{"type":"string","description":"Field to sort on (e.g., 'created_at')."},"sort_order":{"oneOf":[{"const":"asc","description":"Sort order for returned results."},{"const":"desc","description":"Sort order for returned results."}],"description":"Sort order for returned results."}},"required":[]},"IPageIDiscussionBoardActionLog":{"type":"object","description":"Paginated list format for Audit ActionLog results.\n\nStandard container with required 'pagination' metadata and 'data' rows. 'data' will be IDiscussionBoardActionLog[] results.","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Pagination information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardActionLog"},"description":"Audit action log result records."}},"required":["pagination","data"]},"IDiscussionBoardActionLog":{"type":"object","description":"An audit action log (child) entry in the platform's compliance history.\n\nStores status and metadata for low-level trace or compliance event. Linked to parent audit log by audit_log_id.\n\nDirectly parallels the 'discussion_board_action_logs' table.","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the action log record."},"discussion_board_audit_log_id":{"type":"string","format":"uuid","description":"Related audit log id (foreign key)."},"status":{"type":"string","description":"Outcome/result of the action (e.g., 'success', 'fail', 'partial', etc)."},"metadata":{"oneOf":[{"type":"string","description":"Arbitrary serialized metadata, typically JSON; may be null."},{"type":"null"}],"description":"Arbitrary serialized metadata, typically JSON; may be null."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of when this action log entry was created."}},"required":["id","discussion_board_audit_log_id","status","created_at"]},"IDiscussionBoardModerator":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key UUID for the moderator entity, unique per record. Sourced from discussion_board_moderators.id."},"user_id":{"type":"string","format":"uuid","description":"ID of the associated user who holds this moderator status. Duplicates the user id for audit separation, tied to discussion_board_users.id."},"assigned_at":{"type":"string","format":"date-time","description":"Timestamp (ISO8601) when this moderator role was assigned. Used for audit and lifecycle tracking."},"revoked_at":{"oneOf":[{"type":"string","format":"date-time","description":"If present, timestamp (ISO8601) when moderator privileges were revoked. Null if currently active."},{"type":"null","format":"date-time","description":"If present, timestamp (ISO8601) when moderator privileges were revoked. Null if currently active."}],"description":"If present, timestamp (ISO8601) when moderator privileges were revoked. Null if currently active."},"is_active":{"type":"boolean","description":"Whether the moderator assignment is active. Used for access control, status checks, and privilege enforcement."},"suspended_until":{"oneOf":[{"type":"string","format":"date-time","description":"Optional suspension window datetime. Null if not suspended or restriction expired."},{"type":"null","format":"date-time","description":"Optional suspension window datetime. Null if not suspended or restriction expired."}],"description":"Optional suspension window datetime. Null if not suspended or restriction expired."},"created_at":{"type":"string","format":"date-time","description":"Timestamp (ISO8601) when this moderator record was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp (ISO8601) when moderator record was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Soft-deletion timestamp (ISO8601) for audit/tombstone; null if not deleted."},{"type":"null","format":"date-time","description":"Soft-deletion timestamp (ISO8601) for audit/tombstone; null if not deleted."}],"description":"Soft-deletion timestamp (ISO8601) for audit/tombstone; null if not deleted."}},"required":["id","user_id","assigned_at","is_active","created_at","updated_at"],"description":"Moderator record reflects a user with moderation privileges in the forum. Based on Prisma's discussion_board_moderators model: tracks moderator assignment, audit/certification, active state, and suspension windows, supporting independent moderator management for audit/compliance."},"IDiscussionBoardModerator.IRequest":{"type":"object","properties":{},"description":"Request for moderator status/record queries (future use, extendable for filtering, auditing, or triage). No required properties.","required":[]},"IDiscussionBoardModerator.ICreate":{"type":"object","properties":{"user_id":{"type":"string","format":"uuid","description":"ID of the existing user to be assigned moderator privileges."}},"required":["user_id"],"description":"Payload for assigning a moderator role to a user; only 'user_id' is needed, other fields defaulted or system-assigned."},"IDiscussionBoardAdmin":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key UUID for the admin entity, unique per record. Sourced from discussion_board_admins.id."},"user_id":{"type":"string","format":"uuid","description":"ID of the associated user granted admin privileges. References discussion_board_users.id."},"assigned_at":{"type":"string","format":"date-time","description":"ISO8601 datetime when admin status/role was granted."},"revoked_at":{"oneOf":[{"type":"string","format":"date-time","description":"If set, ISO8601 datetime when admin privileges were revoked; null if currently active."},{"type":"null","format":"date-time","description":"If set, ISO8601 datetime when admin privileges were revoked; null if currently active."}],"description":"If set, ISO8601 datetime when admin privileges were revoked; null if currently active."},"is_active":{"type":"boolean","description":"Whether this admin record is currently active. True if not revoked or suspended."},"suspended_until":{"oneOf":[{"type":"string","format":"date-time","description":"Datetime until which the admin is suspended. Null if not suspended."},{"type":"null","format":"date-time","description":"Datetime until which the admin is suspended. Null if not suspended."}],"description":"Datetime until which the admin is suspended. Null if not suspended."},"created_at":{"type":"string","format":"date-time","description":"Datetime when admin record was created (ISO8601)."},"updated_at":{"type":"string","format":"date-time","description":"Datetime when admin record was last updated (ISO8601)."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Soft-deletion timestamp for compliance; null if not deleted."},{"type":"null","format":"date-time","description":"Soft-deletion timestamp for compliance; null if not deleted."}],"description":"Soft-deletion timestamp for compliance; null if not deleted."}},"required":["id","user_id","assigned_at","is_active","created_at","updated_at"],"description":"Admin record representing a user with highest-level platform permissions. Based on discussion_board_admins model, with audit, active/revoked status, and suspension. Enables advanced admin-only features."},"IDiscussionBoardAdmin.IUpdate":{"type":"object","properties":{"is_active":{"type":"boolean","description":"Set admin record active/inactive (for status toggling, not for permanent removal)."},"revoked_at":{"oneOf":[{"type":"string","format":"date-time","description":"Datetime admin role revoked; null for activation/reset."},{"type":"null","format":"date-time","description":"Datetime admin role revoked; null for activation/reset."}],"description":"Datetime admin role revoked; null for activation/reset."},"suspended_until":{"oneOf":[{"type":"string","format":"date-time","description":"Datetime until which the admin is suspended (future flexibility, null for none)."},{"type":"null","format":"date-time","description":"Datetime until which the admin is suspended (future flexibility, null for none)."}],"description":"Datetime until which the admin is suspended (future flexibility, null for none)."}},"description":"Payload for updating mutable admin record fields (activation, revocation, suspension). Only permitted fields may be updated, all others system-managed.","required":[]},"IDiscussionBoardVisitor":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique UUID identifier for the visitor entity (discussion_board_visitors.id)"},"visitor_token":{"type":"string","description":"Opaque, non-reversible unique token identifying a visitor. Session/fraud/audit basis. (discussion_board_visitors.visitor_token)"},"ip_address":{"oneOf":[{"type":"string","description":"Optional IP address for security/fraud/audit (discussion_board_visitors.ip_address)"},{"type":"null","description":"Optional IP address for security/fraud/audit (discussion_board_visitors.ip_address)"}],"description":"Optional IP address for security/fraud/audit (discussion_board_visitors.ip_address)"},"user_agent":{"oneOf":[{"type":"string","description":"Optional user agent/device fingerprint for audit & analytics (discussion_board_visitors.user_agent)"},{"type":"null","description":"Optional user agent/device fingerprint for audit & analytics (discussion_board_visitors.user_agent)"}],"description":"Optional user agent/device fingerprint for audit & analytics (discussion_board_visitors.user_agent)"},"created_at":{"type":"string","format":"date-time","description":"Datetime when visitor record was created (ISO8601)"},"updated_at":{"type":"string","format":"date-time","description":"Datetime when visitor record was last updated (ISO8601)"},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Soft-deletion timestamp, null if not deleted (audit/compliance)"},{"type":"null","format":"date-time","description":"Soft-deletion timestamp, null if not deleted (audit/compliance)"}],"description":"Soft-deletion timestamp, null if not deleted (audit/compliance)"}},"required":["id","visitor_token","created_at","updated_at"],"description":"Represents an anonymous/unauthenticated visitor tracked for session/anti-fraud analytics and privacy compliance. Maps directly to discussion_board_visitors table. Never includes PII or links to user/member unless escalated."},"IDiscussionBoardVisitor.IRequest":{"type":"object","properties":{"ip_address":{"oneOf":[{"type":"string","description":"Optional filter for IP address in visitor search."},{"type":"null","description":"Optional filter for IP address in visitor search."}],"description":"Optional filter for IP address in visitor search."},"user_agent":{"oneOf":[{"type":"string","description":"Optional filter for user agent in analytics/audit search."},{"type":"null","description":"Optional filter for user agent in analytics/audit search."}],"description":"Optional filter for user agent in analytics/audit search."},"page":{"oneOf":[{"type":"integer","description":"Page number for pagination (1-based)."},{"type":"null","description":"Page number for pagination (1-based)."}],"description":"Page number for pagination (1-based)."},"limit":{"oneOf":[{"type":"integer","description":"Max results per page."},{"type":"null","description":"Max results per page."}],"description":"Max results per page."},"sort_by":{"type":"string","description":"Sort key/column (e.g., 'created_at', 'updated_at')."},"sort_dir":{"oneOf":[{"const":"asc","description":"Sort direction, ascending or descending."},{"const":"desc","description":"Sort direction, ascending or descending."}],"description":"Sort direction, ascending or descending."},"from":{"oneOf":[{"type":"string","format":"date-time","description":"Start of created_at date range filter."},{"type":"null","format":"date-time","description":"Start of created_at date range filter."}],"description":"Start of created_at date range filter."},"to":{"oneOf":[{"type":"string","format":"date-time","description":"End of created_at date range filter."},{"type":"null","format":"date-time","description":"End of created_at date range filter."}],"description":"End of created_at date range filter."}},"description":"Request/query payload for searching, filtering, and paginating discussion_board_visitor records. Includes typical analytics, security, and audit filters.","required":[]},"IPageIDiscussionBoardVisitor.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Pagination metadata: current/limit/records/pages"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardVisitorISummary"},"description":"Array of visitor summary records for pagination page."}},"required":["pagination","data"],"description":"A paginated set of summary visitor records (session/token/created_at/user_agent) according to search/filter options. Conforms to IPage<IVisitor.ISummary> structure."},"IDiscussionBoardVisitorISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Visitor's unique ID (discussion_board_visitors.id), for summary/audit."},"visitor_token":{"type":"string","description":"Opaque visitor token tracking this session/actor (discussion_board_visitors.visitor_token)."},"created_at":{"type":"string","format":"date-time","description":"Datetime when visitor was registered (discussion_board_visitors.created_at)"},"user_agent":{"oneOf":[{"type":"string","description":"Device/user agent string (partial, for analytics) used by the visitor."},{"type":"null","description":"Device/user agent string (partial, for analytics) used by the visitor."}],"description":"Device/user agent string (partial, for analytics) used by the visitor."}},"required":["id","visitor_token","created_at"],"description":"Summary/abridged form of a visitor record (ID, token, creation, user agent). Used for listings, analytics summaries, or audit views."},"IDiscussionBoardThread":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key for the thread (UUID). Uniquely identifies this discussion thread in the system.\n\nCorresponds to discussion_board_threads.id (Prisma)."},"created_by_id":{"type":"string","format":"uuid","description":"ID of the user who created this thread. Refers to discussion_board_users.id. Used for attribution and thread ownership.\n\nSee relation in discussion_board_threads.created_by_id (Prisma)."},"title":{"type":"string","description":"Title of the discussion thread. Used for identification, search, and display in thread listings.\n\nUnique within the table (Prisma @unique). Must meet platform length and format requirements."},"is_locked":{"type":"boolean","description":"Indicates whether this thread is locked. Locked threads cannot receive new posts/comments.\n\nMapped from discussion_board_threads.is_locked (Prisma)."},"is_archived":{"type":"boolean","description":"Whether this thread is archived (read-only and not open for participation).\n\nFrom discussion_board_threads.is_archived (Prisma)."},"created_at":{"type":"string","format":"date-time","description":"Timestamp for when this thread was created (ISO 8601). \n\nFrom discussion_board_threads.created_at (Prisma, @db.Timestamptz)."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp for the latest update to this thread (ISO 8601).\n\nFrom discussion_board_threads.updated_at (Prisma, @db.Timestamptz)."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Soft delete timestamp (ISO 8601). If set, the thread has been logically deleted and is hidden from standard display/search endpoints.\n\nMapped from discussion_board_threads.deleted_at (Prisma). May be null."},{"type":"null"}],"description":"Soft delete timestamp (ISO 8601). If set, the thread has been logically deleted and is hidden from standard display/search endpoints.\n\nMapped from discussion_board_threads.deleted_at (Prisma). May be null."}},"required":["id","created_by_id","title","is_locked","is_archived","created_at","updated_at"],"description":"A discussion board thread, representing a top-level topic of structured discussion. Each thread aggregates posts and associated commentary.\n\nCorresponds to discussion_board_threads (Prisma). Covers all schema fields with full traceability for audit, moderation, and discovery."},"IDiscussionBoardThread.IRequest":{"type":"object","properties":{"page":{"type":"integer","format":"int32","description":"Page number for pagination. Used in list/search API endpoints."},"limit":{"type":"integer","format":"int32","description":"Maximum number of records to return per page."},"search":{"type":"string","description":"Search text for thread titles."},"orderBy":{"oneOf":[{"const":"created_at","description":"Field by which to sort thread results."},{"const":"updated_at","description":"Field by which to sort thread results."},{"const":"title","description":"Field by which to sort thread results."}],"description":"Field by which to sort thread results."},"orderDirection":{"oneOf":[{"const":"asc","description":"Sort direction for ordering."},{"const":"desc","description":"Sort direction for ordering."}],"description":"Sort direction for ordering."},"is_locked":{"type":"boolean","description":"Filter threads by lock status."},"is_archived":{"type":"boolean","description":"Filter threads by archived/read-only state."},"created_by_id":{"type":"string","format":"uuid","description":"Filter for threads created by a specific user (UUID)."},"created_from":{"type":"string","format":"date-time","description":"Start date filter for thread creation (inclusive, ISO 8601)."},"created_to":{"type":"string","format":"date-time","description":"End date filter for thread creation (inclusive, ISO 8601)."}},"required":[],"description":"Filtering and pagination fields when listing/searching threads. Supports searching by title, filtering by status/owner/date, sorting, and paging. Used in patch /threads API endpoint."},"IDiscussionBoardThread.ICreate":{"type":"object","properties":{"title":{"type":"string","description":"Thread title (required). Must be unique."}},"required":["title"],"description":"Request body for creating a new thread.\nOnly includes business writable fields. created_by_id is set via authentication context.\n\nFrom discussion_board_threads Prisma schema."},"IDiscussionBoardThread.IUpdate":{"type":"object","properties":{"title":{"type":"string","description":"New title for the thread (optional update)."},"is_locked":{"type":"boolean","description":"Update thread lock status (if true, locks thread)."},"is_archived":{"type":"boolean","description":"Update archive (read-only) status for the thread."}},"required":[],"description":"Fields that may be updated for a discussion thread. Used in PUT/PATCH operations on thread resource.\n\nIncludes optional title/is_locked/is_archived."},"IDiscussionBoardThread.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Thread's unique identifier."},"title":{"type":"string","description":"Thread title."},"is_locked":{"type":"boolean","description":"Lock status of the thread."},"is_archived":{"type":"boolean","description":"Archive (read-only) status."},"created_by_id":{"type":"string","format":"uuid","description":"User ID of thread owner."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp (ISO 8601)."}},"required":["id","title","is_locked","is_archived","created_by_id","created_at"],"description":"Summary version of a thread, for listings and search. Omits details that are unnecessary for list view."},"IPageIDiscussionBoardThread.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Pagination information for the result set."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardThread.ISummary"},"description":"Array of thread summaries."}},"required":["pagination","data"],"description":"Paginated result set for thread summary list views. Used in /threads search/list endpoints."},"IDiscussionBoardPost":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key for the post (UUID).\n\nMaps to discussion_board_posts.id."},"thread_id":{"type":"string","format":"uuid","description":"Thread ID (UUID) this post belongs to.\n\nReferences discussion_board_threads.id (Prisma FK)."},"created_by_id":{"type":"string","format":"uuid","description":"User ID of the post's author (UUID).\n\nReferences discussion_board_users.id."},"title":{"type":"string","description":"Title of the post, used for reference and search.\n\nSee discussion_board_posts.title (Prisma)."},"body":{"type":"string","description":"Rich text content body of the post.\n\nMaps to discussion_board_posts.body (Prisma)."},"is_locked":{"type":"boolean","description":"Whether the post is locked from further edits/comments.\n\nFrom discussion_board_posts.is_locked (Prisma)."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp of the post (ISO 8601).\n\nFrom discussion_board_posts.created_at."},"updated_at":{"type":"string","format":"date-time","description":"Last updated timestamp (ISO 8601).\n\nFrom discussion_board_posts.updated_at."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Soft delete timestamp (ISO 8601, nullable): If present, this post is soft-deleted and not visible in normal queries.\n\nFrom discussion_board_posts.deleted_at (Prisma)."},{"type":"null"}],"description":"Soft delete timestamp (ISO 8601, nullable): If present, this post is soft-deleted and not visible in normal queries.\n\nFrom discussion_board_posts.deleted_at (Prisma)."}},"required":["id","thread_id","created_by_id","title","body","is_locked","created_at","updated_at"],"description":"A full post, which is a primary content unit in a thread.\n\nDirect mapping to discussion_board_posts in Prisma, all business/audit fields included."},"IDiscussionBoardPost.IRequest":{"type":"object","properties":{"page":{"type":"integer","format":"int32","description":"Pagination page number for posts."},"limit":{"type":"integer","format":"int32","description":"Number of posts per result page."},"search":{"type":"string","description":"Keyword search to apply to post title/body."},"orderBy":{"oneOf":[{"const":"created_at","description":"Sort field for post search results."},{"const":"updated_at","description":"Sort field for post search results."},{"const":"title","description":"Sort field for post search results."}],"description":"Sort field for post search results."},"orderDirection":{"oneOf":[{"const":"asc","description":"Direction for sorting: ascending/descending."},{"const":"desc","description":"Direction for sorting: ascending/descending."}],"description":"Direction for sorting: ascending/descending."},"thread_id":{"type":"string","format":"uuid","description":"Restrict results to posts within given thread."},"created_by_id":{"type":"string","format":"uuid","description":"Filter posts authored by a specific user (UUID)."},"is_locked":{"type":"boolean","description":"Filter for only locked/unlocked posts."},"created_from":{"type":"string","format":"date-time","description":"Earliest creation date to include results from (inclusive)."},"created_to":{"type":"string","format":"date-time","description":"Latest creation date to include results up to (inclusive)."}},"required":[],"description":"Filtering/searching/query metadata for looking up posts within a thread or across all threads."},"IDiscussionBoardPost.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Post ID (UUID)."},"thread_id":{"type":"string","format":"uuid","description":"Parent thread ID (UUID)."},"title":{"type":"string","description":"Title of the post."},"created_by_id":{"type":"string","format":"uuid","description":"User ID of the post author."},"created_at":{"type":"string","format":"date-time","description":"Post creation time (ISO 8601)."},"is_locked":{"type":"boolean","description":"Locked status for post (read-only if true)."}},"required":["id","thread_id","title","created_by_id","created_at","is_locked"],"description":"Summary for a post record, present in listing/search results. Omitted fields include full post body and deleted_at."},"IPageIDiscussionBoardPost.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Pagination info (current page, records, limit, pages)."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardPost.ISummary"},"description":"Array of post summaries for this page."}},"required":["pagination","data"],"description":"Paginated summary result set for posts, used in post/thread search/list endpoints."},"IDiscussionBoardPost.ICreate":{"type":"object","properties":{"thread_id":{"type":"string","format":"uuid","description":"UUID of the parent discussion thread this post will belong to."},"title":{"type":"string","description":"The title of the post. Must be unique within the thread and not empty."},"body":{"type":"string","description":"Rich text body content of the post."}},"required":["thread_id","title","body"],"description":"Request body for creating a post. Includes parent thread ID, required title, and post body."},"IDiscussionBoardPost.IUpdate":{"type":"object","properties":{"title":{"type":"string","description":"The updated title of the post. Must be unique within the parent thread."},"body":{"type":"string","description":"Updated body content of the post."},"is_locked":{"type":"boolean","description":"Flag to lock/unlock this post for further editing or commenting."}},"description":"Request body for updating a post. All fields optional; at least one must be provided.","required":[]},"IDiscussionBoardComment.IRequest":{"type":"object","properties":{"post_id":{"type":"string","format":"uuid","description":"UUID of the parent post for which comments are being queried."},"parent_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optional parent comment UUID for fetching only replies to a specific comment."},{"type":"null","format":"uuid","description":"Optional parent comment UUID for fetching only replies to a specific comment."}],"description":"Optional parent comment UUID for fetching only replies to a specific comment."},"nesting_level":{"type":"integer","description":"Optional filter for the nesting level (depth) of the comment."},"author_id":{"type":"string","format":"uuid","description":"Optional filter to restrict results to comments made by the given user."},"search":{"type":"string","description":"Search keyword for filtering comment bodies."},"sort":{"type":"string","description":"Sort mode, e.g. 'created_at desc', 'nesting_level asc', etc."},"page":{"type":"integer","description":"Page number for pagination (1-based)."},"limit":{"type":"integer","description":"Limit of results per page."}},"required":["post_id"],"description":"Request parameters for listing/filtering comments under a post or a particular parent comment."},"IPageIDiscussionBoardComment.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Information about pagination for the current comment search."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardComment.ISummary"},"description":"List of comment summaries representing each comment instance in the result set."}},"required":["pagination","data"],"description":"Paginated result set of comment summaries matching the query/filter criteria."},"IDiscussionBoardComment":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the comment."},"post_id":{"type":"string","format":"uuid","description":"UUID of the parent post to which this comment belongs."},"parent_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optional UUID of the parent comment if this comment is a reply (null for top-level comments)."},{"type":"null","format":"uuid","description":"Optional UUID of the parent comment if this comment is a reply (null for top-level comments)."}],"description":"Optional UUID of the parent comment if this comment is a reply (null for top-level comments)."},"created_by_id":{"type":"string","format":"uuid","description":"User id of the comment's author."},"body":{"type":"string","description":"Textual content of the comment."},"nesting_level":{"type":"integer","description":"The level (depth) of the comment in thread hierarchy (0 = top-level)."},"created_at":{"type":"string","format":"date-time","description":"ISO8601 timestamp when comment was created."},"updated_at":{"type":"string","format":"date-time","description":"ISO8601 timestamp when comment was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp for soft deletion; null if not deleted."},{"type":"null","format":"date-time","description":"Timestamp for soft deletion; null if not deleted."}],"description":"Timestamp for soft deletion; null if not deleted."}},"required":["id","post_id","created_by_id","body","nesting_level","created_at","updated_at"],"description":"Detailed structure for a single discussion comment including all key fields and metadata."},"IDiscussionBoardComment.ICreate":{"type":"object","properties":{"post_id":{"type":"string","format":"uuid","description":"UUID of the post to which the comment belongs."},"parent_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optional parent comment id; null for top-level."},{"type":"null","format":"uuid","description":"Optional parent comment id; null for top-level."}],"description":"Optional parent comment id; null for top-level."},"body":{"type":"string","description":"Text of the comment (cannot be empty, subject to character/length constraints)."}},"required":["post_id","body"],"description":"Body for creating a new comment. parent_id is required only for replies."},"IDiscussionBoardComment.IUpdate":{"type":"object","properties":{"body":{"type":"string","description":"Updated text for the comment."}},"description":"Body for updating an existing comment. Only the content/body is updatable.","required":[]},"IDiscussionBoardAttachment.IRequest":{"type":"object","properties":{"post_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optional post ID to restrict search to attachments for one post."},{"type":"null","format":"uuid","description":"Optional post ID to restrict search to attachments for one post."}],"description":"Optional post ID to restrict search to attachments for one post."},"comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optional comment ID to restrict search to attachments for one comment."},{"type":"null","format":"uuid","description":"Optional comment ID to restrict search to attachments for one comment."}],"description":"Optional comment ID to restrict search to attachments for one comment."},"file_name":{"type":"string","description":"Optional search by original file name (fuzzy match)."},"uploaded_by_id":{"type":"string","format":"uuid","description":"Filter by uploader user id."},"content_type":{"type":"string","description":"Filter by file MIME type."},"sort":{"type":"string","description":"Sort order for search results (e.g., 'created_at desc')."},"page":{"type":"integer","description":"Page number for pagination."},"limit":{"type":"integer","description":"Number of results per page."}},"description":"Search/filter and pagination parameters for finding file/media attachments.","required":[]},"IDiscussionBoardComment.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"UUID for the comment record. Used to link to detail view or replies."},"body":{"type":"string","description":"Content of the comment. May be truncated for summary in UI/list mode."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the comment was created. Display in thread or timeline view."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Soft deletion state; null if active, timestamp if deleted for compliance review."},{"type":"null","format":"date-time","description":"Soft deletion state; null if active, timestamp if deleted for compliance review."}],"description":"Soft deletion state; null if active, timestamp if deleted for compliance review."},"created_by_id":{"type":"string","format":"uuid","description":"ID of the user who authored the comment. Used for linking to user profile or moderation."},"nesting_level":{"type":"integer","description":"Hierarchy level of the comment for threading (0 = top-level, up to 5 maximum). Important for UI indentation and discussion tree building."},"parent_id":{"oneOf":[{"type":"string","format":"uuid","description":"Reference to parent comment (for replies) or null for top-level comments. Used for threading and recursive display."},{"type":"null","format":"uuid","description":"Reference to parent comment (for replies) or null for top-level comments. Used for threading and recursive display."}],"description":"Reference to parent comment (for replies) or null for top-level comments. Used for threading and recursive display."}},"required":["id","body","created_at","created_by_id","nesting_level"],"description":"Presents key summary data for a comment in thread or comment-page listings. Includes truncated body (up to 1000 chars), author id, nesting, and minimal context for parent lookup or display logic. Recommended for all summary comment output and as the item type in paginated comment lists."},"IDiscussionBoardAttachment":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the attachment. Must be a UUID as generated by the system. This value is the primary key for referencing any file or media uploaded to a post or comment."},"post_id":{"oneOf":[{"type":"string","format":"uuid","description":"UUID referencing the post to which the attachment belongs, or null if not a post attachment. This field establishes the relationship with the parent post from the discussion_board_posts table."},{"type":"null","format":"uuid","description":"UUID referencing the post to which the attachment belongs, or null if not a post attachment. This field establishes the relationship with the parent post from the discussion_board_posts table."}],"description":"UUID referencing the post to which the attachment belongs, or null if not a post attachment. This field establishes the relationship with the parent post from the discussion_board_posts table."},"comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"UUID referencing the comment to which the attachment belongs, or null if not a comment attachment. Used to associate attachments with a specific comment."},{"type":"null","format":"uuid","description":"UUID referencing the comment to which the attachment belongs, or null if not a comment attachment. Used to associate attachments with a specific comment."}],"description":"UUID referencing the comment to which the attachment belongs, or null if not a comment attachment. Used to associate attachments with a specific comment."},"uploaded_by_id":{"type":"string","format":"uuid","description":"ID of the user who uploaded this attachment. References discussion_board_users.id for audit, permissions, and compliance logging."},"file_name":{"type":"string","description":"Original name of the uploaded file. This is the name provided by the user during upload and used for display purposes in UI and download flows. Not necessarily unique."},"file_url":{"type":"string","description":"Permanent access URI or URL for the file or media on the system. Supports both direct HTTP(S) links and internal media handlers. Used for all download/view flows."},"content_type":{"type":"string","description":"The MIME type of the file, such as 'image/png', 'application/pdf', etc. Used for validating file format and appropriate rendering in clients."},"size_bytes":{"type":"integer","description":"The size of the file or media in bytes (integer). Used for quota management, download progress, and client-side checks against allowed maximum file size."},"created_at":{"type":"string","format":"date-time","description":"ISO 8601 timestamp when the attachment was first created/uploaded. Used for audit and display in upload/attachment lists."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Soft delete timestamp (or null if not deleted). When set, this file is hidden from user-facing APIs but remains in the database for regulatory and compliance audits."},{"type":"null","format":"date-time","description":"Soft delete timestamp (or null if not deleted). When set, this file is hidden from user-facing APIs but remains in the database for regulatory and compliance audits."}],"description":"Soft delete timestamp (or null if not deleted). When set, this file is hidden from user-facing APIs but remains in the database for regulatory and compliance audits."}},"required":["id","uploaded_by_id","file_name","file_url","content_type","size_bytes","created_at"],"description":"Represents a file, document, or media attachment uploaded to a post or comment in the discussion board. This schema is mapped from the discussion_board_attachments table in the database. Satisfies upload, download, and attachment management within the discussion platform. Sensitive to privacy (must avoid exposing internal storage URIs if not public) and tracks all relevant metadata for audit, access control, and regulatory compliance. Used for both viewing and backend management of uploaded files."},"IDiscussionBoardAttachment.ICreate":{"type":"object","properties":{"post_id":{"oneOf":[{"type":"string","format":"uuid","description":"(Optional) Parent post identifier for the attachment (UUID). Specify this when the attachment is to be linked to a post. One of post_id or comment_id must be present."},{"type":"null","format":"uuid","description":"(Optional) Parent post identifier for the attachment (UUID). Specify this when the attachment is to be linked to a post. One of post_id or comment_id must be present."}],"description":"(Optional) Parent post identifier for the attachment (UUID). Specify this when the attachment is to be linked to a post. One of post_id or comment_id must be present."},"comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"(Optional) Parent comment identifier for the attachment (UUID). Attachments to comments only require this field set. Must be null when linking to a post."},{"type":"null","format":"uuid","description":"(Optional) Parent comment identifier for the attachment (UUID). Attachments to comments only require this field set. Must be null when linking to a post."}],"description":"(Optional) Parent comment identifier for the attachment (UUID). Attachments to comments only require this field set. Must be null when linking to a post."},"file_name":{"type":"string","description":"Original file name as submitted by the user during upload. Used for display and download purposes. Must be a valid UTF-8 string."},"file_url":{"type":"string","description":"Permanent download URI or system storage URL for the file, as resolved during the upload process. Must be accessible according to system access rules."},"content_type":{"type":"string","description":"MIME content type for the uploaded file (e.g., image/png, application/pdf). Used to validate allowed file formats at upload and for security in download flows."},"size_bytes":{"type":"integer","description":"The size of the uploaded file in bytes. Used to enforce per-file and user quota policies, displayed in UI download listings."}},"required":["file_name","file_url","content_type","size_bytes"],"description":"Request type for creating a new attachment for a post or comment. Accepts either a post_id OR comment_id (but not both), along with required file metadata. Used as the body type for attachment upload API endpoints. Sensitive fields must be validated by server prior to file acceptance. Created attachments are always linked to a parent post or comment for access control."},"IDiscussionBoardAttachment.IUpdate":{"type":"object","properties":{"file_name":{"type":"string","description":"The updated file name for the attachment, as desired in UI or download. Used for correcting file naming errors or friendly name updates."},"content_type":{"type":"string","description":"(Optional) The new MIME content type if the client wishes to correct or update it. Changing content_type should be validated by the server to avoid conflict with file data."}},"required":[],"description":"Request type for updating the metadata/fields of an attachment. Only permits editing file name and content type—cannot change file_url, parent, or size_bytes (those are immutable). Used for renaming files, updating incorrectly assigned content types, or restoring original file names for user experience. Audit trail is strongly recommended for updates to track abuse or compliance issues."},"IDiscussionBoardAttachment.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier of the attachment (UUID). Used for linking and displaying attachments."},"file_name":{"type":"string","description":"User-facing file name of the attachment. Used in download and UI display."},"file_url":{"type":"string","description":"Permanent URI for accessing the file. Used by clients for download."},"content_type":{"type":"string","description":"MIME type string for the file (e.g. image/jpeg). Determines icon/preview."},"size_bytes":{"type":"integer","description":"File size in bytes. Used in attachment listing and download quotas."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when attachment was added. Displayed in UI."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Soft deletion indicator for audit/compliance. Null if active."},{"type":"null","format":"date-time","description":"Soft deletion indicator for audit/compliance. Null if active."}],"description":"Soft deletion indicator for audit/compliance. Null if active."}},"required":["id","file_name","file_url","content_type","size_bytes","created_at"],"description":"Summary presentation of an attachment in a paginated or inline list. Designed for use in IPageIDiscussionBoardAttachment.ISummary (attachment list API) and for UI display where full detail is not needed. Contains only essential metadata for performant listing. Full attachment details require fetching IDiscussionBoardAttachment by id."},"IPageIDiscussionBoardAttachment.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Paging information block for the attachment summary results. Contains page number, size, total records, and page count."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardAttachment.ISummary"},"description":"Array of summary records of attachments for the current page. Each entry represents metadata for a single attachment (not the full object)."}},"required":["pagination","data"],"description":"Paginated container for remote summary listings of attachments, as returned by attachment search/list endpoints. Carries summary records for display in UI attachment lists or mod/admin content review. Metadata-only; does not include actual file contents. Designed for efficient result pages."},"IPageIDiscussionBoardAttachment":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Paging metadata for attachment list results. See IPage.IPagination for details."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardAttachment"},"description":"Array of full attachment objects (includes all metadata). For API endpoints needing every field for management or export."}},"required":["pagination","data"],"description":"Paginated container type for full attachment records, supporting endpoints returning complete metadata and audit fields for attachment lists. Used for admin, export, and system review APIs—do not use for public user listing, which should use the summary form."},"IPageIDiscussionBoardComment":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page metadata block, describes current paging state and total comment count for the query."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardComment.ISummary"},"description":"Array of comment summary objects for the requested page. Each object gives limited details about one comment."}},"required":["pagination","data"],"description":"Paginated result type for returning comment summaries to the client. Used by the comment list endpoint for client-side threading, paging, and summary listings. Does not include full edit history, body, or audit fields—for those, fetch IDiscussionBoardComment individually."},"IDiscussionBoardVote.IRequest":{"type":"object","properties":{"vote_type":{"oneOf":[{"const":"up"},{"const":"down"}]},"discussion_board_post_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null","format":"uuid"}]},"discussion_board_comment_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null","format":"uuid"}]},"created_from":{"type":"string","format":"date-time"},"created_to":{"type":"string","format":"date-time"},"sort_by":{"const":"created_at"},"sort_order":{"oneOf":[{"const":"asc"},{"const":"desc"}]},"page":{"type":"integer"},"limit":{"type":"integer"}},"description":"Request filter object for paginated vote search or aggregation. Allows filtering by target, type, date, and controlling pagination parameters for retrieval.","required":[]},"IPageIDiscussionBoardVote":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardVote"},"description":"Array of complete vote records."}},"required":["pagination","data"],"description":"Paginated listing structure for votes, supporting voting history retrieval or moderation review. Follows strict IPage structure."},"IDiscussionBoardVote.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid"},"vote_type":{"oneOf":[{"const":"up"},{"const":"down"}]},"created_at":{"type":"string","format":"date-time"}},"description":"A minimal summary record for aggregating simple vote statistics, used in lists or post/comment analytics. Contains only safe, public-facing vote details with no actor or private IDs.","required":["id","vote_type","created_at"]},"IDiscussionBoardVote":{"type":"object","properties":{"id":{"type":"string","format":"uuid"},"discussion_board_post_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null","format":"uuid"}]},"discussion_board_comment_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null","format":"uuid"}]},"vote_type":{"oneOf":[{"const":"up"},{"const":"down"}]},"created_at":{"type":"string","format":"date-time"},"updated_at":{"type":"string","format":"date-time"},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null","format":"date-time"}]}},"description":"A user engagement record representing an upvote or downvote action on a post or comment. All fields reference the corresponding discussion_board_votes columns. USER ID is omitted for boundary security; only admins may see complete linkage. Timestamps provide audit and lifecycle traceability.\n\nThis model serves public voting APIs and analytics as well as compliance/audit endpoints (with further filtering).","required":["id","vote_type","created_at","updated_at"]},"IDiscussionBoardVote.ICreate":{"type":"object","properties":{"discussion_board_post_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null","format":"uuid"}]},"discussion_board_comment_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null","format":"uuid"}]},"vote_type":{"oneOf":[{"const":"up"},{"const":"down"}]}},"description":"Payload for casting a new vote on a post or comment. Actor/user ID is always taken from authentication context, not from this request. Exactly one of discussion_board_post_id or discussion_board_comment_id must be non-null. The vote_type must be explicitly 'up' or 'down'. Aligned with business rule for single vote per user per content.","required":["vote_type"]},"IDiscussionBoardVote.IUpdate":{"type":"object","properties":{"vote_type":{"oneOf":[{"const":"up"},{"const":"down"}]}},"description":"Allows a user to update a previous vote (e.g., change upvote to down). Only the vote_type may be supplied in update. All state transitions and audit logic handled by business layer.","required":["vote_type"]},"IDiscussionBoardPoll.IRequest":{"type":"object","properties":{"page":{"type":"integer","minimum":1,"description":"Page number (pagination). Default: 1."},"limit":{"type":"integer","minimum":1,"description":"Page size (number of items per page). Default: 20."},"title":{"type":"string","description":"Optional filter for poll title substring search. Matches any title containing this string."},"multi_choice":{"type":"boolean","description":"Filter for whether the poll is multi-choice."},"open_only":{"type":"boolean","description":"Set true to filter only currently open polls (opened_at <= now and (closed_at is null or closed_at > now))."},"closed_only":{"type":"boolean","description":"Set true to filter only closed polls (closed_at <= now)."},"created_from":{"type":"string","format":"date-time","description":"Filter to polls created after this ISO 8601 date (inclusive)."},"created_to":{"type":"string","format":"date-time","description":"Filter to polls created before this ISO 8601 date (inclusive)."},"post_id":{"type":"string","format":"uuid","description":"Restrict polls to those attached to a particular post. Prisma: discussion_board_polls.discussion_board_post_id"},"sort_by":{"oneOf":[{"const":"created_at","description":"Sort field for poll listing. One of created_at, opened_at, closed_at, title."},{"const":"opened_at","description":"Sort field for poll listing. One of created_at, opened_at, closed_at, title."},{"const":"closed_at","description":"Sort field for poll listing. One of created_at, opened_at, closed_at, title."},{"const":"title","description":"Sort field for poll listing. One of created_at, opened_at, closed_at, title."}],"description":"Sort field for poll listing. One of created_at, opened_at, closed_at, title."},"sort_order":{"oneOf":[{"const":"asc","description":"Order for sorting: ascending or descending."},{"const":"desc","description":"Order for sorting: ascending or descending."}],"description":"Order for sorting: ascending or descending."}},"description":"Query object for filtering, searching, and paginating poll listings. Used in PATCH operations for poll index views. Optional fields control search, filter, and sort for efficient moderation and management.","required":[]},"IPageIDiscussionBoardPoll.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Pagination metadata (current page, limit, total records, pages)."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardPollSummary"},"description":"List of poll summaries for this page."}},"required":["pagination","data"],"description":"Paginated result set of poll summaries for poll listings and search endpoints. Uses standard IPage structure with ISummary detail records. See also: IDiscussionBoardPollSummary, IPage.IPagination."},"IDiscussionBoardPollSummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the poll. Primary key in discussion_board_polls."},"discussion_board_post_id":{"type":"string","format":"uuid","description":"ID of the post to which this poll is attached. References discussion_board_posts.id. Prisma: discussion_board_polls.discussion_board_post_id"},"title":{"type":"string","description":"Poll title as displayed to users. Must be unique per post. Prisma: discussion_board_polls.title"},"multi_choice":{"type":"boolean","description":"True if poll allows multiple choices per user. False for single-choice polls. Prisma: discussion_board_polls.multi_choice"},"opened_at":{"type":"string","format":"date-time","description":"Time when poll opened (UTC ISO 8601). Used to enforce voting windows. Prisma: discussion_board_polls.opened_at"},"closed_at":{"oneOf":[{"type":"string","format":"date-time","description":"Time poll closes (null if poll remains open). Prisma: discussion_board_polls.closed_at"},{"type":"null","format":"date-time","description":"Time poll closes (null if poll remains open). Prisma: discussion_board_polls.closed_at"}],"description":"Time poll closes (null if poll remains open). Prisma: discussion_board_polls.closed_at"},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp. Prisma: discussion_board_polls.created_at"},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Soft deletion marker. If set, poll is hidden/deleted. Prisma: discussion_board_polls.deleted_at"},{"type":"null","format":"date-time","description":"Soft deletion marker. If set, poll is hidden/deleted. Prisma: discussion_board_polls.deleted_at"}],"description":"Soft deletion marker. If set, poll is hidden/deleted. Prisma: discussion_board_polls.deleted_at"}},"required":["id","discussion_board_post_id","title","multi_choice","opened_at","created_at"],"description":"Summary of poll for list/search views. Contains minimal poll data for listings: id, post reference, title, multi_choice flag, open/close and creation times. Related to ISummaryList APIs."},"IDiscussionBoardPoll":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for this poll. See discussion_board_polls.id. Used as primary key and in relationships."},"discussion_board_post_id":{"type":"string","format":"uuid","description":"ID of the post this poll belongs to. Foreign key: discussion_board_posts.id"},"title":{"type":"string","description":"Poll question/title. Must be unique per discussion_board_post. Prisma: discussion_board_polls.title"},"description":{"oneOf":[{"type":"string","description":"Optional extra description or help text for the poll. User-facing explanatory notes. Prisma: discussion_board_polls.description"},{"type":"null","description":"Optional extra description or help text for the poll. User-facing explanatory notes. Prisma: discussion_board_polls.description"}],"description":"Optional extra description or help text for the poll. User-facing explanatory notes. Prisma: discussion_board_polls.description"},"multi_choice":{"type":"boolean","description":"Indicates if this is a multi-choice poll (true: user can vote for multiple options; false: single choice only). Prisma: discussion_board_polls.multi_choice"},"opened_at":{"type":"string","format":"date-time","description":"Datetime when this poll opens for voting. ISO 8601 UTC. Prisma: discussion_board_polls.opened_at"},"closed_at":{"oneOf":[{"type":"string","format":"date-time","description":"Datetime when the poll closes. Null if poll is always open. Prisma: discussion_board_polls.closed_at"},{"type":"null","format":"date-time","description":"Datetime when the poll closes. Null if poll is always open. Prisma: discussion_board_polls.closed_at"}],"description":"Datetime when the poll closes. Null if poll is always open. Prisma: discussion_board_polls.closed_at"},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp. Prisma: discussion_board_polls.created_at"},"updated_at":{"type":"string","format":"date-time","description":"Last modification timestamp for the poll. Prisma: discussion_board_polls.updated_at"},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Soft deletion marker timestamp. Null if available. Prisma: discussion_board_polls.deleted_at"},{"type":"null","format":"date-time","description":"Soft deletion marker timestamp. Null if available. Prisma: discussion_board_polls.deleted_at"}],"description":"Soft deletion marker timestamp. Null if available. Prisma: discussion_board_polls.deleted_at"}},"required":["id","discussion_board_post_id","title","multi_choice","opened_at","created_at","updated_at"],"description":"A poll object as stored in the discussion_board_polls table. Represents voting opportunities attached to posts. Tightly follows the schema fields for poll lifecycle and eligibility. Contains full detail except for nested poll options/votes, found in related endpoints/APIs."},"IDiscussionBoardPoll.ICreate":{"type":"object","properties":{"discussion_board_post_id":{"type":"string","format":"uuid","description":"ID of the post to link the new poll to. Required for creation. Prisma: discussion_board_polls.discussion_board_post_id"},"title":{"type":"string","description":"Title/question for the poll to be displayed to users. Required for creation. Prisma: discussion_board_polls.title"},"description":{"type":"string","description":"Optional extended description or instructions for the poll. Null if not provided. Prisma: discussion_board_polls.description"},"multi_choice":{"type":"boolean","description":"Must specify if poll allows multiple selections (true = multi-choice, false = single choice). Required. Prisma: discussion_board_polls.multi_choice"},"opened_at":{"type":"string","format":"date-time","description":"Datetime (ISO 8601) when the poll becomes active. Required. Prisma: discussion_board_polls.opened_at"},"closed_at":{"oneOf":[{"type":"string","format":"date-time","description":"Datetime poll closes; null for indefinite polls. Optional. Prisma: discussion_board_polls.closed_at"},{"type":"null","format":"date-time","description":"Datetime poll closes; null for indefinite polls. Optional. Prisma: discussion_board_polls.closed_at"}],"description":"Datetime poll closes; null for indefinite polls. Optional. Prisma: discussion_board_polls.closed_at"}},"required":["discussion_board_post_id","title","multi_choice","opened_at"],"description":"Request body for creating a new poll attached to a post. All required schema fields must be supplied. Tightly aligned with the discussion_board_polls creation logic and business validation rules. Optional description and closed_at supported."},"IDiscussionBoardPoll.IUpdate":{"type":"object","properties":{"title":{"type":"string","description":"Optionally update the poll's title/question. Prisma: discussion_board_polls.title"},"description":{"type":"string","description":"Optionally update the poll's description/explanation. Prisma: discussion_board_polls.description"},"multi_choice":{"type":"boolean","description":"Optionally set multi_choice flag. Allows switching between single/multi choice before poll opens. Prisma: discussion_board_polls.multi_choice"},"opened_at":{"type":"string","format":"date-time","description":"Optionally update the datetime for poll opening. Prisma: discussion_board_polls.opened_at"},"closed_at":{"oneOf":[{"type":"string","format":"date-time","description":"Optionally update poll closing time. Null clears close timer. Prisma: discussion_board_polls.closed_at"},{"type":"null","format":"date-time","description":"Optionally update poll closing time. Null clears close timer. Prisma: discussion_board_polls.closed_at"}],"description":"Optionally update poll closing time. Null clears close timer. Prisma: discussion_board_polls.closed_at"}},"description":"Request for editing/updating an existing poll. Only mutable fields may be set; all others remain as stored in the poll. Used for PATCH/PUT requests. See update business rules and compliance in the schema.","required":[]},"IPageIDiscussionBoardVote.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardVote.ISummary"},"description":"Array of summary vote data."}},"required":["pagination","data"],"description":"Paginated minimal-listing votes, used in analytics or summary statistics panels."},"IDiscussionBoardPollOption.IRequest":{"type":"object","properties":{"poll_id":{"type":"string","format":"uuid","description":"(Optional) Filter by parent poll's unique identifier. If provided, returns only options for this poll."},"option_text":{"type":"string","description":"(Optional) Filter by poll option label (partial or full match)."},"sequence":{"type":"integer","description":"(Optional) Filter by display sequence/order (1-based integer)."},"include_deleted":{"type":"boolean","description":"Should soft-deleted (deleted_at is not null) options be included in result set?"},"page":{"type":"integer","description":"Page number for pagination. Defaults to 1."},"limit":{"type":"integer","description":"Number of records per page, for pagination."},"sort_by":{"oneOf":[{"const":"created_at","description":"Field for sorting results."},{"const":"updated_at","description":"Field for sorting results."},{"const":"sequence","description":"Field for sorting results."}],"description":"Field for sorting results."},"order":{"oneOf":[{"const":"asc","description":"Sorting order, ascending or descending."},{"const":"desc","description":"Sorting order, ascending or descending."}],"description":"Sorting order, ascending or descending."}},"description":"Request structure for searching/filtering poll options attached to a poll. Allows filtering by poll, text, sequence, soft-deletion status, and pagination. Use for advanced UI search and admin/moderator reviews.","required":[]},"IPageIDiscussionBoardPollOption.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Pagination information for option result set."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardPollOption.ISummary"},"description":"Array of poll option summaries matching the query."}},"required":["pagination","data"],"description":"Paginated list of poll option summaries. This is the standard structure for a paginated index or search operation response in AutoBE/OpenAPI patterns."},"IDiscussionBoardPollOption":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"System-assigned unique identifier for this poll option."},"discussion_board_poll_id":{"type":"string","format":"uuid","description":"The unique identifier of the parent poll for this option. FK to discussion_board_polls.id."},"option_text":{"type":"string","description":"Displayed text of the option (answer choice). Unique per poll. E.g., 'Approve', 'Against', 'Abstain'."},"sequence":{"type":"integer","description":"Display order of poll options in UI (low=first). Must be unique within parent poll. 1-based."},"created_at":{"type":"string","format":"date-time","description":"ISO date-time when option was created. Set by system."},"updated_at":{"type":"string","format":"date-time","description":"ISO date-time when option was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Soft-deletion marker (timestamp). Null if not deleted."},{"type":"null","format":"date-time","description":"Soft-deletion marker (timestamp). Null if not deleted."}],"description":"Soft-deletion marker (timestamp). Null if not deleted."}},"required":["id","discussion_board_poll_id","option_text","sequence","created_at","updated_at"],"description":"Full poll option entity with all attributes as stored in backend. Each represents a selectable answer for a given poll. Linked to parent poll and may be deleted (soft delete) for audit/compliance."},"IDiscussionBoardPollOption.ICreate":{"type":"object","properties":{"discussion_board_poll_id":{"type":"string","format":"uuid","description":"Required. Poll to which this option will be added. FK to discussion_board_polls.id."},"option_text":{"type":"string","description":"Required. Label shown to users for this choice, must be unique within poll."},"sequence":{"type":"integer","description":"Required. Display order (1-based) to control UI position of option."}},"required":["discussion_board_poll_id","option_text","sequence"],"description":"Request payload for creating a new poll option for a poll. Used in admin/moderator and post-author workflows. Option text must be unique per poll."},"IDiscussionBoardPollOption.IUpdate":{"type":"object","properties":{"option_text":{"type":"string","description":"(Optional) Updated label for the poll option. Must remain unique within poll."},"sequence":{"type":"integer","description":"(Optional) New display sequence ordering for this poll option."}},"description":"Update any combination of fields on an existing poll option. Used for admin/post-author editing. Cannot change parent poll.","required":[]},"IDiscussionBoardPollVote.IRequest":{"type":"object","properties":{"poll_id":{"type":"string","format":"uuid","description":"(Optional) Filter results to votes associated with this poll."},"poll_option_id":{"type":"string","format":"uuid","description":"(Optional) Filter by selected poll option id."},"user_id":{"type":"string","format":"uuid","description":"(Optional) Filter for only votes cast by this user."},"include_deleted":{"type":"boolean","description":"Should soft-deleted votes be included (where deleted_at is not null)?"},"page":{"type":"integer","description":"Paginated result set page number (default: 1)."},"limit":{"type":"integer","description":"Results per page for pagination."},"sort_by":{"const":"created_at","description":"Field for sorting result list (created_at only)."},"order":{"oneOf":[{"const":"asc","description":"Sorting order, ascending or descending."},{"const":"desc","description":"Sorting order, ascending or descending."}],"description":"Sorting order, ascending or descending."}},"description":"Filtering/search input for retrieving votes (per poll, user, option, etc.). Used in admin, moderator, and analytics flows.","required":[]},"IPageIDiscussionBoardPollVote":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination"},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardPollVote"},"description":"Results for one page of votes matching request criteria."}},"required":["pagination","data"],"description":"Standard paginated list structure for returning poll vote records and pagination info."},"IDiscussionBoardPollVote":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for poll vote (primary key in DB)."},"discussion_board_poll_id":{"type":"string","format":"uuid","description":"Poll id to which this vote belongs (FK to discussion_board_polls.id)."},"discussion_board_poll_option_id":{"type":"string","format":"uuid","description":"Option selected by the user (FK to discussion_board_poll_options.id)."},"discussion_board_user_id":{"type":"string","format":"uuid","description":"User who voted (FK to discussion_board_users.id)."},"created_at":{"type":"string","format":"date-time","description":"Vote creation timestamp (ISO 8601 date-time)."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Soft-deleted votes will have this timestamp set for audit/compliance."},{"type":"null","format":"date-time","description":"Soft-deleted votes will have this timestamp set for audit/compliance."}],"description":"Soft-deleted votes will have this timestamp set for audit/compliance."}},"required":["id","discussion_board_poll_id","discussion_board_poll_option_id","discussion_board_user_id","created_at"],"description":"A single vote on a poll option by a user. Each user may only vote once per poll option. Soft deletion possible for audit."},"IDiscussionBoardPollOption.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for this poll option, assigned by system."},"poll_id":{"type":"string","format":"uuid","description":"Primary key for parent poll. Foreign key linking to discussion_board_polls.id."},"option_text":{"type":"string","description":"Option label as it appears to users. E.g., 'Yes', 'No', 'Abstain'. Must be unique per poll."},"sequence":{"type":"integer","description":"Display order for this option within its poll. 1-based integer, low numbers shown first."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp of soft deletion; null if not deleted. Used for audit/compliance."},{"type":"null","format":"date-time","description":"Timestamp of soft deletion; null if not deleted. Used for audit/compliance."}],"description":"Timestamp of soft deletion; null if not deleted. Used for audit/compliance."}},"required":["id","poll_id","option_text","sequence"],"description":"Summarized information about a poll option for list or search results. Used in paginated index of options for a poll."},"IDiscussionBoardPollVote.ICreate":{"type":"object","properties":{"pollId":{"type":"string","format":"uuid","description":"UUID of the poll being voted on. This must reference a valid, open poll entity. Used to ensure the vote is recorded for the correct survey in the discussion board polling module."},"optionIds":{"type":"array","items":{"type":"string","format":"uuid"},"description":"Array of UUIDs representing the poll options selected by the voting user. For single-choice polls, only one ID is included; for multiple-choice, several may appear. Options submitted must exist for the target poll and must not be soft-deleted or closed."}},"required":["pollId","optionIds"],"description":"Request body schema for creating a new poll vote. Used for voting actions within the discussion board. Enforces user eligibility, poll status, and business rules for unique vote per poll/option."},"IDiscussionBoardPollVote.IUpdate":{"type":"object","properties":{"pollVoteId":{"type":"string","format":"uuid","description":"UUID of the specific poll vote record to be updated. Must point to an existing vote and be owned by the updating user, or the operation must be performed by a privileged moderator or admin."},"newOptionIds":{"type":"array","items":{"type":"string","format":"uuid"},"description":"New array of UUIDs representing the user’s selected poll options for the update. This may be a single or multiple value array, according to the poll's multi_choice flag."}},"required":["pollVoteId","newOptionIds"],"description":"Request body schema for updating an existing poll vote on a post. Used only by privileged roles or in special override scenarios. Normal users should re-vote through the regular vote endpoint (not this update)."},"IDiscussionBoardFlagReport.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","description":"Page number for pagination (1-based). Optional, default 1."},{"type":"null","description":"Page number for pagination (1-based). Optional, default 1."}],"description":"Page number for pagination (1-based). Optional, default 1."},"limit":{"oneOf":[{"type":"integer","description":"Maximum number of records per page. Optional, default value as per system config."},{"type":"null","description":"Maximum number of records per page. Optional, default value as per system config."}],"description":"Maximum number of records per page. Optional, default value as per system config."},"status":{"type":"string","description":"Filter reports by status: 'pending', 'triaged', 'dismissed', 'accepted', 'escalated'."},"contentType":{"oneOf":[{"const":"post","description":"Restrict search to only post or comment flag reports."},{"const":"comment","description":"Restrict search to only post or comment flag reports."}],"description":"Restrict search to only post or comment flag reports."},"reason":{"type":"string","description":"Filter reports by the reason string/category (e.g., 'spam', 'abuse', etc.)."},"reporterId":{"type":"string","format":"uuid","description":"Restrict reports to those submitted by the specified reporter (user UUID)."},"createdFrom":{"type":"string","format":"date-time","description":"ISO date-time lower bound; only reports created after or at this timestamp are included."},"createdTo":{"type":"string","format":"date-time","description":"ISO date-time upper bound; only reports created before or at this timestamp are included."},"sortBy":{"type":"string","description":"Sort key, e.g., 'created_at', 'status', etc."},"sortDirection":{"oneOf":[{"const":"asc","description":"Sort direction, ascending or descending."},{"const":"desc","description":"Sort direction, ascending or descending."}],"description":"Sort direction, ascending or descending."},"search":{"type":"string","description":"Free-text search for flag reason, details, or related content fields."}},"required":[],"description":"Request body schema for listing or searching flag reports in moderation/admin queues. Supports advanced searching and paginated results."},"IPageIDiscussionBoardFlagReport.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Pagination info for the paginated response. Includes current page, page size, record count, and total pages."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardFlagReport.ISummary"},"description":"Summaries of flag reports matching the search/filter criteria for the current page."}},"required":["pagination","data"],"description":"Paginated response schema for flag report summaries in moderation/administrative review views."},"IDiscussionBoardFlagReport.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the flag report. Maps to the primary key of the discussion_board_flag_reports entity."},"reporterId":{"type":"string","format":"uuid","description":"UUID of the user who submitted the report. Supports audit, permission checks, and UI summary displays."},"postId":{"type":"string","format":"uuid","description":"UUID for the flagged post, if applicable. This field is present only for post reports."},"commentId":{"type":"string","format":"uuid","description":"UUID for the flagged comment, if applicable. Present for comment-specific reports only."},"reason":{"type":"string","description":"Short reason code or category for the reported issue, e.g., 'spam', 'abuse', 'misinformation'."},"status":{"type":"string","description":"Current review status: 'pending', 'triaged', 'dismissed', 'accepted', 'escalated'."},"createdAt":{"type":"string","format":"date-time","description":"When the report was created (ISO timestamp, UTC)."},"reviewedAt":{"type":"string","format":"date-time","description":"When the report was reviewed by a moderator, if applicable (ISO timestamp, UTC)."}},"required":["id","reporterId","reason","status","createdAt"],"description":"Summary schema of a flag report for paginated list modes. Exposes essential metadata for moderation triage and review."},"IDiscussionBoardFlagReport":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the flag report. Primary key from the discussion_board_flag_reports schema."},"reporterId":{"type":"string","format":"uuid","description":"UUID of the reporting user. Used in audit logs, profile lookups, and moderation workflows."},"postId":{"type":"string","format":"uuid","description":"UUID of the flagged post, if the report pertains to a post. Optional if commentId is present."},"commentId":{"type":"string","format":"uuid","description":"UUID of the flagged comment, if the report pertains to a comment. Optional if postId is present."},"reason":{"type":"string","description":"Short string indicating the reason for the report (e.g., 'spam', 'abuse', 'misinformation', etc.)."},"details":{"type":"string","description":"Extended narrative provided by reporter, giving extra context for the flag. Optional, for moderation analysis."},"status":{"type":"string","description":"Current review status of the report. Values: 'pending', 'triaged', 'dismissed', 'accepted', 'escalated'."},"reviewedAt":{"type":"string","format":"date-time","description":"Datetime when the flag was reviewed or acted on by a moderator. Null if not yet reviewed."},"createdAt":{"type":"string","format":"date-time","description":"Datetime (ISO string) for when the report was initially created."},"updatedAt":{"type":"string","format":"date-time","description":"Datetime (ISO string) for the most recent update to the record."}},"required":["id","reporterId","reason","status","createdAt","updatedAt"],"description":"Full schema for a single flag report record, matching the discussion_board_flag_reports entity. Includes all business, audit, and workflow fields as outlined in the schema."},"IDiscussionBoardFlagReport.ICreate":{"type":"object","properties":{"postId":{"type":"string","format":"uuid","description":"UUID of the flagged post, if applicable. Include either postId or commentId, never both (mutually exclusive); determines the target content for this flag report."},"commentId":{"type":"string","format":"uuid","description":"UUID of the flagged comment, if applicable. Mutually exclusive with postId."},"reason":{"type":"string","description":"Short string code or category for the report. E.g., 'spam', 'abuse', 'misinformation', etc."},"details":{"type":"string","description":"Optional extended reporter narrative or justification for the flag; used by moderators for deeper context."}},"required":["reason"],"description":"Request body schema for creating a new content flag report. Requires a clear reason/category and one of the content references; optional contextual details support moderation understanding."},"IDiscussionBoardFlagReport.IUpdate":{"type":"object","properties":{"status":{"type":"string","description":"Sets the new review/moderation status of the report: e.g., 'triaged', 'accepted', 'dismissed', or 'escalated'. Only valid status options are permitted according to business policy at the time of transition."},"reviewedAt":{"type":"string","format":"date-time","description":"Timestamp for when moderation was performed. Omission means the review did not yet occur."},"details":{"type":"string","description":"Additional details or notes from moderation, or correction to the initial submission."}},"required":[],"description":"Request body schema for updating flag reports in moderation workflow. Used primarily by moderators/admins to mark status changes or add review details."},"IDiscussionBoardModerationAction.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","description":"Page number for pagination (1-based index); optional, defaults to 1."},{"type":"null","description":"Page number for pagination (1-based index); optional, defaults to 1."}],"description":"Page number for pagination (1-based index); optional, defaults to 1."},"limit":{"oneOf":[{"type":"integer","description":"Number of records per page, default set by business logic."},{"type":"null","description":"Number of records per page, default set by business logic."}],"description":"Number of records per page, default set by business logic."},"actionType":{"type":"string","description":"Restriction to moderation actions matching this type (e.g., 'warn', 'mute', 'remove', 'edit', etc.)."},"moderatorId":{"type":"string","format":"uuid","description":"Filter by moderator actor. Only returns actions by this moderator UUID."},"userId":{"type":"string","format":"uuid","description":"Restrict actions impacting this user (targeted user UUID)."},"postId":{"type":"string","format":"uuid","description":"Filter actions performed against this post (UUID of post)."},"commentId":{"type":"string","format":"uuid","description":"Filter actions performed on this comment (UUID for target comment)."},"effectiveFrom":{"type":"string","format":"date-time","description":"Lower bound filter for effective_from timestamps."},"effectiveUntil":{"type":"string","format":"date-time","description":"Upper bound for effective_until filtering."},"createdFrom":{"type":"string","format":"date-time","description":"Lower-bound creation time filter for action records."},"createdTo":{"type":"string","format":"date-time","description":"Upper-bound for creation time."},"sortBy":{"type":"string","description":"Sort field (e.g., 'created_at', 'action_type')."},"sortDirection":{"oneOf":[{"const":"asc","description":"Sort direction, ascending or descending."},{"const":"desc","description":"Sort direction, ascending or descending."}],"description":"Sort direction, ascending or descending."},"search":{"type":"string","description":"Free-text search for action reason or moderation context."}},"required":[],"description":"Request body schema for querying moderation actions by page, filter, and advanced search, as required for admin/moderator compliance review and triage."},"IDiscussionBoardModerationAction":{"type":"object","description":"Represents a detailed moderation action record as stored in the database and exposed through the API. Each moderation action documents a decision or enforcement taken by a moderator or admin against a user, post, or comment in the discussion board. This type is derived from the discussion_board_moderation_actions model in the Prisma schema, reflecting all audit-critical fields such as responsible moderators, targets, action details, timing, and lifecycle information.","properties":{"id":{"type":"string","format":"uuid","description":"Globally unique identifier for this moderation action. Matches the primary key in the discussion_board_moderation_actions table."},"moderator_id":{"type":"string","format":"uuid","description":"ID of the moderator (from discussion_board_moderators.id) who performed this action."},"user_id":{"oneOf":[{"type":"string","format":"uuid","description":"ID of the user (discussion_board_users.id) who was affected by this moderation action, if applicable. Nullable if action targets a post or comment only."},{"type":"null","format":"uuid","description":"ID of the user (discussion_board_users.id) who was affected by this moderation action, if applicable. Nullable if action targets a post or comment only."}],"description":"ID of the user (discussion_board_users.id) who was affected by this moderation action, if applicable. Nullable if action targets a post or comment only."},"post_id":{"oneOf":[{"type":"string","format":"uuid","description":"ID of the moderated post (discussion_board_posts.id) if the action is post-specific. Nullable when action is purely user-focused or on a comment."},{"type":"null","format":"uuid","description":"ID of the moderated post (discussion_board_posts.id) if the action is post-specific. Nullable when action is purely user-focused or on a comment."}],"description":"ID of the moderated post (discussion_board_posts.id) if the action is post-specific. Nullable when action is purely user-focused or on a comment."},"comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"ID of the moderated comment (discussion_board_comments.id) if the action is comment-specific. Nullable."},{"type":"null","format":"uuid","description":"ID of the moderated comment (discussion_board_comments.id) if the action is comment-specific. Nullable."}],"description":"ID of the moderated comment (discussion_board_comments.id) if the action is comment-specific. Nullable."},"action_type":{"oneOf":[{"const":"warn","description":"Enumerated kind of moderation action performed. One of: 'warn', 'mute', 'remove', 'edit', 'restrict', 'restore', 'escalate'. Matches action_type in the schema."},{"const":"mute","description":"Enumerated kind of moderation action performed. One of: 'warn', 'mute', 'remove', 'edit', 'restrict', 'restore', 'escalate'. Matches action_type in the schema."},{"const":"remove","description":"Enumerated kind of moderation action performed. One of: 'warn', 'mute', 'remove', 'edit', 'restrict', 'restore', 'escalate'. Matches action_type in the schema."},{"const":"edit","description":"Enumerated kind of moderation action performed. One of: 'warn', 'mute', 'remove', 'edit', 'restrict', 'restore', 'escalate'. Matches action_type in the schema."},{"const":"restrict","description":"Enumerated kind of moderation action performed. One of: 'warn', 'mute', 'remove', 'edit', 'restrict', 'restore', 'escalate'. Matches action_type in the schema."},{"const":"restore","description":"Enumerated kind of moderation action performed. One of: 'warn', 'mute', 'remove', 'edit', 'restrict', 'restore', 'escalate'. Matches action_type in the schema."},{"const":"escalate","description":"Enumerated kind of moderation action performed. One of: 'warn', 'mute', 'remove', 'edit', 'restrict', 'restore', 'escalate'. Matches action_type in the schema."}],"description":"Enumerated kind of moderation action performed. One of: 'warn', 'mute', 'remove', 'edit', 'restrict', 'restore', 'escalate'. Matches action_type in the schema."},"action_reason":{"type":"string","description":"Short string explaining the primary reason for the moderation action. Used for compliance and reporting."},"details":{"oneOf":[{"type":"string","description":"Optional extended justification or context for moderation action. Can include moderator notes, investigation findings, or references to community guideline sections."},{"type":"null","description":"Optional extended justification or context for moderation action. Can include moderator notes, investigation findings, or references to community guideline sections."}],"description":"Optional extended justification or context for moderation action. Can include moderator notes, investigation findings, or references to community guideline sections."},"effective_from":{"type":"string","format":"date-time","description":"ISO8601 timestamp indicating when the moderation action takes effect (may be immediate or future)."},"effective_until":{"oneOf":[{"type":"string","format":"date-time","description":"For time-limited actions (e.g. suspensions), when the restriction ends. Null for permanent or indefinite actions."},{"type":"null","format":"date-time","description":"For time-limited actions (e.g. suspensions), when the restriction ends. Null for permanent or indefinite actions."}],"description":"For time-limited actions (e.g. suspensions), when the restriction ends. Null for permanent or indefinite actions."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the moderation action was created (recorded in the system)."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of the last update to this moderation action record."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Soft delete marker; indicates the moderation action is retired but audit-traceable."},{"type":"null","format":"date-time","description":"Soft delete marker; indicates the moderation action is retired but audit-traceable."}],"description":"Soft delete marker; indicates the moderation action is retired but audit-traceable."}},"required":["id","moderator_id","action_type","action_reason","effective_from","created_at","updated_at"]},"IDiscussionBoardModerationAction.ICreate":{"type":"object","description":"Request body schema for creating a new moderation action. Follows the discussion_board_moderation_actions model, omitting system-generated fields. Used by moderator/admin-only endpoints to enact new moderation actions for compliance and governance. Submission must include all required business fields; system fields like id or created_at are not client-provided.","properties":{"moderator_id":{"type":"string","format":"uuid","description":"ID of the moderator creating this action (as assigned in the session/auth context)."},"user_id":{"oneOf":[{"type":"string","format":"uuid","description":"User ID of the affected party, if this action is user-targeted. Optional if action is for a post or comment only."},{"type":"null","format":"uuid","description":"User ID of the affected party, if this action is user-targeted. Optional if action is for a post or comment only."}],"description":"User ID of the affected party, if this action is user-targeted. Optional if action is for a post or comment only."},"post_id":{"oneOf":[{"type":"string","format":"uuid","description":"Target post ID for post-specific moderation actions. Null otherwise."},{"type":"null","format":"uuid","description":"Target post ID for post-specific moderation actions. Null otherwise."}],"description":"Target post ID for post-specific moderation actions. Null otherwise."},"comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"Target comment ID for comment-specific moderation actions. Null otherwise."},{"type":"null","format":"uuid","description":"Target comment ID for comment-specific moderation actions. Null otherwise."}],"description":"Target comment ID for comment-specific moderation actions. Null otherwise."},"action_type":{"oneOf":[{"const":"warn","description":"Action type, one of the defined enums, determining moderation enforcement category."},{"const":"mute","description":"Action type, one of the defined enums, determining moderation enforcement category."},{"const":"remove","description":"Action type, one of the defined enums, determining moderation enforcement category."},{"const":"edit","description":"Action type, one of the defined enums, determining moderation enforcement category."},{"const":"restrict","description":"Action type, one of the defined enums, determining moderation enforcement category."},{"const":"restore","description":"Action type, one of the defined enums, determining moderation enforcement category."},{"const":"escalate","description":"Action type, one of the defined enums, determining moderation enforcement category."}],"description":"Action type, one of the defined enums, determining moderation enforcement category."},"action_reason":{"type":"string","description":"Mandatory brief justification for audit and workflow tracking."},"details":{"oneOf":[{"type":"string","description":"Optional longer explanation or internal field for moderator notes."},{"type":"null","description":"Optional longer explanation or internal field for moderator notes."}],"description":"Optional longer explanation or internal field for moderator notes."},"effective_from":{"type":"string","format":"date-time","description":"When the action should become effective (usually now, but can be scheduled for future enforcement)."},"effective_until":{"oneOf":[{"type":"string","format":"date-time","description":"When a time-limited moderation action expires (leave null for indefinite actions)."},{"type":"null","format":"date-time","description":"When a time-limited moderation action expires (leave null for indefinite actions)."}],"description":"When a time-limited moderation action expires (leave null for indefinite actions)."}},"required":["moderator_id","action_type","action_reason","effective_from"]},"IDiscussionBoardModerationAction.IUpdate":{"type":"object","description":"Request body type for updating an existing moderation action record. Only business-updatable fields are accepted. Includes support for updating action type, reasons, and timing (not system fields like id). Used in admin/moderator-level update and correction endpoints.","properties":{"action_type":{"oneOf":[{"const":"warn","description":"Optional update to the definitive moderation action type."},{"const":"mute","description":"Optional update to the definitive moderation action type."},{"const":"remove","description":"Optional update to the definitive moderation action type."},{"const":"edit","description":"Optional update to the definitive moderation action type."},{"const":"restrict","description":"Optional update to the definitive moderation action type."},{"const":"restore","description":"Optional update to the definitive moderation action type."},{"const":"escalate","description":"Optional update to the definitive moderation action type."}],"description":"Optional update to the definitive moderation action type."},"action_reason":{"type":"string","description":"Override or correction to the primary justification string."},"details":{"oneOf":[{"type":"string","description":"Update or set moderator note/context field."},{"type":"null","description":"Update or set moderator note/context field."}],"description":"Update or set moderator note/context field."},"effective_from":{"type":"string","format":"date-time","description":"Update start of enforcement window."},"effective_until":{"oneOf":[{"type":"string","format":"date-time","description":"Update end time of temporary actions (null for indefinite/perm)."},{"type":"null","format":"date-time","description":"Update end time of temporary actions (null for indefinite/perm)."}],"description":"Update end time of temporary actions (null for indefinite/perm)."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"For system use: allows marking the action as retired/soft-deleted."},{"type":"null","format":"date-time","description":"For system use: allows marking the action as retired/soft-deleted."}],"description":"For system use: allows marking the action as retired/soft-deleted."}},"required":[]},"IDiscussionBoardModerationAction.ISummary":{"type":"object","description":"Summary type for listing/searching moderation actions. Lightweight fields for tabular display, dashboards, or audit workflow queues. Omits full internal details and long-form context for efficiency.","properties":{"id":{"type":"string","format":"uuid","description":"Moderation action unique identifier."},"moderator_id":{"type":"string","format":"uuid","description":"Moderator who issued the action."},"user_id":{"oneOf":[{"type":"string","format":"uuid","description":"Affected user for user-specific moderation. Nullable."},{"type":"null","format":"uuid","description":"Affected user for user-specific moderation. Nullable."}],"description":"Affected user for user-specific moderation. Nullable."},"post_id":{"oneOf":[{"type":"string","format":"uuid","description":"Affected post for post-specific moderation."},{"type":"null","format":"uuid","description":"Affected post for post-specific moderation."}],"description":"Affected post for post-specific moderation."},"comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"Affected comment for comment-specific moderation."},{"type":"null","format":"uuid","description":"Affected comment for comment-specific moderation."}],"description":"Affected comment for comment-specific moderation."},"action_type":{"oneOf":[{"const":"warn","description":"Type/category of moderation action taken."},{"const":"mute","description":"Type/category of moderation action taken."},{"const":"remove","description":"Type/category of moderation action taken."},{"const":"edit","description":"Type/category of moderation action taken."},{"const":"restrict","description":"Type/category of moderation action taken."},{"const":"restore","description":"Type/category of moderation action taken."},{"const":"escalate","description":"Type/category of moderation action taken."}],"description":"Type/category of moderation action taken."},"action_reason":{"type":"string","description":"Primary justification for enforcement, suitable for moderation logs."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the action was recorded."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Marker for soft deletion of retired moderation action, if applicable."},{"type":"null","format":"date-time","description":"Marker for soft deletion of retired moderation action, if applicable."}],"description":"Marker for soft deletion of retired moderation action, if applicable."}},"required":["id","moderator_id","action_type","action_reason","created_at"]},"IPageIDiscussionBoardModerationAction.ISummary":{"type":"object","description":"Paginated set of moderation action summary records. Used for moderation dashboards, audit lists, and management search results. Follows the IPage<T> pattern, always includes a pagination object and array of ISummary records, with no inline or anonymous types allowed.","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Pagination metadata for the current result set."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardModerationAction.ISummary"},"description":"Array of summarized moderation action records returned in the current page."}},"required":["pagination","data"]},"IDiscussionBoardAppeal.IRequest":{"type":"object","description":"Request/query type for searching/filtering a paginated list of appeal records. Allows administrators, moderators, or users to filter by source, status, timing, or context. Can be used on listing endpoints to enable complex search, triage, and audit workflows.","properties":{"appellant_id":{"type":"string","format":"uuid","description":"If provided, filters appeals to those created by this specific user. Used in self-service lists or admin queries."},"moderation_action_id":{"type":"string","format":"uuid","description":"If provided, filters by referenced moderation action (appeals challenging the given enforcement/event)."},"flag_report_id":{"type":"string","format":"uuid","description":"If provided, filters appeals linked to a specific content report/flag event."},"status":{"type":"string","description":"Limits appeals by status (e.g. 'pending','resolved','escalated','denied','reviewed'). Value must match business logic for allowed statuses."},"created_from":{"type":"string","format":"date-time","description":"If set, lower bound on appeal creation time for time-based search."},"created_to":{"type":"string","format":"date-time","description":"If set, upper bound on appeal creation time."},"page":{"type":"integer","description":"Page number for paginated listing results (>=1). Usually defaults to 1."},"limit":{"type":"integer","description":"Maximum number of appeals to return in a single page (standard pagination)."}},"required":[]},"IPageIDiscussionBoardAppeal":{"type":"object","description":"Paginated result set of DiscussionBoardAppeal records. Follows the IPage<T> design pattern with fixed pagination and data properties referencing the full detail form of the entity. Used for audit/expert review, triage dashboards, and compliance work.","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Pagination protocol object for the envelope."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardAppeal"},"description":"Current page array of full detail DiscussionBoardAppeal entities matching the filter/search."}},"required":["pagination","data"]},"IDiscussionBoardAppeal":{"type":"object","description":"Represents a single appeal entity as tracked in the discussion_board_appeals table and exposed for audit, user, moderator, and admin review. Tracks appeals against moderation actions and flag reports, user narratives, status, resolution, and review context.","properties":{"id":{"type":"string","format":"uuid","description":"System-assigned unique identifier for the appeal (primary key)."},"appellant_id":{"type":"string","format":"uuid","description":"ID of the user submitting the appeal (from discussion_board_users.id)."},"moderation_action_id":{"oneOf":[{"type":"string","format":"uuid","description":"Reference to the related moderation action, if applicable."},{"type":"null","format":"uuid","description":"Reference to the related moderation action, if applicable."}],"description":"Reference to the related moderation action, if applicable."},"flag_report_id":{"oneOf":[{"type":"string","format":"uuid","description":"Reference to the content flag report this appeal addresses (if relevant)."},{"type":"null","format":"uuid","description":"Reference to the content flag report this appeal addresses (if relevant)."}],"description":"Reference to the content flag report this appeal addresses (if relevant)."},"appeal_reason":{"type":"string","description":"User-supplied narrative or reason for the appeal."},"status":{"type":"string","description":"Lifecycle stage of the appeal (e.g., 'pending', 'reviewed', 'resolved', 'denied','escalated')."},"resolution_comment":{"oneOf":[{"type":"string","description":"Moderator/admin comment or resolution details as provided."},{"type":"null","description":"Moderator/admin comment or resolution details as provided."}],"description":"Moderator/admin comment or resolution details as provided."},"resolved_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp when the appeal was finalized/resolved. Null if pending."},{"type":"null","format":"date-time","description":"Timestamp when the appeal was finalized/resolved. Null if pending."}],"description":"Timestamp when the appeal was finalized/resolved. Null if pending."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of appeal creation."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of most recent update (modification, response, or comment on the appeal)."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Soft delete marker for retirement of appeals on audit/compliance review."},{"type":"null","format":"date-time","description":"Soft delete marker for retirement of appeals on audit/compliance review."}],"description":"Soft delete marker for retirement of appeals on audit/compliance review."}},"required":["id","appellant_id","appeal_reason","status","created_at","updated_at"]},"IDiscussionBoardAppeal.ICreate":{"type":"object","description":"Request schema for creating a new appeal. Used by users to submit narrative and references for an appeal; references moderation or flag event; triggers compliance/audit workflows; omits system-generated or downstream status fields.","properties":{"appellant_id":{"type":"string","format":"uuid","description":"User ID submitting the appeal (authenticated session value)."},"moderation_action_id":{"oneOf":[{"type":"string","format":"uuid","description":"Related moderation action ID this appeal targets, if present."},{"type":"null","format":"uuid","description":"Related moderation action ID this appeal targets, if present."}],"description":"Related moderation action ID this appeal targets, if present."},"flag_report_id":{"oneOf":[{"type":"string","format":"uuid","description":"Related flag report ID this appeal addresses, if present."},{"type":"null","format":"uuid","description":"Related flag report ID this appeal addresses, if present."}],"description":"Related flag report ID this appeal addresses, if present."},"appeal_reason":{"type":"string","description":"Narrative text from user explaining the grounds or context for the appeal."}},"required":["appellant_id","appeal_reason"]},"IDiscussionBoardAppeal.IUpdate":{"type":"object","properties":{"appeal_reason":{"type":"string","description":"The revised narrative or justification for the appeal. Optional for edits; textual field describing new or corrected appeal reason."},"status":{"type":"string","description":"Status of the appeal after moderator/admin update (e.g., 'pending','reviewed','resolved','denied','escalated'). Optional."},"resolution_comment":{"type":"string","description":"Moderator/admin comment about the resolution or review (e.g. rationale for approval/denial). Optional."},"resolved_at":{"type":"string","format":"date-time","description":"Timestamp of resolution decision; nullable or omitted unless status becomes resolved/denied."},"moderation_action_id":{"type":"string","format":"uuid","description":"Reference to a moderation action being appealed (if adjusting appeal linkage)."},"flag_report_id":{"type":"string","format":"uuid","description":"Reference to a flag report being appealed (if adjusting appeal linkage)."}},"description":"Payload for updating an appeal (status, reason, resolution or linkage). All fields are optional; supports partial updates.","required":[]},"IDiscussionBoardNotification.IRequest":{"type":"object","properties":{"type":{"type":"string","description":"Notification type to filter by (e.g., 'reply','mention','flag','mod_action','system_alert','poll_close'). Optional."},"status":{"type":"string","description":"Notification status to filter on (e.g., 'unread','read','archived','delivered','failed'). Optional."},"from_date":{"type":"string","format":"date-time","description":"Filter for notifications created/delivered at or after this time. Optional."},"to_date":{"type":"string","format":"date-time","description":"Filter for notifications created/delivered at or before this time. Optional."},"post_id":{"type":"string","format":"uuid","description":"Filter notifications associated with a specific post id. Optional."},"comment_id":{"type":"string","format":"uuid","description":"Filter notifications associated with a specific comment id. Optional."},"page":{"type":"number","description":"Page number for paginated results. Optional."},"limit":{"type":"number","description":"Number of items per page. Optional."},"sort":{"type":"string","description":"Sort key or rule for ordering (e.g., '-created_at','type','status'). Optional."},"q":{"type":"string","description":"Free-text search/filter for notification title/body. Optional."}},"description":"Search/filter/pagination options for querying notifications for the authenticated user.","required":[]},"IPageIDiscussionBoardNotification":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Pagination metadata context (current page, page size, etc)."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardNotification"},"description":"List of notification entities matching the query/filter."}},"required":["pagination","data"],"description":"Paginated result set of notification objects."},"IDiscussionBoardNotification":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Notification unique identifier (UUID)."},"recipient_user_id":{"type":"string","format":"uuid","description":"ID of the user to whom this notification was delivered."},"actor_user_id":{"oneOf":[{"type":"string","format":"uuid","description":"(Nullable) ID of the actor/user who triggered the notification, if any (e.g., replier, moderator); null for system events."},{"type":"null","format":"uuid","description":"(Nullable) ID of the actor/user who triggered the notification, if any (e.g., replier, moderator); null for system events."}],"description":"(Nullable) ID of the actor/user who triggered the notification, if any (e.g., replier, moderator); null for system events."},"post_id":{"oneOf":[{"type":"string","format":"uuid","description":"(Nullable) Associated post ID, for notifications linked to a post."},{"type":"null","format":"uuid","description":"(Nullable) Associated post ID, for notifications linked to a post."}],"description":"(Nullable) Associated post ID, for notifications linked to a post."},"comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"(Nullable) Associated comment ID, for notifications linked to a comment."},{"type":"null","format":"uuid","description":"(Nullable) Associated comment ID, for notifications linked to a comment."}],"description":"(Nullable) Associated comment ID, for notifications linked to a comment."},"type":{"type":"string","description":"Type/category of notification—see business enum docs for valid types."},"status":{"type":"string","description":"Notification delivery status/state—e.g., 'unread','read','archived','delivered','failed'."},"title":{"oneOf":[{"type":"string","description":"Short notification title or heading; nullable."},{"type":"null","description":"Short notification title or heading; nullable."}],"description":"Short notification title or heading; nullable."},"body":{"oneOf":[{"type":"string","description":"Notification message body or summary; nullable."},{"type":"null","description":"Notification message body or summary; nullable."}],"description":"Notification message body or summary; nullable."},"action_url":{"oneOf":[{"type":"string","description":"(Nullable) URI/link for user action associated with notification, if present."},{"type":"null","description":"(Nullable) URI/link for user action associated with notification, if present."}],"description":"(Nullable) URI/link for user action associated with notification, if present."},"failure_reason":{"oneOf":[{"type":"string","description":"(Nullable) Delivery failure explanation if status is 'failed', or omitted if delivered. "},{"type":"null","description":"(Nullable) Delivery failure explanation if status is 'failed', or omitted if delivered. "}],"description":"(Nullable) Delivery failure explanation if status is 'failed', or omitted if delivered. "},"created_at":{"type":"string","format":"date-time","description":"Timestamp when notification was created/generated."},"delivered_at":{"oneOf":[{"type":"string","format":"date-time","description":"(Nullable) Timestamp when delivered, if delivered (optional for undelivered or failed)."},{"type":"null","format":"date-time","description":"(Nullable) Timestamp when delivered, if delivered (optional for undelivered or failed)."}],"description":"(Nullable) Timestamp when delivered, if delivered (optional for undelivered or failed)."},"read_at":{"oneOf":[{"type":"string","format":"date-time","description":"(Nullable) Timestamp of recipient reading the notification (optional if unread)."},{"type":"null","format":"date-time","description":"(Nullable) Timestamp of recipient reading the notification (optional if unread)."}],"description":"(Nullable) Timestamp of recipient reading the notification (optional if unread)."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"(Nullable) Timestamp when soft-deleted, else null if active."},{"type":"null","format":"date-time","description":"(Nullable) Timestamp when soft-deleted, else null if active."}],"description":"(Nullable) Timestamp when soft-deleted, else null if active."}},"required":["id","recipient_user_id","type","status","created_at"],"description":"Notification detail record for in-app, email or push delivery; outputs metadata, recipient, actor, message and status."},"IDiscussionBoardNotification.IUpdate":{"type":"object","properties":{"status":{"type":"string","description":"Updated notification status ('read','archived','unread','delivered',etc) to set for the notification."},"read_at":{"type":"string","format":"date-time","description":"(Optional) If status is or becomes 'read', set the read_at timestamp."}},"required":["status"],"description":"Request body to update notification (status transitions, mark read, archive, etc)."},"IDiscussionBoardNotificationPreference.IRequest":{"type":"object","properties":{"email_enabled":{"type":"boolean","description":"Optionally filter by email notification enabled state. Optional."},"push_enabled":{"type":"boolean","description":"Optionally filter by push notification enabled state. Optional."},"in_app_enabled":{"type":"boolean","description":"Optionally filter by in-app notification enabled state. Optional."},"frequency":{"type":"string","description":"Filter by notification delivery frequency (e.g., 'immediate','digest_daily','digest_weekly'). Optional."},"categories":{"type":"string","description":"Filter by CSV or JSON categories this preference covers. Optional."},"page":{"type":"number","description":"Page number for paginated result."},"limit":{"type":"number","description":"Records per result page."},"sort":{"type":"string","description":"Sort rule or key (e.g., 'frequency','categories','-created_at')."},"q":{"type":"string","description":"Free-text search/filtering of category names or settings."}},"description":"Search/filter/pagination for notification preference lookup for the authenticated user.","required":[]},"IPageIDiscussionBoardNotificationPreference":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Pagination metadata context (current page, page size, etc)."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardNotificationPreference"},"description":"List of notification preferences matching the query/filter."}},"required":["pagination","data"],"description":"Paginated summary result of user notification preference records."},"IDiscussionBoardNotificationPreference":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the notification preference object."},"user_id":{"type":"string","format":"uuid","description":"ID of the user these preferences belong to (owner)."},"email_enabled":{"type":"boolean","description":"Whether email notifications are enabled for these categories/events."},"push_enabled":{"type":"boolean","description":"Whether push notifications (e.g. app/mobile) are enabled."},"in_app_enabled":{"type":"boolean","description":"Whether in-app notification delivery is enabled (notification center, popups, etc)."},"frequency":{"type":"string","description":"Delivery frequency; values like 'immediate','digest_daily','digest_weekly', etc."},"categories":{"type":"string","description":"CSV or JSON-encoded list of categories/types this preference config applies to."},"mute_until":{"oneOf":[{"type":"string","format":"date-time","description":"(Nullable) If present, suppresses all notifications until this timestamp (muted state for DND, vacation, etc)."},{"type":"null","format":"date-time","description":"(Nullable) If present, suppresses all notifications until this timestamp (muted state for DND, vacation, etc)."}],"description":"(Nullable) If present, suppresses all notifications until this timestamp (muted state for DND, vacation, etc)."},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp."},"updated_at":{"type":"string","format":"date-time","description":"Last modified timestamp for the record."}},"required":["id","user_id","email_enabled","push_enabled","in_app_enabled","frequency","categories","created_at","updated_at"],"description":"User-level notification channel, frequency, and category preferences for system events, messages, replies, etc."},"IDiscussionBoardNotificationPreference.IUpdate":{"type":"object","properties":{"email_enabled":{"type":"boolean","description":"Whether emails are enabled for this user notification category preference."},"push_enabled":{"type":"boolean","description":"Whether push notifications are enabled for this user preference."},"in_app_enabled":{"type":"boolean","description":"Whether in-app notifications are enabled for this preference."},"frequency":{"type":"string","description":"Frequency of notifications (e.g. 'immediate', 'digest_daily', 'digest_weekly')."},"categories":{"type":"string","description":"CSV or JSON string of categories this notification preference applies to."},"mute_until":{"oneOf":[{"type":"string","format":"date-time","description":"Mute notifications until this datetime (ISO8601) or null if not muted."},{"type":"null","format":"date-time","description":"Mute notifications until this datetime (ISO8601) or null if not muted."}],"description":"Mute notifications until this datetime (ISO8601) or null if not muted."}},"required":[],"description":"Update properties for notification channel preferences. All properties are optional. Used to change notification delivery channel settings, event categories, frequency, or mute interval."},"IDiscussionBoardNotificationSubscription.IRequest":{"type":"object","properties":{"page":{"type":"integer","description":"Pagination: page number (1-based). Optional."},"limit":{"type":"integer","description":"Pagination: number of items per page (default 20). Optional."},"subscription_target_type":{"type":"string","description":"The type of entity being subscribed to (e.g., post, thread, category, tag)."},"sort":{"type":"string","description":"Sort predicate (optional)."},"keyword":{"type":"string","description":"Free-text search within subscription metadata (optional)."}},"required":[],"description":"Request filter and pagination model for searching notification subscriptions belonging to the current user."},"IPageIDiscussionBoardNotificationSubscription.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Paging metadata for the result set."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardNotificationSubscription.ISummary"},"description":"List of notification subscription summary records."}},"required":["pagination","data"],"description":"Paginated result containing notification subscription summaries and pagination metadata."},"IDiscussionBoardNotificationSubscription.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique id of the notification subscription record."},"user_id":{"type":"string","format":"uuid","description":"UUID of the user who owns this subscription."},"subscription_target_type":{"type":"string","description":"The type of entity being subscribed to (post, thread, tag, category, etc.)"},"subscription_target_id":{"type":"string","format":"uuid","description":"UUID of the target entity for the subscription."},"created_at":{"type":"string","format":"date-time","description":"Datetime when the subscription was created (ISO8601)."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Datetime the subscription was deleted (unsubscribed), or null if active."},{"type":"null","format":"date-time","description":"Datetime the subscription was deleted (unsubscribed), or null if active."}],"description":"Datetime the subscription was deleted (unsubscribed), or null if active."}},"required":["id","user_id","subscription_target_type","subscription_target_id","created_at"],"description":"Summary view of a notification subscription for listing purposes."},"IDiscussionBoardNotificationSubscription":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique notification subscription record ID."},"user_id":{"type":"string","format":"uuid","description":"UUID of the subscribing user."},"subscription_target_type":{"type":"string","description":"Type of target entity being followed (e.g., post, thread, category, tag, user)"},"subscription_target_id":{"type":"string","format":"uuid","description":"UUID of the specific target entity."},"created_at":{"type":"string","format":"date-time","description":"Datetime this subscription was created."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"When this subscription was removed (unsubscribed, audit)."},{"type":"null","format":"date-time","description":"When this subscription was removed (unsubscribed, audit)."}],"description":"When this subscription was removed (unsubscribed, audit)."}},"required":["id","user_id","subscription_target_type","subscription_target_id","created_at"],"description":"Full notification subscription record, representing a user's intent to subscribe to events on a platform entity."},"IDiscussionBoardNotificationSubscription.IUpdate":{"type":"object","properties":{"subscription_target_type":{"type":"string","description":"Type of entity being updated/followed (e.g., post, thread, category)"},"subscription_target_id":{"type":"string","format":"uuid","description":"Identifier of the target entity being updated (uuid)"},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"When the subscription was changed to unsubscribed (nullable, ISO8601 UTC)"},{"type":"null","format":"date-time","description":"When the subscription was changed to unsubscribed (nullable, ISO8601 UTC)"}],"description":"When the subscription was changed to unsubscribed (nullable, ISO8601 UTC)"}},"required":[],"description":"Fields allowed for updating a user's notification subscription. Only properties provided are changed."},"IDiscussionBoardJwtToken.IRequest":{"type":"object","properties":{"page":{"type":"integer","description":"Pagination: page number (1-based, optional)."},"limit":{"type":"integer","description":"Pagination: number of results per page (optional)."},"status":{"type":"string","description":"Session token status filter: 'active', 'expired', 'revoked'. Optional."},"issued_at_from":{"type":"string","format":"date-time","description":"Datetime from which to include tokens issued (inclusive), ISO8601."},"issued_at_to":{"type":"string","format":"date-time","description":"Datetime up to which to include tokens issued (inclusive), ISO8601."},"expired_at_from":{"type":"string","format":"date-time","description":"Datetime from which tokens expired (inclusive), ISO8601."},"expired_at_to":{"type":"string","format":"date-time","description":"Datetime up to which tokens expired (inclusive), ISO8601."},"device_info":{"type":"string","description":"Optional device/session info filter."}},"required":[],"description":"Request filter model for searching JWT session tokens. Includes paging, status, and device/session filters."},"IPageIDiscussionBoardJwtToken.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Paging metadata object."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardJwtToken.ISummary"},"description":"List of JWT token session summaries for the page."}},"required":["pagination","data"],"description":"Paginated result set containing JWT token session summaries."},"IDiscussionBoardJwtToken.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique id for this JWT session token."},"discussion_board_user_id":{"type":"string","format":"uuid","description":"UUID of the user to whom this token belongs."},"token":{"type":"string","description":"JWT access token string, unique per session. Opaque and signed."},"issued_at":{"type":"string","format":"date-time","description":"Datetime when this token was issued."},"expires_at":{"type":"string","format":"date-time","description":"When this token expires (ISO8601)."},"revoked_at":{"oneOf":[{"type":"string","format":"date-time","description":"Datetime this token was revoked (logout), or null if still valid."},{"type":"null","format":"date-time","description":"Datetime this token was revoked (logout), or null if still valid."}],"description":"Datetime this token was revoked (logout), or null if still valid."},"device_info":{"oneOf":[{"type":"string","description":"Device/user-agent/OS/session info for this JWT token."},{"type":"null","description":"Device/user-agent/OS/session info for this JWT token."}],"description":"Device/user-agent/OS/session info for this JWT token."},"created_at":{"type":"string","format":"date-time","description":"Datetime this record was created."},"updated_at":{"type":"string","format":"date-time","description":"Datetime of last JWT token record update."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Datetime token was soft-deleted (hidden from user), null if active."},{"type":"null","format":"date-time","description":"Datetime token was soft-deleted (hidden from user), null if active."}],"description":"Datetime token was soft-deleted (hidden from user), null if active."}},"required":["id","discussion_board_user_id","token","issued_at","expires_at","created_at","updated_at"],"description":"Summary view of an individual JWT token session for session and device audit."},"IDiscussionBoardJwtToken":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"JWT token session unique ID."},"discussion_board_user_id":{"type":"string","format":"uuid","description":"User ID owning the session (UUID)."},"token":{"type":"string","description":"JWT access token string (unique, opaque, and signed)."},"issued_at":{"type":"string","format":"date-time","description":"Datetime when token was created (session start, ISO8601)."},"expires_at":{"type":"string","format":"date-time","description":"Datetime when token expires (ISO8601, UTC)."},"revoked_at":{"oneOf":[{"type":"string","format":"date-time","description":"Datetime token/session was revoked (logout), or null."},{"type":"null","format":"date-time","description":"Datetime token/session was revoked (logout), or null."}],"description":"Datetime token/session was revoked (logout), or null."},"device_info":{"oneOf":[{"type":"string","description":"Optional device/session info string (e.g., user-agent)."},{"type":"null","description":"Optional device/session info string (e.g., user-agent)."}],"description":"Optional device/session info string (e.g., user-agent)."},"created_at":{"type":"string","format":"date-time","description":"Datetime when this record was created."},"updated_at":{"type":"string","format":"date-time","description":"Datetime this record was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Datetime JWT token was soft-deleted (user deleted, audit), or null."},{"type":"null","format":"date-time","description":"Datetime JWT token was soft-deleted (user deleted, audit), or null."}],"description":"Datetime JWT token was soft-deleted (user deleted, audit), or null."}},"required":["id","discussion_board_user_id","token","issued_at","expires_at","created_at","updated_at"],"description":"Complete JWT token session record for security/session management and audit."},"IPageIDiscussionBoardJwtToken":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Paging metadata object for JWT token paging."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardJwtToken.ISummary"},"description":"List of user JWT session summaries for this page."}},"required":["pagination","data"],"description":"Paginated result containing JWT token session summaries."},"IDiscussionBoardJwtToken.IUpdate":{"type":"object","properties":{"revoked_at":{"oneOf":[{"type":"string","format":"date-time","description":"Sets/revokes the session token's (JWT) revocation timestamp.\n\nThis property, if set, will reflect the date/time the session token was revoked. If left null, the token remains active unless expired. ISO 8601 date-time."},{"type":"null","format":"date-time","description":"Sets/revokes the session token's (JWT) revocation timestamp.\n\nThis property, if set, will reflect the date/time the session token was revoked. If left null, the token remains active unless expired. ISO 8601 date-time."}],"description":"Sets/revokes the session token's (JWT) revocation timestamp.\n\nThis property, if set, will reflect the date/time the session token was revoked. If left null, the token remains active unless expired. ISO 8601 date-time."},"device_info":{"oneOf":[{"type":"string","description":"Optional device or session metadata for tracking session context. Set to identify the device type or user agent that owns this token."},{"type":"null","description":"Optional device or session metadata for tracking session context. Set to identify the device type or user agent that owns this token."}],"description":"Optional device or session metadata for tracking session context. Set to identify the device type or user agent that owns this token."}},"description":"Model for updating JWT token session metadata. Only mutable fields permitted: revocation timestamp and device info.","required":[]},"IDiscussionBoardRefreshToken.IRequest":{"type":"object","properties":{"discussion_board_user_id":{"type":"string","format":"uuid","description":"User ID owning the refresh token (optional search filter)."},"revoked_at":{"oneOf":[{"type":"string","format":"date-time","description":"Revocation timestamp (optional filter - only include revoked/active tokens)."},{"type":"null","format":"date-time","description":"Revocation timestamp (optional filter - only include revoked/active tokens)."}],"description":"Revocation timestamp (optional filter - only include revoked/active tokens)."},"device_info":{"oneOf":[{"type":"string","description":"Device/session metadata filter."},{"type":"null","description":"Device/session metadata filter."}],"description":"Device/session metadata filter."},"page":{"type":"integer","description":"Pagination - page number."},"limit":{"type":"integer","description":"Pagination - records per page."},"expires_at_gte":{"oneOf":[{"type":"string","format":"date-time","description":"Filter - only include tokens that expire on or after this datetime."},{"type":"null","format":"date-time","description":"Filter - only include tokens that expire on or after this datetime."}],"description":"Filter - only include tokens that expire on or after this datetime."},"expires_at_lte":{"oneOf":[{"type":"string","format":"date-time","description":"Filter - only include tokens that expire on or before this datetime."},{"type":"null","format":"date-time","description":"Filter - only include tokens that expire on or before this datetime."}],"description":"Filter - only include tokens that expire on or before this datetime."},"orderBy":{"type":"string","description":"Custom ordering parameter for result list."}},"description":"Request schema for filtering, searching, and paginating refresh token records.","required":[]},"IPageIDiscussionBoardRefreshToken":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Pagination metadata for the result set."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardRefreshToken"},"description":"Array of refresh token records for the current page."}},"required":["pagination","data"],"description":"Paginated result set for refresh token search queries. Contains page metadata and array of records."},"IPageIDiscussionBoardPasswordReset":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Pagination metadata for current password reset search."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardPasswordReset"},"description":"Array of password reset records in current page."}},"required":["pagination","data"],"description":"Paginated password reset record collection for query/search requests."},"IDiscussionBoardRefreshToken":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the refresh token record. (UUIDv4)"},"discussion_board_user_id":{"type":"string","format":"uuid","description":"User ID to whom the refresh token was issued. Foreign key."},"refresh_token":{"type":"string","description":"Opaque (non-JWT) refresh token string used for session renewal. Secure random value. Sensitivity: should not be returned unless necessary."},"issued_at":{"type":"string","format":"date-time","description":"Timestamp when the refresh token was issued (ISO 8601)."},"expires_at":{"type":"string","format":"date-time","description":"Timestamp when the refresh token expires."},"revoked_at":{"oneOf":[{"type":"string","format":"date-time","description":"Date/time when this refresh token was revoked and is no longer valid. Null if token is still valid."},{"type":"null","format":"date-time","description":"Date/time when this refresh token was revoked and is no longer valid. Null if token is still valid."}],"description":"Date/time when this refresh token was revoked and is no longer valid. Null if token is still valid."},"device_info":{"oneOf":[{"type":"string","description":"Device or session metadata for context and audit. Optional."},{"type":"null","description":"Device or session metadata for context and audit. Optional."}],"description":"Device or session metadata for context and audit. Optional."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the record was first created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the record was last updated/modified."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Soft deletion marker; timestamp when token was deleted from audit collection. Null if still active."},{"type":"null","format":"date-time","description":"Soft deletion marker; timestamp when token was deleted from audit collection. Null if still active."}],"description":"Soft deletion marker; timestamp when token was deleted from audit collection. Null if still active."}},"required":["id","discussion_board_user_id","refresh_token","issued_at","expires_at","created_at","updated_at"],"description":"Session refresh token record as defined in the discussion_board_refresh_tokens schema. Provides full metadata for session management, compliance, and auditing."},"IDiscussionBoardRefreshToken.IUpdate":{"type":"object","properties":{"revoked_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp to mark this token as revoked (single-session logout/invalidated). Null if not revoked."},{"type":"null","format":"date-time","description":"Timestamp to mark this token as revoked (single-session logout/invalidated). Null if not revoked."}],"description":"Timestamp to mark this token as revoked (single-session logout/invalidated). Null if not revoked."},"device_info":{"oneOf":[{"type":"string","description":"Device/session metadata update for the refresh token. Optional field."},{"type":"null","description":"Device/session metadata update for the refresh token. Optional field."}],"description":"Device/session metadata update for the refresh token. Optional field."}},"description":"Update model for refresh token session audit/status update (only mutable fields explicitly allowed: revoked_at, device_info).","required":[]},"IDiscussionBoardPasswordReset.IRequest":{"type":"object","properties":{"discussion_board_user_id":{"type":"string","format":"uuid","description":"User ID who owns the password reset request (optional search filter)."},"used_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp when reset was used (filter for pending/used)."},{"type":"null","format":"date-time","description":"Timestamp when reset was used (filter for pending/used)."}],"description":"Timestamp when reset was used (filter for pending/used)."},"expires_at_gte":{"oneOf":[{"type":"string","format":"date-time","description":"Only results with expires_at >= this datetime."},{"type":"null","format":"date-time","description":"Only results with expires_at >= this datetime."}],"description":"Only results with expires_at >= this datetime."},"expires_at_lte":{"oneOf":[{"type":"string","format":"date-time","description":"Only results with expires_at <= this datetime."},{"type":"null","format":"date-time","description":"Only results with expires_at <= this datetime."}],"description":"Only results with expires_at <= this datetime."},"page":{"type":"integer","description":"Result page number."},"limit":{"type":"integer","description":"Records per page."},"orderBy":{"type":"string","description":"Ordering column (optional)."}},"description":"Advanced query model for password reset list/search/filter.","required":[]},"IDiscussionBoardPasswordReset":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for password reset record (UUIDv4)."},"discussion_board_user_id":{"type":"string","format":"uuid","description":"User account owning this password reset request."},"reset_token":{"type":"string","description":"One-time, single-use password reset token string for verification flows. Sensitivity: do not expose except during reset/verify."},"expires_at":{"type":"string","format":"date-time","description":"Timestamp when the reset token expires."},"used_at":{"oneOf":[{"type":"string","format":"date-time","description":"Date/time this reset was used (populated when password reset completed). Null if reset unused/pending."},{"type":"null","format":"date-time","description":"Date/time this reset was used (populated when password reset completed). Null if reset unused/pending."}],"description":"Date/time this reset was used (populated when password reset completed). Null if reset unused/pending."},"created_at":{"type":"string","format":"date-time","description":"When this reset request was created."},"updated_at":{"type":"string","format":"date-time","description":"When this reset request record was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Soft-deletion flag (timestamp if logically deleted, else null)."},{"type":"null","format":"date-time","description":"Soft-deletion flag (timestamp if logically deleted, else null)."}],"description":"Soft-deletion flag (timestamp if logically deleted, else null)."}},"required":["id","discussion_board_user_id","reset_token","expires_at","created_at","updated_at"],"description":"Password reset event/request record for business/account recovery flows."},"IDiscussionBoardPasswordReset.IUpdate":{"type":"object","properties":{"used_at":{"oneOf":[{"type":"string","format":"date-time","description":"Date/time when the reset was used (if used). Set to null or ISO8601 string."},{"type":"null","format":"date-time","description":"Date/time when the reset was used (if used). Set to null or ISO8601 string."}],"description":"Date/time when the reset was used (if used). Set to null or ISO8601 string."},"expires_at":{"type":"string","format":"date-time","description":"Expiry timestamp for the reset token. ISO8601 datetime."}},"required":[],"description":"Request body for updating a password reset record. Typically used to mark as used or update the expiry.\n\nCorresponds to the discussion_board_password_resets table. Updates are used for compliance after reset used, or extending expiry for admin/support flows."},"IDiscussionBoardVerificationToken.IRequest":{"type":"object","properties":{"purpose":{"type":"string","description":"Filter by the purpose of the verification token (e.g., 'email_verification', 'password_reset', 'mfa')."},"discussion_board_user_id":{"type":"string","format":"uuid","description":"Optional filter by user id for tokens belonging to this user."},"expires_at_from":{"type":"string","format":"date-time","description":"Optional filter for tokens expiring after this timestamp."},"expires_at_to":{"type":"string","format":"date-time","description":"Optional filter for tokens expiring before this timestamp."},"used":{"type":"boolean","description":"Filter tokens based on whether they have been used (true) or are pending (false)."},"page":{"type":"integer","description":"Pagination: which page number to retrieve (1-based)."},"limit":{"type":"integer","description":"Pagination: maximum number of tokens per page."}},"required":[],"description":"Request payload for filtering, searching, and paginating verification tokens for audit, compliance, or support use."},"IPageIDiscussionBoardVerificationToken.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Pagination information (see global IPage.IPagination for structure)."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardVerificationToken.ISummary"},"description":"Summary records of verification tokens for the current page."}},"required":["pagination","data"],"description":"Paginated page of verification token summary objects for display in audit or admin UI."},"IDiscussionBoardVerificationToken.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the verification token. Direct reference to primary key in discussion_board_verification_tokens."},"discussion_board_user_id":{"type":"string","format":"uuid","description":"User ID (uuid) for whom the token was issued."},"purpose":{"type":"string","description":"Purpose of the token (e.g., 'email_verification', 'password_reset', 'mfa')."},"expires_at":{"type":"string","format":"date-time","description":"Datetime when the token will expire."},"used_at":{"oneOf":[{"type":"string","format":"date-time","description":"Datetime when token was used, or null if not used yet."},{"type":"null","format":"date-time","description":"Datetime when token was used, or null if not used yet."}],"description":"Datetime when token was used, or null if not used yet."},"created_at":{"type":"string","format":"date-time","description":"Token creation timestamp."}},"required":["id","discussion_board_user_id","purpose","expires_at","created_at"],"description":"Summary structure for verification tokens, containing key identifiers and lifecycle audit metadata. Used in admin/audit/search list views."},"IDiscussionBoardVerificationToken":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique primary key for the verification token record. From discussion_board_verification_tokens table."},"discussion_board_user_id":{"type":"string","format":"uuid","description":"User id (uuid) the verification token is tied to. Foreign key for user."},"verification_token":{"type":"string","description":"Opaque (hashed or securely random) verification token string used for email, password reset, or multi-factor auth flows."},"purpose":{"type":"string","description":"Purpose or intent of the token: e.g., 'email_verification', 'password_reset', 'mfa', etc."},"expires_at":{"type":"string","format":"date-time","description":"Datetime at which the token becomes invalid."},"used_at":{"oneOf":[{"type":"string","format":"date-time","description":"Datetime when token was used by client, or null if not yet consumed."},{"type":"null","format":"date-time","description":"Datetime when token was used by client, or null if not yet consumed."}],"description":"Datetime when token was used by client, or null if not yet consumed."},"created_at":{"type":"string","format":"date-time","description":"Datetime when token was created."},"updated_at":{"type":"string","format":"date-time","description":"Datetime when token was last updated (rotated, used, or expired)."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Soft-deleted timestamp (if present, token is logically deleted)."},{"type":"null","format":"date-time","description":"Soft-deleted timestamp (if present, token is logically deleted)."}],"description":"Soft-deleted timestamp (if present, token is logically deleted)."}},"required":["id","discussion_board_user_id","verification_token","purpose","expires_at","created_at","updated_at"],"description":"Full detail structure for a verification token as recorded in the database, including identifiers, status, timestamps, and relationships. No sensitive token key is returned in plaintext except to privileged actors."},"IDiscussionBoardVerificationToken.IUpdate":{"type":"object","properties":{"expires_at":{"type":"string","format":"date-time","description":"Update the expiry of the token to a new expiration ISO8601 datetime."},"used_at":{"oneOf":[{"type":"string","format":"date-time","description":"Set the token as used at this date/time (ISO8601 or null)."},{"type":"null","format":"date-time","description":"Set the token as used at this date/time (ISO8601 or null)."}],"description":"Set the token as used at this date/time (ISO8601 or null)."}},"required":[],"description":"Request body for updating a verification token's status or expiry. Sensitive fields such as token string and user linkage are immutable."},"IDiscussionBoardDataErasureRequest.IRequest":{"type":"object","properties":{"discussion_board_user_id":{"type":"string","format":"uuid","description":"Filter by the user who submitted the request (uuid)."},"status":{"type":"string","description":"Filter by the status of the erasure request ('pending', 'processing', 'completed', 'rejected')."},"request_type":{"type":"string","description":"Filter by the type of erasure request (e.g., 'full_account', 'post_only', 'comment_only', etc)."},"submitted_at_from":{"type":"string","format":"date-time","description":"Datetime (inclusive) to filter requests submitted on/after this time."},"submitted_at_to":{"type":"string","format":"date-time","description":"Datetime (inclusive) to filter requests submitted on/before this time."},"page":{"type":"integer","description":"Which page to start from for paginated results (1-based)."},"limit":{"type":"integer","description":"Maximum number of results per page."}},"required":[],"description":"Request body for advanced filtering/searching of data erasure requests for compliance and privacy workflow management."},"IPageIDiscussionBoardDataErasureRequest.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Pagination information per query parameters and result flags."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardDataErasureRequest.ISummary"},"description":"Summary records for data erasure requests matching search/filter arguments."}},"required":["pagination","data"],"description":"Paginated set of data erasure request summary records for privacy audit/admin UI."},"IDiscussionBoardDataErasureRequest.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique erasure request id. Primary key for the data erasure request record."},"discussion_board_user_id":{"type":"string","format":"uuid","description":"Requesting user id (UUID)."},"request_type":{"type":"string","description":"Type of erasure request, e.g., 'full_account', 'post_only', 'comment_only', custom regulatory reference."},"status":{"type":"string","description":"Status string for workflow: 'pending', 'processing', 'completed', 'rejected'."},"submitted_at":{"type":"string","format":"date-time","description":"Datetime of submission."},"processed_at":{"oneOf":[{"type":"string","format":"date-time","description":"Datetime when the request was processed/closed, or null if still pending."},{"type":"null","format":"date-time","description":"Datetime when the request was processed/closed, or null if still pending."}],"description":"Datetime when the request was processed/closed, or null if still pending."}},"required":["id","discussion_board_user_id","request_type","status","submitted_at"],"description":"Summary type for data erasure request records, providing high-level fields for display in list/search export."},"IDiscussionBoardDataErasureRequest":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique erasure request id, primary key in erasure request record."},"discussion_board_user_id":{"type":"string","format":"uuid","description":"Requestor user id (uuid) for the data erasure request."},"request_type":{"type":"string","description":"Type of erasure being requested: values such as 'full_account', 'post_only', etc. Used for compliance traceability."},"status":{"type":"string","description":"Current status of the erasure workflow (e.g., 'pending', 'processing', 'completed', 'rejected')."},"submitted_at":{"type":"string","format":"date-time","description":"Datetime when the request was submitted."},"processed_at":{"oneOf":[{"type":"string","format":"date-time","description":"When this request completed/closed/processed. Null if ongoing."},{"type":"null","format":"date-time","description":"When this request completed/closed/processed. Null if ongoing."}],"description":"When this request completed/closed/processed. Null if ongoing."},"justification":{"oneOf":[{"type":"string","description":"User or regulatory-provided justification for erasure request. May be empty/null."},{"type":"null","description":"User or regulatory-provided justification for erasure request. May be empty/null."}],"description":"User or regulatory-provided justification for erasure request. May be empty/null."},"regulator_reference":{"oneOf":[{"type":"string","description":"Optional external regulator/case reference. May be empty/null."},{"type":"null","description":"Optional external regulator/case reference. May be empty/null."}],"description":"Optional external regulator/case reference. May be empty/null."},"verifier":{"oneOf":[{"type":"string","description":"Compliance staff member who verified the request, if applicable."},{"type":"null","description":"Compliance staff member who verified the request, if applicable."}],"description":"Compliance staff member who verified the request, if applicable."},"verified_at":{"oneOf":[{"type":"string","format":"date-time","description":"When the request was verified for eligibility. May be null."},{"type":"null","format":"date-time","description":"When the request was verified for eligibility. May be null."}],"description":"When the request was verified for eligibility. May be null."},"response_payload":{"oneOf":[{"type":"string","description":"Structured business or compliance response (e.g., JSON, status explanation, etc). May be null."},{"type":"null","description":"Structured business or compliance response (e.g., JSON, status explanation, etc). May be null."}],"description":"Structured business or compliance response (e.g., JSON, status explanation, etc). May be null."},"created_at":{"type":"string","format":"date-time","description":"Entity creation timestamp."},"updated_at":{"type":"string","format":"date-time","description":"When record updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Soft delete timestamp. Null when active."},{"type":"null","format":"date-time","description":"Soft delete timestamp. Null when active."}],"description":"Soft delete timestamp. Null when active."}},"required":["id","discussion_board_user_id","request_type","status","submitted_at","created_at","updated_at"],"description":"Full details for a data erasure request record in the platform, reflecting user/compliance requests for data deletion per privacy regulations. Contains identifiers, reasoning, workflow status, and audit fields."},"IDiscussionBoardDataErasureRequest.ICreate":{"type":"object","properties":{"discussion_board_user_id":{"type":"string","format":"uuid","description":"ID of the user requesting erasure, referencing discussion_board_users.id. Records traceable data subject for compliance."},"request_type":{"type":"string","description":"Type of erasure requested (e.g., full account, post-only, etc.). Used for regulatory tracking."},"justification":{"oneOf":[{"type":"string","description":"Optional reason provided by user or required by regulator for erasure justification."},{"type":"null","description":"Optional reason provided by user or required by regulator for erasure justification."}],"description":"Optional reason provided by user or required by regulator for erasure justification."},"regulator_reference":{"oneOf":[{"type":"string","description":"Optional external agency reference or legal tracking number for data erasure requests."},{"type":"null","description":"Optional external agency reference or legal tracking number for data erasure requests."}],"description":"Optional external agency reference or legal tracking number for data erasure requests."}},"required":["discussion_board_user_id","request_type"],"description":"Payload to create a new data erasure request for regulatory compliance (e.g., GDPR/CCPA). Includes type, traceable user, and optional justification or regulator reference. Maps directly to discussion_board_data_erasure_requests."},"IDiscussionBoardDataErasureRequest.IUpdate":{"type":"object","properties":{"status":{"type":"string","description":"Status of erasure request (e.g., pending, processing, completed, rejected). Settable by compliance or via workflow."},"processed_at":{"oneOf":[{"type":"string","format":"date-time","description":"Datetime when the erasure request was processed, if applicable."},{"type":"null","format":"date-time","description":"Datetime when the erasure request was processed, if applicable."}],"description":"Datetime when the erasure request was processed, if applicable."},"verifier":{"oneOf":[{"type":"string","description":"Staff or system verifying the request. Used in compliance/audit logs."},{"type":"null","description":"Staff or system verifying the request. Used in compliance/audit logs."}],"description":"Staff or system verifying the request. Used in compliance/audit logs."},"verified_at":{"oneOf":[{"type":"string","format":"date-time","description":"Datetime when the request was verified for eligibility or legal criteria, if done."},{"type":"null","format":"date-time","description":"Datetime when the request was verified for eligibility or legal criteria, if done."}],"description":"Datetime when the request was verified for eligibility or legal criteria, if done."},"response_payload":{"oneOf":[{"type":"string","description":"Structured or free-text response sent to the requester, regulator, or for documentation."},{"type":"null","description":"Structured or free-text response sent to the requester, regulator, or for documentation."}],"description":"Structured or free-text response sent to the requester, regulator, or for documentation."},"regulator_reference":{"oneOf":[{"type":"string","description":"Reference to external agency for erasure compliance, if needed."},{"type":"null","description":"Reference to external agency for erasure compliance, if needed."}],"description":"Reference to external agency for erasure compliance, if needed."}},"required":[],"description":"Updatable fields for an existing data erasure request. Enables compliance staff or system to escalate, resolve, annotate, or close the request record."},"IDiscussionBoardPrivacyDashboard.IRequest":{"type":"object","properties":{"user_id":{"type":"string","format":"uuid","description":"Optional filter to restrict privacy dashboards by user."},"access_requested_at_from":{"type":"string","format":"date-time","description":"Lower bound for dashboard access request time."},"access_requested_at_to":{"type":"string","format":"date-time","description":"Upper bound for dashboard access request time."},"access_fulfilled":{"type":"boolean","description":"If true, filter to only fulfilled exports; if false, only pending/unfulfilled."},"page":{"type":"integer","minimum":1,"default":1,"description":"Requested results page number, for pagination."},"limit":{"type":"integer","minimum":1,"default":50,"description":"Max records per page."}},"required":[],"description":"Request parameters for paginated, filtered dashboard privacy export listing. Used by admins for compliance audits or user dashboard export management."},"IPageIDiscussionBoardPrivacyDashboard":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Pagination details describing query result location and size."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardPrivacyDashboard"},"description":"Array of privacy dashboard records for current query/window."}},"required":["pagination","data"],"description":"Paginated response wrapper for privacy dashboard record listings, including result count and navigation metadata."},"IDiscussionBoardPrivacyDashboard":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary identifier of the privacy dashboard record. References compliance audit event."},"discussion_board_user_id":{"type":"string","format":"uuid","description":"ID of the user for whom the privacy dashboard/export is being managed, referencing discussion_board_users.id."},"access_requested_at":{"type":"string","format":"date-time","description":"Timestamp when user or regulator requested privacy data export/status/dashboard."},"access_fulfilled_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp when export/request was completed (null if not done yet)."},{"type":"null","format":"date-time","description":"Timestamp when export/request was completed (null if not done yet)."}],"description":"Timestamp when export/request was completed (null if not done yet)."},"dashboard_payload":{"type":"string","description":"Structured JSON or string payload of user's privacy/data export summary, as per compliance requirement."},"export_file_uri":{"oneOf":[{"type":"string","description":"URI for download of privacy export file (if completed)."},{"type":"null","description":"URI for download of privacy export file (if completed)."}],"description":"URI for download of privacy export file (if completed)."},"created_at":{"type":"string","format":"date-time","description":"Datetime when record was generated."},"updated_at":{"type":"string","format":"date-time","description":"Datetime when record was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Soft-delete timestamp. Null for normal use."},{"type":"null","format":"date-time","description":"Soft-delete timestamp. Null for normal use."}],"description":"Soft-delete timestamp. Null for normal use."}},"required":["id","discussion_board_user_id","access_requested_at","dashboard_payload","created_at","updated_at"],"description":"Platform's compliance privacy dashboard record. Tracks user request/fulfillment for GDPR/CCPA data export, including summary dashboard payload and export file URI if generated."},"IDiscussionBoardPrivacyDashboard.ICreate":{"type":"object","properties":{"discussion_board_user_id":{"type":"string","format":"uuid","description":"ID of the user for whom the privacy dashboard/export is created."},"access_requested_at":{"type":"string","format":"date-time","description":"Datetime when data export/access was requested."},"dashboard_payload":{"type":"string","description":"Structured summary (JSON string) of user data or privacy content for export; required for completeness."},"export_file_uri":{"oneOf":[{"type":"string","description":"URI to generated file, if export is already complete."},{"type":"null","description":"URI to generated file, if export is already complete."}],"description":"URI to generated file, if export is already complete."}},"required":["discussion_board_user_id","access_requested_at","dashboard_payload"],"description":"Payload for creating a new privacy dashboard export/export record for compliance/user request. Used by admin or system automation for data subject access events."},"IDiscussionBoardPrivacyDashboard.IUpdate":{"type":"object","properties":{"access_fulfilled_at":{"oneOf":[{"type":"string","format":"date-time","description":"Datetime when export was fulfilled and file delivered. Null = in progress."},{"type":"null","format":"date-time","description":"Datetime when export was fulfilled and file delivered. Null = in progress."}],"description":"Datetime when export was fulfilled and file delivered. Null = in progress."},"dashboard_payload":{"type":"string","description":"Updated export or dashboard summary content for compliance; should be re-generated if data changes for user."},"export_file_uri":{"oneOf":[{"type":"string","description":"URI for completed download; used when exported file is generated or changed."},{"type":"null","description":"URI for completed download; used when exported file is generated or changed."}],"description":"URI for completed download; used when exported file is generated or changed."}},"required":[],"description":"Updatable fields for privacy dashboard record; typically only fulfillment, export data, or URIs change in lifecycle. For compliance corrections/audits."},"IDiscussionBoardComplianceEvent.IRequest":{"type":"object","properties":{"event_type":{"type":"string","description":"Optional filter restricting compliance event search by event_type (e.g. regulator_inquiry/data_breach, etc.)."},"event_status":{"type":"string","description":"Optional filter for specific compliance event status (open, closed, in_review, etc.)."},"detected_at_from":{"type":"string","format":"date-time","description":"Lower bound for compliance event detection (inclusive)."},"detected_at_to":{"type":"string","format":"date-time","description":"Upper bound for compliance event detection (inclusive)."},"page":{"type":"integer","minimum":1,"default":1,"description":"Results page to fetch."},"limit":{"type":"integer","minimum":1,"default":50,"description":"Page size (# records per page, max subject to system constraint)."}},"required":[],"description":"Filtering/sorting criteria for compliance event listing. Used for compliance/audit dashboards, may restrict to key events or subtypes."},"IDiscussionBoardComplianceEvent":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for this compliance event."},"initiated_by_user_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optional identifier for the user who initiated the event, if applicable."},{"type":"null","format":"uuid","description":"Optional identifier for the user who initiated the event, if applicable."}],"description":"Optional identifier for the user who initiated the event, if applicable."},"event_type":{"type":"string","description":"Nature of the compliance event (e.g. regulatory_inquiry, data_breach_report, DPIA_completed, erasure_executed, legal_hold)."},"event_status":{"type":"string","description":"Current status of the compliance event (open, closed, in_review, escalated, resolved)."},"event_details":{"oneOf":[{"type":"string","description":"Detailed event content, investigation summary, or protocol steps."},{"type":"null","description":"Detailed event content, investigation summary, or protocol steps."}],"description":"Detailed event content, investigation summary, or protocol steps."},"detected_at":{"type":"string","format":"date-time","description":"When the compliance event started or was detected/received."},"resolved_at":{"oneOf":[{"type":"string","format":"date-time","description":"When the compliance event was closed or resolved, if finalized."},{"type":"null","format":"date-time","description":"When the compliance event was closed or resolved, if finalized."}],"description":"When the compliance event was closed or resolved, if finalized."},"regulatory_ticket":{"oneOf":[{"type":"string","description":"Regulator's case/ticket number or external ID, if available, for traceability."},{"type":"null","description":"Regulator's case/ticket number or external ID, if available, for traceability."}],"description":"Regulator's case/ticket number or external ID, if available, for traceability."},"assigned_staff":{"oneOf":[{"type":"string","description":"Compliance staff member or system process handling the event."},{"type":"null","description":"Compliance staff member or system process handling the event."}],"description":"Compliance staff member or system process handling the event."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when this event record was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when this record was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Soft-deleted timestamp (null when active)."},{"type":"null","format":"date-time","description":"Soft-deleted timestamp (null when active)."}],"description":"Soft-deleted timestamp (null when active)."}},"required":["id","event_type","event_status","detected_at","created_at","updated_at"],"description":"A compliance event represents a system action, regulatory issue, or business process that is required by policy or law to be tracked for audit and compliance purposes. This includes data subject requests, policy updates, regulatory inquiries, and security incidents. The entity includes status tracking, administrative assignment, and full audit trail fields for compliance review and potential investigation."},"IPageIDiscussionBoardComplianceEvent":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Information about the paging of results. Contains details such as current page, records per page, total records, and page count."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardComplianceEvent"},"description":"Array of compliance event records for the current page."}},"required":["pagination","data"],"description":"Paginated collection of compliance event records, providing an array of results and supporting pagination metadata for efficient query of large audit/compliance record sets."},"IDiscussionBoardExportLog":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the export log record."},"requested_by_user_id":{"oneOf":[{"type":"string","format":"uuid","description":"User (or staff) who requested the export file; may be null for automated or external export."},{"type":"null","format":"uuid","description":"User (or staff) who requested the export file; may be null for automated or external export."}],"description":"User (or staff) who requested the export file; may be null for automated or external export."},"target_type":{"type":"string","description":"Export target: user, regulator, admin, legal, etc. Used for audit segmentation."},"file_uri":{"type":"string","description":"Download URI for the exported data/logs file."},"file_type":{"type":"string","description":"MIME type or format of the export (e.g., application/json, application/pdf, csv, xml)."},"exported_at":{"type":"string","format":"date-time","description":"When export was generated."},"status":{"type":"string","description":"Export status (pending, available, expired, failed)."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the export log was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when this export log record was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Soft-deleted timestamp for retention/audit; null for active/log-retained."},{"type":"null","format":"date-time","description":"Soft-deleted timestamp for retention/audit; null for active/log-retained."}],"description":"Soft-deleted timestamp for retention/audit; null for active/log-retained."}},"required":["id","target_type","file_uri","file_type","exported_at","status","created_at","updated_at"],"description":"An export log tracks every export/download of compliance, audit, or user privacy data generated by the system for regulatory evidence. Each log records metadata about the export, its requester, file location/type, status, and audit trace fields."},"IDiscussionBoardExportLog.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"number","description":"Page number for result paging; optional."},{"type":"null","description":"Page number for result paging; optional."}],"description":"Page number for result paging; optional."},"limit":{"oneOf":[{"type":"number","description":"Number of records per page; optional."},{"type":"null","description":"Number of records per page; optional."}],"description":"Number of records per page; optional."},"target_type":{"type":"string","description":"Filter by export target type."},"status":{"type":"string","description":"Filter by status."},"file_type":{"type":"string","description":"Filter by MIME/file type."},"requested_by_user_id":{"type":"string","description":"Filter by export requester."},"exported_at_from":{"type":"string","format":"date-time","description":"Filter for exported_at greater than or equal to this date."},"exported_at_to":{"type":"string","format":"date-time","description":"Filter for exported_at less than or equal to this date."}},"required":[],"description":"Request parameters for advanced search and pagination of export log records. Supports filtering, date ranges, requester, and file type to enable targeted query of export/audit history."},"IPageIDiscussionBoardExportLog.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Pagination information for the export log summary list."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardExportLog.ISummary"},"description":"List of export log summary objects for this page."}},"required":["pagination","data"],"description":"Paginated summary of export log records; contains lightweight summary objects for improved performance in lists."},"IDiscussionBoardExportLog.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Export log record unique identifier."},"target_type":{"type":"string","description":"Export target type."},"file_uri":{"type":"string","description":"Exported file's URI."},"file_type":{"type":"string","description":"Exported file MIME/type."},"exported_at":{"type":"string","format":"date-time","description":"Export timestamp."},"status":{"type":"string","description":"Export status (pending, available, expired, failed)."},"requested_by_user_id":{"oneOf":[{"type":"string","format":"uuid","description":"Requesting user/staff id, if any."},{"type":"null","format":"uuid","description":"Requesting user/staff id, if any."}],"description":"Requesting user/staff id, if any."}},"required":["id","target_type","file_uri","file_type","exported_at","status"],"description":"A lightweight export log summary for use in paginated lists, omitting detailed audit fields for performance and UX; includes all business-critical data."},"IDiscussionBoardExportLog.ICreate":{"type":"object","properties":{"target_type":{"type":"string","description":"Export target: user, regulator, admin, legal, etc."},"file_uri":{"type":"string","description":"Download URI for the exported file."},"file_type":{"type":"string","description":"Export file MIME or format."},"exported_at":{"type":"string","format":"date-time","description":"Export date/time."},"status":{"type":"string","description":"State/status of the export log (pending, available, expired, failed, etc.)."},"requested_by_user_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optional user/staff UUID for audit/request context."},{"type":"null","format":"uuid","description":"Optional user/staff UUID for audit/request context."}],"description":"Optional user/staff UUID for audit/request context."}},"required":["target_type","file_uri","file_type","exported_at","status"],"description":"Request structure to create a new export log entity; all audit and regulatory fields are included for compliance and business correctness."},"IDiscussionBoardExportLog.IUpdate":{"type":"object","properties":{"status":{"type":"string","description":"Updated export status."},"file_uri":{"type":"string","description":"Updated download file URI."},"exported_at":{"type":"string","format":"date-time","description":"Updated export timestamp."},"file_type":{"type":"string","description":"Updated export format/MIME type."}},"required":[],"description":"Fields that may be updated in an existing export log record; all fields are optional and only updatable by administrators for compliance correction or file status tracking."},"IPageIDiscussionBoardExportLog":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Paging metadata for export log list."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussionBoardExportLog"},"description":"Array of export log records on the current page."}},"required":["pagination","data"],"description":"Paginated export log collection; each page contains full detail export log objects and pagination metadata."}}}}