{"operations":[{"specification":"This API endpoint handles guest registration for the discussBoard platform. It creates a new temporary guest record in the 'discuss_board_guests' table and issues an initial JWT (if business logic supports). As per the schema, the guest entity tracks id, IP address, user agent, referer, and timestamps, but does not support credential-based login or interaction with discussion content. No authentication fields are present, so this operation solely records analytics and conversion funnel presence. There is no password/credential management for guests, only anonymous/temporary identity tracking.\n\nSecurity for this endpoint is extremely limited: guests perform no authenticated actions and cannot access privileged features. Registration only allows system tracking and temporary ID allocation, not user or member account creation (see member flow for those features). Only one guest record is created per conversion or first visit event.\n\nData validation is minimal, focusing on the required analytics fields (IP, user agent, referer), with sensitive handling for privacy. There is no soft delete or credential enablement for this entity; only anonymization or data minimization is allowed per privacy policy.\n\nRelated operations include member registration for full accounts. To escalate privileges, users must use the separate member join/login endpoints. If conversion to member occurs, this guest record persists for analytics only.\n\nOperation errors return on database failures or if required analytics fields are missing. No user-initiated authentication or token refresh is present here.","authorizationType":"join","description":"Handles initial guest registration for the discussBoard platform. Creates a new record in 'discuss_board_guests' for analytics/tracking and issues a guest JWT if supported. No credentials are handled here. Guests can only be created, not logged in or managed. For temporary identity allocation only. Security and privacy are strictly enforced per data minimization policy. Escalation to member role requires separate flow. No login or refresh operations for guests. Only suitable for anonymous/temporary use.","summary":"Guest registration (join) for discuss_board_guests table: creates guest record, issues temporary identity.","parameters":[],"requestBody":{"description":"Guest analytics and conversion funnel data (IP, user agent, referer). Used for tracking, not authentication.","typeName":"IDiscussBoardGuest.ICreate"},"responseBody":{"description":"Authorization tokens and guest identity information as permitted by policy.","typeName":"IDiscussBoardGuest.IAuthorized"},"authorizationRole":null,"name":"join","path":"/auth/guest/join","method":"post"},{"specification":"This API endpoint allows a guest—previously registered/created via the join endpoint—to refresh their temporary JWT access/refresh tokens. It operates solely on a valid refresh token and does not perform authentication with credentials (since discuss_board_guests has no login fields).\n\nThe target entity is 'discuss_board_guests', reflected in the database by the guest's id and initial analytics information. Since guests are unauthenticated and do not have accounts or passwords, this operation only renews temporary access based on business rules set for guest sessions.\n\nSecurity is ensured by requiring the presence and validity of a refresh token—tokens are short-lived and grant very limited system access. If the refresh token is missing, expired, or fails validation, the operation returns an error.\n\nThere is no login/authentication state; this simply extends or reissues tokens for continued anonymous/unauthenticated access. Role escalation to member requires separate join/login as a member.\n\nThis operation is related to the guest join endpoint, which must be used before this refresh (i.e., only successfully joined guests may refresh). There is no 'login' for guests. Tokens granted may have even shorter lifetime or minimal permissions versus member tokens.","authorizationType":"refresh","description":"Handles guest token refresh for the discussBoard platform, using a valid refresh token. As guests have no credentials, this endpoint renews temporary access for guests already in 'discuss_board_guests'. No password or login performed. Errors if the refresh token is invalid. Role upgrade requires separate flow. Useful for continued, limited anonymous access within privacy constraints.","summary":"Guest token refresh (refresh) for discuss_board_guests: renews anonymous access tokens if authorized.","parameters":[],"requestBody":{"description":"Refresh token data for temporary guest session validity check.","typeName":"IDiscussBoardGuest.IRefresh"},"responseBody":{"description":"Refreshed auth tokens/guest info for valid temporary guest session.","typeName":"IDiscussBoardGuest.IAuthorized"},"authorizationRole":null,"name":"refresh","path":"/auth/guest/refresh","method":"post"},{"specification":"Create a new member account for the discussBoard platform as an authenticated user. This operation should validate email uniqueness and password according to security rules, require email verification, and collect explicit consent as per business and regulatory requirements. Upon successful registration, issue initial JWT tokens for both access and refresh, storing session details in the discuss_board_jwt_sessions table. This operation is handled via the /auth/member/join endpoint.\n\nThis POST endpoint allows an unregistered guest to become a platform member. The input must match the fields required by discuss_board_user_accounts (email, password_hash), including initial status, and references discuss_board_members for nickname assignment and status. It collects consent records in discuss_board_consent_records (policy_type, version, consent_action) as mandatory. Email uniqueness is enforced, and a verification process must be launched as per discuss_board_user_accounts.email_verified=false. The system also creates a JWT session referencing discuss_board_jwt_sessions (storing jwt_id, refresh_token_hash, device info). Upon success, return a full IDiscussBoardMember.IAuthorized payload as per security best practices.\n\nSecurity: No login is required but rate-limiting, duplicate prevention, and verification flows must be followed. Failure responses include already-registered email, weak password, or failure to record consent. Succeeds only when all business rules are satisfied.\n\nRelated API:\n- POST /auth/member/login (for credential-based login)\n- POST /auth/member/refresh (for token renewal)\n- PATCH /member/profile (profile update, non-auth)\n- POST /auth/member/password/reset (password recovery)\n- PATCH /auth/member/verify-email (email verification after join)\n\nErrors: Must never auto-login unverified users; tokens are only valid after verified. Registration must not proceed for already-banned users (status check).\n","authorizationType":"join","description":"This API operation enables guest users to register as members of the discussBoard platform by creating an account with a unique email, a securely hashed password, and explicit agreement to platform policies (terms of service and privacy policy), as described in the discuss_board_user_accounts, discuss_board_members, and discuss_board_consent_records schema tables.\n\nUpon receiving the registration request, the system validates the uniqueness of the submitted email and checks that the password meets all business security rules (as per the password_hash field constraints). The account is created in a 'pending' or 'active' status depending on the email verification process, and a member profile is initialized via the discuss_board_members table, capturing assigned nickname and status.\n\nConsent records required by regulation (e.g. 'privacy_policy', 'terms_of_service') are logged to the discuss_board_consent_records table for future audit and compliance checks. If any required consents are missing, the operation will fail and provide appropriate errors, as this is a strict platform requirement.\n\nSuccessful registration triggers the issuance of JWT access and refresh tokens, which are stored along with device/user_agent and ip_address info in the discuss_board_jwt_sessions schema. These tokens enable the new member to authenticate with the platform, and the initial session is enforced as per audit requirements.\n\nOnly users who pass consent, uniqueness, policy acceptance, and security checks will be registered. Any attempt to register with already-used email addresses, missing consents, or weak passwords will result in a business error. This operation is the starting point for all member authentication workflows and is essential for discussBoard’s secure, policy-driven onboarding.","summary":"Register a new discussBoard member account (discuss_board_user_accounts, discuss_board_members, discuss_board_consent_records) and issue JWT tokens.","parameters":[],"requestBody":{"description":"Information required to register a new member, including unique email, secure password, nickname, and required policy consents.","typeName":"IDiscussBoardMember.IJoin"},"responseBody":{"description":"Authorized session and member data after successful registration (includes tokens, member info, and session details).","typeName":"IDiscussBoardMember.IAuthorized"},"authorizationRole":null,"name":"join","path":"/auth/member/join","method":"post"},{"specification":"Authenticate an existing member of the discussBoard platform using their registered email and password. Upon successful authentication, issue new JWT access and refresh tokens and store a session record in discuss_board_jwt_sessions. This operation only allows login for member accounts with status 'active', 'email_verified' true, and which are not suspended, locked, or banned. Validation uses the fields in discuss_board_user_accounts and is mapped to an existing discuss_board_members record.\n\nSecurity context: Only allowed for registered email/password combinations; requires account to have completed the email verification flow. Failed logins due to bad credentials, unverified email, or ineligible status respond with appropriate error codes. Query uses the /auth/member/login endpoint. Additional logging should record login attempts for anti-abuse and audit tracking.\n\nRelated API:\n- POST /auth/member/join (registration)\n- POST /auth/member/refresh (refresh tokens)\n\nErrors: Wrong email or password, unverified account, or account in suspended/banned/locked status. Audit logging for repeated failures. Returns only upon full authentication and eligibility check.\n","authorizationType":"login","description":"This API operation authenticates a registered discussBoard member using the email and password fields managed in the discuss_board_user_accounts table. Authentication checks are performed against the stored password_hash (hashed password) and email address, ensuring the account is in 'active' status (or other eligible states as defined by business rules) and has completed the required email verification (email_verified=true).\n\nUpon successful credential validation, the system issues new JWT access and refresh tokens and creates a new record in the discuss_board_jwt_sessions table to track the session, storing details such as user_agent, ip_address, and session creation times. This operation enables returning or ongoing members to continue their platform usage securely and triggers login-session logic required by the platform’s audit policies.\n\nFailed authentication attempts due to wrong credentials, locked/suspended/banned status, or missing email verification result in clear, business-appropriate error responses as defined in the discuss_board_user_accounts schema. All login attempts are logged for security, anti-abuse, and compliance purposes.\n\nThis endpoint is critical to account lifecycle and is directly tied to the backend's authentication, session management, and business permission boundaries. It must strictly enforce credential and status validation at every call.","summary":"Authenticate a discussBoard member (discuss_board_user_accounts, discuss_board_members); issue new JWT tokens after validating credentials and status.","parameters":[],"requestBody":{"description":"Credential information for member login (email, password).","typeName":"IDiscussBoardMember.ILogin"},"responseBody":{"description":"Authorized session and member data after successful authentication (includes tokens and member info).","typeName":"IDiscussBoardMember.IAuthorized"},"authorizationRole":null,"name":"login","path":"/auth/member/login","method":"post"},{"specification":"Refresh JWT access and refresh tokens for an authenticated discussBoard member using a valid refresh token. This endpoint checks the validity of the refresh token (in discuss_board_jwt_sessions) and only issues new tokens if the session's status is active and not revoked, expired, or deleted. Refresh tokens are rotated with each call. Upon success, return new tokens and update session details in discuss_board_jwt_sessions.\n\nInput: Uses /auth/member/refresh endpoint, expects the refresh token in the request body as per business security practices. Ensures compliance with session revocation, device/IP validation, and audit log requirements. Operation works only for valid and non-revoked sessions as defined by discuss_board_jwt_sessions schema.\n\nRelated API:\n- POST /auth/member/login (original session creation)\n- POST /auth/member/join (register and initial session)\n\nErrors: Invalid/expired/used refresh token, session evicted (revoked), or user no longer in eligible status results in clear authorization errors. Audit logs should track every refresh attempt for compliance.\n","authorizationType":"refresh","description":"This API operation allows an authenticated discussBoard member to refresh their session by presenting a valid refresh token, which is stored and validated against the discuss_board_jwt_sessions table (refresh_token_hash). The operation ensures session activity status ('active'), verifies that the refresh token has not been revoked, deleted, or expired, and that the associated user’s account is not suspended, banned, or otherwise disqualified per discuss_board_user_accounts status.\n\nUpon successful verification, new JWT access and refresh tokens are issued, and the discuss_board_jwt_sessions record is updated with refreshed session metadata (issued_at, expires_at, device info, rotation hash). Session refresh also triggers session activity logs and anti-abuse analytics per business requirements.\n\nAny error relating to token status, validity, revocation, or user ineligibility will be surfaced at this endpoint and tracked for compliance and fraud prevention purposes. The endpoint is foundational for maintaining secure, long-lived member sessions according to discussBoard platform policy.","summary":"Issue new JWT tokens for a member by validating/rotating a refresh token (discuss_board_jwt_sessions, discuss_board_user_accounts).","parameters":[],"requestBody":{"description":"Refresh token and user authentication context for session refresh request.","typeName":"IDiscussBoardMember.IRefresh"},"responseBody":{"description":"Authorized session and member data after successful token refresh (new tokens, session info).","typeName":"IDiscussBoardMember.IAuthorized"},"authorizationRole":null,"name":"refresh","path":"/auth/member/refresh","method":"post"},{"specification":"Implements moderator registration and initial issue of JWT credentials. Connects core moderator authentication flows to the 'discuss_board_moderators' table, with linkage to 'discuss_board_members' and 'discuss_board_user_accounts' for authentication context. Registration requires an existing member account; moderators are designated via administrative escalation, not self-service. All relevant fields (member_id, assignment timing, status) are covered. Creates new moderator entry, associates with the member, and returns tokens on success. Restricted to authorized admins; typical end-users cannot access. Initiating registration checks the member exists and is eligible for escalation. If business policies require email verification, this registration must ensure 'email_verified' is true on the referenced user account. Follows strict separation between creation of moderator credentials and privilege assignment for audit and compliance. Error responses are triggered on attempt to escalate locked/banned/pending members or on illegal duplicate assignment. This endpoint is part of the core authentication lifecycle for privileged roles.","authorizationType":"join","description":"This API endpoint registers a new moderator by assigning moderator rights to an existing member. It tightly references the 'discuss_board_moderators' table, which tracks moderator role assignments, their administrative status, and escalation history. The assignment is only valid for members whose status permits escalation (i.e., not already banned, suspended, or pending activation), in compliance with platform rules described in the business requirements documentation. If the referenced 'member_id' does not exist in 'discuss_board_members' or lacks a verified, active linked user account in 'discuss_board_user_accounts', the registration fails. Upon successful registration, JWT credentials conforming to platform rules are issued and linked to the new or updated session in 'discuss_board_jwt_sessions', enabling secure moderator access to protected operations. Business logic ensures that duplicate moderator assignments, unauthorized privilege escalations, or policy violations trigger detailed errors and audit logs via the platform's audit and privacy log tables. This endpoint is essential for managing the lifecycle of moderator accounts and ensuring compliance with admin-only authentication flows. Related endpoints include 'login', 'refresh', and moderation privilege transfers, which require valid JWTs granted via the current operation.","summary":"Register a moderator and issue JWT credentials (discuss_board_moderators, admin flow).","parameters":[],"requestBody":{"description":"Information required to register and grant moderator rights to an existing member (referencing 'discuss_board_moderators' and 'discuss_board_members').","typeName":"IDiscussBoardModerator.ICreate"},"responseBody":{"description":"JWT and moderator authorization context upon successful registration, matching privileged admin flows.","typeName":"IDiscussBoardModerator.IAuthorized"},"authorizationRole":"moderator","name":"join","path":"/auth/moderator/join","method":"post"},{"specification":"Implements moderator login using password-based authentication, drawing on 'discuss_board_user_accounts' for credential verification. This endpoint handles moderator authentication workflow, including validation of email/password, ensuring linked member and moderator records are present, and issuing signed JWT tokens upon successful login. Refers to authentication-relevant columns in 'discuss_board_user_accounts' (email, password_hash, email_verified, status), as well as privilege checks in 'discuss_board_moderators' (status, assignment, revocation). Login succeeds only if the user has a verified, active moderator privilege, with appropriate references to audit trail tables for logging all attempts and outcomes (both successful and failed). On successful login, a row is created in 'discuss_board_jwt_sessions' tracking the session, expiry, and token metadata. This endpoint is integral to moderator administration, forming a secure entry point into all protected moderator APIs. Credential failure, privilege mismatch, suspension status, or disabled login yield detailed, business rule-driven errors. Related to \"join\" and \"refresh\" endpoints in the moderator authentication suite.","authorizationType":"login","description":"This operation provides secure password-based login for moderators, robustly referencing the columns in 'discuss_board_user_accounts', with additional privilege validation via 'discuss_board_moderators'. The login flow verifies email, hashes and checks password against 'password_hash', ensures 'email_verified' is true, and cross-checks that the user is currently assigned the moderator role (with a valid 'status' and non-revoked assignment). On success, securely issues JWT access and refresh tokens, records the login session in 'discuss_board_jwt_sessions', and returns session-relevant details for fine-grained audit and business logic enforcement. Failed logins due to locked accounts, suspended, pending, or otherwise unauthorized status are rejected with clear, descriptive errors and corresponding audit entries in the compliance log. This endpoint is central in the moderator authentication flow, and is always paired with proper error handling, rate limiting, and compliance documentation as per platform policy. Other related operations include moderator registration ('join') and token refresh ('refresh').","summary":"Moderator login and JWT token issuance (discuss_board_moderators, discuss_board_user_accounts).","parameters":[],"requestBody":{"description":"Moderator login credentials (email, password), referencing 'discuss_board_user_accounts' and privilege checks via 'discuss_board_moderators'.","typeName":"IDiscussBoardModerator.ILogin"},"responseBody":{"description":"Moderator session tokens, authentication context, and session tracking details for secured admin access.","typeName":"IDiscussBoardModerator.IAuthorized"},"authorizationRole":"moderator","name":"login","path":"/auth/moderator/login","method":"post"},{"specification":"Implements secure token refresh for moderators, as authorized admins. Connects to the 'discuss_board_jwt_sessions' table for validation and issuance of new JWT access/refresh tokens. This operation checks that the refresh token is valid, corresponds to an active, non-revoked session, and that the user remains assigned to and eligible for moderator privileges as per the 'discuss_board_moderators' status and assignment columns. On validation, rotates tokens and updates session expiry as defined by platform authentication policy. Errors are returned on expired, invalid, or revoked tokens, or if the underlying moderator account is suspended, revoked, or removed. Resulting tokens are written to a new or updated row in 'discuss_board_jwt_sessions', tied to the moderator's user account. References only the actual schema (no soft delete term used, as 'revoked_at', 'deleted_at', and 'status' fields control lifecycle). Triggers full audit and privacy log updates. This endpoint must be used in conjunction with moderator login and registration flows, completing the lifecycle for all moderator-authenticated API operations.","authorizationType":"refresh","description":"Provides a JWT access token refresh for authorized moderators by referencing session and privilege details in both 'discuss_board_jwt_sessions' and 'discuss_board_moderators'. The flow requires a valid refresh token, checks session status in 'discuss_board_jwt_sessions', and verifies ongoing eligibility in 'discuss_board_moderators' (including 'status', 'revoked_at', and assignment fields). New tokens are issued and the session record is updated, provided all validations pass. Failures, such as expired or invalid tokens, or privilege revocation since last login, are returned with specific status codes and are always logged for compliance and incident handling. Ensures strict business rules for secure moderator/token rotation, as per documented platform authentication policies. Related APIs include 'login', 'join', and moderator-protected API endpoints relying on the refreshed token context.","summary":"Refresh JWT access/refresh tokens for an authenticated moderator (discuss_board_jwt_sessions, discuss_board_moderators).","parameters":[],"requestBody":{"description":"Moderator token refresh request context (contains refresh token and session info), referencing 'discuss_board_jwt_sessions' and 'discuss_board_moderators'.","typeName":"IDiscussBoardModerator.IRefresh"},"responseBody":{"description":"New JWT tokens and session metadata for ongoing moderator authentication, in line with privileged admin flows.","typeName":"IDiscussBoardModerator.IAuthorized"},"authorizationRole":"moderator","name":"refresh","path":"/auth/moderator/refresh","method":"post"},{"specification":"This operation enables the registration of a new administrator account for the discussBoard platform. Upon submitting the required information, a new administrator is created and receives initial JWT access and refresh tokens, following the platform’s business logic. The operation references the discuss_board_administrators and discuss_board_user_accounts tables in the schema. It requires a unique email, a secure (hashed) password, and may capture additional details required for account creation. On success, it issues tokens encapsulating administrator permissions. This endpoint aligns with strict business requirements for administrator registration, audit traceability, and privilege escalation, and includes all workflow validation (including consent logging, status management, and linkage to member record). Only registration flows permitted by policy are supported; role escalation is handled separately by other business operations. No profile, consent, or notification data is directly managed here, but account linkages are set up as necessary.","authorizationType":"join","description":"This endpoint is for registering new administrator accounts in the discussBoard platform. It leverages the schema’s discuss_board_user_accounts and discuss_board_administrators tables to ensure unique email verification, secure password hashing, and initial privilege assignments.\n\nThe registration process demands strong password policies, terms acceptance, and optional audit/compliance data (all strictly derived from existing schema fields). All input is validated against current business rules, enforcing status codes and email uniqueness integrity checks.\n\nUpon success, this operation creates and links a discuss_board_user_accounts record (tracking email/password/status/email_verified) and a discuss_board_administrators record referencing the associated member row. Tokens (access and refresh) are issued in accordance with system policy, containing administrator payload claims per requirements. Any related consent or audit logs are appended using system workflows, not directly by this handler.\n\nSecurity is enforced at all levels: email must be confirmed unique, password must meet strength standards, and tokens are generated server-side. The function issues IDiscussBoardAdministrator.IAuthorized response strictly for the new account, with all administrator privileges reflected in the JWT claims.\n\nRelated endpoints: administrator login and refresh operations (see /auth/administrator/login and /auth/administrator/refresh). Role escalation of an existing member to administrator is handled by a separate admin policy enforcement flow, not by this endpoint.","summary":"Register a new administrator account (discuss_board_administrators/discuss_board_user_accounts) and receive JWT tokens.","parameters":[],"requestBody":{"description":"Administrator account registration payload, including email, hashed password, and terms consent (if required).","typeName":"IDiscussBoardAdministrator.IJoin"},"responseBody":{"description":"Authorized administrator information and JWT tokens upon registration success.","typeName":"IDiscussBoardAdministrator.IAuthorized"},"authorizationRole":null,"name":"join","path":"/auth/administrator/join","method":"post"},{"specification":"This operation handles administrator login/authentication for the discussBoard platform. Provided valid administrator credentials (email and password), the system verifies the email exists and is assigned to an active administrator account using the discuss_board_user_accounts and discuss_board_administrators tables. If credentials are correct and the account is active, session records are updated and new JWT access and refresh tokens are issued. Authentication failures result in descriptive errors according to business rules (e.g., account suspended, incorrect credentials, unverified email). Token payloads always reflect administrator privileges as enforced by the permission matrix. All login and authentication flows adhere strictly to schema structure and role mappings.","authorizationType":"login","description":"Administrator login for the discussBoard platform uses email and password authentication, referencing the discuss_board_user_accounts for credential verification and discuss_board_administrators for status and role enforcement.\n\nInput is validated for format and credential correctness. Only accounts assigned administrator status (not merely member or moderator) may authenticate here. Upon successful login, JWT tokens are issued, including administrator-level claims and permission arrays. Login events are tracked via audit logs and session management tables according to business policy.\n\nSecurity logic encompasses account lockout, invalid credential throttling, and disabled-status check (all derived directly from schema fields). This operation never exposes password hashes or internal audit data.\n\nThe response provides IDiscussBoardAdministrator.IAuthorized payloads, with JWT and claims for session establishment. Related endpoints include registration (join) and refresh. Password resets or force login requests are handled by separate security flows.","summary":"Administrator login/authentication (discuss_board_user_accounts/discuss_board_administrators); JWT issuance on valid credentials.","parameters":[],"requestBody":{"description":"Administrator login credentials: email and password.","typeName":"IDiscussBoardAdministrator.ILogin"},"responseBody":{"description":"Authorized administrator account and JWT tokens for successful login.","typeName":"IDiscussBoardAdministrator.IAuthorized"},"authorizationRole":null,"name":"login","path":"/auth/administrator/login","method":"post"},{"specification":"This operation handles JWT token refresh for administrators in the discussBoard platform. When an active administrator submits a valid refresh token, the system validates the token using session data stored in discuss_board_jwt_sessions and user/administrator account tables. It checks token validity, expiry, revocation status, and resolves the administrator’s privileges as currently defined. If valid, new access and refresh tokens are issued, with updated session records as required. If the token or session is invalid, expired, or revoked, the operation issues standard errors defined in the platform’s business logic. This endpoint strictly references fields present in the discuss_board_jwt_sessions and discuss_board_user_accounts (for session linkage and validation) and enforces administrative status for token refreshes.","authorizationType":"refresh","description":"This endpoint allows administrators to refresh their JWT access and refresh tokens. The refresh workflow confirms session validity in the discuss_board_jwt_sessions table, and checks the referenced user account’s administrative status using discuss_board_administrators.\n\nToken expiry and revocation status are strictly enforced. If valid, a new set of tokens is issued, with the same administrator claims as the original login. Any invalid or expired token attempts result in detailed, schema-driven error messages per business requirements. Session refresh events update relevant audit and session tables as defined in the schema.\n\nThe response includes the IDiscussBoardAdministrator.IAuthorized response, mirroring the login and registration reply structure. Related flows: login and join endpoints for administrators; logout and session management are handled separately.","summary":"Refresh JWT tokens for administrator (discuss_board_jwt_sessions, user_accounts, administrators); validates and renews session.","parameters":[],"requestBody":{"description":"JWT refresh token for administrator session renewal.","typeName":"IDiscussBoardAdministrator.IRefresh"},"responseBody":{"description":"Updated JWT tokens and authorized administrator claims.","typeName":"IDiscussBoardAdministrator.IAuthorized"},"authorizationRole":null,"name":"refresh","path":"/auth/administrator/refresh","method":"post"},{"specification":"This operation fetches the detail view of a specific global system configuration record by its UUID identifier from the discuss_board_settings Prisma table. Primarily for administrator review and platform audits, it returns the complete settings record including all configuration JSON and audit timestamps.","description":"Retrieves full details for a specific discussBoard global system configuration, identified by its unique UUID as the primary key in the discuss_board_settings table.\n\nAdministrators may use this endpoint for audit, system diagnosis, or review of changes to platform-wide settings. As system settings are sensitive, this operation must enforce strict access controls and auditing.\n\nError scenarios include not-found for invalid ID or permission denied for insufficient privileges. This is closely related to configuration update endpoints and typically used in platform management interfaces.","summary":"Get detail of a discussBoard platform setting (discuss_board_settings table)","parameters":[{"name":"id","description":"UUID of the discussBoard settings record to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detail of a global system configuration object for the platform","typeName":"IDiscussBoardSettings"},"authorizationType":null,"authorizationRole":"administrator","name":"at","path":"/discussBoard/administrator/settings/{id}","method":"get"},{"specification":"This operation allows a privileged administrator to update (overwrite) a system configuration record by UUID in the discuss_board_settings Prisma table. It is used to apply new global settings, update policy toggles, or edit infrastructure-level parameters. Full object replacement, strict payload validation, and audit logging are enforced.","description":"Overwrites and updates a discussBoard platform system settings record. Requires passing the full edit payload—typically configuration JSON and updated timestamps—targeting the row identified by its UUID key. Only administrators may perform this operation and all updates should trigger audit logs for compliance.\n\nThe operation will validate update payloads for required fields and semantics. Rollback or archival of previous configuration is handled by business logic outside this endpoint. Error responses include not-found, invalid payload, or permission denied.","summary":"Update an existing discussBoard system settings record (discuss_board_settings table)","parameters":[{"name":"id","description":"UUID of the system configuration record to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated configuration object for the settings record","typeName":"IDiscussBoardSettings.IUpdate"},"responseBody":{"description":"The updated discussBoard system settings record","typeName":"IDiscussBoardSettings"},"authorizationType":null,"authorizationRole":"administrator","name":"update","path":"/discussBoard/administrator/settings/{id}","method":"put"},{"specification":"This operation retrieves a paginated and filterable list of forbidden keyword filtering rules from the discuss_board_forbidden_words Prisma table. It supports searching expressions, filtering by created_at, and status, and is used to administer and audit the list of restricted words/phrases enforced by the platform.","description":"Returns a paginated list of forbidden words/phrases/regex patterns currently enforced for post and comment filtering, as records from the discuss_board_forbidden_words table. Supports filtering, search, and sorting.\n\nPrimarily for administrators (or moderators) managing platform compliance and community standards. Typical use cases include reviewing current forbidden word policies, responding to regulatory audits, or performing bulk edits. Soft-deleted entries are not included unless specifically searched for by authorized personnel. This is usually paired with endpoints for adding, updating, or deleting forbidden keyword rules.\n\nStrict authorization required: Only administrators and sometimes moderators may view or manage the forbidden words list.","summary":"List/search forbidden word rules for content moderation (discuss_board_forbidden_words table)","parameters":[],"requestBody":{"description":"Filtering and pagination criteria for forbidden keyword rules","typeName":"IDiscussBoardForbiddenWords.IRequest"},"responseBody":{"description":"Paginated result set of forbidden word rules","typeName":"IPageIDiscussBoardForbiddenWords"},"authorizationType":null,"authorizationRole":"administrator","name":"index","path":"/discussBoard/administrator/forbiddenWords","method":"patch"},{"specification":"This operation fetches the detailed information of a single forbidden word rule by its UUID from the discuss_board_forbidden_words table. It includes the forbidden expression/pattern, policy context, and audit timestamps for compliance and administration.","description":"Retrieves the complete specification for a single forbidden word, phrase, or regex rule used for content filtering on discussBoard. The record is identified by its unique UUID as the forbiddenWordId parameter.\n\nThe endpoint returns all fields from discuss_board_forbidden_words, including expression, description/rationale, and timestamps (created_at, updated_at, deleted_at if soft-deleted).\n\nStandard error responses include not-found for invalid ID, permission denied for unauthorized roles, and possibly auditing soft-deleted rules for compliance. Used in content moderation configuration UIs and administrative audit workflows.","summary":"Get forbidden word rule detail (discuss_board_forbidden_words table)","parameters":[{"name":"forbiddenWordId","description":"UUID of the forbidden words record to retrieve","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full forbidden word rule record","typeName":"IDiscussBoardForbiddenWords"},"authorizationType":null,"authorizationRole":"administrator","name":"at","path":"/discussBoard/administrator/forbiddenWords/{forbiddenWordId}","method":"get"},{"specification":"This operation creates a new forbidden word, phrase, or regex pattern to be enforced by the discussBoard platform, inserting a new row in the discuss_board_forbidden_words Prisma table. This expands the platform's forbidden words policies and is typically performed by administrators to adapt to new moderation requirements.","description":"Adds a new entry to the forbidden words/phrases list for discussBoard, enforcing new policy rules for future content. Payload must define the expression/pattern, optional description/rationale, and is validated for uniqueness (expression must not duplicate existing records, case-insensitive).\n\nStrictly restricted to administrative roles due to significant impact on user content moderation and censorship. The creation is auditable, triggers policy update notifications to moderation teams, and can be rolled back or soft-deleted if needed. This is coordinated with the forbidden word index endpoint and supports platform-level compliance.","summary":"Create a new forbidden word moderation rule (discuss_board_forbidden_words table)","parameters":[],"requestBody":{"description":"Data describing the new forbidden word to add","typeName":"IDiscussBoardForbiddenWords.ICreate"},"responseBody":{"description":"The created forbidden word moderation rule","typeName":"IDiscussBoardForbiddenWords"},"authorizationType":null,"authorizationRole":"administrator","name":"create","path":"/discussBoard/administrator/forbiddenWords","method":"post"},{"specification":"This operation updates an existing forbidden word, phrase, or regex filtering rule for discussBoard, targeting a specific UUID row in the discuss_board_forbidden_words table. Administrators may modify the expression, rationale, or metadata for the rule as policies change.","description":"Updates a forbidden words record by its unique ID, allowing modification of the expression, rationale, or other properties for compliance or moderation policy changes. Supports audit logging and validation for unique expressions (case-insensitive).\n\nStrictly restricted to administrative roles. When an existing forbidden word is changed, system policy update logic may notify affected services or moderation users. Related to creation, deletion, and listing endpoints.","summary":"Update an existing forbidden word rule (discuss_board_forbidden_words table)","parameters":[{"name":"forbiddenWordId","description":"UUID of the forbidden word filtering rule to update","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Forbidden words update payload (expression, description, etc.)","typeName":"IDiscussBoardForbiddenWords.IUpdate"},"responseBody":{"description":"The updated forbidden word moderation rule","typeName":"IDiscussBoardForbiddenWords"},"authorizationType":null,"authorizationRole":"administrator","name":"update","path":"/discussBoard/administrator/forbiddenWords/{forbiddenWordId}","method":"put"},{"specification":"This operation performs a soft delete on a forbidden word, phrase, or regex entry in the discuss_board_forbidden_words table by setting its deleted_at field. This disables enforcement of the rule but retains it for audit and possible rollback. Only administrators may perform this operation; deletion is tracked and time-stamped for compliance and regulatory review.","description":"Removes (soft deletes) a forbidden word or phrase from the moderation filtering policy by marking deleted_at on the record. This prevents further enforcement against this expression but keeps the record for audit, transparency, or potential future restoration.\n\nStrict authorization is required: Only administrators can delete forbidden word rules. Audit logs must capture who deleted the rule, when, and the business rationale. Errors include not found (invalid ID), already deleted, or permission denied.\n\nTypically coordinated with list and create endpoints for comprehensive moderation management.","summary":"Soft delete a forbidden word rule (discuss_board_forbidden_words table)","parameters":[{"name":"forbiddenWordId","description":"UUID of the forbidden word rule to delete (soft delete marks deleted_at)","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"administrator","name":"erase","path":"/discussBoard/administrator/forbiddenWords/{forbiddenWordId}","method":"delete"},{"specification":"This operation searches and retrieves a paginated list of system configuration settings for the discussBoard platform, operating on the discuss_board_settings table in the Prisma schema. It supports advanced filtering, searching, and sorting to allow administrators efficient management and review of configuration snapshots, even though system settings are typically a singleton row. The operation is mostly used for audit, compliance, or in multi-tenant future models.","description":"Returns a paginated, filterable, and sortable collection of discussBoard system-wide settings from the discuss_board_settings Prisma table.\n\nThis endpoint enables privileged users (administrators) to search for and view historical or current platform configuration records. A single instance typically exists for global settings, but this endpoint allows for operational flexibility and audit scenarios where multiple records, rollbacks, or migrations may be tracked.\n\nSecurity-sensitive: Only administrators can access this information. Supports standard pagination and filtering by created_at and other fields, returning JSON blobs of configuration data used by the backend. This endpoint may be used in conjunction with configuration update or detail-retrieval endpoints.","summary":"Search and paginate discussBoard system settings (discuss_board_settings table)","parameters":[],"requestBody":{"description":"Filtering, search, and pagination options for system configuration records","typeName":"IDiscussBoardSettings.IRequest"},"responseBody":{"description":"Paginated result of discussBoard settings objects","typeName":"IPageIDiscussBoardSettings"},"authorizationType":null,"authorizationRole":"administrator","name":"index","path":"/discussBoard/administrator/settings","method":"patch"},{"specification":"This operation retrieves a paginated and filterable list of user consent records from the discuss_board_consent_records table. It enables administrators to search, filter, and manage user consent events related to privacy policies, terms of service, or marketing preferences, supporting compliance inquiries and audit requirements. The operation supports advanced query parameters, such as filtering by user account, policy type, consent action, and creation date. Only users with administrator privileges can access this endpoint to maintain privacy and regulatory standards.","description":"Retrieve a paginated and filterable list of user consent records from the system. Each record in the discuss_board_consent_records table represents a specific consent event for a user, such as granting, revoking, or updating their agreement to a given policy (privacy policy, terms of service, or marketing opt-in). Administrators may use this API for regulatory compliance, audit requests, and ensuring users' data rights are respected.\n\nThe operation provides filtering by user_account_id, policy_type, consent_action, and date range, helping administrators locate specific records efficiently. Pagination ensures performance and usability when reviewing a large number of records. Access to this endpoint is restricted to administrators due to the sensitivity of consent data.\n\nRelated endpoints include detailed retrieval of a single consent record and operations for handling privacy logs associated with data rights requests. Errors may be returned if filtering criteria are invalid or requested records do not exist.","summary":"Retrieve a paginated and filterable list of user consent records.","parameters":[],"requestBody":{"description":"Filtering and pagination options for searching user consent records.","typeName":"IDiscussBoardConsentRecords.IRequest"},"responseBody":{"description":"Paginated result containing matching consent records.","typeName":"IPageIDiscussBoardConsentRecords"},"authorizationRoles":["administrator"],"name":"index","path":"/discussBoard/administrator/consentRecords","method":"patch","authorizationRole":"administrator","authorizationType":null},{"specification":"This operation retrieves detailed information about a specific user consent record from the discuss_board_consent_records table. It is used by administrators to view the history and details of individual consent events, such as when a user granted or revoked consent for a policy. The endpoint requires a valid consent record ID and performs strict access control to protect privacy and legal compliance.","description":"Retrieve detailed information about a single consent record stored in the discuss_board_consent_records table. This includes which policy the consent is for, the type of event (granted, revoked, updated), the timestamp, and any optional business notes.\n\nAccess to this operation is restricted to administrators to maintain legal and regulatory privacy standards. The returned record may be used for compliance audits or investigation of specific user requests. If the specified consentRecordId does not exist, an appropriate error response will be provided.\n\nThis endpoint complements the bulk search operation for consent records and is related to other privacy and compliance APIs.","summary":"Fetch details of a specific user consent record by ID.","parameters":[{"name":"consentRecordId","description":"Unique identifier of the consent record to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information about the requested consent record.","typeName":"IDiscussBoardConsentRecords"},"authorizationRoles":["administrator"],"name":"at","path":"/discussBoard/administrator/consentRecords/{consentRecordId}","method":"get","authorizationRole":"administrator","authorizationType":null},{"specification":"This operation retrieves a paginated and filterable list of privacy action logs from the discuss_board_privacy_logs table. Administrators can use it to audit all privacy-relevant actions, including data exports, deletions, and policy updates, across the platform. The endpoint supports filtering by user, action type, result status, and date. This is essential for satisfying regulatory compliance requirements such as GDPR and for internal incident investigation.","description":"Retrieve a paginated, filterable list of privacy logs documenting all privacy-relevant actions on user data, such as exports, deletions, consent changes, or policy modifications. Each log entry in the discuss_board_privacy_logs table contains identifiers for the actor/subject, type of action performed, and the associated result status. This operation supports audit processes and regular compliance checks.\n\nFilters may include actor_user_account_id, data_subject_user_account_id, action_type, result_status, and timestamp ranges. Due to the sensitivity of privacy logs, only administrators may use this endpoint. Related operations include fetching individual log details and searching by user or event type.\n\nProper error messages are returned when filters are invalid or no logs match the given criteria.","summary":"Retrieve a paginated and filterable set of privacy action logs.","parameters":[],"requestBody":{"description":"Filter and pagination data for searching privacy logs.","typeName":"IDiscussBoardPrivacyLogs.IRequest"},"responseBody":{"description":"Paginated list of privacy logs matching the search criteria.","typeName":"IPageIDiscussBoardPrivacyLogs"},"authorizationRoles":["administrator"],"name":"index","path":"/discussBoard/administrator/privacyLogs","method":"patch","authorizationRole":"administrator","authorizationType":null},{"specification":"This operation provides detailed retrieval of a specific privacy log entry in the discuss_board_privacy_logs table. Administrators use this endpoint to view the full context of a single privacy-related event, including actor and data subject, performed action, result, and timestamp. The endpoint applies strict access controls for compliance and security.","description":"Fetch the complete details for a single privacy log entry covering a sensitive user data operation, identified by privacyLogId. The record contains the acting user's ID and the data subject's ID (if applicable), the type of operation (access, export, delete, policy change), the business reason or outcome, and the exact timestamp of the event.\n\nAccess is strictly limited to administrator users due to legal risk and privacy obligations. Errors are returned if the requested log entry does not exist or access is denied. This API is typically used for internal audit, compliance checks, and incident investigation workflows.\n\nThis operation complements the list/search of privacy logs and may be referenced in compliance reports or external audits.","summary":"Fetch details of a specific privacy log entry by ID.","parameters":[{"name":"privacyLogId","description":"Unique identifier of the privacy log entry to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full details for the requested privacy log entry.","typeName":"IDiscussBoardPrivacyLogs"},"authorizationRoles":["administrator"],"name":"at","path":"/discussBoard/administrator/privacyLogs/{privacyLogId}","method":"get","authorizationRole":"administrator","authorizationType":null},{"specification":"This operation retrieves a paginated and filterable list of discussion board members from the discuss_board_members table. It supports searching and filtering by member status, nickname, or creation date. The API is intended for administrator usage, supporting account management tasks, moderation workflows, and compliance audits.","description":"Fetch a paginated list of member accounts from the discuss_board_members table, allowing advanced search and filtering options. Administrators may filter by account status (active, suspended, banned, etc.), nickname, or date range. Pagination makes the endpoint performant when reviewing large membership bases.\n\nThe endpoint is designed to make it easy for administrators to locate specific users, audit system membership, or support moderation actions. Related APIs include member detail retrieval, creation, and updates. Only administrator users may access this data, in alignment with audit and privacy requirements.","summary":"List and search discussion board members with filtering and pagination.","parameters":[],"requestBody":{"description":"Search and pagination criteria for filtering member accounts.","typeName":"IDiscussBoardMembers.IRequest"},"responseBody":{"description":"Paginated, filterable list of members matching the search criteria.","typeName":"IPageIDiscussBoardMembers"},"authorizationRoles":["administrator"],"name":"index","path":"/discussBoard/administrator/members","method":"patch","authorizationRole":"administrator","authorizationType":null},{"specification":"This operation retrieves the full detail of a single discussion board member from the discuss_board_members table, primarily by administrators for account or moderation management. The endpoint requires the memberId input and enforces strict role-based access control.","description":"Fetch the detailed profile and account status for a specific member using their memberId. Information includes the member's public nickname, associated user account, current status, creation/update dates, and possible links to moderator or administrator roles.\n\nThis endpoint aids administrators in managing accounts, viewing user history, and evaluating members for escalation or moderation. If the specified member does not exist, a clear error is returned. Related APIs include member search/listing, creation, and update endpoints.\n\nAccess is restricted to users with administrator privileges due to account data sensitivity.","summary":"Retrieve full details of a specific member account by ID.","parameters":[{"name":"memberId","description":"Unique identifier of the member to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full details of the requested member account.","typeName":"IDiscussBoardMembers"},"authorizationRoles":["administrator"],"name":"at","path":"/discussBoard/administrator/members/{memberId}","method":"get","authorizationRole":"administrator","authorizationType":null},{"specification":"This operation allows administrator users to manually create a new discussion board member by providing all required account and membership information. It operates on the discuss_board_members table and its foreign key associations, such as user accounts. The operation requires validated input matching account creation requirements and enforces business rules for uniqueness and account setup.","description":"Create a new member record in the discuss_board_members table by providing necessary account and membership data, including a unique user_account_id, nickname, and initial status (such as 'active'). On successful creation, the details of the created member are returned. This API is used by administrators for onboarding, migration, or manual intervention.\n\nStrict validation is performed on uniqueness of nickname/user account linkages and business status. Only administrators may access this endpoint, reflecting its privileged nature. Related APIs support member listing, detail view, and profile updates.","summary":"Create a new member by administrator action.","parameters":[],"requestBody":{"description":"Member creation data, including user account and initial status.","typeName":"IDiscussBoardMembers.ICreate"},"responseBody":{"description":"The full member record as created in the system.","typeName":"IDiscussBoardMembers"},"authorizationRoles":["administrator"],"name":"create","path":"/discussBoard/administrator/members","method":"post","authorizationRole":"administrator","authorizationType":null},{"specification":"This operation allows administrator users to update attributes of an existing member in the discuss_board_members table. It requires the target member ID as well as the updated fields, enforcing all relevant business validation such as status transitions, unique nickname constraints, and modification of linked user accounts. This endpoint is privileged, supporting account management and moderation remedial actions.","description":"Update the specified member's account attributes, such as status or nickname, using their memberId as the target. This operation enforces all business rules, including validation of new nicknames, status updates (active, suspended, banned), and links to user accounts as appropriate. On completion, the entire updated member record is returned for confirmation.\n\nOnly administrators may execute this operation due to potential impact on account and system integrity. Related endpoints include member creation, retrieval, and search. Errors may occur if the update yields duplicates or violates rules enforced in the schema or business logic.","summary":"Update details of an existing member by administrator action.","parameters":[{"name":"memberId","description":"Unique identifier of the member to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updatable fields for the target member, such as status or nickname.","typeName":"IDiscussBoardMembers.IUpdate"},"responseBody":{"description":"The full updated member record post-modification.","typeName":"IDiscussBoardMembers"},"authorizationRoles":["administrator"],"name":"update","path":"/discussBoard/administrator/members/{memberId}","method":"put","authorizationRole":"administrator","authorizationType":null},{"specification":"This operation permanently removes a member account from the discussBoard platform. It targets the discuss_board_members table, leveraging the memberId as a path parameter. Upon execution, the member's status is updated and related content (posts, comments) may be handled further by business logic (e.g., soft-deletion or audit trails) according to platform rules and Prisma schema constraints. This is a hard deletion, as a soft-delete field (deleted_at) exists and will be set for auditing. Only administrators can remove members, and all deletion activities are recorded for compliance.","description":"This endpoint enables administrators to erase a specific member account by its unique member ID from the discuss_board_members table.\n\nThe operation enforces strict access control, allowing only administrators to perform member deletions, to prevent abuse or accidental account removals. It integrates with audit and compliance requirements set by platform policies: member removal triggers logs and may cascade to associated content for further workflow processing, such as soft-deletion of posts/comments or anonymization.\n\nWhen executed, the deleted_at field of the corresponding member row is set, which signals a soft deletion for compliance and retention purposes. This operation cannot be recovered except via special administrative tools.\n\nRelated APIs include member detail retrieval, profile history, and audit/history review, which may be useful for post-deletion inspection or dispute resolution.","summary":"Permanently removes (soft-deletes) a member account from the system (discuss_board_members table).","parameters":[{"name":"memberId","description":"Unique identifier of the member to be deleted.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["administrator"],"name":"erase","path":"/discussBoard/administrator/members/{memberId}","method":"delete","authorizationRole":"administrator","authorizationType":null},{"specification":"This operation retrieves the user profile record associated with the specified member. It queries the discuss_board_user_profiles table using the memberId as a path parameter, enabling clients to fetch extended display name, bio, avatar, and related profile information for use in UI presentation. Supports public profile access control logic as defined in business requirements, and is accessible to the public unless further restrictions apply.","description":"Fetches and exposes the profile information for a member, drawing data from the discuss_board_user_profiles table by referencing the supplied memberId. Includes fields such as displayName, bio, avatarUri, location, and website, as well as created_at and updated_at timestamps plus soft-deletion metadata. Public visibility is enforced at application logic, while private profiles or suspended/banned accounts are constrained by corresponding status or business rules.\n\nThis endpoint is accessible to all, including guests, for publicly available profiles. Privacy controls for the member, such as profile visibility preferences, are implemented via business logic. Related endpoints include member public index listing and account detail retrieval.","summary":"Retrieve public user profile for a given member by memberId (discuss_board_user_profiles table).","parameters":[{"name":"memberId","description":"Unique identifier of the target member whose profile is being retrieved.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed user profile data for the specified member.","typeName":"IDiscussBoardUserProfile"},"authorizationRoles":[],"name":"at","path":"/discussBoard/members/{memberId}/profile","method":"get","authorizationRole":null,"authorizationType":null},{"specification":"This operation updates the user profile record associated with a specific member using the provided profile data. It applies updates to the discuss_board_user_profiles table, matching by memberId and applying field values from the request body. Only the profile owner (member) or administrators are authorized to make changes. Input is validated per business rules (e.g., avatar URI, bio, display name, website constraints) before update, and all changes are recorded for audit logs.","description":"Allows a member or administrator to update the profile metadata for a user account. Using the supplied memberId and validated request body (IDiscussBoardUserProfile.IUpdate), the operation modifies fields such as displayName, bio, avatarUri, location, and website.\n\nBusiness logic enforces permission checks: the member can edit their own profile, while administrators can modify any member's profile as necessary. Each profile update triggers a change in both the updated_at field and platform audit logs, enabling inspection and rollback if needed.\n\nRelates to profile retrieval (GET), member detail (account) APIs, and notification systems if profile changes warrant alerting followers or system monitors.","summary":"Update a user's public profile with new metadata (discuss_board_user_profiles table).","parameters":[{"name":"memberId","description":"Unique identifier of the member whose profile is being updated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated profile data for the target member.","typeName":"IDiscussBoardUserProfile.IUpdate"},"responseBody":{"description":"The updated user profile record.","typeName":"IDiscussBoardUserProfile"},"authorizationRoles":["member","administrator"],"name":"update","path":"/discussBoard/member/members/{memberId}/profile","method":"put","authorizationRole":"member","authorizationType":null},{"specification":"This operation updates the user profile record associated with a specific member using the provided profile data. It applies updates to the discuss_board_user_profiles table, matching by memberId and applying field values from the request body. Only the profile owner (member) or administrators are authorized to make changes. Input is validated per business rules (e.g., avatar URI, bio, display name, website constraints) before update, and all changes are recorded for audit logs.","description":"Allows a member or administrator to update the profile metadata for a user account. Using the supplied memberId and validated request body (IDiscussBoardUserProfile.IUpdate), the operation modifies fields such as displayName, bio, avatarUri, location, and website.\n\nBusiness logic enforces permission checks: the member can edit their own profile, while administrators can modify any member's profile as necessary. Each profile update triggers a change in both the updated_at field and platform audit logs, enabling inspection and rollback if needed.\n\nRelates to profile retrieval (GET), member detail (account) APIs, and notification systems if profile changes warrant alerting followers or system monitors.","summary":"Update a user's public profile with new metadata (discuss_board_user_profiles table).","parameters":[{"name":"memberId","description":"Unique identifier of the member whose profile is being updated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated profile data for the target member.","typeName":"IDiscussBoardUserProfile.IUpdate"},"responseBody":{"description":"The updated user profile record.","typeName":"IDiscussBoardUserProfile"},"authorizationRoles":["member","administrator"],"name":"update","path":"/discussBoard/administrator/members/{memberId}/profile","method":"put","authorizationRole":"administrator","authorizationType":null},{"specification":"This operation retrieves the notification preference settings for a particular member by memberId. It queries the discuss_board_user_notification_preferences table and returns email, sms, push, and newsletter opt-in/out flags for the user's account. Allows members to review their current notification receipt options via self-service, and lets administrators audit user preferences when necessary.","description":"Fetches and returns all current notification channel preferences for the given member, including email, sms, push, and newsletter options. Uses the discuss_board_user_notification_preferences table with filtering via memberId path parameter.\n\nEnforces strict access: only the member (profile owner) or administrators may view/set preferences, with application logic checking that the requesting user matches or possesses administrator privileges. This data is privacy-sensitive but not generally exposed publically; it primarily supports user management and notification delivery workflows.\n\nModifying these preferences is performed by a related PUT endpoint. Preference settings affect all subsequent notification workflows across the system, including mailing and messaging backend integrations.","summary":"Retrieve notification channel settings for a given member (discuss_board_user_notification_preferences table).","parameters":[{"name":"memberId","description":"Unique identifier of the target member whose preferences are being retrieved.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Current notification receipt preferences for the specified member.","typeName":"IDiscussBoardUserNotificationPreference"},"authorizationRoles":["member","administrator"],"name":"at","path":"/discussBoard/member/members/{memberId}/notificationPreferences","method":"get","authorizationRole":"member","authorizationType":null},{"specification":"This operation retrieves the notification preference settings for a particular member by memberId. It queries the discuss_board_user_notification_preferences table and returns email, sms, push, and newsletter opt-in/out flags for the user's account. Allows members to review their current notification receipt options via self-service, and lets administrators audit user preferences when necessary.","description":"Fetches and returns all current notification channel preferences for the given member, including email, sms, push, and newsletter options. Uses the discuss_board_user_notification_preferences table with filtering via memberId path parameter.\n\nEnforces strict access: only the member (profile owner) or administrators may view/set preferences, with application logic checking that the requesting user matches or possesses administrator privileges. This data is privacy-sensitive but not generally exposed publically; it primarily supports user management and notification delivery workflows.\n\nModifying these preferences is performed by a related PUT endpoint. Preference settings affect all subsequent notification workflows across the system, including mailing and messaging backend integrations.","summary":"Retrieve notification channel settings for a given member (discuss_board_user_notification_preferences table).","parameters":[{"name":"memberId","description":"Unique identifier of the target member whose preferences are being retrieved.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Current notification receipt preferences for the specified member.","typeName":"IDiscussBoardUserNotificationPreference"},"authorizationRoles":["member","administrator"],"name":"at","path":"/discussBoard/administrator/members/{memberId}/notificationPreferences","method":"get","authorizationRole":"administrator","authorizationType":null},{"specification":"This operation updates the notification preferences of a member via supplied settings (email, sms, push, newsletter) using the discuss_board_user_notification_preferences table. Modifies only the specified memberId's record. Business logic ensures only the profile owner or administrators can make changes. Updates are applied immediately for subsequent notification delivery, and changes are tracked in audit records for compliance and rollback.","description":"Applies changes to a member's notification delivery preferences, taking new configuration from the request body and applying them to the specified member by memberId. Only the member themself or administrators may alter these settings, and all inputs are validated for proper boolean semantics.\n\nThis operation updates the discuss_board_user_notification_preferences table using validated payloads (IDiscussBoardUserNotificationPreference.IUpdate), changing whether email, sms, push notifications or newsletters are enabled for the user. The updated_at timestamp is refreshed, and an audit log is created for record-keeping.\n\nTied to notification workflow and system compliance; frequent adjunct to self-service account configuration UI.","summary":"Update notification settings for a member account (discuss_board_user_notification_preferences table).","parameters":[{"name":"memberId","description":"Unique identifier of the member whose notification preferences are being updated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated notification settings for the target member.","typeName":"IDiscussBoardUserNotificationPreference.IUpdate"},"responseBody":{"description":"The updated notification preference record.","typeName":"IDiscussBoardUserNotificationPreference"},"authorizationRoles":["member","administrator"],"name":"update","path":"/discussBoard/member/members/{memberId}/notificationPreferences","method":"put","authorizationRole":"member","authorizationType":null},{"specification":"This operation updates the notification preferences of a member via supplied settings (email, sms, push, newsletter) using the discuss_board_user_notification_preferences table. Modifies only the specified memberId's record. Business logic ensures only the profile owner or administrators can make changes. Updates are applied immediately for subsequent notification delivery, and changes are tracked in audit records for compliance and rollback.","description":"Applies changes to a member's notification delivery preferences, taking new configuration from the request body and applying them to the specified member by memberId. Only the member themself or administrators may alter these settings, and all inputs are validated for proper boolean semantics.\n\nThis operation updates the discuss_board_user_notification_preferences table using validated payloads (IDiscussBoardUserNotificationPreference.IUpdate), changing whether email, sms, push notifications or newsletters are enabled for the user. The updated_at timestamp is refreshed, and an audit log is created for record-keeping.\n\nTied to notification workflow and system compliance; frequent adjunct to self-service account configuration UI.","summary":"Update notification settings for a member account (discuss_board_user_notification_preferences table).","parameters":[{"name":"memberId","description":"Unique identifier of the member whose notification preferences are being updated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated notification settings for the target member.","typeName":"IDiscussBoardUserNotificationPreference.IUpdate"},"responseBody":{"description":"The updated notification preference record.","typeName":"IDiscussBoardUserNotificationPreference"},"authorizationRoles":["member","administrator"],"name":"update","path":"/discussBoard/administrator/members/{memberId}/notificationPreferences","method":"put","authorizationRole":"administrator","authorizationType":null},{"specification":"This operation retrieves a paginated, filtered list of all moderator accounts currently registered on the discussBoard platform. It queries the discuss_board_moderators table, supporting advanced criteria such as status (active, suspended, revoked), assigned_at date window, and member linkage. Designed to aid administrative review, reports, or public listings within RBAC rules. Output includes all relevant moderator information, using summary view for collections.","description":"Provides an indexed, searchable view of all moderator role accounts on the platform. Supports retrieval of records filtered by moderator status, timeframes, or linked member nickname for administrative and compliance use cases. Utilizes the discuss_board_moderators table, which links to member records by member_id.\n\nReturned results are paginated and summarized, omitting full audit histories but including primary identifiers, statuses, assignment info, and supporting efficient review. Administrators are authorized for unrestricted access, and other roles may require additional system logic for limited listing views.\n\nComplimentary endpoints include detailed moderator retrieval, status updates, or role assignment endpoints.","summary":"Retrieve a filtered, paginated list of registered moderators (discuss_board_moderators table).","parameters":[],"requestBody":{"description":"Search criteria, filter options, pagination for moderator listing.","typeName":"IDiscussBoardModerator.IRequest"},"responseBody":{"description":"Paginated summary listing of moderator accounts.","typeName":"IPageIDiscussBoardModerator.ISummary"},"authorizationRoles":["administrator"],"name":"index","path":"/discussBoard/administrator/moderators","method":"patch","authorizationRole":"administrator","authorizationType":null},{"specification":"This operation retrieves the full details of a specific moderator account using its moderatorId. Queries the discuss_board_moderators table and provides status, assignment, and associated member information suitable for administrative review, compliance tracing, or management UI presentation. Only administrators are allowed to request detailed moderator information.","description":"Fetches and returns a single moderator account's complete record, by referencing the provided moderatorId. Gathers data from the discuss_board_moderators table, including member_id, assigned_at, revoked_at, assignment status, the administrator who assigned role, and current status. Used for audits, status updates, contextual management, or history review.\n\nAccess to this endpoint is strictly limited to administrator users, as moderator account details are sensitive. Related endpoints include moderator update, assignment, or revocation actions. Results returned are suitable for detailed inspection, not general listing.","summary":"Fetch complete details for a single moderator account (discuss_board_moderators table).","parameters":[{"name":"moderatorId","description":"Unique identifier of the moderator to be retrieved.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed moderator account information for given moderatorId.","typeName":"IDiscussBoardModerator"},"authorizationRoles":["administrator"],"name":"at","path":"/discussBoard/administrator/moderators/{moderatorId}","method":"get","authorizationRole":"administrator","authorizationType":null},{"specification":"This operation updates a moderator account, modifying assignment status, revocation, or business status as necessary. Directly targets the discuss_board_moderators table by moderatorId. Only administrators can update moderator records, in accord with role escalation and compliance rules. All updates are logged for audit purposes. Fields such as status, revoked_at and assigned_at are editable, and transfer between active/suspended/revoked allowed as per business policy.","description":"Enables administrators to alter an existing moderator account by updating core fields including status, revocation timestamp, or other relevant moderator metadata. Operation validates all changes, enforcing field constraints and checking business policy compliance on role changes (e.g., only administrators can revoke role).\n\nDirect edits to the discuss_board_moderators table are recorded in system audit logs and compliance history, ensuring full traceability for all modifications. Related endpoints include moderator detail (GET), listing (PATCH), and role assignment APIs.","summary":"Update moderator account fields including status and revocation (discuss_board_moderators table).","parameters":[{"name":"moderatorId","description":"Unique identifier of the moderator to be updated.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated data/fields for the moderator account.","typeName":"IDiscussBoardModerator.IUpdate"},"responseBody":{"description":"The updated moderator account record.","typeName":"IDiscussBoardModerator"},"authorizationRoles":["administrator"],"name":"update","path":"/discussBoard/administrator/moderators/{moderatorId}","method":"put","authorizationRole":"administrator","authorizationType":null},{"specification":"This operation deletes a moderator account from the system. It works on the discuss_board_moderators table, which represents moderator role accounts associated with a member. When executed, this endpoint removes the moderator privileges of the specified moderator, referencing their unique moderatorId. Note: As the schema includes a deleted_at field, this operation performs a soft-delete, marking the record as removed without physical deletion.","description":"This operation is designed for administrator-level users to revoke moderator privileges from a member. The discuss_board_moderators table in the Prisma schema represents elevated user roles with special enforcement, review, and moderation privileges.\n\nRevoking moderator status does not delete the user; it updates the deleted_at field to indicate the user no longer holds moderator rights, retaining a full audit trail for future compliance. Only administrators may access this endpoint and initiate the removal process. Security checks in controller/provider ensure that moderatorId is valid, belongs to an active moderator, and that the request is performed within appropriate escalation bounds.\n\nAssociated audit and moderation logs linked to this moderator are preserved, supporting review of all enforcement actions taken prior to revocation. Should a moderator's privileges be removed in error, reinstatement would require administrator re-assignment rather than restoration from deletion.\n\nError handling covers invalid moderatorId, attempts to delete currently active administrators, or system/database issues during the operation. Hard deletion is never performed—record retention aligns with regulatory requirements for moderator actions and workflow history.","summary":"Soft-delete (revoke) a moderator role by moderatorId in discuss_board_moderators.","parameters":[{"name":"moderatorId","description":"Unique identifier of the moderator to be deleted (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"administrator","name":"erase","path":"/discussBoard/administrator/moderators/{moderatorId}","method":"delete"},{"specification":"This operation retrieves a paginated, filterable list of administrator accounts from the discuss_board_administrators table in the discussBoard service. It allows searching, pagination, and sorting on administrator properties including member linkage, status, and creation timestamps.","description":"Use this endpoint to search the discuss_board_administrators table for administrator accounts. It supports advanced filtering by status (active, resigned, suspended), assignment/escalation history, creation or status update dates, and can sort by timestamps or status values.\n\nPagination and search options help with administrative oversight, audit, and compliance reviews of platform superusers. Returned fields cover administrator/member linkage, escalation metadata, and current admin status. Security is strict: only other administrators may search the admin directory. Members, moderators, or guests are explicitly denied access to this function.\n\nThe request body allows specifying search filters, sort keys, and pagination limits. The response is a paginated array of administrator summary objects, optimized for audit dashboards or internal policy review.\n\nError responses include unauthorized access, malformed search queries, and database errors. Related operations for creating, modifying, or deleting administrator roles are available in separate endpoints, all restricted to administrator users.","summary":"Search and paginate administrator accounts in discuss_board_administrators.","parameters":[],"requestBody":{"description":"Filter, sort, and pagination criteria for administrators search.","typeName":"IDiscussBoardAdministrator.IRequest"},"responseBody":{"description":"Paginated array of administrator summary records matching search criteria.","typeName":"IPageIDiscussBoardAdministrator.ISummary"},"authorizationType":null,"authorizationRole":"administrator","name":"index","path":"/discussBoard/administrator/administrators","method":"patch"},{"specification":"This operation retrieves a detailed administrator account from discuss_board_administrators using the unique administratorId. It returns full information about the administrator, including links to their member record, escalation data, and admin role status.","description":"Use this endpoint to retrieve all profile and role metadata for a single platform administrator. The discuss_board_administrators table links administrator role assignments directly to member accounts, tracks assignment/revocation history, and contains business fields for auditing.\n\nReturned data includes admin assignment/escalation origin, current status, assignment and revocation dates, and associated member account metadata. The endpoint enforces strict access control—only administrator users may query individual administrator details.\n\nSecurity logic ensures that records found by administratorId exist, are not soft-deleted, and that the requesting user is authorized for high-privilege data access. Attempts to reference invalid or revoked administratorId values result in precise 404/403 error codes.\n\nFor managing or updating admin roles, separate endpoints exist. For audit/history, the payload contains timestamps for creation, updates, and revocation if relevant. This operation is core to platform governance and role verification flows.","summary":"Retrieve a single administrator account detail by administratorId from discuss_board_administrators.","parameters":[{"name":"administratorId","description":"Unique identifier for the administrator account (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information for the specified administrator account.","typeName":"IDiscussBoardAdministrator"},"authorizationType":null,"authorizationRole":"administrator","name":"at","path":"/discussBoard/administrator/administrators/{administratorId}","method":"get"},{"specification":"This operation updates an existing administrator account in the discuss_board_administrators table. The update is identified by administratorId and allows modifying fields like status, association metadata, or audit attributes as permitted by business logic.","description":"Administrators may use this endpoint to change the properties of an administrator account, identified by administratorId. Common update scenarios include adjusting admin status (e.g., suspended, resigned), correcting escalation data, or updating administrative metadata per audit requirements. The full set of updatable fields corresponds to the discuss_board_administrators schema.\n\nOnly an administrator may update another administrator's records, and the requesting user must have escalation permissions over the target record. Updates trigger audit logging to ensure compliance.\n\nRequest body validation ensures all modifications are business-legal (cannot demote self without secondary confirmation, cannot assign statuses not present in admin status enum, etc.). Only unrevoked records can be altered. The response payload returns the updated administrator account entity, reflecting all business-enforced changes.\n\nError cases include invalid administratorId, disallowed status transitions, or lack of sufficient permissions. Update operations on revoked/deleted admin accounts are rejected with explanatory error messages.","summary":"Update administrator account properties in discuss_board_administrators by administratorId.","parameters":[{"name":"administratorId","description":"Unique identifier for the target administrator account (UUID) to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update-able administrator account information for the target admin.","typeName":"IDiscussBoardAdministrator.IUpdate"},"responseBody":{"description":"The updated administrator account entity after changes.","typeName":"IDiscussBoardAdministrator"},"authorizationType":null,"authorizationRole":"administrator","name":"update","path":"/discussBoard/administrator/administrators/{administratorId}","method":"put"},{"specification":"This operation soft-deletes an administrator account from discuss_board_administrators by administratorId. It sets the deleted_at timestamp for the record, revoking all administrator privileges without erasing audit or escalation history.","description":"Administrators can use this endpoint to remove administrator privileges from a platform user, identified by administratorId. The operation marks the target record as soft-deleted (deleted_at filled) according to the schema, thus retaining full audit trail for compliance and investigations.\n\nSelf-deletion is permitted only with additional authentication in production logic. The endpoint enforces business logic preventing deletion of the final remaining admin to ensure platform coverage. The deletion operation is logged for audit and recovery.\n\nRequests with invalid or already revoked administratorId are rejected with detailed errors. Associated member records remain intact; only privileges at the administrator level are impacted. Complete action results in the removal of admin access and privilege escalation rights for the target account.\n\nNo entity is physically removed from the database; record retention follows organizational compliance and data recovery best practices.","summary":"Revoke (soft-delete) administrator account and privileges in discuss_board_administrators by administratorId.","parameters":[{"name":"administratorId","description":"Unique administrator account identifier for privilege revocation (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"administrator","name":"erase","path":"/discussBoard/administrator/administrators/{administratorId}","method":"delete"},{"specification":"This operation retrieves a paginated, searchable list of posts in the discuss_board_posts table. It provides advanced filtering, full-text search, sorting, and pagination support, following best practices for forum discussion browsing.","description":"Any platform user or guest can use this endpoint to browse, filter, and search for posts. The discuss_board_posts table stores all discussion board topics, linking author, title, body, status, and full moderation workflow fields.\n\nSupported filters include authorId, status (e.g., public, limited, locked), tagId, keyword search in title and body, creation/update date ranges, and sorting by recency or popularity. The operation returns a paginated result set of post summaries for efficient navigation.\n\nAccess control is open: all roles can browse public posts, while limited/locked/private content appears only for users with sufficient permissions (filtered by business logic). This endpoint supplies feed and search UI, audit dashboards, and developer integrations with consistent metadata.\n\nAn expressive request body supports multi-filter queries, pagination limits/page numbers, and sort order. Error responses are triggered for illegal filter values, overly broad queries, or backend/database issues. Other endpoints are available to retrieve single post details, create new posts, or edit/delete existing posts.","summary":"Search, filter, and paginate discuss_board_posts for browsing and discovery.","parameters":[],"requestBody":{"description":"Search/filter, sort, and pagination parameters for posts feed.","typeName":"IDiscussBoardPost.IRequest"},"responseBody":{"description":"Paginated result set of post summaries from discuss_board_posts.","typeName":"IPageIDiscussBoardPost.ISummary"},"authorizationType":null,"authorizationRole":null,"name":"index","path":"/discussBoard/posts","method":"patch"},{"specification":"This operation retrieves a single post from discuss_board_posts using the postId. It provides the full post entity, including author, title, body, status, and all workflow timestamps for frontend display or audit.","description":"All users can request a single post by its postId using this endpoint. The discuss_board_posts table links each post to an author, contains title and body, status for visibility, and supports full workflow/browsing logic.\n\nThe endpoint validates the input postId, ensures the referenced post is not soft-deleted unless caller privileges allow access, and returns the full entity. Additional control logic ensures limited/private/locked posts are only displayed as per business rules and user role permissions.\n\nOn success, the full post record (detailed DTO) is returned with all available metadata for display or additional queries (e.g., comments, reactions). 404 errors are returned if postId is invalid or inaccessible given user role.\n\nThis endpoint is intended for primary UI content views, audit, and onboarding flows.","summary":"Retrieve a single discuss_board_posts entry by postId.","parameters":[{"name":"postId","description":"Unique identifier for the desired post (UUID).","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full post entity from discuss_board_posts by postId.","typeName":"IDiscussBoardPost"},"authorizationType":null,"authorizationRole":null,"name":"at","path":"/discussBoard/posts/{postId}","method":"get"},{"specification":"This operation creates a new post in discuss_board_posts. It accepts a title, body text, optional tag assignments, and sets authorId implicitly from the current session. Only authenticated members may create new posts according to business and schema rules.","description":"Members can use this endpoint to contribute new discussion topics to the board via the discuss_board_posts table. Required fields are title (5-150 chars) and body (10-10,000 chars), with post visibility/status and tags optionally set by business configuration. The authorId is derived from the authenticating member and not directly supplied by the client.\n\nThe request body uses the IDiscussBoardPost.ICreate DTO, validating all constraints and filtering for forbidden words, duplicates, or business policy on submission. Upon success, the new post entity is returned, accessible via /posts/{postId}.\n\nIf creation fails due to bad input, inappropriate content, violation of posting policy, or system error, error responses detail the issue. The operation enforces content standards at the service layer and provides published post metadata for immediate UI update upon creation.","summary":"Create a new post in discuss_board_posts as the authenticated user.","parameters":[],"requestBody":{"description":"Creation data for a new post as defined in IDiscussBoardPost.ICreate.","typeName":"IDiscussBoardPost.ICreate"},"responseBody":{"description":"The full entity for the new post in discuss_board_posts.","typeName":"IDiscussBoardPost"},"authorizationType":null,"authorizationRole":"member","name":"create","path":"/discussBoard/member/posts","method":"post"},{"specification":"This operation updates an existing post in the discussBoard system. It is associated with the discuss_board_posts table and allows members to make changes to the title, body, and business status of their own post, subject to platform business logic. Moderators and administrators may update any post as permitted by their elevated roles. All required validations, including edit window expiration, title/body length constraints, and forbidden word filtering (business logic enforced at application layer), apply before the update succeeds. Only editable fields may be modified.","description":"This endpoint enables a member to update their post by providing new values for editable post fields such as title, body, and status. If the editing window (30 minutes after creation) has expired, members are forbidden from updating their own posts, while moderators or administrators retain full update access at any time.\n\nSecurity enforcement restricts post modification to the author during the allowed period, or to moderators/administrators after that window. The system checks for forbidden words through policy-maintained expressions and applies business validations on title/body length and duplicate detection.\n\nWhen successful, the operation returns the full updated post. Edit histories should be appended in the discuss_board_post_edit_histories table but are not managed directly by this endpoint. Error cases include expired edit window, content/policy violations, and insufficient authorization.","summary":"Update an existing discussBoard post by ID.","path":"/discussBoard/member/posts/{postId}","method":"put","parameters":[{"name":"postId","description":"The unique identifier of the post to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields for updating the post (title, body, business status, etc).","typeName":"IDiscussBoardPost.IUpdate"},"responseBody":{"description":"The updated discussBoard post, after modification.","typeName":"IDiscussBoardPost"},"authorizationType":null,"authorizationRole":"member","name":"update"},{"specification":"This operation updates an existing post in the discussBoard system. It is associated with the discuss_board_posts table and allows members to make changes to the title, body, and business status of their own post, subject to platform business logic. Moderators and administrators may update any post as permitted by their elevated roles. All required validations, including edit window expiration, title/body length constraints, and forbidden word filtering (business logic enforced at application layer), apply before the update succeeds. Only editable fields may be modified.","description":"This endpoint enables a member to update their post by providing new values for editable post fields such as title, body, and status. If the editing window (30 minutes after creation) has expired, members are forbidden from updating their own posts, while moderators or administrators retain full update access at any time.\n\nSecurity enforcement restricts post modification to the author during the allowed period, or to moderators/administrators after that window. The system checks for forbidden words through policy-maintained expressions and applies business validations on title/body length and duplicate detection.\n\nWhen successful, the operation returns the full updated post. Edit histories should be appended in the discuss_board_post_edit_histories table but are not managed directly by this endpoint. Error cases include expired edit window, content/policy violations, and insufficient authorization.","summary":"Update an existing discussBoard post by ID.","path":"/discussBoard/moderator/posts/{postId}","method":"put","parameters":[{"name":"postId","description":"The unique identifier of the post to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields for updating the post (title, body, business status, etc).","typeName":"IDiscussBoardPost.IUpdate"},"responseBody":{"description":"The updated discussBoard post, after modification.","typeName":"IDiscussBoardPost"},"authorizationType":null,"authorizationRole":"moderator","name":"update"},{"specification":"This operation updates an existing post in the discussBoard system. It is associated with the discuss_board_posts table and allows members to make changes to the title, body, and business status of their own post, subject to platform business logic. Moderators and administrators may update any post as permitted by their elevated roles. All required validations, including edit window expiration, title/body length constraints, and forbidden word filtering (business logic enforced at application layer), apply before the update succeeds. Only editable fields may be modified.","description":"This endpoint enables a member to update their post by providing new values for editable post fields such as title, body, and status. If the editing window (30 minutes after creation) has expired, members are forbidden from updating their own posts, while moderators or administrators retain full update access at any time.\n\nSecurity enforcement restricts post modification to the author during the allowed period, or to moderators/administrators after that window. The system checks for forbidden words through policy-maintained expressions and applies business validations on title/body length and duplicate detection.\n\nWhen successful, the operation returns the full updated post. Edit histories should be appended in the discuss_board_post_edit_histories table but are not managed directly by this endpoint. Error cases include expired edit window, content/policy violations, and insufficient authorization.","summary":"Update an existing discussBoard post by ID.","path":"/discussBoard/administrator/posts/{postId}","method":"put","parameters":[{"name":"postId","description":"The unique identifier of the post to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields for updating the post (title, body, business status, etc).","typeName":"IDiscussBoardPost.IUpdate"},"responseBody":{"description":"The updated discussBoard post, after modification.","typeName":"IDiscussBoardPost"},"authorizationType":null,"authorizationRole":"administrator","name":"update"},{"specification":"This operation permanently deletes (soft-deletes) a post in the discussBoard system. It is mapped to the discuss_board_posts table, specifically invoking the business logic that marks a post as deleted via its deleted_at field (soft delete), without physically removing the record from the database. Associated data such as comments are also soft-deleted as per business requirements, and post deletion logs are created for compliance and audit. Authorization ensures only the post owner (within the deletion window), moderators, or administrators can perform this action.","description":"This endpoint allows a user to delete a post by specifying its unique ID. For members, deletion is allowed only within 30 minutes of post creation; after this window expires, only moderators or administrators may delete posts. The deletion is a soft-delete: the post's deleted_at field is set to the current timestamp, removing the post from normal queries but preserving data for compliance.\n\nRelated comments and reply threads associated with the post are also soft-deleted as required by regulatory business logic. Each delete action is recorded in the discuss_board_post_deletion_logs table for auditability. Abuse, policy violations, or expired delete windows will result in proper error responses.\n\nAuthorization checks ensure users cannot delete content they do not own unless they have moderator or administrator privileges.","summary":"Delete (soft-delete) a discussBoard post by ID.","path":"/discussBoard/member/posts/{postId}","method":"delete","parameters":[{"name":"postId","description":"The unique identifier of the post to soft-delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"member","name":"erase"},{"specification":"This operation permanently deletes (soft-deletes) a post in the discussBoard system. It is mapped to the discuss_board_posts table, specifically invoking the business logic that marks a post as deleted via its deleted_at field (soft delete), without physically removing the record from the database. Associated data such as comments are also soft-deleted as per business requirements, and post deletion logs are created for compliance and audit. Authorization ensures only the post owner (within the deletion window), moderators, or administrators can perform this action.","description":"This endpoint allows a user to delete a post by specifying its unique ID. For members, deletion is allowed only within 30 minutes of post creation; after this window expires, only moderators or administrators may delete posts. The deletion is a soft-delete: the post's deleted_at field is set to the current timestamp, removing the post from normal queries but preserving data for compliance.\n\nRelated comments and reply threads associated with the post are also soft-deleted as required by regulatory business logic. Each delete action is recorded in the discuss_board_post_deletion_logs table for auditability. Abuse, policy violations, or expired delete windows will result in proper error responses.\n\nAuthorization checks ensure users cannot delete content they do not own unless they have moderator or administrator privileges.","summary":"Delete (soft-delete) a discussBoard post by ID.","path":"/discussBoard/moderator/posts/{postId}","method":"delete","parameters":[{"name":"postId","description":"The unique identifier of the post to soft-delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"moderator","name":"erase"},{"specification":"This operation permanently deletes (soft-deletes) a post in the discussBoard system. It is mapped to the discuss_board_posts table, specifically invoking the business logic that marks a post as deleted via its deleted_at field (soft delete), without physically removing the record from the database. Associated data such as comments are also soft-deleted as per business requirements, and post deletion logs are created for compliance and audit. Authorization ensures only the post owner (within the deletion window), moderators, or administrators can perform this action.","description":"This endpoint allows a user to delete a post by specifying its unique ID. For members, deletion is allowed only within 30 minutes of post creation; after this window expires, only moderators or administrators may delete posts. The deletion is a soft-delete: the post's deleted_at field is set to the current timestamp, removing the post from normal queries but preserving data for compliance.\n\nRelated comments and reply threads associated with the post are also soft-deleted as required by regulatory business logic. Each delete action is recorded in the discuss_board_post_deletion_logs table for auditability. Abuse, policy violations, or expired delete windows will result in proper error responses.\n\nAuthorization checks ensure users cannot delete content they do not own unless they have moderator or administrator privileges.","summary":"Delete (soft-delete) a discussBoard post by ID.","path":"/discussBoard/administrator/posts/{postId}","method":"delete","parameters":[{"name":"postId","description":"The unique identifier of the post to soft-delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"administrator","name":"erase"},{"specification":"This operation retrieves a paginated, filterable list of tags assigned to a specific post. It operates on the discuss_board_post_tags table in the discussBoard schema and enables advanced search, filtering, and pagination for assigned tags on a given post. Used to display available topic tags for a post and support tag management UIs.","description":"This endpoint allows a client to search the tags attached to a single post, enabling filtering by tag attributes (such as name, ID, date assigned) and paginating through large sets of tags. Available to all users, including guests, this operation provides search flexibility for presentation in post detail or tag management screens.\n\nThe operation is linked by the postId path parameter. Search, sort, and filter options should be encapsulated in the request body, such as filtering by tag name or assignment date. Business logic includes guest/member role parity for viewing assigned tags but editing requires authentication.\n\nPagination and result summary are included in the response body, encapsulated in the DTO type for tag summaries.","summary":"List tags assigned to a specific discussBoard post, with search and pagination.","path":"/discussBoard/posts/{postId}/tags","method":"patch","parameters":[{"name":"postId","description":"The unique identifier of the post whose tags are being listed.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search/filter and pagination parameters for post's assigned tags.","typeName":"IDiscussBoardPostTag.IRequest"},"responseBody":{"description":"Paginated, filtered list of tags attached to the given post.","typeName":"IPageIDiscussBoardPostTag.ISummary"},"authorizationType":null,"authorizationRole":null,"name":"index"},{"specification":"This operation retrieves details of a specific tag assigned to a post, referring to the discuss_board_post_tags table. It provides information about a given post's assigned tag, its metadata, and its relationship to the post. The endpoint supports application features such as tag detail modal or management functionality for moderators/admins.","description":"By specifying both the postId and tagId path parameters, this endpoint returns the details of a single tag assignment for a post. This includes the tag's unique identifier, the association (post-tag pair), assigned date, and metadata. Guests can freely query tag details for public posts and tags, while editing/removal requires proper authorization.\n\nBusiness logic ensures that if the tag is not actually associated with the given post, a not-found/error response is returned. The operation ties directly to the discuss_board_post_tags table, and only exposes non-sensitive tag information to public queries.","summary":"Get a specific tag assignment detail for a given discussBoard post.","path":"/discussBoard/posts/{postId}/tags/{tagId}","method":"get","parameters":[{"name":"postId","description":"The unique identifier of the post whose tag is being retrieved.","schema":{"type":"string","format":"uuid"}},{"name":"tagId","description":"The unique identifier of the tag on the given post.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information about the specified post-tag assignment.","typeName":"IDiscussBoardPostTag"},"authorizationType":null,"authorizationRole":null,"name":"at"},{"specification":"This operation assigns a new tag to the specified post by creating a new record in the discuss_board_post_tags table. It requires authentication as a member, moderator, or administrator, and enforces uniqueness (no duplicate tag assignment for the same post). Business logic ensures the tag exists, is not over tag assignment limits, and the member is authorized to edit the post (ownership/moderator/admin). System validates maximum tag count per post (typically 5 as per requirements).","description":"This endpoint enables authenticated users to assign an additional tag to a post by providing the tag's unique identifier and, optionally, metadata about the tag assignment. The postId path parameter specifies the post being updated.\n\nUpon successful assignment, the tag is associated with the post in the discuss_board_post_tags table, and the updated association is returned. Business rules prevent exceeding the maximum allowable tags per post and block duplicate assignments. Authorization checks ensure only the post owner, moderators, or administrators can add tags.","summary":"Add a new tag to a discussBoard post by postId and tagId.","path":"/discussBoard/member/posts/{postId}/tags","method":"post","parameters":[{"name":"postId","description":"The unique identifier of the post to assign a tag to.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Payload containing the tagId to be assigned and any metadata.","typeName":"IDiscussBoardPostTag.ICreate"},"responseBody":{"description":"Details of the new post-tag assignment after creation.","typeName":"IDiscussBoardPostTag"},"authorizationType":null,"authorizationRole":"member","name":"create"},{"specification":"This operation assigns a new tag to the specified post by creating a new record in the discuss_board_post_tags table. It requires authentication as a member, moderator, or administrator, and enforces uniqueness (no duplicate tag assignment for the same post). Business logic ensures the tag exists, is not over tag assignment limits, and the member is authorized to edit the post (ownership/moderator/admin). System validates maximum tag count per post (typically 5 as per requirements).","description":"This endpoint enables authenticated users to assign an additional tag to a post by providing the tag's unique identifier and, optionally, metadata about the tag assignment. The postId path parameter specifies the post being updated.\n\nUpon successful assignment, the tag is associated with the post in the discuss_board_post_tags table, and the updated association is returned. Business rules prevent exceeding the maximum allowable tags per post and block duplicate assignments. Authorization checks ensure only the post owner, moderators, or administrators can add tags.","summary":"Add a new tag to a discussBoard post by postId and tagId.","path":"/discussBoard/moderator/posts/{postId}/tags","method":"post","parameters":[{"name":"postId","description":"The unique identifier of the post to assign a tag to.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Payload containing the tagId to be assigned and any metadata.","typeName":"IDiscussBoardPostTag.ICreate"},"responseBody":{"description":"Details of the new post-tag assignment after creation.","typeName":"IDiscussBoardPostTag"},"authorizationType":null,"authorizationRole":"moderator","name":"create"},{"specification":"This operation assigns a new tag to the specified post by creating a new record in the discuss_board_post_tags table. It requires authentication as a member, moderator, or administrator, and enforces uniqueness (no duplicate tag assignment for the same post). Business logic ensures the tag exists, is not over tag assignment limits, and the member is authorized to edit the post (ownership/moderator/admin). System validates maximum tag count per post (typically 5 as per requirements).","description":"This endpoint enables authenticated users to assign an additional tag to a post by providing the tag's unique identifier and, optionally, metadata about the tag assignment. The postId path parameter specifies the post being updated.\n\nUpon successful assignment, the tag is associated with the post in the discuss_board_post_tags table, and the updated association is returned. Business rules prevent exceeding the maximum allowable tags per post and block duplicate assignments. Authorization checks ensure only the post owner, moderators, or administrators can add tags.","summary":"Add a new tag to a discussBoard post by postId and tagId.","path":"/discussBoard/administrator/posts/{postId}/tags","method":"post","parameters":[{"name":"postId","description":"The unique identifier of the post to assign a tag to.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Payload containing the tagId to be assigned and any metadata.","typeName":"IDiscussBoardPostTag.ICreate"},"responseBody":{"description":"Details of the new post-tag assignment after creation.","typeName":"IDiscussBoardPostTag"},"authorizationType":null,"authorizationRole":"administrator","name":"create"},{"specification":"This operation removes a specific tag from a post, deleting the corresponding row from the discuss_board_post_tags table. Authorization is required: post authors, moderators, or administrators can perform this operation, which enforces uniqueness and prevents deletion if the association does not exist. The tag is identified by tagId and postId, ensuring the correct pair is removed.","description":"By specifying the postId and tagId path parameters, authenticated users can dissociate a tag from a post. This operation performs a direct deletion of the post-tag association, updating the post's visible tags and supporting user-driven tag management. If the specified tag is not assigned to the post, a proper not-found or error response is returned.\n\nBusiness logic restricts this action to those with editing rights for the post: post owners (if within edit window), moderators, or administrators. The operation does not affect the tag entity itself, only its association with the given post.","summary":"Remove a tag association from a discussBoard post by postId and tagId.","path":"/discussBoard/member/posts/{postId}/tags/{tagId}","method":"delete","parameters":[{"name":"postId","description":"The unique identifier of the post from which the tag will be removed.","schema":{"type":"string","format":"uuid"}},{"name":"tagId","description":"The unique identifier of the tag to dissociate from the post.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"member","name":"erase"},{"specification":"This operation removes a specific tag from a post, deleting the corresponding row from the discuss_board_post_tags table. Authorization is required: post authors, moderators, or administrators can perform this operation, which enforces uniqueness and prevents deletion if the association does not exist. The tag is identified by tagId and postId, ensuring the correct pair is removed.","description":"By specifying the postId and tagId path parameters, authenticated users can dissociate a tag from a post. This operation performs a direct deletion of the post-tag association, updating the post's visible tags and supporting user-driven tag management. If the specified tag is not assigned to the post, a proper not-found or error response is returned.\n\nBusiness logic restricts this action to those with editing rights for the post: post owners (if within edit window), moderators, or administrators. The operation does not affect the tag entity itself, only its association with the given post.","summary":"Remove a tag association from a discussBoard post by postId and tagId.","path":"/discussBoard/moderator/posts/{postId}/tags/{tagId}","method":"delete","parameters":[{"name":"postId","description":"The unique identifier of the post from which the tag will be removed.","schema":{"type":"string","format":"uuid"}},{"name":"tagId","description":"The unique identifier of the tag to dissociate from the post.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"moderator","name":"erase"},{"specification":"This operation removes a specific tag from a post, deleting the corresponding row from the discuss_board_post_tags table. Authorization is required: post authors, moderators, or administrators can perform this operation, which enforces uniqueness and prevents deletion if the association does not exist. The tag is identified by tagId and postId, ensuring the correct pair is removed.","description":"By specifying the postId and tagId path parameters, authenticated users can dissociate a tag from a post. This operation performs a direct deletion of the post-tag association, updating the post's visible tags and supporting user-driven tag management. If the specified tag is not assigned to the post, a proper not-found or error response is returned.\n\nBusiness logic restricts this action to those with editing rights for the post: post owners (if within edit window), moderators, or administrators. The operation does not affect the tag entity itself, only its association with the given post.","summary":"Remove a tag association from a discussBoard post by postId and tagId.","path":"/discussBoard/administrator/posts/{postId}/tags/{tagId}","method":"delete","parameters":[{"name":"postId","description":"The unique identifier of the post from which the tag will be removed.","schema":{"type":"string","format":"uuid"}},{"name":"tagId","description":"The unique identifier of the tag to dissociate from the post.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"administrator","name":"erase"},{"specification":"This operation retrieves the edit history entries for a given post. It allows searching, filtering, and paginating through post edit records. The operation is directly linked to the discuss_board_post_edit_histories table. All users, including guests, can retrieve edit history for transparency, but only moderators and higher can access certain metadata or perform rollback/restoration operations (not exposed by this endpoint).","description":"Clients can fetch the full audit trail of edits made to a post, including previous versions of the title and body, edit timestamps, and optional edit reasons. This is useful for transparency, UI display of edit logs, and compliance.\n\nThe query supports pagination, advanced filtering (e.g., by editor, edit timestamp), and allows the frontend to present edit histories in a user-friendly way. Business logic ensures no confidential data is exposed and result format is suitable for both members and guests.","summary":"List edit history entries for a given discussBoard post (with search/pagination).","path":"/discussBoard/posts/{postId}/editHistories","method":"patch","parameters":[{"name":"postId","description":"The unique identifier of the post for which edit histories are listed.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Search, filtering, and pagination options for post edit history entries.","typeName":"IDiscussBoardPostEditHistory.IRequest"},"responseBody":{"description":"Paginated/filtered list of post edit history summaries.","typeName":"IPageIDiscussBoardPostEditHistory.ISummary"},"authorizationType":null,"authorizationRole":null,"name":"index"},{"specification":"This operation obtains details of a specific edit history entry for a post. It accesses the discuss_board_post_edit_histories table, returning the full version snapshot for a particular edit by ID. The result includes snapshot of the edited title and body, editor's info, edit timestamp, and reasons. Operation is available to all users, enabling transparency and trust—but edit rollback is handled by separate privileged endpoints.","description":"This endpoint allows retrieval of a single edit history record for a post, as identified by the postId and editHistoryId path parameters. The result includes prior title/body, editor information, edit timestamp, and optional edit reason/note. The edit history is critical for both user UI (change diffing) and compliance.\n\nIf the edit history entry is missing or not actually associated with the given post, the operation returns an error/not found. Data returned is safe for public viewing—access to rollback or undo is not provided here.","summary":"Get details for a single edit history entry by postId and editHistoryId.","path":"/discussBoard/posts/{postId}/editHistories/{editHistoryId}","method":"get","parameters":[{"name":"postId","description":"The unique identifier of the post whose edit history is being queried.","schema":{"type":"string","format":"uuid"}},{"name":"editHistoryId","description":"The unique identifier of the edit history entry.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed info for the specified post edit history entry.","typeName":"IDiscussBoardPostEditHistory"},"authorizationType":null,"authorizationRole":null,"name":"at"},{"specification":"Retrieves a paginated list of comments associated with a specific post. Operates on the discuss_board_comments table. Supports advanced searching/filtering by comment content, author, status, creation date, and nesting depth, with pagination and sorting. Uses the postId path parameter (UUID) to scope the search to one post. Includes details from related members and can include nested replies to a configurable depth. Designed to support UIs listing comments under a post with efficient querying for large threads.","path":"/discussBoard/posts/{postId}/comments","method":"patch","summary":"Search and paginate comments for a given post (discuss_board_comments).","description":"This operation retrieves a filtered, paginated collection of comments for a specific post identified by its UUID. It is built on the discuss_board_comments schema, enabling comprehensive filtering by author, content, creation date, depth, and comment status. The operation is optimized for scenarios where posts have extensive comments and nested replies, supporting deep-dive discussion threads typical of political or economic debate platforms.\n\nThe API respects soft-deleted comments, locking flags, and depth limits to prevent over-nesting. Security checks ensure users can only view comments visible according to their role and the business status of the associated post and comment. Moderators and administrators may filter on additional fields (e.g., including deleted, under_review) when performing audits or content reviews. Pagination parameters and search filters are specified in the request body object, with robust full-text and status-based search for moderation and UI needs.\n\nRelated endpoints include comment detail retrieval, comment creation, and comment/thread moderation in ways that prioritize data integrity and compliance with platform discussion policy.","parameters":[{"name":"postId","description":"Unique identifier for the post whose comments are being listed (UUID format).","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Filter/search parameters and pagination instructions for comment listing.","typeName":"IDiscussBoardComment.IRequest"},"responseBody":{"description":"Paginated list of comments matching the search criteria for the post, including metadata for UI rendering.","typeName":"IPageIDiscussBoardComment"},"authorizationType":null,"authorizationRole":null,"name":"index"},{"specification":"Retrieves detailed information about a specific comment on a given post. Operates on the discuss_board_comments table, using postId and commentId as path parameters to uniquely identify the comment. Includes all comment fields, author identity, status, and additional relations such as parent comment if applicable. Used for comment viewing, detail displays, and pre-edit/deletion confirmation workflows.","path":"/discussBoard/posts/{postId}/comments/{commentId}","method":"get","summary":"Retrieve detailed information for a specific comment (discuss_board_comments).","description":"This operation fetches the full details of a single comment under a specific post. It leverages the discuss_board_comments Prisma DB schema to provide content, author, business status, nesting depth, timestamps, and lock/moderation status. Uses both postId and commentId (UUIDs) for precise identification, matching only comments belonging to the specified post.\n\nAccess is controlled based on comment status and user role. Soft-deleted, locked, or under-review comments are handled per policy: guests may only see public, active comments, while members, moderators, and administrators may access additional statuses as their roles permit. The operation is critical for displaying comment contents, contextual details in discussion threads, or preparing UI for edit/delete requests.\n\nThis endpoint is best used in conjunction with comment list, edit, delete, or reply actions.","parameters":[{"name":"postId","description":"UUID of the post containing the comment.","schema":{"type":"string","format":"uuid"}},{"name":"commentId","description":"UUID of the comment to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full information about the requested comment, including author, content, status, and metadata.","typeName":"IDiscussBoardComment"},"authorizationType":null,"authorizationRole":null,"name":"at"},{"specification":"Creates a new comment under a specific post. Operates on the discuss_board_comments table. Accepts a comment creation object specifying content, (optional) parent comment for replies, nesting depth validation, and author/member ID determination from session or authorization context. Validates business rules: content length, forbidden words, edit window, and nesting depth. Returns the full created comment record for UI insertion.","path":"/discussBoard/member/posts/{postId}/comments","method":"post","summary":"Create a new comment under a given post (discuss_board_comments).","description":"This operation allows an authenticated member to create a new comment on a designated post. It acts on the discuss_board_comments table, utilizing business logic and validations specified in platform requirements: minimum/max content length, forbidden word filtering, comment status initialization, and maximum allowed nesting depth for replies. If parentId is provided, verifies parent exists, is part of the same post, and does not exceed the platform nesting limit.\n\nThe comment's author is inferred from the JWT session or user context; no direct author/member id inclusion in the client request. The resulting comment includes all persisted data: content, author, status, creation timestamps, and business rules for initial lock and edit state. Moderation workflows may flag or delay display based on policy if thresholds (e.g., forbidden language) are hit.\n\nThis endpoint is used by posting UIs, threaded comment components, and reply flows enforcing deep-tree limitation and content moderation policies.","parameters":[{"name":"postId","description":"UUID of the post under which the comment is being created.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Comment creation payload including content, (optional) parent ID, and business logic context, following creation rules.","typeName":"IDiscussBoardComment.ICreate"},"responseBody":{"description":"Full representation of the newly created comment, including content, author, and status for insertion into UI.","typeName":"IDiscussBoardComment"},"authorizationType":null,"authorizationRole":"member","name":"create"},{"specification":"Updates an existing comment for a given post. Operates on the discuss_board_comments table, using postId and commentId path parameters. Accepts a payload for comment update with new content and optional metadata, subject to business rules: only the author may edit their comment within the editing window, or moderators/admins outside it. Captures edit history via related table. Returns the updated comment detailed record.","path":"/discussBoard/member/posts/{postId}/comments/{commentId}","method":"put","summary":"Update content of an existing comment (discuss_board_comments).","description":"This operation updates the specified comment's content under a given post, as described in the discuss_board_comments table and related business rules. Enforces that only the comment author may edit their own comment within the platform-defined window (e.g., 15 minutes), and that editing is disallowed if the is_locked flag is true, except for elevated roles (moderator/admin). Edits are captured as snapshots in the comment edit history (discuss_board_comment_edit_histories).\n\nBusiness logic ensures content is checked for forbidden language and meets length requirements. Moderators and administrators may edit any comment regardless of the window or lock, always with a valid business rationale. All edits update the updated_at timestamp and maintain the audit/compliance chain for review or rollback.\n\nUI workflows often call this API in edit or reply-with-edit contexts. The response delivers the full updated comment for UI refresh and possible user notification.","parameters":[{"name":"postId","description":"UUID of the post containing the comment to update.","schema":{"type":"string","format":"uuid"}},{"name":"commentId","description":"UUID of the comment to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update payload specifying new content and optional edit context/business rationale.","typeName":"IDiscussBoardComment.IUpdate"},"responseBody":{"description":"Updated comment object reflecting new content, status, and updated timestamps.","typeName":"IDiscussBoardComment"},"authorizationType":null,"authorizationRole":"member","name":"update"},{"specification":"Deletes (soft-deletes) a specific comment under a post. Operates on the discuss_board_comments table using postId and commentId as keys. Performs soft-deletion by populating the deleted_at timestamp and updating the comment's status. Updates comment_deletion_logs for audit. Only the author can self-delete within the allowed time window; moderators/admins can delete at any time. Associated replies may also be soft-deleted per business policy.","path":"/discussBoard/member/posts/{postId}/comments/{commentId}","method":"delete","summary":"Soft-delete a comment (discuss_board_comments) with audit logging.","description":"This operation performs a soft-delete on the specific comment under a post, updating the deleted_at field and changing the comment business status per compliance and moderation rules. Uses both postId and commentId for precise targeting. Only the original author can self-delete their comment, and only within the system-defined window (e.g., 15 minutes). Moderators and administrators may delete any comment outside the user window, with full audit-trail capture.\n\nDeleting a comment updates the discuss_board_comment_deletion_logs record, referencing the deleting actor's user account, reason, and timestamp for audit and compliance reviews. A soft-deleted comment remains in the database for moderator/admin review and for regulatory requirements, but is no longer shown in standard user or guest queries. Associated replies may be recursively soft-deleted as defined by cascade settings or business process.\n\nThis endpoint is critical for enforcing application policy, regulatory compliance, and transparent audit of deletion events. Error responses clarify whether the process failed due to permissions, timing, or already deleted state.","parameters":[{"name":"postId","description":"UUID of the post connected to the comment to delete.","schema":{"type":"string","format":"uuid"}},{"name":"commentId","description":"UUID of the comment to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"member","name":"erase"},{"specification":"Lists the edit history of a specific comment, supporting pagination and search by edit date, editor, or reason. Operates on the discuss_board_comment_edit_histories table, filtered by commentId path parameter (UUID), under a given post. Useful for audit, compliance, and user history display. Moderators/admins may review all, users only their own; guests restricted.","path":"/discussBoard/member/posts/{postId}/comments/{commentId}/editHistories","method":"patch","summary":"Paginate and search comment edit histories (discuss_board_comment_edit_histories).","description":"This operation retrieves a paginated, filterable list of all edit events for a specific comment, as defined in the discuss_board_comment_edit_histories schema. Provides audit-trail data for tracking all edits made to comment content, status, or editor notes, allowing compliance review and rollback as per business rules. Query filters support search by editor, date, or reason for edit, with sort and pagination for large histories.\n\nAccess control ensures only authorized users (comment author, moderators, admins) view full histories; guests do not have access. Each history entry shows who edited, when, previous content, status, and editorial notes, supporting rich UI features like timeline views or detailed compliance reporting. Critical for transparent discussion moderation and evidentiary requirements in appeals.","parameters":[{"name":"postId","description":"UUID of the post containing the comment.","schema":{"type":"string","format":"uuid"}},{"name":"commentId","description":"UUID of the comment whose edit history is being queried.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Edit history search, filtering, and pagination specification.","typeName":"IDiscussBoardCommentEditHistory.IRequest"},"responseBody":{"description":"Paginated, filterable list of edit histories for the specific comment.","typeName":"IPageIDiscussBoardCommentEditHistory"},"authorizationType":null,"authorizationRole":"member","name":"index"},{"specification":"Retrieves detailed information about a specific edit history record for a comment. Operates on discuss_board_comment_edit_histories table, identified by postId, commentId, and editHistoryId (all UUID). Returns full audit-trail detail for the targeted edit event, including prior content, reason, editor, and exact UTC timestamp. Used by moderation and detail views.","path":"/discussBoard/member/posts/{postId}/comments/{commentId}/editHistories/{editHistoryId}","method":"get","summary":"Retrieve detailed information for a single comment edit history record.","description":"This operation fetches the complete details of a single edit event for a comment, based on the discuss_board_comment_edit_histories table record. All required IDs are path parameters: postId (parent post), commentId (parent comment), and editHistoryId (the specific edit event). Contains full snapshot of prior content, business status, editor, and any editor-provided note with UTC timestamp for audit and timeline display.\n\nAccess is restricted to the comment author, moderators, or administrators. Used for deep-dive compliance investigation, restoration UI, or trusted history reviews in appeals. Works in conjunction with the edit history list and rollback endpoints.","parameters":[{"name":"postId","description":"UUID of the post containing the comment (hierarchy for context).","schema":{"type":"string","format":"uuid"}},{"name":"commentId","description":"UUID of the comment for which edit history is requested.","schema":{"type":"string","format":"uuid"}},{"name":"editHistoryId","description":"UUID of the specific edit history record to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full snapshot of the edit event for audit, UI, and compliance.","typeName":"IDiscussBoardCommentEditHistory"},"authorizationType":null,"authorizationRole":"member","name":"at"},{"specification":"Lists all audit deletion log entries for a particular comment under a post, filtered and paginated. Operates on discuss_board_comment_deletion_logs, using postId and commentId as keys for targeted query. Supports complex searching (actor, deletion reason, timestamp) and is important for compliance, appeals, and forensic review.","path":"/discussBoard/moderator/posts/{postId}/comments/{commentId}/deletionLogs","method":"patch","summary":"Search paginated audit deletion logs for a comment (discuss_board_comment_deletion_logs).","description":"This endpoint retrieves the paginated, filterable audit deletion log history for a specific comment. Leverages the discuss_board_comment_deletion_logs schema and its relation to comments, user accounts, and delete events. Keyed by both post and comment UUID for scoping; returns all deletion events, including those due to self-deletion, moderator action, or administrative enforcement.\n\nThe query supports searching/filtering by actor, deletion reason, date, and auditable user notes. Only accessible by moderators or administrators for compliance and investigative purposes. Returned records document who deleted, the business/rationale for deletion, and exact UTC timestamp, supporting transparency, appeals, and systemic compliance oversight. Integrates with comment and post audit chains for forensic and legal use cases.","parameters":[{"name":"postId","description":"UUID of the post containing the target comment for the log query.","schema":{"type":"string","format":"uuid"}},{"name":"commentId","description":"UUID of the target comment being queried for deletion log.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Deletion log search and pagination parameters for audit retrieval.","typeName":"IDiscussBoardCommentDeletionLog.IRequest"},"responseBody":{"description":"Paginated and filtered list of deletion log records for the specified comment.","typeName":"IPageIDiscussBoardCommentDeletionLog"},"authorizationType":null,"authorizationRole":"moderator","name":"index"},{"specification":"Lists all audit deletion log entries for a particular comment under a post, filtered and paginated. Operates on discuss_board_comment_deletion_logs, using postId and commentId as keys for targeted query. Supports complex searching (actor, deletion reason, timestamp) and is important for compliance, appeals, and forensic review.","path":"/discussBoard/administrator/posts/{postId}/comments/{commentId}/deletionLogs","method":"patch","summary":"Search paginated audit deletion logs for a comment (discuss_board_comment_deletion_logs).","description":"This endpoint retrieves the paginated, filterable audit deletion log history for a specific comment. Leverages the discuss_board_comment_deletion_logs schema and its relation to comments, user accounts, and delete events. Keyed by both post and comment UUID for scoping; returns all deletion events, including those due to self-deletion, moderator action, or administrative enforcement.\n\nThe query supports searching/filtering by actor, deletion reason, date, and auditable user notes. Only accessible by moderators or administrators for compliance and investigative purposes. Returned records document who deleted, the business/rationale for deletion, and exact UTC timestamp, supporting transparency, appeals, and systemic compliance oversight. Integrates with comment and post audit chains for forensic and legal use cases.","parameters":[{"name":"postId","description":"UUID of the post containing the target comment for the log query.","schema":{"type":"string","format":"uuid"}},{"name":"commentId","description":"UUID of the target comment being queried for deletion log.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Deletion log search and pagination parameters for audit retrieval.","typeName":"IDiscussBoardCommentDeletionLog.IRequest"},"responseBody":{"description":"Paginated and filtered list of deletion log records for the specified comment.","typeName":"IPageIDiscussBoardCommentDeletionLog"},"authorizationType":null,"authorizationRole":"administrator","name":"index"},{"specification":"This operation retrieves the details of a specific deletion log for a comment within a post. It is associated with the discuss_board_comment_deletion_logs table, providing insight into who deleted the comment, when the deletion took place, and the rationale behind it. This is essential for transparency, audit, and compliance on the discussBoard platform.","description":"Retrieve a specific deletion log entry for a comment in a post. This endpoint allows authorized users to obtain details such as the actor's user account who deleted the comment, the deletion reason, any actor note, and the timestamp of deletion.\n\nThe operation is tightly linked to regulatory and dispute resolution requirements, enabling users, especially moderators and administrators, to audit the history of comment moderation and removal events.\n\nSecurity enforcement ensures that only the owner of the comment, the responsible staff, or users with appropriate privilege can access sensitive deletion log information. Unauthorized access attempts are logged and denied with informative errors.","summary":"Get details of a specific comment deletion log (discuss_board_comment_deletion_logs).","parameters":[{"name":"postId","description":"UUID of the post containing the comment.","schema":{"type":"string","format":"uuid"}},{"name":"commentId","description":"UUID of the comment for which the deletion log is queried.","schema":{"type":"string","format":"uuid"}},{"name":"deletionLogId","description":"UUID of the specific deletion log record.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed deletion log record for the specified comment, including actor, reason, and timestamp.","typeName":"IDiscussBoardCommentDeletionLog"},"authorizationRoles":["member"],"name":"at","path":"/discussBoard/member/posts/{postId}/comments/{commentId}/deletionLogs/{deletionLogId}","method":"get","authorizationRole":"member","authorizationType":null},{"specification":"This operation provides a paginated and filtered list of reactions to posts on the discussBoard platform. It operates on the discuss_board_post_reactions table, supporting advanced query options such as filtering by reaction type, target post, or member, enabling analytics and moderation workflows.","description":"Retrieve a paginated list of reactions (likes/dislikes) on posts. Supports parameters for filtering by member, post, reaction type, or time range, as defined in the discuss_board_post_reactions model. The summary response aids analytics, reputation tracking, and moderation audits.\n\nThis endpoint is essential for both user-facing features (displaying reaction counts, toggling reactions) and administrative functions (identifying spam, abuse, or manipulation of reaction features).\n\nPublic information (aggregated counts) may be accessed by guests, while detailed member-specific reactions require appropriate authorization.","summary":"List/filter post reactions (discuss_board_post_reactions) with pagination support.","parameters":[],"requestBody":{"description":"Filter and pagination criteria for post reactions (member, post, reaction type, etc.).","typeName":"IDiscussBoardPostReaction.IRequest"},"responseBody":{"description":"Paginated list of post reaction summary records matching filter criteria.","typeName":"IPageIDiscussBoardPostReaction.ISummary"},"authorizationRoles":["member"],"name":"index","path":"/discussBoard/member/postReactions","method":"patch","authorizationRole":"member","authorizationType":null},{"specification":"Retrieve details of a specific post reaction identified by its unique ID. This operation returns all relevant data from the discuss_board_post_reactions table, offering a detailed view including target post, reacting member, reaction type, timestamps, and current status.","description":"Get a single post reaction record by its ID. Returns information such as who reacted, to which post, what type of reaction, and creation/update timestamps. This enables reaction management, auditing, and personalized features (e.g. reaction toggles for current user).\n\nAccess to detailed records is typically limited to the reactor, target post owner, or privileged staff, enabling transparency while protecting privacy. Unauthorized access results in appropriate errors, and all access is auditable.","summary":"Get a specific post reaction record (discuss_board_post_reactions) by ID.","parameters":[{"name":"postReactionId","description":"UUID of the post reaction record to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information about the specified post reaction, including membership and target post relationship.","typeName":"IDiscussBoardPostReaction"},"authorizationRoles":["member"],"name":"at","path":"/discussBoard/member/postReactions/{postReactionId}","method":"get","authorizationRole":"member","authorizationType":null},{"specification":"Create a new reaction (like or dislike) to a post. This operation operates on the discuss_board_post_reactions table, requiring authorization of a member. Input validation enforces one reaction per member/post pair and mandates a valid reaction type.","description":"Allows a member to create a like or dislike reaction to a post. Enforces uniqueness (one reaction per member/post) and ensures input conformance (the reaction_type field must be 'like' or 'dislike').\n\nOn submission, business logic checks for existing reactions by the member for the post, updating or toggling as required by platform rules. Rate limiting, anti-abuse checks, and moderation triggers are integrated with this endpoint.\n\nStrict authorization ensures only authenticated members may create reactions. Attempts to submit duplicate or invalid reactions are rejected with clarification.","summary":"Create a new post reaction (like/dislike) for a post (discuss_board_post_reactions).","parameters":[],"requestBody":{"description":"Reaction creation data (target post, reaction type, etc.)","typeName":"IDiscussBoardPostReaction.ICreate"},"responseBody":{"description":"Full post reaction record as created.","typeName":"IDiscussBoardPostReaction"},"authorizationRoles":["member"],"name":"create","path":"/discussBoard/member/postReactions","method":"post","authorizationRole":"member","authorizationType":null},{"specification":"Update an existing post reaction (like/dislike). This changes the type or status of the user's reaction to a post on the discussBoard platform. The operation targets the discuss_board_post_reactions table and enforces business logic for reaction toggling and data integrity.","description":"Enables a member to update their reaction on a given post, typically toggling between 'like' and 'dislike', or correcting an input. The request body must specify the new state, conforming to the allowed reaction_type values.\n\nThe endpoint enforces integrity rules—there can only be one active reaction per member/post. Abusive or invalid requests are rejected with error messages. Only the reaction's owner or authorized staff can perform updates. All changes are logged for audit and for possible rollbacks or dispute resolution.","summary":"Update an existing post reaction (toggle like/dislike) (discuss_board_post_reactions).","parameters":[{"name":"postReactionId","description":"UUID of the post reaction to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update data for the reaction (reaction type, etc.)","typeName":"IDiscussBoardPostReaction.IUpdate"},"responseBody":{"description":"Updated post reaction record reflecting the new state.","typeName":"IDiscussBoardPostReaction"},"authorizationRoles":["member"],"name":"update","path":"/discussBoard/member/postReactions/{postReactionId}","method":"put","authorizationRole":"member","authorizationType":null},{"specification":"Delete (soft-delete) a post reaction specified by its unique ID. Operating on discuss_board_post_reactions, this operation removes a member's reaction to a post, updating the soft-deletion timestamp while preserving audit history.","description":"Delete a member's reaction (like/dislike) to a post. The operation marks the reaction as deleted by setting the deleted_at timestamp, ensuring the action is reversible and all audit/history/aggregate information remains accurate.\n\nAuthorization ensures that only the member performing the original reaction, authorized staff, or moderators can delete the reaction record. Abusive or repeated deletion attempts are prevented by business policy.\n\nAudit logs and aggregate reaction counts are updated appropriately to reflect the removal. All delete actions are tracked for compliance and can be reviewed by administrators.","summary":"Delete (soft-delete) a post reaction (discuss_board_post_reactions).","parameters":[{"name":"postReactionId","description":"UUID of the post reaction to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationRoles":["member"],"name":"erase","path":"/discussBoard/member/postReactions/{postReactionId}","method":"delete","authorizationRole":"member","authorizationType":null},{"specification":"Retrieve a paginated and filtered list of reactions to comments. This operation covers the discuss_board_comment_reactions table, allowing members to view recent, popular, or their own reactions, and for administrators/moderators to audit or analyze reaction behavior.","description":"List and search all comment reactions (like/dislike), supporting advanced filters for member ID, comment ID, reaction type (like/dislike), and date ranges. The summary response supports efficient delivery of aggregate feedback to users, and enables moderation/administrator audits for abuse or spam.\n\nThis endpoint fulfills both user and analytics needs; for privacy, detailed data is limited to the reactor and authorized roles. Unauthorized access or use for scraping purposes is logged and rate limited as per platform policy.","summary":"List/filter all comment reactions (discuss_board_comment_reactions) with pagination.","parameters":[],"requestBody":{"description":"Filter, search, and pagination options for comment reactions.","typeName":"IDiscussBoardCommentReaction.IRequest"},"responseBody":{"description":"Paginated summary records of comment reactions according to filter.","typeName":"IPageIDiscussBoardCommentReaction.ISummary"},"authorizationRoles":["member"],"name":"index","path":"/discussBoard/member/commentReactions","method":"patch","authorizationRole":"member","authorizationType":null},{"specification":"Retrieve the details of a specific comment reaction by unique identifier. Operates on discuss_board_comment_reactions and provides the full reaction data including user, comment, reaction type, and timestamps.","description":"Get a single comment reaction record by its unique ID. Returns data such as member reactor, associated comment, reaction type ('like' or 'dislike'), status, and timestamps (created_at, updated_at, deleted_at for audit/soft-deletion).\n\nAccess control restricts detailed information to the reactor, the relevant comment owner, or authorized moderation staff; attempts to access another member's reaction are denied unless properly privileged.\n\nEnables fine-grained audit, personalized displays, and moderation review for comment reactions on the discussBoard platform.","summary":"Get a specific comment reaction record (discuss_board_comment_reactions) by ID.","parameters":[{"name":"commentReactionId","description":"UUID of the comment reaction record to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Detailed information about the specified comment reaction, including user and target comment relationship.","typeName":"IDiscussBoardCommentReaction"},"authorizationRoles":["member"],"name":"at","path":"/discussBoard/member/commentReactions/{commentReactionId}","method":"get","authorizationRole":"member","authorizationType":null},{"specification":"This operation creates a new comment reaction for a specific comment by a member. The comment reaction table, discuss_board_comment_reactions, ensures a maximum of one reaction (like/dislike) per member per comment and supports toggling and soft-deletion for auditability. The operation strictly allows only 'like' or 'dislike' as valid reaction types, and each reaction is linked to the comment and the member performing the action. The API must validate that the member has permission to react (must not be the comment's author), that a reaction does not already exist, and that the target comment is active and not locked.","path":"/discussBoard/member/commentReactions","method":"post","description":"Creates a new reaction (like/dislike) by a member for a specified comment. Only authenticated members can perform this action, and only if they have not already reacted to the comment. If a previous reaction by the user exists and was soft-deleted, business logic SHOULD un-delete and update the reaction instead of creating a duplicate.\n\nReactions are constrained in the discuss_board_comment_reactions schema to a single reaction per member/comment pair. This maintains data integrity and accurate like/dislike counts, ensuring users cannot spam reactions. If the same member attempts to react to a comment more than once, the API returns an error and does not create a new record.\n\nThe API enforces business rules such as preventing a comment author from reacting to their own comment, rejecting invalid reaction types, and checking that the comment is not locked or deleted. Audit and moderation requirements apply to all modifications to comment reactions for compliance tracking.\n\nRelated endpoints for reaction update and deletion should be used for subsequent changes to existing reactions. Errors and business rule enforcement are reported with descriptive messages and clear HTTP status codes.","summary":"Create a new reaction (like/dislike) for a comment (discuss_board_comment_reactions table).","parameters":[],"requestBody":{"description":"Comment reaction creation details (comment, member, and reaction type).","typeName":"IDiscussBoardCommentReaction.ICreate"},"responseBody":{"description":"The created comment reaction entity with all audit and link fields.","typeName":"IDiscussBoardCommentReaction"},"authorizationType":null,"authorizationRole":"member","name":"create"},{"specification":"This operation updates a specific comment reaction. It allows members to toggle or switch their existing reaction on a comment (e.g., from 'like' to 'dislike'). The operation targets a single comment reaction in the discuss_board_comment_reactions table, identified by its unique ID. Reaction type is restricted to 'like' or 'dislike,' and only the reactor may update their own reaction record.","path":"/discussBoard/member/commentReactions/{commentReactionId}","method":"put","description":"Updates an existing comment reaction, allowing the member to toggle the type (like <> dislike) or restore a previously soft-deleted reaction. Only the member who created the reaction may perform this operation. Business rules enforced include validating the member's identity, ensuring the target reaction exists and is not deleted, and restricting reaction type values to 'like' or 'dislike'.\n\nThe operation references the discuss_board_comment_reactions schema, which links each reaction to member, comment, and type. The API includes validation for concurrent changes and returns errors as appropriate. Changes are audited for compliance and to protect against abuse or misuse of the reaction feature.","summary":"Update (toggle/switch) an existing comment reaction (discuss_board_comment_reactions table).","parameters":[{"name":"commentReactionId","description":"Unique identifier of the comment reaction to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Updated reaction details (must reference valid reaction type and member).","typeName":"IDiscussBoardCommentReaction.IUpdate"},"responseBody":{"description":"The updated comment reaction entity after changes are applied.","typeName":"IDiscussBoardCommentReaction"},"authorizationType":null,"authorizationRole":"member","name":"update"},{"specification":"This operation deletes (soft-deletes) a specific comment reaction record in the discuss_board_comment_reactions table. Deletion is permitted only to the member who originally created the reaction, or to moderators/administrators in response to policy violations. Instead of removing the record, the deleted_at field is set to the current timestamp for compliance and audit.","path":"/discussBoard/member/commentReactions/{commentReactionId}","method":"delete","description":"Deletes (soft-deletes) a member's reaction to a comment. Only the member who reacted, or a moderator/administrator with proper permissions, may invoke this operation. The record is not hard-deleted but is marked as deleted via the deleted_at timestamp as defined in the discuss_board_comment_reactions schema. The reaction will no longer contribute to like/dislike counts or user notifications but remains available for compliance and audit purposes.\n\nBusiness logic ensures the operation is allowed only if the reaction exists, is not already deleted, and the user is permitted to perform the action. Changes are logged for auditability and can only be reversed by moderator/administrator intervention if justified. All deletion actions are captured in moderation and audit logs.","summary":"Soft-delete a comment reaction (discuss_board_comment_reactions table) by ID.","parameters":[{"name":"commentReactionId","description":"ID of the comment reaction to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"member","name":"erase"},{"specification":"This operation retrieves a paginated, filtered list of content reports from the discuss_board_content_reports table. Content reports track member-submitted violations on posts or comments, including reporter, target content, reason, and workflow status. Search supports filtering by content type, reporter, report status, created date, and full-text search on reason. Results are paginated and sorted to optimize moderation workflows.","path":"/discussBoard/moderator/contentReports","method":"patch","description":"Retrieves a paginated collection of content reports submitted by members for moderation purposes. The discuss_board_content_reports table captures each report's details including reporter, target post or comment, type, reason, current status, and timestamps. Moderators and administrators use this endpoint to triage reports, view trends, and manage outstanding moderation actions.\n\nThe request body supports search filters such as content_type (post/comment), reporter_member_id, moderation status, time window, and full-text reason search. Sorting may be performed by status, creation/update time, or reason relevance.\n\nSecurity is enforced to allow only moderators and administrators to access all reports. Members may only query their own submitted reports for transparency. Data returned are summaries suitable for moderation dashboard display. Errors and constraints are clearly described, and the operation is logged for compliance.","summary":"Search and retrieve a list of content reports (discuss_board_content_reports table).","parameters":[],"requestBody":{"description":"Search and filter parameters for content report listing (pagination and search).","typeName":"IDiscussBoardContentReport.IRequest"},"responseBody":{"description":"Paginated set of content report summaries matching given criteria.","typeName":"IPageIDiscussBoardContentReport.ISummary"},"authorizationType":null,"authorizationRole":"moderator","name":"index"},{"specification":"This operation retrieves a paginated, filtered list of content reports from the discuss_board_content_reports table. Content reports track member-submitted violations on posts or comments, including reporter, target content, reason, and workflow status. Search supports filtering by content type, reporter, report status, created date, and full-text search on reason. Results are paginated and sorted to optimize moderation workflows.","path":"/discussBoard/administrator/contentReports","method":"patch","description":"Retrieves a paginated collection of content reports submitted by members for moderation purposes. The discuss_board_content_reports table captures each report's details including reporter, target post or comment, type, reason, current status, and timestamps. Moderators and administrators use this endpoint to triage reports, view trends, and manage outstanding moderation actions.\n\nThe request body supports search filters such as content_type (post/comment), reporter_member_id, moderation status, time window, and full-text reason search. Sorting may be performed by status, creation/update time, or reason relevance.\n\nSecurity is enforced to allow only moderators and administrators to access all reports. Members may only query their own submitted reports for transparency. Data returned are summaries suitable for moderation dashboard display. Errors and constraints are clearly described, and the operation is logged for compliance.","summary":"Search and retrieve a list of content reports (discuss_board_content_reports table).","parameters":[],"requestBody":{"description":"Search and filter parameters for content report listing (pagination and search).","typeName":"IDiscussBoardContentReport.IRequest"},"responseBody":{"description":"Paginated set of content report summaries matching given criteria.","typeName":"IPageIDiscussBoardContentReport.ISummary"},"authorizationType":null,"authorizationRole":"administrator","name":"index"},{"specification":"This operation retrieves detailed information for a specific content report from the discuss_board_content_reports table. A report documents a single member's complaint about a post or comment, with reason, status, and resolution linkage. Moderators and administrators use this endpoint to review, adjudicate, or escalate reports. Only the reporting member, moderator, or admin may view individual reports.","path":"/discussBoard/moderator/contentReports/{contentReportId}","method":"get","description":"Fetches full content report details, including reporter, reported content (post or comment), reason, workflow status, and any moderation/appeal linkage. The discuss_board_content_reports schema ensures each report references exactly one post or comment, and tracks resolution status.\n\nAuthorization restricts access to the reporting member, moderators, or administrators, ensuring privacy and integrity of moderation investigations. This endpoint is used to support review, audit, and decision-making for each report through moderation workflows. All access is logged for transparency and regulatory purposes.\n\nRelates to report listing and moderation decision/action endpoints for full workflow coverage.","summary":"Retrieve a specific content report by ID (discuss_board_content_reports table).","parameters":[{"name":"contentReportId","description":"Unique identifier for the content report to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full information for the specified content report, including moderation/appeal links.","typeName":"IDiscussBoardContentReport"},"authorizationType":null,"authorizationRole":"moderator","name":"at"},{"specification":"This operation retrieves detailed information for a specific content report from the discuss_board_content_reports table. A report documents a single member's complaint about a post or comment, with reason, status, and resolution linkage. Moderators and administrators use this endpoint to review, adjudicate, or escalate reports. Only the reporting member, moderator, or admin may view individual reports.","path":"/discussBoard/administrator/contentReports/{contentReportId}","method":"get","description":"Fetches full content report details, including reporter, reported content (post or comment), reason, workflow status, and any moderation/appeal linkage. The discuss_board_content_reports schema ensures each report references exactly one post or comment, and tracks resolution status.\n\nAuthorization restricts access to the reporting member, moderators, or administrators, ensuring privacy and integrity of moderation investigations. This endpoint is used to support review, audit, and decision-making for each report through moderation workflows. All access is logged for transparency and regulatory purposes.\n\nRelates to report listing and moderation decision/action endpoints for full workflow coverage.","summary":"Retrieve a specific content report by ID (discuss_board_content_reports table).","parameters":[{"name":"contentReportId","description":"Unique identifier for the content report to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full information for the specified content report, including moderation/appeal links.","typeName":"IDiscussBoardContentReport"},"authorizationType":null,"authorizationRole":"administrator","name":"at"},{"specification":"This operation creates a new content report for a post or comment in the discuss_board_content_reports table. Members submit reports identifying problematic or policy-violating content for moderation review, providing reason and content context. Each member is allowed only one report per content item; duplicate or abusive reports are rejected. The operation enforces business logic limiting report frequency and types per platform policy.","path":"/discussBoard/member/contentReports","method":"post","description":"Creates a new content report targeting a post or comment. The discuss_board_content_reports schema requires reporter identity, target content identification, content type, and reason (from a pre-approved set or custom text capped to 200 chars). Only authenticated members may file reports. The operation validates policy (single report per member/content), report frequency, and rate limits to prevent abuse. Duplicate and spam reports trigger error responses and can affect reporting privileges.\n\nReports are routed to moderation workflows for triage. Once created, a report can be tracked by the member and acted upon by moderators or administrators. All creation and business rule checks are audited for compliance. Members may view their own reports, but only moderators/administrators may search or view all reports.","summary":"Create a new content report (discuss_board_content_reports table) for a post or comment.","parameters":[],"requestBody":{"description":"Content report details (target content, reporter member, type, and reason).","typeName":"IDiscussBoardContentReport.ICreate"},"responseBody":{"description":"The newly created content report, including workflow and audit fields.","typeName":"IDiscussBoardContentReport"},"authorizationType":null,"authorizationRole":"member","name":"create"},{"specification":"This operation updates a specific content report in the discuss_board_content_reports table. Primarily used by moderators/administrators to change status, add resolution details, or associate the report with moderation actions. It supports updating status, linking to moderation/appeal workflows, and annotation of resolution reason. Members may only update their own reports' status or withdraw if moderation has not begun.","path":"/discussBoard/moderator/contentReports/{contentReportId}","method":"put","description":"Updates a content report record, typically during the moderation workflow. Moderators or administrators may set status (under_review, resolved, escalated, dismissed), attach moderation action ID, or add resolution notes per business logic. Members who submitted the report may withdraw or annotate their pending (untriaged) reports only if review has not started.\n\nData changes are validated for business workflow (e.g., only one status update per step, appropriate progression of states). The update is audited in detail and triggers notification or workflow handoff as described in moderation policy. Invalid state transitions or unauthorized changes are rejected with clear errors. Changes are designed for full traceability in audit and compliance scenarios.","summary":"Update a content report (discuss_board_content_reports table) by ID.","parameters":[{"name":"contentReportId","description":"ID of the content report to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Changes to report status, moderator linkage, or resolution note. Revisit schema for allowed fields.","typeName":"IDiscussBoardContentReport.IUpdate"},"responseBody":{"description":"The content report after update, with all changes and workflow/audit information.","typeName":"IDiscussBoardContentReport"},"authorizationType":null,"authorizationRole":"moderator","name":"update"},{"specification":"This operation updates a specific content report in the discuss_board_content_reports table. Primarily used by moderators/administrators to change status, add resolution details, or associate the report with moderation actions. It supports updating status, linking to moderation/appeal workflows, and annotation of resolution reason. Members may only update their own reports' status or withdraw if moderation has not begun.","path":"/discussBoard/administrator/contentReports/{contentReportId}","method":"put","description":"Updates a content report record, typically during the moderation workflow. Moderators or administrators may set status (under_review, resolved, escalated, dismissed), attach moderation action ID, or add resolution notes per business logic. Members who submitted the report may withdraw or annotate their pending (untriaged) reports only if review has not started.\n\nData changes are validated for business workflow (e.g., only one status update per step, appropriate progression of states). The update is audited in detail and triggers notification or workflow handoff as described in moderation policy. Invalid state transitions or unauthorized changes are rejected with clear errors. Changes are designed for full traceability in audit and compliance scenarios.","summary":"Update a content report (discuss_board_content_reports table) by ID.","parameters":[{"name":"contentReportId","description":"ID of the content report to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Changes to report status, moderator linkage, or resolution note. Revisit schema for allowed fields.","typeName":"IDiscussBoardContentReport.IUpdate"},"responseBody":{"description":"The content report after update, with all changes and workflow/audit information.","typeName":"IDiscussBoardContentReport"},"authorizationType":null,"authorizationRole":"administrator","name":"update"},{"specification":"This operation deletes (soft-deletes) a specific content report in the discuss_board_content_reports table. Deletion is allowed only for reports that are pending or untriaged, and typically only by the reporting member (prior to moderation review). Moderators/administrators may also delete test, abusive, or duplicate reports during review. The report is not hard-deleted; the deleted_at field is set for compliance and full audit logging.","path":"/discussBoard/member/contentReports/{contentReportId}","method":"delete","description":"Deletes (soft deletes) an existing content report by marking deleted_at in the discuss_board_content_reports schema. Only the reporting member may perform this action before moderation review begins, or moderators/administrators may remove test, abuse, or obviously invalid reports. The content report remains in the system for audit, workflow, and regulatory compliance.\n\nBusiness rules strictly enforce who may delete a report and under what circumstances. Once moderation review has begun or a moderation action is attached, deletion by the reporting member is no longer allowed. All deletion actions are logged for review by compliance or platform investigators.","summary":"Soft-delete a content report (discuss_board_content_reports table) by ID.","parameters":[{"name":"contentReportId","description":"ID of the content report to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"member","name":"erase"},{"specification":"This operation deletes (soft-deletes) a specific content report in the discuss_board_content_reports table. Deletion is allowed only for reports that are pending or untriaged, and typically only by the reporting member (prior to moderation review). Moderators/administrators may also delete test, abusive, or duplicate reports during review. The report is not hard-deleted; the deleted_at field is set for compliance and full audit logging.","path":"/discussBoard/moderator/contentReports/{contentReportId}","method":"delete","description":"Deletes (soft deletes) an existing content report by marking deleted_at in the discuss_board_content_reports schema. Only the reporting member may perform this action before moderation review begins, or moderators/administrators may remove test, abuse, or obviously invalid reports. The content report remains in the system for audit, workflow, and regulatory compliance.\n\nBusiness rules strictly enforce who may delete a report and under what circumstances. Once moderation review has begun or a moderation action is attached, deletion by the reporting member is no longer allowed. All deletion actions are logged for review by compliance or platform investigators.","summary":"Soft-delete a content report (discuss_board_content_reports table) by ID.","parameters":[{"name":"contentReportId","description":"ID of the content report to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"moderator","name":"erase"},{"specification":"This operation deletes (soft-deletes) a specific content report in the discuss_board_content_reports table. Deletion is allowed only for reports that are pending or untriaged, and typically only by the reporting member (prior to moderation review). Moderators/administrators may also delete test, abusive, or duplicate reports during review. The report is not hard-deleted; the deleted_at field is set for compliance and full audit logging.","path":"/discussBoard/administrator/contentReports/{contentReportId}","method":"delete","description":"Deletes (soft deletes) an existing content report by marking deleted_at in the discuss_board_content_reports schema. Only the reporting member may perform this action before moderation review begins, or moderators/administrators may remove test, abuse, or obviously invalid reports. The content report remains in the system for audit, workflow, and regulatory compliance.\n\nBusiness rules strictly enforce who may delete a report and under what circumstances. Once moderation review has begun or a moderation action is attached, deletion by the reporting member is no longer allowed. All deletion actions are logged for review by compliance or platform investigators.","summary":"Soft-delete a content report (discuss_board_content_reports table) by ID.","parameters":[{"name":"contentReportId","description":"ID of the content report to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"administrator","name":"erase"},{"specification":"This operation retrieves a paginated and filterable list of moderation actions conducted on the discussBoard platform. It operates on the discuss_board_moderation_actions table, enabling privileged users to review, audit, and analyze all moderation interventions, such as content removals, user suspensions, warnings, and policy escalations. Supports advanced searching by date, action type, actor, target, and appeal status.","description":"Retrieve a filtered and paginated list of moderation actions taken across the platform. This operation is intended for moderator and administrator oversight, as business rules require all such actions to be reviewable for audit and policy compliance.\n\nThe operation uses the discuss_board_moderation_actions table from the Prisma schema, enabling filtering on moderator identity, target user, associated content, action type (e.g., remove_content, suspend_user, warn), action status, and time window. Pagination and sorting are supported for efficient operational use.\n\nSecurity is paramount: Only authenticated users with moderator or administrator roles may access this endpoint. Audit trails and business reporting are facilitated by this list, which may be cross-referenced with appeals, reports, or user actions.\n\nThis operation is related to /moderationActions/{moderationActionId} (detail fetch), and write actions for moderation interventions. Error handling includes appropriate messaging for unauthorized access or invalid filter parameters.","summary":"Retrieve a paginated, filterable list of moderation actions (moderator/admin only) from discuss_board_moderation_actions.","parameters":[],"requestBody":{"description":"Filter, search, and pagination criteria for moderation action retrieval.","typeName":"IDiscussBoardModerationAction.IRequest"},"responseBody":{"description":"Paginated list of moderation action summaries matching given criteria.","typeName":"IPageIDiscussBoardModerationAction.ISummary"},"authorizationType":null,"authorizationRole":"moderator","name":"index","path":"/discussBoard/moderator/moderationActions","method":"patch"},{"specification":"This operation retrieves a paginated and filterable list of moderation actions conducted on the discussBoard platform. It operates on the discuss_board_moderation_actions table, enabling privileged users to review, audit, and analyze all moderation interventions, such as content removals, user suspensions, warnings, and policy escalations. Supports advanced searching by date, action type, actor, target, and appeal status.","description":"Retrieve a filtered and paginated list of moderation actions taken across the platform. This operation is intended for moderator and administrator oversight, as business rules require all such actions to be reviewable for audit and policy compliance.\n\nThe operation uses the discuss_board_moderation_actions table from the Prisma schema, enabling filtering on moderator identity, target user, associated content, action type (e.g., remove_content, suspend_user, warn), action status, and time window. Pagination and sorting are supported for efficient operational use.\n\nSecurity is paramount: Only authenticated users with moderator or administrator roles may access this endpoint. Audit trails and business reporting are facilitated by this list, which may be cross-referenced with appeals, reports, or user actions.\n\nThis operation is related to /moderationActions/{moderationActionId} (detail fetch), and write actions for moderation interventions. Error handling includes appropriate messaging for unauthorized access or invalid filter parameters.","summary":"Retrieve a paginated, filterable list of moderation actions (moderator/admin only) from discuss_board_moderation_actions.","parameters":[],"requestBody":{"description":"Filter, search, and pagination criteria for moderation action retrieval.","typeName":"IDiscussBoardModerationAction.IRequest"},"responseBody":{"description":"Paginated list of moderation action summaries matching given criteria.","typeName":"IPageIDiscussBoardModerationAction.ISummary"},"authorizationType":null,"authorizationRole":"administrator","name":"index","path":"/discussBoard/administrator/moderationActions","method":"patch"},{"specification":"This operation retrieves detailed information about a specific moderation action by its unique identifier from the discuss_board_moderation_actions table. It allows moderators and administrators to review exact steps taken, rationale, history, and relationships to reports and appeals for forensic or business review.","description":"Retrieve all details for a specific moderation action, including moderator identity, target member, affected post or comment, action type and reason, status, associated appeal link (if any), and decision narrative.\n\nThis endpoint provides granular access for privileged users to all recorded audit details and is critical for transparency, compliance, and escalation processes. Only moderators and administrators may use this endpoint, with system-enforced access checks.\n\nLinks other moderation, reporting, and appeals records for holistic moderation review. Error handling includes 404 for non-existent IDs, and 403 for insufficient permissions.","summary":"Retrieve details for a specific moderation action from discuss_board_moderation_actions by moderationActionId.","parameters":[{"name":"moderationActionId","description":"The unique identifier of the target moderation action.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full details of the specified moderation action, including context fields.","typeName":"IDiscussBoardModerationAction"},"authorizationType":null,"authorizationRole":"moderator","name":"at","path":"/discussBoard/moderator/moderationActions/{moderationActionId}","method":"get"},{"specification":"This operation retrieves detailed information about a specific moderation action by its unique identifier from the discuss_board_moderation_actions table. It allows moderators and administrators to review exact steps taken, rationale, history, and relationships to reports and appeals for forensic or business review.","description":"Retrieve all details for a specific moderation action, including moderator identity, target member, affected post or comment, action type and reason, status, associated appeal link (if any), and decision narrative.\n\nThis endpoint provides granular access for privileged users to all recorded audit details and is critical for transparency, compliance, and escalation processes. Only moderators and administrators may use this endpoint, with system-enforced access checks.\n\nLinks other moderation, reporting, and appeals records for holistic moderation review. Error handling includes 404 for non-existent IDs, and 403 for insufficient permissions.","summary":"Retrieve details for a specific moderation action from discuss_board_moderation_actions by moderationActionId.","parameters":[{"name":"moderationActionId","description":"The unique identifier of the target moderation action.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full details of the specified moderation action, including context fields.","typeName":"IDiscussBoardModerationAction"},"authorizationType":null,"authorizationRole":"administrator","name":"at","path":"/discussBoard/administrator/moderationActions/{moderationActionId}","method":"get"},{"specification":"This operation creates a new moderation action entry in the discuss_board_moderation_actions table. Only accessible to moderators and administrators, it is used for recording official moderation interventions during the resolution of reports: applies to content removals, warnings, suspensions, bans, or escalation decisions.","description":"Create a new moderation action record, specifying moderator identity, target member (if applicable), affected post or comment, action_type, action_reason, status, and optional decision narrative for audit and appeals.\n\nBusiness logic includes validating moderator/admin identities, checking target content/user existence, and linking with the appropriate report. Schema-level and business constraints ensure only permitted action types and status values. The created record is audit-trail critical and foundational for further appeals or business review.\n\nError handling covers invalid action types, missing references, and non-permitted access.","summary":"Create a new moderation action record in discuss_board_moderation_actions. Moderator/admin only.","parameters":[],"requestBody":{"description":"Data required to create a moderation action (actor, target, action_type, etc.).","typeName":"IDiscussBoardModerationAction.ICreate"},"responseBody":{"description":"Newly created moderation action with all relevant context.","typeName":"IDiscussBoardModerationAction"},"authorizationType":null,"authorizationRole":"moderator","name":"create","path":"/discussBoard/moderator/moderationActions","method":"post"},{"specification":"This operation creates a new moderation action entry in the discuss_board_moderation_actions table. Only accessible to moderators and administrators, it is used for recording official moderation interventions during the resolution of reports: applies to content removals, warnings, suspensions, bans, or escalation decisions.","description":"Create a new moderation action record, specifying moderator identity, target member (if applicable), affected post or comment, action_type, action_reason, status, and optional decision narrative for audit and appeals.\n\nBusiness logic includes validating moderator/admin identities, checking target content/user existence, and linking with the appropriate report. Schema-level and business constraints ensure only permitted action types and status values. The created record is audit-trail critical and foundational for further appeals or business review.\n\nError handling covers invalid action types, missing references, and non-permitted access.","summary":"Create a new moderation action record in discuss_board_moderation_actions. Moderator/admin only.","parameters":[],"requestBody":{"description":"Data required to create a moderation action (actor, target, action_type, etc.).","typeName":"IDiscussBoardModerationAction.ICreate"},"responseBody":{"description":"Newly created moderation action with all relevant context.","typeName":"IDiscussBoardModerationAction"},"authorizationType":null,"authorizationRole":"administrator","name":"create","path":"/discussBoard/administrator/moderationActions","method":"post"},{"specification":"This operation updates an existing moderation action in the discuss_board_moderation_actions table, allowing modification of decision narrative, status, or appeal linkage. Only moderators and administrators may perform this action. The operation enforces both business and audit constraints, maintaining a history of all changes for compliance.","description":"Update select fields on a given moderation action: decision_narrative, status, action_reason, and possible appeal linkage. This is restricted to authenticated moderators and administrators and may only be used when the business workflow permits changes (for example, status transitions from pending to completed, narrative clarifications, or appeal resolution linkage).\n\nThe operation will validate modification rights, audit all changes, and preserve a record of updates for business review. Parent operations include read and list endpoints. Errors include attempts to edit restricted fields or insufficient permissions.","summary":"Update an existing moderation action in discuss_board_moderation_actions. Moderator/admin only.","parameters":[{"name":"moderationActionId","description":"The unique identifier of the moderation action to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update information for the moderation action (status, narrative, appeal link, etc.).","typeName":"IDiscussBoardModerationAction.IUpdate"},"responseBody":{"description":"Updated moderation action entity reflecting latest values.","typeName":"IDiscussBoardModerationAction"},"authorizationType":null,"authorizationRole":"moderator","name":"update","path":"/discussBoard/moderator/moderationActions/{moderationActionId}","method":"put"},{"specification":"This operation updates an existing moderation action in the discuss_board_moderation_actions table, allowing modification of decision narrative, status, or appeal linkage. Only moderators and administrators may perform this action. The operation enforces both business and audit constraints, maintaining a history of all changes for compliance.","description":"Update select fields on a given moderation action: decision_narrative, status, action_reason, and possible appeal linkage. This is restricted to authenticated moderators and administrators and may only be used when the business workflow permits changes (for example, status transitions from pending to completed, narrative clarifications, or appeal resolution linkage).\n\nThe operation will validate modification rights, audit all changes, and preserve a record of updates for business review. Parent operations include read and list endpoints. Errors include attempts to edit restricted fields or insufficient permissions.","summary":"Update an existing moderation action in discuss_board_moderation_actions. Moderator/admin only.","parameters":[{"name":"moderationActionId","description":"The unique identifier of the moderation action to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Update information for the moderation action (status, narrative, appeal link, etc.).","typeName":"IDiscussBoardModerationAction.IUpdate"},"responseBody":{"description":"Updated moderation action entity reflecting latest values.","typeName":"IDiscussBoardModerationAction"},"authorizationType":null,"authorizationRole":"administrator","name":"update","path":"/discussBoard/administrator/moderationActions/{moderationActionId}","method":"put"},{"specification":"This operation permanently deletes (hard delete, as no soft-delete is defined at the schema level for this entity) a moderation action record by its unique identifier from the discuss_board_moderation_actions table. This is an exceptional operation, restricted to administrators for use in rare compliance situations.","description":"Permanently remove a specific moderation action from the database. This action cannot be undone and should only be used under explicit compliance requirements or legal orders (e.g., GDPR right to erasure, audit retention policies reached). No business-level soft delete field is defined for this entity, so all associated references (audit logs, appeals, moderation logs, etc.) must be handled appropriately. Use is strictly limited to administrator role.\n\nAttempted use by moderators should result in a 403 error; non-existent IDs return 404. Only administrators may perform this operation.","summary":"Permanently delete a moderation action record by ID from discuss_board_moderation_actions. Admin only.","parameters":[{"name":"moderationActionId","description":"The unique identifier of the moderation action to delete.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"administrator","name":"erase","path":"/discussBoard/administrator/moderationActions/{moderationActionId}","method":"delete"},{"specification":"This operation retrieves a paginated, filterable list of appeals submitted for moderation decisions, from the discuss_board_appeals table. Used by moderators and administrators for appeals workflow management, audit, and status review across all appeals.","description":"Allows privileged users to search, filter, and paginate through all appeals submitted by members against moderation decisions. Supports filtering by status, appellant, moderation action, creation date, and rationale keywords.\n\nResult set is summarized for operational review and workflow management. Only accessible to moderators and administrators due to the sensitive nature of appeal review. Business logic ensures members may only view their own appeals through other endpoints, not the full list.\n\nRelated endpoints include /appeals/{appealId} (detail fetch), and POST for submitting new appeals. Unauthorized access results in clear error messaging.","summary":"Retrieve paginated list of all appeals submitted against moderation actions (moderator/admin only) from discuss_board_appeals.","parameters":[],"requestBody":{"description":"Filtering, searching, and pagination criteria for appeals listing.","typeName":"IDiscussBoardAppeal.IRequest"},"responseBody":{"description":"Paginated, filterable list of appeal summary objects.","typeName":"IPageIDiscussBoardAppeal.ISummary"},"authorizationType":null,"authorizationRole":"moderator","name":"index","path":"/discussBoard/moderator/appeals","method":"patch"},{"specification":"This operation retrieves a paginated, filterable list of appeals submitted for moderation decisions, from the discuss_board_appeals table. Used by moderators and administrators for appeals workflow management, audit, and status review across all appeals.","description":"Allows privileged users to search, filter, and paginate through all appeals submitted by members against moderation decisions. Supports filtering by status, appellant, moderation action, creation date, and rationale keywords.\n\nResult set is summarized for operational review and workflow management. Only accessible to moderators and administrators due to the sensitive nature of appeal review. Business logic ensures members may only view their own appeals through other endpoints, not the full list.\n\nRelated endpoints include /appeals/{appealId} (detail fetch), and POST for submitting new appeals. Unauthorized access results in clear error messaging.","summary":"Retrieve paginated list of all appeals submitted against moderation actions (moderator/admin only) from discuss_board_appeals.","parameters":[],"requestBody":{"description":"Filtering, searching, and pagination criteria for appeals listing.","typeName":"IDiscussBoardAppeal.IRequest"},"responseBody":{"description":"Paginated, filterable list of appeal summary objects.","typeName":"IPageIDiscussBoardAppeal.ISummary"},"authorizationType":null,"authorizationRole":"administrator","name":"index","path":"/discussBoard/administrator/appeals","method":"patch"},{"specification":"This operation retrieves detailed information about a specific appeal for a moderation action, using the discuss_board_appeals table. Accessible only by moderators or administrators, it fetches the full appeal rationale, status, resolution log, and appellant/member context for review.","description":"Fetch a complete record for a particular appeal, including appeal rationale, status, outcome notes, workflow timestamps, and linked moderation action and appellant member. The endpoint is required for moderation scenario reviews, transparency, and audit requirements as part of fair appeals handling.\n\nOnly moderators and administrators may use this endpoint; members may access only their own appeals through distinct endpoints. Cross-references appeal details with related moderation decisions and logs. Business logic enforces strict role checks and notifies users when access is unauthorized or the appeal does not exist.","summary":"Get details of a single appeal for a moderation action (moderator/admin only) from discuss_board_appeals.","parameters":[{"name":"appealId","description":"The unique identifier of the appeal to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full appeal record with context (including rationale, status, and workflow logs).","typeName":"IDiscussBoardAppeal"},"authorizationType":null,"authorizationRole":"moderator","name":"at","path":"/discussBoard/moderator/appeals/{appealId}","method":"get"},{"specification":"This operation retrieves detailed information about a specific appeal for a moderation action, using the discuss_board_appeals table. Accessible only by moderators or administrators, it fetches the full appeal rationale, status, resolution log, and appellant/member context for review.","description":"Fetch a complete record for a particular appeal, including appeal rationale, status, outcome notes, workflow timestamps, and linked moderation action and appellant member. The endpoint is required for moderation scenario reviews, transparency, and audit requirements as part of fair appeals handling.\n\nOnly moderators and administrators may use this endpoint; members may access only their own appeals through distinct endpoints. Cross-references appeal details with related moderation decisions and logs. Business logic enforces strict role checks and notifies users when access is unauthorized or the appeal does not exist.","summary":"Get details of a single appeal for a moderation action (moderator/admin only) from discuss_board_appeals.","parameters":[{"name":"appealId","description":"The unique identifier of the appeal to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full appeal record with context (including rationale, status, and workflow logs).","typeName":"IDiscussBoardAppeal"},"authorizationType":null,"authorizationRole":"administrator","name":"at","path":"/discussBoard/administrator/appeals/{appealId}","method":"get"},{"specification":"This operation allows a member to submit a new appeal against a moderation action, recorded in the discuss_board_appeals table. This operation is fundamental to fair process and due diligence for contested moderation, enabling users to request independent review and provide rationale. Members submit their appeal content, linked moderation action, and rationale. The system creates a new appeal entry and triggers workflow for moderation/administrative review.","description":"Submit a new appeal citing a specific moderation action ID and providing a detailed rationale/argument. The operation verifies that the member is eligible to appeal (e.g., has standing as the affected party), that the moderation action exists, and the business workflow permits new appeals (not already resolved or duplicated).\n\nUpon creation, status is 'pending', and the record is accessible for subsequent moderator/admin review. Only authenticated members (not guests) may submit appeals.\n\nValidation handles duplicate appeals, missing or invalid moderation action IDs, and rationale content compliance. Errors include 403 for unauthorized user or non-appealable target.","summary":"Create a new appeal of a moderation action (authenticated member only) in discuss_board_appeals.","parameters":[],"requestBody":{"description":"Rationale and target moderation action for appeal submission.","typeName":"IDiscussBoardAppeal.ICreate"},"responseBody":{"description":"Newly created appeal with all relevant initial context and workflow status.","typeName":"IDiscussBoardAppeal"},"authorizationType":null,"authorizationRole":"member","name":"create","path":"/discussBoard/member/appeals","method":"post"},{"specification":"This operation updates an existing appeal record in the discussBoard platform. It references the discuss_board_appeals table in the Prisma schema, allowing authorized users to modify the appeal rationale or status. Appealed moderation actions may be re-evaluated by administrators or designated reviewers, with the ability to provide updated rationale, amend appeal notes, or move the appeal through workflow statuses (pending, in_review, accepted, denied, closed). The operation enforces role-based permissions and ensures that only the appellant, or an administrator, can update the content of the appeal in accordance with appeal process policies, while maintaining audit trails for transparency and user trust.","description":"Update an existing appeal for a moderation action by specifying the appeal's unique identifier. This operation is designed for the appellant (the user submitting the appeal) or administrators to present updated rationale, submit additional evidence, or correct prior submissions. The system verifies that only authorized users are permitted to update appeal records: namely, the original appetant or a system administrator.\n\nEach update is recorded with a timestamp, and any changes are appended to the appeal’s resolution notes section for full visibility. The appeal’s status may advance through the workflow from pending, to in_review, to resolved or escalated, with all transitions requiring business logic enforcement and audit logging.\n\nThis endpoint does not allow altering the linkage to the original moderation action, nor does it support creating new appeals. For new appeals, use the proper POST operation. Error handling includes rejecting unauthorized changes and validating that updates comply with current workflow status (e.g., appeals that are closed cannot be edited).","summary":"Update an existing appeal for a moderation action in the discuss_board_appeals table.","parameters":[{"name":"appealId","description":"Unique identifier of the appeal record to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields for updating an appeal, such as updated rationale or status.","typeName":"IDiscussBoardAppeals.IUpdate"},"responseBody":{"description":"The updated appeal record after successive changes and workflow advancement.","typeName":"IDiscussBoardAppeals"},"authorizationType":null,"authorizationRole":"member","name":"update","path":"/discussBoard/member/appeals/{appealId}","method":"put"},{"specification":"This operation updates an existing appeal record in the discussBoard platform. It references the discuss_board_appeals table in the Prisma schema, allowing authorized users to modify the appeal rationale or status. Appealed moderation actions may be re-evaluated by administrators or designated reviewers, with the ability to provide updated rationale, amend appeal notes, or move the appeal through workflow statuses (pending, in_review, accepted, denied, closed). The operation enforces role-based permissions and ensures that only the appellant, or an administrator, can update the content of the appeal in accordance with appeal process policies, while maintaining audit trails for transparency and user trust.","description":"Update an existing appeal for a moderation action by specifying the appeal's unique identifier. This operation is designed for the appellant (the user submitting the appeal) or administrators to present updated rationale, submit additional evidence, or correct prior submissions. The system verifies that only authorized users are permitted to update appeal records: namely, the original appetant or a system administrator.\n\nEach update is recorded with a timestamp, and any changes are appended to the appeal’s resolution notes section for full visibility. The appeal’s status may advance through the workflow from pending, to in_review, to resolved or escalated, with all transitions requiring business logic enforcement and audit logging.\n\nThis endpoint does not allow altering the linkage to the original moderation action, nor does it support creating new appeals. For new appeals, use the proper POST operation. Error handling includes rejecting unauthorized changes and validating that updates comply with current workflow status (e.g., appeals that are closed cannot be edited).","summary":"Update an existing appeal for a moderation action in the discuss_board_appeals table.","parameters":[{"name":"appealId","description":"Unique identifier of the appeal record to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Fields for updating an appeal, such as updated rationale or status.","typeName":"IDiscussBoardAppeals.IUpdate"},"responseBody":{"description":"The updated appeal record after successive changes and workflow advancement.","typeName":"IDiscussBoardAppeals"},"authorizationType":null,"authorizationRole":"administrator","name":"update","path":"/discussBoard/administrator/appeals/{appealId}","method":"put"},{"specification":"This operation permanently removes an appeal record from the discuss_board_appeals table by its identifier. The endpoint is intended for administrative or authorized use only and enforces strict business rules for appeal deletion: only appeals in specific statuses (e.g., pending or closed and not linked to open investigations) can be deleted. All appeal deletions are logged for compliance, and this operation maintains system integrity by ensuring downstream moderation records remain auditable.","description":"Erase an appeal record from the system by providing the unique appealId. Appeals can only be erased by users with administrative privilege or the original appellant if the appeal is still pending and has not been acted on. The system checks that the target appeal is not currently in an escalated or in_review state, and that deleting the record does not affect ongoing moderation or compliance processes.\n\nUpon successful removal, the operation triggers audit log creation referencing the actor, target, and action. If the attempt violates workflow or status rules (such as attempting to delete an active or escalated appeal), the system returns an appropriate error response and preserves the record. This is a hard delete operation unless an explicit soft-delete timestamp is maintained per requirements.","summary":"Erase (permanently delete) an appeal record from the discuss_board_appeals table by ID.","parameters":[{"name":"appealId","description":"Unique identifier of the appeal record to erase.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"administrator","name":"erase","path":"/discussBoard/administrator/appeals/{appealId}","method":"delete"},{"specification":"Retrieves a paginated, filterable list of moderation logs attached to a specific moderation action from the discuss_board_moderation_logs table. Moderation logs record every business event or escalation step, referencing a moderation action by its unique moderationActionId. The operation supports searching by type, timestamp range, or escalation keyword to facilitate compliance audits and transparency for administrators and senior moderators.","description":"Given a moderation action identifier (moderationActionId), return a paginated and filterable list of moderation logs associated with that action. Moderation logs are append-only records documenting business events, status changes, escalation steps, workflow transitions, or decision notes, referencing both the actor and the related action.\n\nThis operation is primarily for administrators, compliance auditors, and senior moderators to review the complete workflow history surrounding a particular moderation outcome. The request body allows for advanced filtering—such as event_type, event_details full-text, or created_at time windows—and supports customizable pagination settings. The response returns moderation log summaries with all relevant metadata to inform investigations or support appeals processes.\n\nSensitive log details are returned based on the requesting user's role privileges. Unauthorized users are denied access with appropriate errors.","summary":"Retrieve a paginated, filterable list of moderation logs for a specific moderation action.","parameters":[{"name":"moderationActionId","description":"The unique identifier of the moderation action being queried.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Advanced filter, search, and pagination criteria for retrieving moderation logs attached to a moderation action.","typeName":"IDiscussBoardModerationLogs.IRequest"},"responseBody":{"description":"Paginated, filtered summary list of moderation logs for the specified action.","typeName":"IPageIDiscussBoardModerationLogs.ISummary"},"authorizationType":null,"authorizationRole":"administrator","name":"index","path":"/discussBoard/administrator/moderationActions/{moderationActionId}/moderationLogs","method":"patch"},{"specification":"Retrieves a paginated, filterable list of moderation logs attached to a specific moderation action from the discuss_board_moderation_logs table. Moderation logs record every business event or escalation step, referencing a moderation action by its unique moderationActionId. The operation supports searching by type, timestamp range, or escalation keyword to facilitate compliance audits and transparency for administrators and senior moderators.","description":"Given a moderation action identifier (moderationActionId), return a paginated and filterable list of moderation logs associated with that action. Moderation logs are append-only records documenting business events, status changes, escalation steps, workflow transitions, or decision notes, referencing both the actor and the related action.\n\nThis operation is primarily for administrators, compliance auditors, and senior moderators to review the complete workflow history surrounding a particular moderation outcome. The request body allows for advanced filtering—such as event_type, event_details full-text, or created_at time windows—and supports customizable pagination settings. The response returns moderation log summaries with all relevant metadata to inform investigations or support appeals processes.\n\nSensitive log details are returned based on the requesting user's role privileges. Unauthorized users are denied access with appropriate errors.","summary":"Retrieve a paginated, filterable list of moderation logs for a specific moderation action.","parameters":[{"name":"moderationActionId","description":"The unique identifier of the moderation action being queried.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Advanced filter, search, and pagination criteria for retrieving moderation logs attached to a moderation action.","typeName":"IDiscussBoardModerationLogs.IRequest"},"responseBody":{"description":"Paginated, filtered summary list of moderation logs for the specified action.","typeName":"IPageIDiscussBoardModerationLogs.ISummary"},"authorizationType":null,"authorizationRole":"moderator","name":"index","path":"/discussBoard/moderator/moderationActions/{moderationActionId}/moderationLogs","method":"patch"},{"specification":"Retrieves the detailed record of a specific moderation log event attached to a moderation action. This operation queries the discuss_board_moderation_logs table based on both moderationActionId and moderationLogId, responding with the comprehensive log entry, including actors, event type, timestamps, narrative, and escalation linkages. Supports review and compliance workflow for administrators and moderators.","description":"Retrieve full detail of a single moderation log by specifying both the parent moderation action (moderationActionId) and the target moderation log record (moderationLogId). This record contains all essential information documenting an audit event, escalation step, or decision change during moderation of content or user accounts.\n\nAccess is restricted to users with appropriate moderation privileges. Returned fields include actors, event_type, event_details, and timestamps. This operation is critical for reconstructing histories and investigating workflow correctness in disciplinary reviews or user appeals.","summary":"Retrieve the details of a specific moderation log entry for a moderation action.","parameters":[{"name":"moderationActionId","description":"ID of the moderation action to which the log is attached.","schema":{"type":"string","format":"uuid"}},{"name":"moderationLogId","description":"ID of the moderation log record to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The complete moderation log record including metadata and escalation context.","typeName":"IDiscussBoardModerationLogs"},"authorizationType":null,"authorizationRole":"administrator","name":"at","path":"/discussBoard/administrator/moderationActions/{moderationActionId}/moderationLogs/{moderationLogId}","method":"get"},{"specification":"Retrieves the detailed record of a specific moderation log event attached to a moderation action. This operation queries the discuss_board_moderation_logs table based on both moderationActionId and moderationLogId, responding with the comprehensive log entry, including actors, event type, timestamps, narrative, and escalation linkages. Supports review and compliance workflow for administrators and moderators.","description":"Retrieve full detail of a single moderation log by specifying both the parent moderation action (moderationActionId) and the target moderation log record (moderationLogId). This record contains all essential information documenting an audit event, escalation step, or decision change during moderation of content or user accounts.\n\nAccess is restricted to users with appropriate moderation privileges. Returned fields include actors, event_type, event_details, and timestamps. This operation is critical for reconstructing histories and investigating workflow correctness in disciplinary reviews or user appeals.","summary":"Retrieve the details of a specific moderation log entry for a moderation action.","parameters":[{"name":"moderationActionId","description":"ID of the moderation action to which the log is attached.","schema":{"type":"string","format":"uuid"}},{"name":"moderationLogId","description":"ID of the moderation log record to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"The complete moderation log record including metadata and escalation context.","typeName":"IDiscussBoardModerationLogs"},"authorizationType":null,"authorizationRole":"moderator","name":"at","path":"/discussBoard/moderator/moderationActions/{moderationActionId}/moderationLogs/{moderationLogId}","method":"get"},{"specification":"Creates a new moderation log entry attached to a specific moderation action in the discuss_board_moderation_logs table. The operation accepts structured input (event_type, event_details, actor_member_id, escalation references) and anchors the new log for full workflow traceability. Used by authorized moderators and administrators for business event tracking throughout a moderation action's lifecycle.","description":"Append a new event log to the workflow of a specific moderation action by submitting structured event information. Moderation logs are critical for workflow and compliance: they capture each event, status transition, escalation, or rationale made during review and enforcement.\n\nParameters are validated against business rules, including role authorization—only users with moderation permissions (moderators and administrators) are allowed to create logs via this endpoint. Every addition is timestamped and captures reference pointers for audit or downstream analytic processes.\n\nThe response returns the full, newly created log entry with all supplied and system-generated fields. Log creation is subject to policy review; invalid workflows, missing fields, or unauthorized users are denied access with explicit error codes.","summary":"Create a new log record in the moderation workflow for a given moderation action.","parameters":[{"name":"moderationActionId","description":"ID of the moderation action to which the new log will be attached.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Required fields for new moderation log: event_type, event_details, actor reference, and optional escalation meta.","typeName":"IDiscussBoardModerationLogs.ICreate"},"responseBody":{"description":"The created moderation log record, including all event metadata and compliance anchors.","typeName":"IDiscussBoardModerationLogs"},"authorizationType":null,"authorizationRole":"moderator","name":"create","path":"/discussBoard/moderator/moderationActions/{moderationActionId}/moderationLogs","method":"post"},{"specification":"Creates a new moderation log entry attached to a specific moderation action in the discuss_board_moderation_logs table. The operation accepts structured input (event_type, event_details, actor_member_id, escalation references) and anchors the new log for full workflow traceability. Used by authorized moderators and administrators for business event tracking throughout a moderation action's lifecycle.","description":"Append a new event log to the workflow of a specific moderation action by submitting structured event information. Moderation logs are critical for workflow and compliance: they capture each event, status transition, escalation, or rationale made during review and enforcement.\n\nParameters are validated against business rules, including role authorization—only users with moderation permissions (moderators and administrators) are allowed to create logs via this endpoint. Every addition is timestamped and captures reference pointers for audit or downstream analytic processes.\n\nThe response returns the full, newly created log entry with all supplied and system-generated fields. Log creation is subject to policy review; invalid workflows, missing fields, or unauthorized users are denied access with explicit error codes.","summary":"Create a new log record in the moderation workflow for a given moderation action.","parameters":[{"name":"moderationActionId","description":"ID of the moderation action to which the new log will be attached.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Required fields for new moderation log: event_type, event_details, actor reference, and optional escalation meta.","typeName":"IDiscussBoardModerationLogs.ICreate"},"responseBody":{"description":"The created moderation log record, including all event metadata and compliance anchors.","typeName":"IDiscussBoardModerationLogs"},"authorizationType":null,"authorizationRole":"administrator","name":"create","path":"/discussBoard/administrator/moderationActions/{moderationActionId}/moderationLogs","method":"post"},{"specification":"Updates an existing moderation log record for a specific moderation action. This endpoint allows authorized moderators or administrators to add clarifying notes, update workflow status, or correct log metadata. It does not allow altering the immutable linkage to the parent moderation action. Every update is logged with a business timestamp for audit compliance, and the previous version is retained for rollback/review. This operation writes directly to discuss_board_moderation_logs.","description":"Modify a point-in-time moderation log event record by specifying both the unique moderation action and the target moderation log. Fields updatable include event_details, escalation information, or status narrative—core to providing more comprehensive workflow visibility and correcting prior entries.\n\nEach update triggers a version increment and audit event to ensure business controls are enforced and reviewers can retrace decisionmaking. The operation is limited to privileged moderators and administrators. Invalid update attempts (e.g., by non-authorized users or edits to logs outside the workflow update window) are denied with detailed errors.","summary":"Update an existing moderation log record in the moderation workflow for an action.","parameters":[{"name":"moderationActionId","description":"ID of the moderation action related to this log record.","schema":{"type":"string","format":"uuid"}},{"name":"moderationLogId","description":"ID of the moderation log record to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Mutable fields for an update to a moderation log, such as event_details or escalation info.","typeName":"IDiscussBoardModerationLogs.IUpdate"},"responseBody":{"description":"The updated moderation log record reflecting workflow and audit compliance changes.","typeName":"IDiscussBoardModerationLogs"},"authorizationType":null,"authorizationRole":"moderator","name":"update","path":"/discussBoard/moderator/moderationActions/{moderationActionId}/moderationLogs/{moderationLogId}","method":"put"},{"specification":"Updates an existing moderation log record for a specific moderation action. This endpoint allows authorized moderators or administrators to add clarifying notes, update workflow status, or correct log metadata. It does not allow altering the immutable linkage to the parent moderation action. Every update is logged with a business timestamp for audit compliance, and the previous version is retained for rollback/review. This operation writes directly to discuss_board_moderation_logs.","description":"Modify a point-in-time moderation log event record by specifying both the unique moderation action and the target moderation log. Fields updatable include event_details, escalation information, or status narrative—core to providing more comprehensive workflow visibility and correcting prior entries.\n\nEach update triggers a version increment and audit event to ensure business controls are enforced and reviewers can retrace decisionmaking. The operation is limited to privileged moderators and administrators. Invalid update attempts (e.g., by non-authorized users or edits to logs outside the workflow update window) are denied with detailed errors.","summary":"Update an existing moderation log record in the moderation workflow for an action.","parameters":[{"name":"moderationActionId","description":"ID of the moderation action related to this log record.","schema":{"type":"string","format":"uuid"}},{"name":"moderationLogId","description":"ID of the moderation log record to update.","schema":{"type":"string","format":"uuid"}}],"requestBody":{"description":"Mutable fields for an update to a moderation log, such as event_details or escalation info.","typeName":"IDiscussBoardModerationLogs.IUpdate"},"responseBody":{"description":"The updated moderation log record reflecting workflow and audit compliance changes.","typeName":"IDiscussBoardModerationLogs"},"authorizationType":null,"authorizationRole":"administrator","name":"update","path":"/discussBoard/administrator/moderationActions/{moderationActionId}/moderationLogs/{moderationLogId}","method":"put"},{"specification":"Permanently removes a specific moderation log record attached to a moderation action by its moderationLogId. This is a restricted operation available for administrators only, and it ensures all deletions are audit-anchored (the log is completely erased unless additional requirements mandate retention for compliance). The operation enforces checks so that only logs eligible for removal (e.g., non-finalized, non-required for compliance) can be deleted, preserving moderation history and review traceability.","description":"Erase (delete) a single moderation log record from a moderation workflow by specifying both moderationActionId and moderationLogId. Erasure may only be performed by an administrator, and the system checks whether the target log is eligible for deletion (such as not being referenced by open appeals or under legal hold).\n\nIf the deletion is valid, it is recorded in the system audit trail, and the underlying log record is removed from primary query scope. Attempted deletions that fail validation produce appropriate error codes, and no records are lost or altered unless business and compliance rules are satisfied.","summary":"Permanently remove a moderation log record from a moderation action's workflow by ID.","parameters":[{"name":"moderationActionId","description":"ID of the moderation action related to this log record.","schema":{"type":"string","format":"uuid"}},{"name":"moderationLogId","description":"ID of the moderation log record being erased.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":null,"authorizationType":null,"authorizationRole":"administrator","name":"erase","path":"/discussBoard/administrator/moderationActions/{moderationActionId}/moderationLogs/{moderationLogId}","method":"delete"},{"specification":"Provides paginated and filterable search over the notification delivery log (discuss_board_notifications table). Returns summaries of notification events for audit, analytics, troubleshooting, or user-access compliance. The endpoint supports filter criteria such as recipient, event_type, delivery_channel, delivery_status, or date windows. Only authorized administrators may access this endpoint for business and regulatory compliance reasons.","description":"Search and retrieve a paginated list of notification events from the discussBoard platform’s notification delivery log. The notification records include delivery status, recipient, event type, timing, and metadata necessary for compliance, audit, and troubleshooting. Request body allows search filters on user_account_id, event_type, delivery_channel, delivery_status, created_at date windows, and supports standard pagination controls (page number, page size, sort).\n\nAdministrators can use this endpoint to audit notification delivery performance, diagnose issues for specific users or events, and assure compliance with notification and privacy regulations. If filters are not supplied, the endpoint returns the most recent notification events. Unauthorized attempts to access notification data return strict 403 errors with audit triggers.","summary":"Search and retrieve a paginated, filterable list of notification delivery log entries (discuss_board_notifications).","parameters":[],"requestBody":{"description":"Search and pagination criteria for filtering notification log results, such as event type, recipient, channel, status, or date range.","typeName":"IDiscussBoardNotifications.IRequest"},"responseBody":{"description":"Paginated results of notification event log summaries, including metadata for analytic and compliance review.","typeName":"IPageIDiscussBoardNotifications.ISummary"},"authorizationType":null,"authorizationRole":"administrator","name":"index","path":"/discussBoard/administrator/notifications","method":"patch"},{"specification":"Retrieve a specific notification event for a discussBoard user. This operation interfaces with the discuss_board_notifications table to fetch detailed information about a notification, including its subject, body, delivery channel, status, and related delivery metadata. Only the recipient (member, moderator, administrator) or administrators may access notification details, ensuring delivery auditing and troubleshooting, as well as user transparency. Sensitive delivery failure metadata and event context are included for compliance and support workflows. Requesting a nonexistent or unauthorized notification ID will result in a clear error message. Access to other users' notifications is strictly restricted by business policy and enforced in service logic.","description":"This operation retrieves the details of a notification event sent by the discussBoard platform to a specific user. The operation provides full metadata from the discuss_board_notifications Prisma table, including the event type (such as reply, moderation, system alert), delivery channel (email, sms, push, in_app), subject and body, status indicators (delivered, pending, failed), and any external partner IDs. \n\nOnly authenticated members, moderators, or administrators are permitted to access their own notification records, while administrators may view all. Security considerations include strict filtering to ensure users cannot access each other's notification metadata. \n\nThe operation supports troubleshooting by exposing relevant error details on failed notifications, links notifications to triggering posts (if relevant), and includes all required timestamps and channel-specific fields. Related operations include listing notifications, searching by criteria, or updating delivery preferences (not included in this call). Attempting to access a nonexistent or unauthorized notification will provide clear error scenarios for auditing and support.","summary":"Retrieve a specific notification event (discuss_board_notifications) by ID.","parameters":[{"name":"notificationId","description":"Unique identifier for the notification event to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full detail of the targeted notification as represented in the discuss_board_notifications table.","typeName":"IDiscussBoardNotification"},"authorizationType":null,"authorizationRole":"member","name":"at","path":"/discussBoard/member/notifications/{notificationId}","method":"get"},{"specification":"Retrieve a specific notification event for a discussBoard user. This operation interfaces with the discuss_board_notifications table to fetch detailed information about a notification, including its subject, body, delivery channel, status, and related delivery metadata. Only the recipient (member, moderator, administrator) or administrators may access notification details, ensuring delivery auditing and troubleshooting, as well as user transparency. Sensitive delivery failure metadata and event context are included for compliance and support workflows. Requesting a nonexistent or unauthorized notification ID will result in a clear error message. Access to other users' notifications is strictly restricted by business policy and enforced in service logic.","description":"This operation retrieves the details of a notification event sent by the discussBoard platform to a specific user. The operation provides full metadata from the discuss_board_notifications Prisma table, including the event type (such as reply, moderation, system alert), delivery channel (email, sms, push, in_app), subject and body, status indicators (delivered, pending, failed), and any external partner IDs. \n\nOnly authenticated members, moderators, or administrators are permitted to access their own notification records, while administrators may view all. Security considerations include strict filtering to ensure users cannot access each other's notification metadata. \n\nThe operation supports troubleshooting by exposing relevant error details on failed notifications, links notifications to triggering posts (if relevant), and includes all required timestamps and channel-specific fields. Related operations include listing notifications, searching by criteria, or updating delivery preferences (not included in this call). Attempting to access a nonexistent or unauthorized notification will provide clear error scenarios for auditing and support.","summary":"Retrieve a specific notification event (discuss_board_notifications) by ID.","parameters":[{"name":"notificationId","description":"Unique identifier for the notification event to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full detail of the targeted notification as represented in the discuss_board_notifications table.","typeName":"IDiscussBoardNotification"},"authorizationType":null,"authorizationRole":"moderator","name":"at","path":"/discussBoard/moderator/notifications/{notificationId}","method":"get"},{"specification":"Retrieve a specific notification event for a discussBoard user. This operation interfaces with the discuss_board_notifications table to fetch detailed information about a notification, including its subject, body, delivery channel, status, and related delivery metadata. Only the recipient (member, moderator, administrator) or administrators may access notification details, ensuring delivery auditing and troubleshooting, as well as user transparency. Sensitive delivery failure metadata and event context are included for compliance and support workflows. Requesting a nonexistent or unauthorized notification ID will result in a clear error message. Access to other users' notifications is strictly restricted by business policy and enforced in service logic.","description":"This operation retrieves the details of a notification event sent by the discussBoard platform to a specific user. The operation provides full metadata from the discuss_board_notifications Prisma table, including the event type (such as reply, moderation, system alert), delivery channel (email, sms, push, in_app), subject and body, status indicators (delivered, pending, failed), and any external partner IDs. \n\nOnly authenticated members, moderators, or administrators are permitted to access their own notification records, while administrators may view all. Security considerations include strict filtering to ensure users cannot access each other's notification metadata. \n\nThe operation supports troubleshooting by exposing relevant error details on failed notifications, links notifications to triggering posts (if relevant), and includes all required timestamps and channel-specific fields. Related operations include listing notifications, searching by criteria, or updating delivery preferences (not included in this call). Attempting to access a nonexistent or unauthorized notification will provide clear error scenarios for auditing and support.","summary":"Retrieve a specific notification event (discuss_board_notifications) by ID.","parameters":[{"name":"notificationId","description":"Unique identifier for the notification event to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full detail of the targeted notification as represented in the discuss_board_notifications table.","typeName":"IDiscussBoardNotification"},"authorizationType":null,"authorizationRole":"administrator","name":"at","path":"/discussBoard/administrator/notifications/{notificationId}","method":"get"},{"specification":"Retrieve a filtered, paginated list of external integration events between the discussBoard platform and its partner services. This operation is based on the discuss_board_integration_logs table, enabling administrators and technical personnel to search for integration activities by type, partner, status, user account, and event context. Returns audit metadata, payload summaries, timing, error messages, and allows visibility into bidirectional communication with external APIs. Designed to support compliance, monitoring, root-cause analysis, and operational troubleshooting. Only administrators may perform this operation.","description":"This operation enables administrators to query integration logs from the discuss_board_integration_logs table using a variety of filters, supporting investigative, compliance, and maintenance scenarios. The search request body allows filtering by integration_type (e.g., notification_delivery, analytics, abuse_detection, partner_api), partner names, event type/trigger, integration status, time ranges, and optional user account. \n\nResults are paginated and may be sorted by creation or update timestamps. The response includes essential audit fields such as integration status, error messages, external reference IDs, and links to original business events. \n\nAccess to this operation is restricted to administrators due to the sensitive nature of payloads and potential PII in logs. Attempting access without sufficient permission is rejected with an explicit error. Other related endpoints include retrieving a single integration log by ID.","summary":"Search and page through external integration events (discuss_board_integration_logs).","parameters":[],"requestBody":{"description":"Search and filtering criteria for integration logs, supporting advanced pagination and filtering.","typeName":"IDiscussBoardIntegrationLog.IRequest"},"responseBody":{"description":"Paginated list of integration logs matching request criteria.","typeName":"IPageIDiscussBoardIntegrationLog"},"authorizationType":null,"authorizationRole":"administrator","name":"index","path":"/discussBoard/administrator/integrationLogs","method":"patch"},{"specification":"Retrieve a specific discussBoard integration log entry by its unique identifier. The operation fetches the detailed integration log record from the discuss_board_integration_logs table, exposing all metadata, status, payload, partner info, triggered event, error messages, and delivery tracking data. Admin-only operation, primarily for compliance, debugging, and root-cause analysis. Attempts to access a non-existent or unauthorized log record will return an appropriate error.","description":"This operation provides full access to a single integration log entry from the discuss_board_integration_logs Prisma table. Administrators can use this endpoint to verify the details of external API calls, notification deliveries, analytics updates, or abuse detection events involving third-party platforms. \n\nThe response includes all columns from the integration log, including integration_type, partner, statuses, payload (JSON), status/error info, user reference (when available), external tracking IDs, and creation/update timestamps. This API is essential for troubleshooting failed notifications, auditing partner interactions, and ensuring SLAs are met for business integrations. \n\nThe operation is tightly access-controlled—regular users and moderators cannot access integration logs due to potential PII/PHI or confidential partner data. Related operations include paginated log search or event-specific filtering endpoints.","summary":"Retrieve a specific integration log event (discuss_board_integration_logs) by ID.","parameters":[{"name":"integrationLogId","description":"Unique identifier for the integration log event to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full detail of the targeted integration log as represented in the discuss_board_integration_logs table.","typeName":"IDiscussBoardIntegrationLog"},"authorizationType":null,"authorizationRole":"administrator","name":"at","path":"/discussBoard/administrator/integrationLogs/{integrationLogId}","method":"get"},{"specification":"Search and page through the discuss_board_global_audit_logs entries to monitor and investigate system and user actions. This operation provides administrators with advanced filtering on audit trails by actor, event category, date range, object type, or free-text search criteria. Results are paginated for manageable review of large audit histories, support compliance, forensic, and operational needs. Access strictly limited to administrators due to the sensitivity of audit history contents.","description":"This operation enables administrators to query, search, and page through audit trail entries from the discuss_board_global_audit_logs table. Supported filters in the request body cover actor type (e.g., member, moderator, admin), actor ID, action category (such as post_edit, user_login, moderation_action), date intervals, target table/entity types, target IDs, and free-text descriptions.\n\nAudit logs document major system and business events in detail, recording actor, target, event category, custom event payloads (where available), and brief descriptions. This endpoint is critical for regulatory compliance, forensic investigations, review of high-impact changes, and ongoing system integrity checks.\n\nPagination, sorting, and complex search criteria are supported via the request body. Due to the sensitive nature of actions recorded, only administrators can execute this operation. Other endpoints provide detail retrieval for a specific audit log entry.","summary":"Search and paginate global audit logs (discuss_board_global_audit_logs).","parameters":[],"requestBody":{"description":"Search and filtering criteria for global audit logs, supporting pagination, range, and free-text filtering.","typeName":"IDiscussBoardGlobalAuditLog.IRequest"},"responseBody":{"description":"Paginated audit logs matching search criteria.","typeName":"IPageIDiscussBoardGlobalAuditLog"},"authorizationType":null,"authorizationRole":"administrator","name":"index","path":"/discussBoard/administrator/auditLogs","method":"patch"},{"specification":"Retrieve a specific global audit log entry from the discuss_board_global_audit_logs table. Provides detailed metadata about a business event or system action, including involved actor, target object, event payload, and description. Strictly for administrator access. Intended for forensic investigation, compliance, and technical audit review. Access attempts for nonexistent, unauthorized, or deleted log IDs result in informative errors or empty responses.","description":"This operation fetches a single global audit log entry from the discuss_board_global_audit_logs table, identified by its unique ID. Only administrators have access rights, as audit logs can contain sensitive and PII data about platform operations, user actions, moderation, and system configuration. \n\nThe full audit log includes actor information, action category, event descriptions, target object references, and, where available, contextual event payloads for in-depth review. This endpoint supports compliance, forensic audit, and tracking of critical business rules or incident analysis, in alignment with platform and external regulatory expectations.\n\nRelated listing/search APIs enable large-scale investigation, while this endpoint focuses on deep dive for individual audit log items.","summary":"Retrieve a specific global audit log (discuss_board_global_audit_logs) by ID.","parameters":[{"name":"auditLogId","description":"Unique identifier for the global audit log event to retrieve.","schema":{"type":"string","format":"uuid"}}],"requestBody":null,"responseBody":{"description":"Full detail of the targeted global audit log as represented in the discuss_board_global_audit_logs table.","typeName":"IDiscussBoardGlobalAuditLog"},"authorizationType":null,"authorizationRole":"administrator","name":"at","path":"/discussBoard/administrator/auditLogs/{auditLogId}","method":"get"}],"components":{"authorization":[{"name":"guest","description":"Unauthenticated users can view public posts, search and read content, but cannot write, comment, or interact beyond basic browsing. May register or log in to gain further access.","kind":"guest"},{"name":"member","description":"Authenticated users can create posts, comment, like/dislike content, edit or delete their own posts/comments within a specified time window, report inappropriate content, and manage their account information.","kind":"member"},{"name":"moderator","description":"Moderators oversee discussions, review reports, delete or edit inappropriate content, suspend or ban users for policy violations, and communicate warnings or feedback to users.","kind":"admin"},{"name":"administrator","description":"Administrators have full access, including configuring site settings, managing user roles, moderators, and site-wide policies, overseeing all content and moderation actions, and performing system maintenance.","kind":"admin"}],"schemas":{"IPage.IPagination":{"type":"object","properties":{"current":{"type":"integer","minimum":0,"description":"Current page number."},"limit":{"type":"integer","minimum":0,"description":"Limitation of records per a page."},"records":{"type":"integer","minimum":0,"description":"Total records in the database."},"pages":{"type":"integer","minimum":0,"description":"Total pages.\n\nEqual to {@link records} / {@link limit} with ceiling."}},"required":["current","limit","records","pages"],"description":"Page information."},"IAuthorizationToken":{"type":"object","properties":{"access":{"type":"string","description":"JWT access token for authenticated requests.\n\nThis token should be included in the Authorization header for subsequent\nauthenticated API requests as `Bearer {token}`."},"refresh":{"type":"string","description":"Refresh token for obtaining new access tokens.\n\nThis token can be used to request new access tokens when the current access\ntoken expires, extending the user's session."},"expired_at":{"type":"string","format":"date-time","description":"Access token expiration timestamp.\n\nISO 8601 date-time string indicating when the access token will expire and\ncan no longer be used for authentication."},"refreshable_until":{"type":"string","format":"date-time","description":"Refresh token expiration timestamp.\n\nISO 8601 date-time string indicating the latest time until which the\nrefresh token can be used to obtain new access tokens."}},"required":["access","refresh","expired_at","refreshable_until"],"description":"Authorization token response structure.\n\nThis interface defines the structure of the authorization token response\nreturned after successful user authentication. It contains both access and\nrefresh tokens along with their expiration information.\n\nThis token structure is automatically included in API schemas when the system\ndetects authorization roles in the requirements analysis phase. It provides a\nstandard format for JWT-based authentication across the generated backend\napplications."},"IPageIDiscussBoardForbiddenWords":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussBoardForbiddenWords"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIDiscussBoardSettings":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussBoardSettings"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIDiscussBoardConsentRecords":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussBoardConsentRecords"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIDiscussBoardPrivacyLogs":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussBoardPrivacyLogs"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIDiscussBoardMembers":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussBoardMembers"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIDiscussBoardModerator.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussBoardModerator.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIDiscussBoardAdministrator.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussBoardAdministrator.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIDiscussBoardPost.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussBoardPost.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIDiscussBoardPostTag.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussBoardPostTag.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIDiscussBoardPostEditHistory.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussBoardPostEditHistory.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIDiscussBoardComment":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussBoardComment"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIDiscussBoardCommentEditHistory":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussBoardCommentEditHistory"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIDiscussBoardCommentDeletionLog":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussBoardCommentDeletionLog"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIDiscussBoardPostReaction.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussBoardPostReaction.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIDiscussBoardCommentReaction.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussBoardCommentReaction.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIDiscussBoardContentReport.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussBoardContentReport.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIDiscussBoardModerationAction.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussBoardModerationAction.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIDiscussBoardAppeal.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussBoardAppeal.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIDiscussBoardModerationLogs.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussBoardModerationLogs.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIDiscussBoardNotifications.ISummary":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussBoardNotifications.ISummary"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIDiscussBoardIntegrationLog":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussBoardIntegrationLog"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IPageIDiscussBoardGlobalAuditLog":{"type":"object","properties":{"pagination":{"$ref":"#/components/schemas/IPage.IPagination","description":"Page information."},"data":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussBoardGlobalAuditLog"},"description":"List of records."}},"required":["pagination","data"],"description":"A page.\n\nCollection of records with pagination information."},"IDiscussBoardGuest.ICreate":{"type":"object","properties":{"ip_address":{"type":"string","description":"IP address of the guest user for analytics and security monitoring.\n\nUsed to identify and analyze anonymous traffic and conversions. This is required and is expected to be IPv4 or IPv6 format as supplied by the user's browser or reverse proxy. Referenced in analytics and anti-abuse monitoring, but treated as sensitive data for privacy."},"user_agent":{"type":"string","description":"User agent string representing the guest's browser/device for analytics.\n\nRequired to support device, OS, and browser analysis for conversion and anti-fraud. Used only for statistical and business purposes. Handled as PII per the system's privacy policy."},"referer":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Origin URL where the guest came from for conversion analysis.\n\nOptional, as not all browsers/devices provide a referer. Used for tracking referral sources and onboarding funnel performance. Null if unavailable. Subject to privacy minimization requirements."}},"required":["ip_address","user_agent"],"description":"Payload for guest creation in discuss_board_guests, used for tracking anonymous/temporary visitors for analytics and conversion funnel analysis. Does not include credential or login values. Required for system analytics, monitoring, and initial guest entity creation."},"IDiscussBoardGuest.IRefresh":{"type":"object","properties":{"refresh_token":{"type":"string","description":"The refresh token string to be validated for guest JWT session refresh.\n\nRequired. Issued as part of initial guest join. Used to continue an anonymous/unauthenticated session without rejoining as a new guest. Never share with other accounts or roles."}},"required":["refresh_token"],"description":"Payload to request issuance of a new JWT pair for a guest session, via refresh token only. Required for all guest token refresh operations on discussBoard."},"IDiscussBoardGuest.IAuthorized":{"type":"object","properties":{"id":{"type":"string","description":"Globally unique identifier (UUID) of the guest record issued on join.\n\nUsed as short-term, anonymous entity ID for analytics, tracking, and session management. Must be referenced in subsequent analytics and session operations."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"}},"required":["id","token"],"description":"Represents authorization and temporary identity after guest join/login/refresh. Returns guest id and JWT token. Used in client for maintaining anonymous/limited access session. Does not expose any sensitive fields or credential information."},"IDiscussBoardMember.IJoin":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"The unique email address for the new member registration.\n\nRequired. Must pass RFC-5322 validation and not collide with any existing discuss_board_user_accounts record. Used for login, communication, and verification. Privacy-sensitive."},"password":{"type":"string","minLength":10,"description":"Password string for the new member account. Must be securely handled; only sent in plaintext for registration/login, never stored as-is.\n\nWill be securely hashed and salted before storage. Must meet complexity requirements: at least 10 chars with uppercase, lowercase, number, and special character. Not exposed or persisted in responses."},"nickname":{"type":"string","description":"Initial nickname for the member, displayed in posts/comments and used as a public identifier.\n\nMust be unique in system, required for all new member registrations. Exposed in all member-related responses and visible to other users. Length, allowed characters, and uniqueness policies enforced at application layer."},"consent":{"type":"array","items":{"$ref":"#/components/schemas/IDiscussBoardMember.IConsent"},"description":"List of explicit policy consents granted at registration (privacy policy, terms of service, marketing opt-in/out, etc.).\n\nRequired: must include all policies required for account creation. Each entry must specify the policy type, version, and action. Used for compliance and legal audit."}},"required":["email","password","nickname","consent"],"description":"Registration payload for creating a new discussBoard member, covering account (email/password), public nickname, and all required legal/business policy consents at account creation. All fields are required for success, and uniqueness/consent policies are enforced."},"IDiscussBoardMember.IConsent":{"type":"object","properties":{"policy_type":{"type":"string","description":"Type of policy requiring consent (e.g., 'privacy_policy', 'terms_of_service', 'marketing_opt_in').\n\nMust match a recognized business policy type. Used as reference during compliance checks."},"policy_version":{"type":"string","description":"Version identifier for the policy being agreed to. Enables audit of the terms in effect at time of registration."},"consent_action":{"type":"string","description":"The action taken by the user for this policy (e.g., 'granted', 'revoked', 'updated'). Generally 'granted' for registration consent."}},"required":["policy_type","policy_version","consent_action"],"description":"Record of one explicit policy consent (privacy, TOS, or marketing) given by a registering user. Required at account creation for legal compliance."},"IDiscussBoardMember.IAuthorized":{"type":"object","properties":{"id":{"type":"string","description":"Globally unique identifier for the user_account, required for token issuance and ongoing session management.\n\nReferences the discuss_board_user_accounts record for the member. Exposed in every post-auth response and is used as the core login identity."},"user_account_id":{"type":"string","description":"Identifier for the associated discuss_board_user_accounts record."},"nickname":{"type":"string","description":"Display nickname chosen by the member. Must be unique and shown in posts/comments."},"status":{"type":"string","description":"Current member account status (active, banned, suspended, etc.). Used for business logic and audit."},"created_at":{"type":"string","format":"date-time","description":"UTC timestamp when the member record was created."},"updated_at":{"type":"string","format":"date-time","description":"UTC timestamp when the member record was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp for the member account, or null if not deleted."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"},"member":{"$ref":"#/components/schemas/IDiscussBoardMember","description":"Member entity information, including nickname, member id, account linkage, and status. Used for UI personalization and member-level business logic."}},"required":["id","user_account_id","nickname","status","created_at","updated_at","token"],"description":"Represents the result of login/join/refresh: authorized JWT token and all required identifying/account metadata for the member, including member status, nickname, and token information."},"IDiscussBoardMember":{"type":"object","properties":{"id":{"type":"string","description":"Globally unique identifier for the member (UUID)."},"user_account_id":{"type":"string","description":"Identifier for the associated discuss_board_user_accounts record."},"nickname":{"type":"string","description":"Display nickname chosen by the member. Must be unique and shown in posts/comments."},"status":{"type":"string","description":"Current member account status (active, banned, suspended, etc.). Used for business logic and audit."},"created_at":{"type":"string","format":"date-time","description":"UTC timestamp when the member record was created."},"updated_at":{"type":"string","format":"date-time","description":"UTC timestamp when the member record was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft deletion timestamp for the member account, or null if not deleted."}},"required":["id","user_account_id","nickname","status","created_at","updated_at"],"description":"Member entity describing users who participate as registered members. Contains basic identity, account linkage, nickname, status, and audit timestamps. Used in all core business/response logic."},"IDiscussBoardMember.ILogin":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Email address registered with the member account. This must be a unique, verified email as defined in the member authentication schema."},"password":{"type":"string","description":"Account password (in plain text for input), which will be compared to the stored password_hash via secure authentication logic."}},"required":["email","password"],"description":"Credential payload for member login to the discussBoard platform. Requires email and password fields as defined in authentication business requirements. Used for authentication and JWT issuance."},"IDiscussBoardMember.IRefresh":{"type":"object","properties":{"refresh_token":{"type":"string","description":"Refresh token previously issued in prior authentication, required to renew access/refresh JWTs for ongoing member sessions. Must be a secure, opaque string per JWT/refresh token business rules."}},"required":["refresh_token"],"description":"Payload for member session token refresh. Contains the refresh_token used to validate session continuation and rotate JWTs. Aligns with secure session management and member authentication lifecycles."},"IDiscussBoardModerator.ICreate":{"type":"object","properties":{"member_id":{"type":"string","format":"uuid","description":"UUID of the member being granted moderator rights. Must reference an active member eligible for moderation escalation according to business rules."},"assigned_by_administrator_id":{"type":"string","format":"uuid","description":"UUID for the administrator authorizing moderator assignment. Used for audit, escalation tracking, and compliance purposes."}},"required":["member_id","assigned_by_administrator_id"],"description":"Payload for administrator-driven creation of a moderator account. Both the target member (to escalate) and the administrator (assigning) must be referenced by UUID, with full auditability. Only available via administrator workflow."},"IDiscussBoardModerator.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"UUID of the moderator account (discuss_board_moderators.id) that has been authorized in this session."},"member_id":{"type":"string","format":"uuid","description":"UUID referencing the associated member promoted to moderator status.\n\nLinks to the discuss_board_members.id field. Each moderator must have an associated member record as per the Prisma schema definition."},"assigned_by_administrator_id":{"type":"string","format":"uuid","description":"UUID of the administrator who assigned the moderator role.\n\nReferences discuss_board_administrators.id, indicating the escalator for audit."},"assigned_at":{"type":"string","format":"date-time","description":"Timestamp (UTC) when the moderator role was assigned.\n\nCaptured at creation, this field is required for escalation tracking and audit compliance. Stored as a DateTime in the database."},"revoked_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp (UTC) when moderator role was revoked, if applicable.\n\nNullable field per Prisma schema; if present, denotes when this member's moderator privileges were rescinded."},"status":{"type":"string","description":"Status of the moderator role assignment (e.g., 'active', 'suspended', 'revoked').\n\nRequired string field in the Prisma schema. Describes the current business state of the role."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp (UTC) of moderator assignment record.\n\nMatches the created_at column in the discuss_board_moderators table."},"updated_at":{"type":"string","format":"date-time","description":"Last update timestamp (UTC) of this moderator assignment record.\n\nReflects operational changes and is updated on every modification."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp if moderator role was soft-deleted (role removed).\n\nNullable; used to soft delete moderator contracts for compliance. See Prisma schema for semantics."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"},"member":{"$ref":"#/components/schemas/IDiscussBoardMember.ISummary","description":"Summary record of the member data associated with this moderator. Exposes public/moderator role fields for session handling."}},"required":["id","member_id","assigned_by_administrator_id","assigned_at","status","created_at","updated_at","token"],"description":"Response type representing an authorized moderator in the discussBoard platform. Includes moderator UUID, token payload, and summarized associated member fields. Used after join, login, and session refresh to inform frontend security and business context."},"IDiscussBoardMember.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"UUID of the member referenced by this summary. Used to identify and correlate member records with session and role information."},"nickname":{"type":"string","description":"Member's nickname or display name as registered. Used in all business and UI contexts."},"status":{"type":"string","description":"Business status of the member (e.g., active, suspended, banned). Reflects current eligibility for actions or session renewal."}},"required":["id","nickname","status"],"description":"Summary record for a platform member, suitable for secure display/contextualization in session responses and role escalation. Never includes sensitive or authentication fields."},"IDiscussBoardModerator.ILogin":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Email associated with the moderator's linked member account. Used for authentication lookup."},"password":{"type":"string","description":"Moderator's password—plaintext on input, handled securely and validated against linked member's user_account record."}},"required":["email","password"],"description":"Credential set for moderator login/authentication, joining business logic of email/password validation with role-level checks ensuring moderator privilege is active. Used in secure mod login endpoint."},"IDiscussBoardModerator.IRefresh":{"type":"object","properties":{"refresh_token":{"type":"string","description":"The refresh token previously issued for a moderator session. Required to obtain a new access token. Must be a non-empty JWT format string."}},"required":["refresh_token"],"description":"Request schema for moderator token refresh operations. Requires the previous refresh_token. Follows business logic for JWT validation and session prolongation."},"IDiscussBoardAdministrator.IJoin":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Administrator account's email, must be unique across all user accounts. Used for login and primary contact. Must follow RFC 5322."},"password":{"type":"string","description":"Raw password for new administrator, which will be securely hashed. Must meet backend policy for length and complexity."},"nickname":{"type":"string","description":"Display nickname for the administrator. Usually set during registration and shown in admin UIs. Must be unique among all nicknames."}},"required":["email","password","nickname"],"description":"Payload for administrator account registration (join) on the discussBoard platform. All fields required: unique email (login & contact), plain password (for hashing), and auto-generated or user-provided nickname. Adheres to security, uniqueness, and complexity constraints. Consent logging and audit fields handled separately."},"IDiscussBoardAdministrator.IAuthorized":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier (UUID) of the administrator account."},"member_id":{"type":"string","format":"uuid","description":"UUID of the member promoted to administrator.\n\nForeign key to discuss_board_members table. Each admin must be associated with a specific member."},"escalated_by_administrator_id":{"type":"string","format":"uuid","description":"UUID of the administrator responsible for this admin's role escalation.\n\nReferences discuss_board_administrators.id. Sets up privilege chains for organizational traceability/audit."},"escalated_at":{"type":"string","format":"date-time","description":"Timestamp (UTC) when administrator privileges were granted.\n\nPopulated at admin role creation—matches escalated_at in the schema."},"revoked_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when admin privileges were revoked, if applicable.\n\nNullable—set when privileges are rescinded or assignment terminated. See Prisma schema for role status."},"status":{"type":"string","description":"Business status of the administrator privileges (e.g., 'active', 'resigned', 'suspended').\n\nDescribes current state of privilege per business logic and enum values."},"created_at":{"type":"string","format":"date-time","description":"Admin record creation timestamp (UTC).\n\nCorrelates with created_at in the Prisma schema, required for audits."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last modification to admin record (UTC time).\n\nUpdated whenever the record is changed. Audited per business compliance."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"If present, the timestamp when the administrator record was soft-deleted for compliance.\n\nNullable per Prisma schema. Do not supply for active assignments."},"token":{"$ref":"#/components/schemas/IAuthorizationToken","description":"JWT token information for authentication"},"administrator":{"$ref":"#/components/schemas/IDiscussBoardAdministrator","description":"Detailed administrator account object per schema."}},"required":["id","member_id","escalated_by_administrator_id","escalated_at","status","created_at","updated_at","token"],"description":"Administrator authorization payload. Returned after registration, login, or token refresh. Contains JWT tokens, admin UUID, and full administrator entity object."},"IDiscussBoardAdministrator":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the administrator assignment.\n\nPrimary key in the discuss_board_administrators Prisma table."},"member_id":{"type":"string","format":"uuid","description":"UUID of the member promoted to administrator.\n\nForeign key to discuss_board_members table. Each admin must be associated with a specific member."},"escalated_by_administrator_id":{"type":"string","format":"uuid","description":"UUID of the administrator responsible for this admin's role escalation.\n\nReferences discuss_board_administrators.id. Sets up privilege chains for organizational traceability/audit."},"escalated_at":{"type":"string","format":"date-time","description":"Timestamp (UTC) when administrator privileges were granted.\n\nPopulated at admin role creation—matches escalated_at in the schema."},"revoked_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when admin privileges were revoked, if applicable.\n\nNullable—set when privileges are rescinded or assignment terminated. See Prisma schema for role status."},"status":{"type":"string","description":"Business status of the administrator privileges (e.g., 'active', 'resigned', 'suspended').\n\nDescribes current state of privilege per business logic and enum values."},"created_at":{"type":"string","format":"date-time","description":"Admin record creation timestamp (UTC).\n\nCorrelates with created_at in the Prisma schema, required for audits."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last modification to admin record (UTC time).\n\nUpdated whenever the record is changed. Audited per business compliance."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"If present, the timestamp when the administrator record was soft-deleted for compliance.\n\nNullable per Prisma schema. Do not supply for active assignments."}},"required":["id","member_id","escalated_by_administrator_id","escalated_at","status","created_at","updated_at"],"description":"Full schema for discuss_board_administrators table—describing each administrator assignment, with privilege chain, escalation/revocation, and all required audit fields. Schema aligns with platform governance policies, escalation workflows, and auditability. See ERD and requirements for business rules/detail."},"IDiscussBoardAdministrator.ILogin":{"type":"object","properties":{"email":{"type":"string","format":"email","description":"Administrator login email credential. Must match unique registered administrator, per platform business policy."},"password":{"type":"string","description":"Administrator password credential submitted for authentication and verification. Plain password is never stored."}},"required":["email","password"],"description":"Request schema for administrator login operation. Email and password must match a registered admin user, both required."},"IDiscussBoardAdministrator.IRefresh":{"type":"object","properties":{"refresh_token":{"type":"string","description":"Refresh token previously issued for administrator session. Used to obtain new access/refresh JWTs. Required."}},"required":["refresh_token"],"description":"Request schema to refresh administrator authentication session. Requires the issued admin refresh token; yields new JWT pair if valid."},"IDiscussBoardSettings":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the global settings record.\n\nThis UUID is the primary key for tracking the single canonical instance of global system configuration for the discussBoard platform, as managed in the discuss_board_settings Prisma table. It distinguishes this configuration record in audit, rollback, and update operations."},"config_json":{"type":"string","description":"Serialized JSON string of system-wide configurable parameters, including feature toggles, global policy thresholds, and business flags.\n\nThis field holds all aggregated scalable and non-relational settings as a raw JSON string. Examples may include max post/comment lengths, maintenance mode flags, and custom feature rollouts. The string format allows flexible evolution of business settings without database migrations."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of settings record creation, in ISO 8601 UTC. Used for audit and platform change tracking."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp of last update to these settings, in ISO 8601 UTC. Tracks the most recent modification, for platform auditing and compliance."}},"required":["id","config_json","created_at","updated_at"],"description":"Global system configuration for the discussBoard platform.\n\nRepresents a singleton record that drives platform-wide settings for business logic, such as maintenance mode, posting rules, and configurable feature toggles. Managed only by administrators and referenced in platform-wide audits, this schema is foundational for all enforcement and operational flows."},"IDiscussBoardSettings.IUpdate":{"type":"object","properties":{"config_json":{"type":"string","description":"Full replacement for the system configuration JSON blob.\n\nOn update, the entire config_json string is replaced, allowing setting, addition, or removal of arbitrary keys or business flags relevant to platform operations. Consumers must ensure all required keys and business logic requirements are met within the input blob."}},"required":["config_json"],"description":"Update payload for discussBoard global system configuration.\n\nAllows administrators to overwrite and update the settings record with a new complete configuration. Used by backend services for compliance and platform management interfaces."},"IDiscussBoardForbiddenWords.IRequest":{"type":"object","properties":{"search":{"oneOf":[{"type":"string","description":"Optional search/filter string for expressions or description text.\n\nSupports full-text search of forbidden word patterns or rationale for moderation or audit review."},{"type":"null"}],"description":"Optional search/filter string for expressions or description text.\n\nSupports full-text search of forbidden word patterns or rationale for moderation or audit review."},"status":{"oneOf":[{"type":"string","description":"Optional filter for forbidden word entry status (active, deleted).\n\nReturns only active records by default. To include soft-deleted entries (with deleted_at set), clients must explicitly request status=deleted."},{"type":"null"}],"description":"Optional filter for forbidden word entry status (active, deleted).\n\nReturns only active records by default. To include soft-deleted entries (with deleted_at set), clients must explicitly request status=deleted."},"created_after":{"oneOf":[{"type":"string","format":"date-time","description":"Start of created_at filter window (ISO8601 UTC). Returns words created after this timestamp."},{"type":"null"}],"description":"Start of created_at filter window (ISO8601 UTC). Returns words created after this timestamp."},"created_before":{"oneOf":[{"type":"string","format":"date-time","description":"End of created_at filter window (ISO8601 UTC). Returns words created before this timestamp."},{"type":"null"}],"description":"End of created_at filter window (ISO8601 UTC). Returns words created before this timestamp."},"page":{"oneOf":[{"type":"integer","description":"Optional page number for pagination; defaults to 1 if unspecified. Standard page size is determined by backend."},{"type":"null"}],"description":"Optional page number for pagination; defaults to 1 if unspecified. Standard page size is determined by backend."},"limit":{"oneOf":[{"type":"integer","description":"Optional results per page for pagination. Used to limit bulk audit queries and reduce result set size."},{"type":"null"}],"description":"Optional results per page for pagination. Used to limit bulk audit queries and reduce result set size."}},"required":[],"description":"Paging/search/filter criteria for forbidden words content moderation rules.\n\nEnables administrators or moderators to locate, audit, and review forbidden content expressions with comprehensive filtering, text search, and window parameters for compliance, governance, and rapid UI presentation."},"IDiscussBoardForbiddenWords":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the forbidden word entry (UUID).\n\nPrimary key for moderation and audit workflows, assigned at rule creation. Used for record update, deletion, or detailed review."},"expression":{"type":"string","description":"The forbidden word, phrase, or regex pattern enforced in moderation.\n\nCase-insensitive match against user-generated content to enforce platform policies for hate speech, profanity, or other prohibited language. Must be unique in the system, and validated prior to insertion."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Administrative business rationale/context for this expression.\n\nUsed by moderators and compliance staff to document why this word was added to policy, for transparency and context in reviews. Field is optional."},"created_at":{"type":"string","format":"date-time","description":"ISO 8601 UTC timestamp when entry was created. Used for moderator/audit review and compliance traceability."},"updated_at":{"type":"string","format":"date-time","description":"ISO 8601 UTC timestamp of most recent update for this entry. Drives audit and policy review."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"ISO 8601 timestamp for soft deletion, if inactivated. Null if still active in policy enforcement. Used for audit, rollback, and compliance checks."}},"required":["id","expression","created_at","updated_at"],"description":"Moderation policy rule for platform forbidden words/phrases.\n\nDefines a unique word, phrase, or pattern banned under the discussBoard content policy. This record is enforced in post/comment creation, and changes or deletions are tracked for audit, appeal, and compliance purposes."},"IDiscussBoardForbiddenWords.ICreate":{"type":"object","properties":{"expression":{"type":"string","description":"Forbidden word, phrase, or regex for moderation filtering.\n\nMust be unique within the platform and validated by business logic prior to insertion. Case-insensitive by default."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional rationale or moderation context for internal administrative purposes. Used by moderators to document business reason or subset of policies. Field is not required and may be set to null for batch import or minimal entries."}},"required":["expression"],"description":"Payload for creating a new forbidden word content filter entry.\n\nUsed by administrators to expand content enforcement rules, document compliance requirements, and manage platform safety policies. Creation is tracked for regulatory and audit history."},"IDiscussBoardForbiddenWords.IUpdate":{"type":"object","properties":{"expression":{"type":"string","description":"Forbidden word, phrase, or regex pattern (case-insensitive).\n\nReferences the corresponding 'expression' column in discuss_board_forbidden_words. Used to update the content filter for posts/comments."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Administrative description or policy rationale for this forbidden word. Nullable.\n\nCorresponds to 'description' column in discuss_board_forbidden_words."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete flag: specifies when this entry was removed by administrators, if applicable. ISO8601 date-time string or null for active records.\n\nReferences 'deleted_at' column in discuss_board_forbidden_words."}},"description":"Update payload for discussing forbidden words rules. All fields are optional to allow partial updates of forbidden expression, rationale, or deletion status.\n\nMaps to discuss_board_forbidden_words table columns. Use only existing field names; do not add properties not present in the database schema.\n\nAll changes must be audit-logged for compliance.","required":[]},"IDiscussBoardSettings.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Page number for pagination (starting from 1). Optional."},"limit":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Number of results per page for pagination. Optional."},"orderBy":{"type":"string","description":"Field name to order results by (e.g., created_at, updated_at). Optional."},"sortDirection":{"oneOf":[{"const":"asc","description":"Sort direction for ordered field: 'asc' for ascending or 'desc' for descending. Optional."},{"const":"desc","description":"Sort direction for ordered field: 'asc' for ascending or 'desc' for descending. Optional."}],"description":"Sort direction for ordered field: 'asc' for ascending or 'desc' for descending. Optional."},"created_after":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filters settings created after this ISO8601 datetime (UTC) value. Optional."},"created_before":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filters settings created before this ISO8601 datetime (UTC) value. Optional."},"search":{"type":"string","description":"Search filter to match against settings fields. Optional."}},"description":"Filtering, search, and pagination options for querying system settings records in discuss_board_settings. All fields are optional and correspond to filtering capabilities supported in administrator UI and reporting. No properties outside of those documented here are permitted.","required":[]},"IDiscussBoardConsentRecords.IRequest":{"type":"object","properties":{"user_account_id":{"type":"string","description":"Filter for consent records by user account ID (UUID).\n\nReferences discuss_board_consent_records.user_account_id."},"policy_type":{"type":"string","description":"Filter records by policy type (e.g., privacy_policy, terms_of_service, marketing_opt_in). \nMaps to discuss_board_consent_records.policy_type."},"policy_version":{"type":"string","description":"Restrict to records for a given policy version (e.g., v1.0, v2025.01). \nMatches discuss_board_consent_records.policy_version."},"consent_action":{"type":"string","description":"Filter by type of consent event (e.g., granted, revoked, updated). \nMaps to discuss_board_consent_records.consent_action."},"created_after":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Include only records created after this ISO8601 datetime (UTC). Corresponds to created_at column. Optional."},"created_before":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Include only records created before this ISO8601 datetime (UTC). Corresponds to created_at column. Optional."},"page":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Page number for pagination (1-based). Optional."},"limit":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Maximum records to return per page. Optional."},"orderBy":{"type":"string","description":"Field name to order results by (e.g., created_at). Optional."},"sortDirection":{"oneOf":[{"const":"asc","description":"Order direction: 'asc' or 'desc'. Optional."},{"const":"desc","description":"Order direction: 'asc' or 'desc'. Optional."}],"description":"Order direction: 'asc' or 'desc'. Optional."},"search":{"type":"string","description":"Search term for free-text or keyword search in description field. Optional."}},"description":"Search and filter payload for querying user consent records. All properties are optional and map directly to discuss_board_consent_records table columns or search capabilities.","required":[]},"IDiscussBoardConsentRecords":{"type":"object","properties":{"id":{"type":"string","description":"Primary key; unique UUID for the consent record. Maps to discuss_board_consent_records.id."},"user_account_id":{"type":"string","description":"ID of user account giving/revoking/updating consent. UUID. Corresponds to discuss_board_consent_records.user_account_id."},"policy_type":{"type":"string","description":"Type of policy consent applies to, such as 'privacy_policy', 'terms_of_service', or 'marketing_opt_in'. Downstream mapping and audit depend on this value.\nCorresponds to discuss_board_consent_records.policy_type."},"policy_version":{"type":"string","description":"Version or unique identifier of the applicable policy/legal document. Example: 'v1.0', '2025.01'. Corresponds to discuss_board_consent_records.policy_version."},"consent_action":{"type":"string","description":"What event the consent record represents: granted, revoked, updated, etc. Used for legal defensibility. Corresponds to discuss_board_consent_records.consent_action."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional business/administrative notes about the consent event, including rationale or evidence (e.g., IP address, device). Matches 'description' column, nullable."},"created_at":{"type":"string","format":"date-time","description":"Timestamp (ISO8601 UTC) when this consent record was created in the system. Must match discuss_board_consent_records.created_at."}},"required":["id","user_account_id","policy_type","policy_version","consent_action","created_at"],"description":"A complete user consent record, mapping directly to a single row in discuss_board_consent_records. Used for retrieval, audit, API response, and legal compliance. Only fields present in the schema/database may be represented in the object."},"IDiscussBoardPrivacyLogs.IRequest":{"type":"object","properties":{"actor_user_account_id":{"type":"string","description":"Filter by ID of the user account that performed the privacy action. Nullable; if omitted or null, filter is not applied.\nMaps to discuss_board_privacy_logs.actor_user_account_id."},"data_subject_user_account_id":{"type":"string","description":"Filter by data subject user account affected by the privacy action. Nullable; omitting means filter is not applied.\nMatches discuss_board_privacy_logs.data_subject_user_account_id."},"action_type":{"type":"string","description":"Filter log entries by action type (e.g., access, export, delete, policy_update). See discuss_board_privacy_logs.action_type."},"result_status":{"type":"string","description":"Restrict returned logs by action result: success, failure, etc. Corresponds to discuss_board_privacy_logs.result_status column."},"created_after":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Include logs created after this ISO8601 datetime (UTC). Optional; nullable. Maps to created_at."},"created_before":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Include logs created before this ISO8601 datetime (UTC). Optional. Maps to created_at."},"page":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Page number for pagination, starting from 1. Optional."},"limit":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Results per page for pagination. Optional."},"orderBy":{"type":"string","description":"Field to order the results by (e.g., created_at). Optional."},"sortDirection":{"oneOf":[{"const":"asc","description":"Sort direction: 'asc' or 'desc'. Optional."},{"const":"desc","description":"Sort direction: 'asc' or 'desc'. Optional."}],"description":"Sort direction: 'asc' or 'desc'. Optional."},"search":{"type":"string","description":"Free-text search filter for description field. Optional."}},"description":"Parameters for searching, filtering, and paginating privacy log records (discuss_board_privacy_logs). All options are optional. Only properties present in the schema are permitted, additional fields should not be introduced.","required":[]},"IDiscussBoardPrivacyLogs":{"type":"object","description":"Represents a single audit log entry for privacy-relevant actions related to user data (such as exports, deletions, or policy changes) in the discussBoard platform. This record references the acting user (actor_user_account_id), the subject of the data action (data_subject_user_account_id), the type of action performed (action_type), the result of the operation (result_status), optionally a business-justified description, and the time at which the action was created. All properties adhere to underlying business requirements for privacy traceability and are compliant with regulatory mandates. For each entry, actor and subject account IDs are UUIDs, nullable for system or unauthenticated actions. The result_status conveys whether the action was successful or had special circumstances requiring compliance review.\n\nThis schema is strictly aligned with the corresponding Prisma model, ensuring system integrity for audit-trail, compliance, and incident response. The id property is the primary key (UUID).","properties":{"id":{"type":"string","format":"uuid","description":"The unique identifier for this privacy log entry, as a UUID."},"actor_user_account_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"The UUID of the user account that performed the privacy-affecting action. Nullable for automated/system/integration actions."},"data_subject_user_account_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"The UUID of the user account whose data was acted upon (the data subject). May be null for system/global actions."},"action_type":{"type":"string","description":"The category of privacy operation performed. Typical values include 'access', 'export', 'delete', 'policy_update', etc."},"description":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional narrative providing business or compliance context for this privacy action (e.g., regulatory mandate, user request)."},"result_status":{"type":"string","description":"The result/outcome of this privacy action—typical values: 'success', 'failure', or explanation for partial outcomes."},"created_at":{"type":"string","format":"date-time","description":"The UTC timestamp when this privacy operation was performed (in RFC 3339 format)."}},"required":["id","action_type","result_status","created_at"]},"IDiscussBoardMembers.IRequest":{"type":"object","description":"Request object for searching, filtering, and paginating discussBoard member accounts. Used to formulate complex membership queries according to status, nickname, and date ranges, and to control pagination of response data. All properties reflect the search filter capabilities supported by the platform's member administration UI. Pagination is driven by 'page' and 'limit'; status and nickname enable targeted filtering. Date ranges (created_at_from/to) filter by member account creation dates for audit or compliance review.","properties":{"page":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Page number for paginated queries (optional; null/1 for first page)."},"limit":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Maximum number of items per page for pagination (optional; system default applies if omitted/null)."},"status":{"type":"string","description":"(Optional) Filter for specific member account status (e.g., 'active', 'suspended', 'banned')."},"nickname":{"type":"string","description":"(Optional) Search or filter by member's nickname (supports match or partial search according to business logic)."},"created_at_from":{"type":"string","format":"date-time","description":"(Optional) Filter lower bound: member creation date (inclusive). RFC 3339 date-time string."},"created_at_to":{"type":"string","format":"date-time","description":"(Optional) Filter upper bound: member creation date (inclusive/up to). RFC 3339 date-time string."}},"required":[]},"IDiscussBoardMembers":{"type":"object","description":"Represents a registered member entity within the discussBoard platform, as defined precisely in the underlying Prisma model. The object includes references to the associated user account (user_account_id, UUID), the member's nickname, status (such as 'active', 'suspended', etc.), and account lifecycle timestamps. deleted_at is nullable for active members and set on soft deletion or anonymization. This schema is the canonical response type for member detail retrieval and is the foundational type for user profile management, moderation, and audit functionality.\n\nStrict schema and business logic alignment is maintained to prevent unauthorized property access: only fields mapped in Prisma are present here. No password or sensitive authentication fields are included. id is the unique identifier (UUID) and serves as the table primary key. Status is a system-managed enumerated string.","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for this member (primary key UUID)."},"user_account_id":{"type":"string","format":"uuid","description":"UUID that references the user account providing this member's authentication context."},"nickname":{"type":"string","description":"The public display nickname for this member (unique system-wide)."},"status":{"type":"string","description":"Current status of the member, e.g. 'active', 'suspended', 'banned', as managed by platform logic."},"created_at":{"type":"string","format":"date-time","description":"Timestamp at which this member record was created (RFC 3339 UTC format)."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp for latest modification to this member record (RFC 3339 UTC format)."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"If present, the timestamp when this member was soft-deleted/anonymized for privacy reasons; null if currently active."}},"required":["id","user_account_id","nickname","status","created_at","updated_at"]},"IDiscussBoardMembers.ICreate":{"type":"object","description":"Payload for administrators to create a new discussBoard member record. This schema contains the required account linkage (user_account_id, UUID), member nickname (must be unique system-wide), and initial account status (in range of platform-defined values such as 'active', 'suspended', etc.). All properties are strictly aligned to the Prisma schema. Only fields that exist in the actual schema may be set—no sensitive authentication or profile data are exposed. Business logic enforces uniqueness and value constraints outside this schema. Use for POST member creation endpoints by administrators or authorized systems.","properties":{"user_account_id":{"type":"string","format":"uuid","description":"Reference to an existing user account ID (UUID) for this member."},"nickname":{"type":"string","description":"Member's public display nickname to assign (must be unique)."},"status":{"type":"string","description":"Initial member status to assign, e.g. 'active', 'suspended', 'pending', according to system enumeration."}},"required":["user_account_id","nickname","status"]},"IDiscussBoardMembers.IUpdate":{"type":"object","description":"Payload for updating a discussBoard member's account properties in-place. Supports PATCH/PUT semantics depending on API endpoint. Only allows adjustment of nickname, status, or recording of deleted_at (for soft delete). All changes must comply with business rules for valid values, uniqueness, and status transitions. This object strictly maps to updatable fields of the corresponding Prisma model, with no additional or sensitive properties present. Mutation is tracked via updated_at in the main entity and full audit is maintained by system logic.","properties":{"nickname":{"type":"string","description":"(Optional) New nickname for this member. Must remain unique if set."},"status":{"type":"string","description":"(Optional) New platform status for the member, such as 'active', 'suspended', 'banned'. Must match system enumeration."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"(Optional) Soft deletion/anonymization timestamp—set by system or admin as needed for privacy or account lifecycle changes."}},"required":[]},"IDiscussBoardUserProfile":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the user profile. Corresponds to the primary key in the discuss_board_user_profiles table."},"member_id":{"type":"string","format":"uuid","description":"Foreign key referencing the registered member this profile belongs to (discuss_board_members.id)."},"display_name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"The user's chosen display name for public presentation. Overrides nickname. Nullable."},"bio":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Short biography or introduction written by the user. Optional. Null/hide if not set."},"avatar_uri":{"oneOf":[{"type":"string","maxLength":80000},{"type":"null"}],"description":"URI to avatar/profile image. May be null or long string."},"location":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional location or time zone; null if not set."},"website":{"oneOf":[{"type":"string","maxLength":80000},{"type":"null"}],"description":"Optional website/blog/social link; null if not set."},"created_at":{"type":"string","format":"date-time","description":"When the profile object was created (ISO 8601 UTC)."},"updated_at":{"type":"string","format":"date-time","description":"When the profile was last updated (ISO 8601 UTC)."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete/anonymization date (ISO 8601 UTC), or null if active."}},"required":["id","member_id","created_at","updated_at"],"description":"Profile information for a discussBoard user, e.g., display name, avatar, and bio."},"IDiscussBoardUserProfile.IUpdate":{"type":"object","properties":{"display_name":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Updated display name to set (or clear if null/empty/unset)."},"bio":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Updated bio/intro (optional/null to clear)."},"avatar_uri":{"oneOf":[{"type":"string","maxLength":80000},{"type":"null"}],"description":"Avatar/resource URI to set (optional/null to clear)."},"location":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Location information to update (optional/null to clear)."},"website":{"oneOf":[{"type":"string","maxLength":80000},{"type":"null"}],"description":"Personal website/blog/social URL to update (optional/null to clear)."}},"required":[],"description":"Fields for updating a user profile. Omitted fields are unchanged; null values clear fields."},"IDiscussBoardUserNotificationPreference":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for this notification preference record."},"member_id":{"type":"string","format":"uuid","description":"Owning member account reference."},"email_notifications_enabled":{"type":"boolean","description":"Whether email notifications are enabled for this member."},"sms_notifications_enabled":{"type":"boolean","description":"Whether SMS notifications are enabled for this member."},"push_notifications_enabled":{"type":"boolean","description":"Whether push notifications are enabled for this member."},"newsletter_opt_in":{"type":"boolean","description":"Whether the member has opted in to newsletters/announcements."},"created_at":{"type":"string","format":"date-time","description":"Time preference record was created (ISO 8601 UTC)."},"updated_at":{"type":"string","format":"date-time","description":"Last update time for this preference record (ISO 8601 UTC)."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete/privacy removal timestamp for this record."}},"required":["id","member_id","email_notifications_enabled","sms_notifications_enabled","push_notifications_enabled","newsletter_opt_in","created_at","updated_at"],"description":"Per-member notification routing preferences for discussBoard."},"IDiscussBoardUserNotificationPreference.IUpdate":{"type":"object","properties":{"email_notifications_enabled":{"type":"boolean","description":"Sets email notification enablement for the member."},"sms_notifications_enabled":{"type":"boolean","description":"Sets SMS notification enablement for the member."},"push_notifications_enabled":{"type":"boolean","description":"Sets push notification enablement for the member."},"newsletter_opt_in":{"type":"boolean","description":"Sets newsletter opt-in preference for the member."}},"required":[],"description":"Fields to update routing preferences for notifications for a discussBoard member."},"IDiscussBoardModerator.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Page number to fetch (1-based); leave null or omit for first page."},"limit":{"oneOf":[{"type":"integer","minimum":1},{"type":"null"}],"description":"Page size/limit; null/omitted for platform default."},"status":{"type":"string","description":"Filter by moderator status (e.g., active, revoked, suspended). Optional."},"member_nickname":{"type":"string","description":"Filter by the moderator's underlying member's nickname."},"assigned_from":{"type":"string","format":"date-time","description":"Return moderators assigned from this time onward (ISO 8601 UTC). Optional."},"assigned_to":{"type":"string","format":"date-time","description":"Return moderators assigned up to this time (ISO 8601 UTC). Optional."},"sort_by":{"type":"string","description":"Sort by field: (assigned_at or status etc)."},"sort_direction":{"oneOf":[{"const":"asc","description":"Sort direction to use: 'asc' or 'desc'."},{"const":"desc","description":"Sort direction to use: 'asc' or 'desc'."}],"description":"Sort direction to use: 'asc' or 'desc'."}},"required":[],"description":"Search, filter, and paging for discussBoard moderator accounts."},"IDiscussBoardModerator":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the moderator role.\n\nReferences the primary key of the discuss_board_moderators table as specified in the Prisma schema. Each moderator is assigned a UUID at creation, which is immutable."},"member_id":{"type":"string","format":"uuid","description":"UUID referencing the associated member promoted to moderator status.\n\nLinks to the discuss_board_members.id field. Each moderator must have an associated member record as per the Prisma schema definition."},"assigned_by_administrator_id":{"type":"string","format":"uuid","description":"UUID of the administrator who assigned the moderator role.\n\nReferences discuss_board_administrators.id, indicating the escalator for audit."},"assigned_at":{"type":"string","format":"date-time","description":"Timestamp (UTC) when the moderator role was assigned.\n\nCaptured at creation, this field is required for escalation tracking and audit compliance. Stored as a DateTime in the database."},"revoked_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp (UTC) when moderator role was revoked, if applicable.\n\nNullable field per Prisma schema; if present, denotes when this member's moderator privileges were rescinded."},"status":{"type":"string","description":"Status of the moderator role assignment (e.g., 'active', 'suspended', 'revoked').\n\nRequired string field in the Prisma schema. Describes the current business state of the role."},"created_at":{"type":"string","format":"date-time","description":"Creation timestamp (UTC) of moderator assignment record.\n\nMatches the created_at column in the discuss_board_moderators table."},"updated_at":{"type":"string","format":"date-time","description":"Last update timestamp (UTC) of this moderator assignment record.\n\nReflects operational changes and is updated on every modification."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp if moderator role was soft-deleted (role removed).\n\nNullable; used to soft delete moderator contracts for compliance. See Prisma schema for semantics."}},"required":["id","member_id","assigned_by_administrator_id","assigned_at","status","created_at","updated_at"],"description":"Full schema for discuss_board_moderators table—each record represents an active or former moderator, with assignment/role escalation and status fields. The schema follows the Prisma table structure and enforces audit, role management, and system compliance as described in business documentation. See ERD and requirements for detailed relationships and rationale."},"IDiscussBoardModerator.IUpdate":{"type":"object","properties":{"revoked_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when moderator role was revoked.\n\nCan be supplied to rescind a moderator's privileges. Must be omitted or set null to indicate active."},"status":{"type":"string","description":"Status update for moderator role (e.g., 'active', 'suspended', 'revoked').\n\nEnables corrective action, suspension, or escalation as necessary for compliance and enforcement. Refer to business enums if present."},"updated_at":{"type":"string","format":"date-time","description":"Optional field for last update timestamp (UTC).\n\nMay be used to enforce update time correctness or for audit purpose. If omitted, will be set automatically."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft-deletion request. Supply null to clear, or a DateTime string to mark record as deleted (for audit and compliance workflows)."}},"required":[],"description":"Partial update (PATCH) schema for discuss_board_moderators table—allows updating mutable fields of a moderator role (revocation, status, timestamps). Used for role management operations in admin UIs. Properties exactly match Prisma schema with type constraints and audit requirements. Do not supply immutable fields like id or assigned_by_administrator_id."},"IDiscussBoardAdministrator.IRequest":{"type":"object","properties":{"status":{"type":"string","description":"Search filter by administrator status (e.g., 'active', 'resigned', 'suspended').\n\nUseful for narrowing search results to specific role states, per business enum definitions."},"escalation_date_from":{"type":"string","format":"date-time","description":"Filter for administrators whose escalation date (escalated_at) is on or after this timestamp (UTC).\n\nEnables searching for recent or specific-date escalations."},"escalation_date_to":{"type":"string","format":"date-time","description":"Filter for administrators whose escalation date (escalated_at) is on or before this timestamp (UTC).\n\nSupports upper-bound date filtering for role assignment timing."},"created_from":{"type":"string","format":"date-time","description":"Lower date bound for searching admin records by creation time (created_at).\n\nLimits search to records created after the specified UTC date/time."},"created_to":{"type":"string","format":"date-time","description":"Upper date bound for searching admin records by creation time (created_at).\n\nLimits search to records created before the specified UTC date/time."},"sort_by":{"type":"string","description":"Sorting key for admin search results (e.g., 'escalated_at', 'status', etc.).\n\nValid options determined by backend logic; matches field names as appropriate."},"sort_direction":{"oneOf":[{"const":"asc","description":"Direction to sort results (ascending or descending order).\n\nAccepts only 'asc' or 'desc' per OpenAPI/REST convention."},{"const":"desc","description":"Direction to sort results (ascending or descending order).\n\nAccepts only 'asc' or 'desc' per OpenAPI/REST convention."}],"description":"Direction to sort results (ascending or descending order).\n\nAccepts only 'asc' or 'desc' per OpenAPI/REST convention."},"page":{"type":"integer","description":"The page number for paginated queries.\n\nDefaults to 1 if not specified. Used in coordination with limit."},"limit":{"type":"integer","description":"Maximum number of records to return per page.\n\nRequired for pagination, default defined by backend."}},"required":[],"description":"Request schema for searching/filtering discuss_board_administrators. All fields are optional and act as filters, sort keys, or pagination controls. Follows business logic for search."},"IDiscussBoardAdministrator.IUpdate":{"type":"object","properties":{"revoked_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Field to set or clear the date/time when this admin was revoked/deactivated.\n\nNull to clear, date/time to set privilege removal timestamp."},"status":{"type":"string","description":"Update business status for administrator privileges.\n\nPermits changing among business enums like 'active', 'resigned', or 'suspended'; only those present in admin logic."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp for modification of admin record (UTC).\n\nSet to current time if updating any field. May be omitted to use default/update-now logic."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamps soft-deletion of administrator access/record.\n\nOmit for active admins, set to DateTime for revocation, or null for clearing."}},"required":[],"description":"Partial update schema for discuss_board_administrators—controls administrative status, soft-deletion, privilege removal, and update tracking. Used in administrative role-management UIs. Immutable fields (id, member_id, escalated_by_administrator_id) are not included."},"IDiscussBoardPost.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer","description":"Page number."},{"type":"null"}],"description":"Page number, optional. For pagination."},"limit":{"oneOf":[{"type":"integer","description":"Records per page."},{"type":"null"}],"description":"Limit of records per page, optional."},"author_id":{"type":"string","format":"uuid","description":"Filter by author ID (UUID)."},"status":{"type":"string","description":"Filter by post business status, such as 'public', 'locked', etc."},"tag_id":{"type":"string","format":"uuid","description":"Filter posts by a tag assigned (UUID)."},"keyword":{"type":"string","description":"Full-text search keyword (matches title or body)."},"created_from":{"type":"string","format":"date-time","description":"ISO8601 start of created_at date range."},"created_to":{"type":"string","format":"date-time","description":"ISO8601 end of created_at date range."},"sort_by":{"type":"string","description":"Sort by one of the available fields, typical: created_at, updated_at, title. Implementation may constrain."},"sort_order":{"oneOf":[{"const":"asc","description":"Sort order: asc or desc."},{"const":"desc","description":"Sort order: asc or desc."}],"description":"Sort order: asc or desc."}},"required":[],"description":"Request criteria for searching/filtering/paginating discussBoard posts. Includes pagination, search, and various field filters, aligned with the business requirements and Prisma schema.\n\nEvery property represents query input for browsing, searching, or analytics scenarios in the discussBoard platform."},"IDiscussBoardPost":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the post (UUID)."},"author_id":{"type":"string","format":"uuid","description":"Author's member UUID, references discuss_board_members.id."},"title":{"type":"string","description":"Title of the post, 5-150 characters, required. Enforced in the application, maps to discuss_board_posts.title."},"body":{"type":"string","description":"Main text content of the post, 10-10,000 characters as per business/app logic."},"business_status":{"type":"string","description":"Post visibility/workflow status (public, private, limited, locked, under_review, etc.) from discuss_board_posts.business_status."},"created_at":{"type":"string","format":"date-time","description":"UTC time the post was created, ISO 8601 format."},"updated_at":{"type":"string","format":"date-time","description":"Last update timestamp, ISO 8601."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft-delete timestamp (null if not deleted)."}},"required":["id","author_id","title","body","business_status","created_at","updated_at"],"description":"Full entity record for a discussBoard post as per discuss_board_posts. Includes all columns for storage, display, audit, and business logic alignment. Does not include aggregated reaction/comment counts (handle elsewhere).\n\nSensitive fields (none in this entity) are excluded. Audit/ownership fields are read-only."},"IDiscussBoardPost.ICreate":{"type":"object","properties":{"title":{"type":"string","description":"Required. Title of the post (5-150 characters)."},"body":{"type":"string","description":"Required. Main content of the post (10-10,000 chars)."},"business_status":{"type":"string","description":"Optional. Initial business status of the post (public, private, etc.). Default is 'public' unless overridden by system. For workflow/usecase: moderation, drafts, or privilege gating."},"tag_ids":{"type":"array","items":{"type":"string","format":"uuid"},"description":"Optional. Array of tag UUIDs to assign to this post during creation. Validated for maximum/tag uniqueness at service layer."}},"required":["title","body"],"description":"Input type for creating a new discussBoard post. Contains business-allowed, client-supplied fields only. Ownership and timestamps are managed by the backend. Security policy excludes supply of author_id, created_at, updated_at, etc."},"IDiscussBoardPost.IUpdate":{"type":"object","properties":{"title":{"type":"string","description":"Optional. New value for the post title (5-150 chars each)."},"body":{"type":"string","description":"Optional. Body of the post (10-10,000 chars)."},"business_status":{"type":"string","description":"Optional. New business status if permitted (e.g., locked, under_review)."},"tag_ids":{"type":"array","items":{"type":"string","format":"uuid"},"description":"Optional. New list of tag UUIDs to replace current assignments."}},"required":[],"description":"Update input type for an existing discussBoard post. All fields are optional; only provided properties will be updated. Ownership, timestamps, and moderation fields are managed by the backend. Security: author_id, created_at, and related fields CANNOT be updated via this DTO."},"IDiscussBoardPostTag.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Page number for pagination."},"limit":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Page size for pagination."},"tag_id":{"type":"string","format":"uuid","description":"Filter: tag UUID to search for in post-tag assignments."},"assigned_from":{"type":"string","format":"date-time","description":"Start date (ISO 8601) for filtering tags by assignment time."},"assigned_to":{"type":"string","format":"date-time","description":"End date (ISO 8601) for filtering tags by assignment time."},"sort_by":{"type":"string","description":"Field to sort by (e.g., created_at)."},"sort_order":{"oneOf":[{"const":"asc","description":"Sort direction (ascending/descending)."},{"const":"desc","description":"Sort direction (ascending/descending)."}],"description":"Sort direction (ascending/descending)."}},"required":[],"description":"Request type for searching/filtering/paginating tags assigned to discussBoard posts. All properties are optional, supporting advanced UI queries and audit/admin usage. Refer to business/ERD documentation for valid usage scenarios."},"IDiscussBoardPostTag":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key. Unique identifier for this post-tag association. This field is auto-generated by the database and references the assignment record."},"post_id":{"type":"string","format":"uuid","description":"Reference to the post to which this tag is assigned. Corresponds to discuss_board_posts.id. This property establishes the post context of the tag assignment."},"tag_id":{"type":"string","format":"uuid","description":"Reference to the tag entity (by UUID). Indicates which tag is attached to the referenced post. Must be unique (see unique constraint [post_id, tag_id])."},"created_at":{"type":"string","format":"date-time","description":"The timestamp when the tag assignment was created. Represents the creation date and is recorded in UTC."}},"required":["id","post_id","tag_id","created_at"],"description":"Represents a join relationship assigning a tag to a specific post in the discussion board system. Used for topic categorization, search filtering, and analytics. Follows the business logic requirement that each post can have up to 5 unique tags, and each tag can be assigned to multiple posts."},"IDiscussBoardPostTag.ICreate":{"type":"object","properties":{"tag_id":{"type":"string","format":"uuid","description":"UUID of the tag to assign to a post. In create requests, the post_id is derived from the path parameter. This value must reference a valid tag as defined in platform configuration."}},"required":["tag_id"],"description":"Request body schema for assigning a new tag to a post. Contains only the tag_id, as post_id is inferred from the REST API route/path. The same tag may not be assigned multiple times to the same post."},"IDiscussBoardPostEditHistory.IRequest":{"type":"object","properties":{"page":{"type":"integer","description":"Page number for pagination. The index is 1-based; the default is the first page if not provided."},"limit":{"type":"integer","description":"Maximum number of records per page for pagination. Typical values are 20, 50, 100. Default determined by system policy."},"editor_id":{"type":"string","format":"uuid","description":"UUID of the member who made edits. Used to filter for edit histories by a specific user."},"edit_timestamp_from":{"type":"string","format":"date-time","description":"Filter for edit histories occurring at or after this UTC timestamp."},"edit_timestamp_to":{"type":"string","format":"date-time","description":"Filter for edit histories occurring at or before this UTC timestamp."}},"required":[],"description":"Request payload for searching, filtering, or paginating post edit histories. Used to narrow results for audit/history UIs and moderation actions."},"IDiscussBoardPostEditHistory":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary Key. Unique identifier for the post edit history entry. Auto-generated per edit snapshot."},"post_id":{"type":"string","format":"uuid","description":"The post's UUID for which this edit history record applies. References discuss_board_posts.id."},"editor_id":{"type":"string","format":"uuid","description":"The UUID of the member who performed this edit. References discuss_board_members.id."},"edited_title":{"type":"string","description":"Snapshot of post title after the edit. Required for historical comparison and rollback support."},"edited_body":{"type":"string","description":"Snapshot of post body/content after the edit. Used for audit purposes, viewing edit deltas, and supporting user review."},"edit_reason":{"type":"string","description":"Optional reason/annotation provided by the editor describing the nature of the change, for business compliance and transparency."},"edit_timestamp":{"type":"string","format":"date-time","description":"UTC timestamp when the edit occurred, required for audit and timeline history."}},"required":["id","post_id","editor_id","edited_title","edited_body","edit_timestamp"],"description":"Represents a point-in-time snapshot of post content captured during edit, for compliance, rollback, and moderation review. Each record details the edited title and body, the editor, rationale, and precise timestamp."},"IDiscussBoardComment.IRequest":{"type":"object","properties":{"page":{"type":"integer","description":"Page number for pagination. 1-based index. Used to specify the result window for large comment collections."},"limit":{"type":"integer","description":"Number of comments per page in paginated responses. Helps manage UI loads and response size."},"author_member_id":{"type":"string","format":"uuid","description":"UUID of the member who authored the comment. Used to filter comments to a specific user's contributions."},"parent_id":{"type":"string","format":"uuid","description":"UUID of the parent comment (for replies). If provided, restricts results to threaded/nested replies of a parent."},"content_q":{"type":"string","description":"Optional full-text search term to filter comments containing specific keywords or phrases."},"created_at_from":{"type":"string","format":"date-time","description":"Optional UTC date/time filter to include only comments created after the specified timestamp."},"created_at_to":{"type":"string","format":"date-time","description":"Optional UTC date/time filter to include only comments created up to the specified timestamp."},"status":{"type":"string","description":"Business status of the comment (such as 'active', 'deleted', or 'under_review'). Used for searching comment workflow or moderation status."},"depth":{"type":"integer","description":"Depth of the comment in thread hierarchy (0 for top-level comments). Used to filter comments by nesting level."},"is_locked":{"type":"boolean","description":"If true, restricts results to locked or moderation-locked comments."},"deleted":{"type":"boolean","description":"If true, includes only soft-deleted comments; if false, includes only active comments; if not supplied, includes all."}},"required":[],"description":"Request payload for searching and paginating comment objects. Enables filtering by author, parent, content, status, date, and moderation state."},"IDiscussBoardComment":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"The unique identifier (UUID) for this comment, referencing the primary key in the discuss_board_comments table. Used for all comment-level operations and foreign key relations."},"discuss_board_post_id":{"type":"string","format":"uuid","description":"The UUID of the post that this comment is associated with. Points to the parent post via discuss_board_posts."},"parent_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"If this comment is a reply, this is the UUID of the parent comment. Nullable, and null for top-level comments."},"author_member_id":{"type":"string","format":"uuid","description":"The UUID of the member who authored this comment. References discuss_board_members.id."},"content":{"type":"string","description":"The body/content of the comment. Must conform to business rules (e.g., min 2, max 2,000 chars, subject to forbidden words filtering)."},"depth":{"type":"integer","description":"Indicates the nesting level for this comment. 0 for top-level, 1+ for replies, as managed by business logic."},"is_locked":{"type":"boolean","description":"A flag indicating whether the comment is locked (cannot be edited or deleted). Set by business logic due to moderation, expiration, or other reasons."},"status":{"type":"string","description":"The workflow/business status of the comment (e.g., 'active', 'under_review', 'deleted'). Used in moderation and UI display."},"created_at":{"type":"string","format":"date-time","description":"Timestamp (UTC, ISO8601) of when this comment was created."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp (UTC, ISO8601) of when this comment was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp (UTC, ISO8601, nullable) when this comment was soft-deleted for compliance/audit. Null if comment is active."}},"required":["id","discuss_board_post_id","author_member_id","content","depth","is_locked","status","created_at","updated_at"],"description":"Represents a single comment under a post in discussBoard. Contains primary identifiers, parentage for nested replies, author metadata, workflow controls (locked, deleted, status), and audit timestamps. Follows strict data integrity and audit patterns as required by moderation and compliance requirements."},"IDiscussBoardComment.ICreate":{"type":"object","properties":{"content":{"type":"string","description":"Required body content for the new comment (2–2,000 characters enforced by business rules and forbidden words filtering)."},"parent_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional UUID for the parent comment if this is a reply; null for top-level comments."}},"required":["content"],"description":"Payload required to create a new comment under a post. Only the content and (optional) parent reference are accepted. The post association is implied by the containing endpoint."},"IDiscussBoardComment.IUpdate":{"type":"object","properties":{"content":{"type":"string","description":"The new body/content for the comment; business logic enforces forbidden word filtering, min/max lengths, and edit window constraints."}},"required":[],"description":"Fields permitted for updating a comment. Only body/content is editable; other fields are managed by server logic due to workflow or moderation."},"IDiscussBoardCommentEditHistory.IRequest":{"type":"object","properties":{"page":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Optional page number for result pagination. Must be a positive integer."},"limit":{"oneOf":[{"type":"integer"},{"type":"null"}],"description":"Optional limit for page size; defines how many records to retrieve per invocation."},"editor_member_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Filter by the UUID of the member who edited the comment (nullable)."},"created_at_from":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter edit histories to those created after this ISO 8601 timestamp (UTC, nullable)."},"created_at_to":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Filter edit histories to those created before this ISO 8601 timestamp (UTC, nullable)."}},"required":[],"description":"Parameters for searching, filtering, and paginating edit history events for a specific comment. Used for audit trails and UI review, supports advanced filtering."},"IDiscussBoardCommentEditHistory":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier (UUID) for this comment edit history record."},"discuss_board_comment_id":{"type":"string","format":"uuid","description":"UUID of the comment whose history this record belongs to."},"editor_member_id":{"type":"string","format":"uuid","description":"UUID of the member who performed this edit event."},"previous_content":{"type":"string","description":"Snapshot of the comment content prior to this edit. Used for audit, rollback, and UI history display."},"previous_status":{"type":"string","description":"Value of the comment's business status field prior to the edit (e.g., 'active', 'under_review', 'deleted')."},"editor_note":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional note provided by the editor for this edit (nullable). UI/audit only."},"created_at":{"type":"string","format":"date-time","description":"Timestamp (UTC, ISO8601) of when this edit event was recorded."}},"required":["id","discuss_board_comment_id","editor_member_id","previous_content","previous_status","created_at"],"description":"Audit record for a single edit event performed on a comment. Captures the previous content, status, editor identity, and optional rationale or context note. Enables deep compliance and granular rollback/views for end-user and moderator history screens."},"IDiscussBoardCommentDeletionLog.IRequest":{"type":"object","properties":{"page":{"type":"integer","description":"Page number for paginated results. Optional. Defaults to first page if not specified."},"limit":{"type":"integer","description":"Number of records per page (pagination limit). Optional."},"actor_user_account_id":{"type":"string","format":"uuid","description":"UUID of the user account who performed the deletion. Used for filtering logs to a specific actor."},"discuss_board_comment_id":{"type":"string","format":"uuid","description":"UUID of the associated comment whose deletion log is being queried."},"deletion_reason":{"type":"string","description":"Deletion reason, such as 'self_delete', 'moderation_violation', 'admin_enforcement'. Used for filtering logs by reason."},"deleted_at_from":{"type":"string","format":"date-time","description":"RFC3339 timestamp filtering for start of deleted_at range."},"deleted_at_to":{"type":"string","format":"date-time","description":"RFC3339 timestamp filtering for end of deleted_at range."}},"required":[],"description":"Request schema for searching or filtering comment deletion logs in the audit tables. Enables pagination, filtering, and advanced audit review of who deleted which comments under various policy scenarios."},"IDiscussBoardCommentDeletionLog":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key for the deletion log record. Uniquely identifies the audit entry."},"discuss_board_comment_id":{"type":"string","format":"uuid","description":"UUID of the associated comment that was deleted. Corresponds to discuss_board_comments.id."},"actor_user_account_id":{"type":"string","format":"uuid","description":"UUID of the user account who performed the deletion, traced back to accountability requirements."},"deletion_reason":{"type":"string","description":"Business/policy reason for the deletion (e.g., 'self_delete', 'moderation_violation', 'admin_enforcement'). Required for audit and compliance review."},"actor_note":{"type":"string","description":"Optional annotation or note by the deleting actor. For compliance, user-facing, or appeal purposes."},"deleted_at":{"type":"string","format":"date-time","description":"RFC3339 UTC timestamp when the deletion was performed. For audit, retention, and dispute resolution."}},"required":["id","discuss_board_comment_id","actor_user_account_id","deletion_reason","deleted_at"],"description":"Audit log entry for a comment deletion event on the discussion board. Documents who performed the deletion, target comment, reason, optional notes, and deletion timestamp. Designed for audit, compliance, appeals, and transparency workflows. Data is immutable and never edited after creation."},"IDiscussBoardPostReaction.IRequest":{"type":"object","properties":{"page":{"type":"integer","description":"Page number for paginated results. Optional; defaults to first page."},"limit":{"type":"integer","description":"Number of records per page (pagination limit). Optional."},"discuss_board_member_id":{"type":"string","format":"uuid","description":"Filter: UUID of the reacting member."},"discuss_board_post_id":{"type":"string","format":"uuid","description":"Filter: UUID of the target post which received the reaction."},"reaction_type":{"oneOf":[{"const":"like","description":"Type of reaction. Must be either 'like' or 'dislike'."},{"const":"dislike","description":"Type of reaction. Must be either 'like' or 'dislike'."}],"description":"Type of reaction. Must be either 'like' or 'dislike'."},"created_at_from":{"type":"string","format":"date-time","description":"Filtering window: only reactions created after this RFC3339 timestamp."},"created_at_to":{"type":"string","format":"date-time","description":"Filtering window: only reactions created before this RFC3339 timestamp."},"updated_at_from":{"type":"string","format":"date-time","description":"Filtering window: only reactions updated after this RFC3339 timestamp."},"updated_at_to":{"type":"string","format":"date-time","description":"Filtering window: only reactions updated before this RFC3339 timestamp."}},"required":[],"description":"Request payload for paginated and filtered listing of post reaction events (likes/dislikes) tied to posts. Supports typical analytics and moderation audit use cases."},"IDiscussBoardPostReaction":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key for the post reaction record. Uniquely identifies this reaction entry in the audit system."},"discuss_board_member_id":{"type":"string","format":"uuid","description":"UUID of the member who performed the reaction. Foreign key to discuss_board_members.id."},"discuss_board_post_id":{"type":"string","format":"uuid","description":"UUID of the post the reaction is tied to. Foreign key to discuss_board_posts.id."},"reaction_type":{"oneOf":[{"const":"like","description":"Type of reaction. Either 'like' or 'dislike'."},{"const":"dislike","description":"Type of reaction. Either 'like' or 'dislike'."}],"description":"Type of reaction. Either 'like' or 'dislike'."},"created_at":{"type":"string","format":"date-time","description":"UTC timestamp of when the reaction was created. RFC3339 format."},"updated_at":{"type":"string","format":"date-time","description":"UTC timestamp of when the reaction was last updated (toggled, restored, or aggregated)."},"deleted_at":{"type":"string","format":"date-time","description":"When the reaction was soft-deleted, if applicable. Used for audit and compliance. Nullable."}},"required":["id","discuss_board_member_id","discuss_board_post_id","reaction_type","created_at","updated_at"],"description":"Represents a single like/dislike reaction on a post, including who submitted it, to which post, when, and status. Primary record for reaction analytics, moderation, audit, and forensic review. Supports toggling, soft-deletion, and full lifecycle tracking."},"IDiscussBoardPostReaction.ICreate":{"type":"object","properties":{"discuss_board_post_id":{"type":"string","format":"uuid","description":"UUID of the post the member is reacting to. Foreign key: discuss_board_posts.id."},"reaction_type":{"oneOf":[{"const":"like","description":"Type of reaction: must be 'like' or 'dislike'. Only one reaction per member/post pair allowed."},{"const":"dislike","description":"Type of reaction: must be 'like' or 'dislike'. Only one reaction per member/post pair allowed."}],"description":"Type of reaction: must be 'like' or 'dislike'. Only one reaction per member/post pair allowed."}},"required":["discuss_board_post_id","reaction_type"],"description":"Request body for creating a new post reaction (like/dislike) by a member. Business rules restrict to one reaction per post per member."},"IDiscussBoardPostReaction.IUpdate":{"type":"object","properties":{"reaction_type":{"oneOf":[{"const":"like","description":"Type of reaction for a post. Only 'like' or 'dislike' allowed."},{"const":"dislike","description":"Type of reaction for a post. Only 'like' or 'dislike' allowed."}],"description":"Type of reaction for a post. Only 'like' or 'dislike' allowed."},"updated_at":{"type":"string","format":"date-time","description":"New updated time for the post reaction, if provided (ISO8601)."}},"required":["reaction_type"],"description":"Data for updating an existing post reaction (like/dislike type). Only the 'reaction_type' property is mandatory. Follows the discuss_board_post_reactions schema for reaction modifications."},"IDiscussBoardCommentReaction.IRequest":{"type":"object","properties":{"discuss_board_comment_id":{"type":"string","format":"uuid","description":"If specified, only reactions to this comment will be returned."},"discuss_board_member_id":{"type":"string","format":"uuid","description":"If specified, only reactions by this member will be returned."},"reaction_type":{"oneOf":[{"const":"like","description":"Optional reaction type filter: 'like' or 'dislike'."},{"const":"dislike","description":"Optional reaction type filter: 'like' or 'dislike'."}],"description":"Optional reaction type filter: 'like' or 'dislike'."},"created_after":{"type":"string","format":"date-time","description":"Return reactions created at or after this ISO8601 timestamp."},"created_before":{"type":"string","format":"date-time","description":"Return reactions created at or before this ISO8601 timestamp."},"page":{"type":"integer","minimum":1,"description":"Page number for pagination (default 1)."},"limit":{"type":"integer","minimum":1,"maximum":100,"description":"Number of records per page (default 20, max 100)."}},"required":[],"description":"Request parameters for searching/filtering comment reactions (discuss_board_comment_reactions). Supports filtering by target comment, member, reaction type, date range, and paging."},"IDiscussBoardCommentReaction":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier (UUID) of the comment reaction."},"discuss_board_member_id":{"type":"string","format":"uuid","description":"UUID of member who reacted to the comment."},"discuss_board_comment_id":{"type":"string","format":"uuid","description":"UUID of comment receiving the reaction."},"reaction_type":{"oneOf":[{"const":"like","description":"Type of reaction: always either 'like' or 'dislike'. Only these two values allowed."},{"const":"dislike","description":"Type of reaction: always either 'like' or 'dislike'. Only these two values allowed."}],"description":"Type of reaction: always either 'like' or 'dislike'. Only these two values allowed."},"created_at":{"type":"string","format":"date-time","description":"ISO8601 timestamp when the reaction was created."},"updated_at":{"type":"string","format":"date-time","description":"ISO8601 timestamp of most recent update."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp for this reaction; null if never deleted."}},"required":["id","discuss_board_member_id","discuss_board_comment_id","reaction_type","created_at","updated_at"],"description":"Comment reaction entity as stored in discuss_board_comment_reactions. Links a member/user to a like/dislike on a comment. Supports audit and soft-delete."},"IDiscussBoardCommentReaction.ICreate":{"type":"object","properties":{"discuss_board_comment_id":{"type":"string","format":"uuid","description":"UUID of the comment to be reacted to."},"reaction_type":{"oneOf":[{"const":"like","description":"The reaction type (must be 'like' or 'dislike')."},{"const":"dislike","description":"The reaction type (must be 'like' or 'dislike')."}],"description":"The reaction type (must be 'like' or 'dislike')."}},"required":["discuss_board_comment_id","reaction_type"],"description":"Payload for creating a new reaction on a comment. Requires target comment UUID and 'like' or 'dislike' type."},"IDiscussBoardCommentReaction.IUpdate":{"type":"object","properties":{"reaction_type":{"oneOf":[{"const":"like","description":"Update the reaction type to 'like' or 'dislike'."},{"const":"dislike","description":"Update the reaction type to 'like' or 'dislike'."}],"description":"Update the reaction type to 'like' or 'dislike'."}},"required":["reaction_type"],"description":"Payload for updating an existing comment reaction's type (like/dislike)."},"IDiscussBoardContentReport.IRequest":{"type":"object","properties":{"reporter_member_id":{"type":"string","format":"uuid","description":"Filter: The unique identifier of the member who created the report. Use to search by reporter for audit, review, or self-service list."},"content_type":{"oneOf":[{"const":"post","description":"Filter: The type of content being reported ('post' or 'comment'). Enables focused moderation queue management."},{"const":"comment","description":"Filter: The type of content being reported ('post' or 'comment'). Enables focused moderation queue management."}],"description":"Filter: The type of content being reported ('post' or 'comment'). Enables focused moderation queue management."},"status":{"type":"string","description":"Filter: Workflow status for moderation triage (pending, under_review, resolved, escalated, etc.)."},"reason":{"type":"string","description":"Filter: Category keyword, free-text, or policy reason associated with the report."},"created_at_from":{"type":"string","format":"date-time","description":"Lower-bound ISO 8601 timestamp for filtering content reports by creation date."},"created_at_to":{"type":"string","format":"date-time","description":"Upper-bound ISO 8601 timestamp for filtering content reports by creation date."},"page":{"type":"integer","description":"Pagination: The result page (starts at 1)."},"limit":{"type":"integer","description":"Pagination: The maximum number of results per page."},"sort":{"type":"string","description":"Sorting order (e.g., 'created_at:desc', 'status:asc')."}},"required":[],"description":"Search, filter, sort, and pagination parameters for platform content reports. Used in moderation/triage UIs and compliance analytics."},"IDiscussBoardContentReport":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for this content report record."},"reporter_member_id":{"type":"string","format":"uuid","description":"Member UUID who submitted this content report."},"content_post_id":{"oneOf":[{"type":"string","format":"uuid","description":"If the report targets a post, this is the referenced post's UUID. Exactly one of content_post_id/content_comment_id is present."},{"type":"null"}],"description":"If the report targets a post, this is the referenced post's UUID. Exactly one of content_post_id/content_comment_id is present."},"content_comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"If the report targets a comment, this is the referenced comment's UUID. Exactly one of content_post_id/content_comment_id is present."},{"type":"null"}],"description":"If the report targets a comment, this is the referenced comment's UUID. Exactly one of content_post_id/content_comment_id is present."},"content_type":{"oneOf":[{"const":"post","description":"Type of content being reported ('post' or 'comment'). Drives resolution workflow."},{"const":"comment","description":"Type of content being reported ('post' or 'comment'). Drives resolution workflow."}],"description":"Type of content being reported ('post' or 'comment'). Drives resolution workflow."},"reason":{"type":"string","description":"Reporter-provided explanation, freeform text, or reason code for the content report. Policy requires max 200 chars."},"status":{"type":"string","description":"Moderation workflow state. (pending, under_review, resolved, escalated)."},"moderation_action_id":{"oneOf":[{"type":"string","format":"uuid","description":"UUID of the moderation action resolving this report, if any. Nullable if not yet resolved or linked."},{"type":"null"}],"description":"UUID of the moderation action resolving this report, if any. Nullable if not yet resolved or linked."},"created_at":{"type":"string","format":"date-time","description":"When the report was created (ISO 8601 UTC)."},"updated_at":{"type":"string","format":"date-time","description":"When the report was last updated."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Soft deletion timestamp for the report, if removed for audit/compliance."},{"type":"null"}],"description":"Soft deletion timestamp for the report, if removed for audit/compliance."}},"required":["id","reporter_member_id","content_type","reason","status","created_at","updated_at"],"description":"A single content report record. Members report inappropriate post or comment; admins/moderators resolve, escalated, or dismiss."},"IDiscussBoardContentReport.ICreate":{"type":"object","properties":{"content_type":{"oneOf":[{"const":"post","description":"Type of content being reported ('post' or 'comment'). Exactly one of content_post_id/content_comment_id must be present."},{"const":"comment","description":"Type of content being reported ('post' or 'comment'). Exactly one of content_post_id/content_comment_id must be present."}],"description":"Type of content being reported ('post' or 'comment'). Exactly one of content_post_id/content_comment_id must be present."},"content_post_id":{"oneOf":[{"type":"string","format":"uuid","description":"UUID of the post being reported. Required if content_type is 'post'. Must be omitted/null if reporting a comment."},{"type":"null"}],"description":"UUID of the post being reported. Required if content_type is 'post'. Must be omitted/null if reporting a comment."},"content_comment_id":{"oneOf":[{"type":"string","format":"uuid","description":"UUID of the comment being reported. Required if content_type is 'comment'. Must be omitted/null if reporting a post."},{"type":"null"}],"description":"UUID of the comment being reported. Required if content_type is 'comment'. Must be omitted/null if reporting a post."},"reason":{"type":"string","maxLength":200,"description":"Reporter-provided justification for report. Policy: max 200 chars, must cite violation or rationale."}},"required":["content_type","reason"],"description":"Member payload for creating a new content report. Must provide content_type, target, and reason. Business logic enforces mutually exclusive content_post_id/content_comment_id."},"IDiscussBoardContentReport.IUpdate":{"type":"object","properties":{"status":{"type":"string","description":"New workflow status. (pending, under_review, resolved, dismissed, escalated, etc.)."},"reason":{"type":"string","description":"Optional additional moderator/admin notes, rationale, or status annotation. (Not reporter's reason.)"},"moderation_action_id":{"type":"string","format":"uuid","description":"UUID linking to the moderation action resolving the report, if status indicates resolution."}},"required":[],"description":"Fields for updating a content report, typically in the moderation workflow. Used for status changes, workflow notes, or resolution linkage."},"IDiscussBoardModerationAction.IRequest":{"type":"object","properties":{"moderator_id":{"type":"string","format":"uuid","description":"Filter: Unique identifier (UUID) of the moderator who performed the action."},"target_member_id":{"type":"string","format":"uuid","description":"Filter: Target member UUID who was the subject of the moderation action."},"target_post_id":{"type":"string","format":"uuid","description":"Filter: UUID of the post targeted by the action (if any)."},"target_comment_id":{"type":"string","format":"uuid","description":"Filter: UUID of the comment targeted by the action (if any)."},"action_type":{"type":"string","description":"Filter: Type of moderation action (remove_content, suspend_user, warn, escalate, etc.)."},"status":{"type":"string","description":"Filter: Workflow state of the action (completed, pending, escalated, in_review, etc.)."},"created_at_from":{"type":"string","format":"date-time","description":"Lower-bound timestamp for moderation actions created after this date."},"created_at_to":{"type":"string","format":"date-time","description":"Upper-bound timestamp for moderation actions created before this date."},"page":{"type":"integer","description":"Pagination: the result page to retrieve."},"limit":{"type":"integer","description":"Pagination: number of records per page."},"sort":{"type":"string","description":"Sorting order for results, e.g., 'created_at:desc'."}},"required":[],"description":"Search, filter, and pagination criteria for moderation actions. Used for moderation, audit, and compliance analytics."},"IDiscussBoardModerationAction":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique moderation action record identifier (UUID; primary key in discuss_board_moderation_actions).\n\nThis uniquely identifies this moderation action and is used system-wide for referencing moderation workflow history, appeals, and audit logs."},"moderator_id":{"type":"string","format":"uuid","description":"UUID of the moderator (or administrator) who performed this action. References discuss_board_moderators.id or discuss_board_administrators.id as applicable.\n\nThis field is crucial for audit, compliance, and history. It links the action back to a privileged actor having appropriate role at the time of action."},"target_member_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"UUID of the member who is the direct target of this action (e.g., user being warned, suspended, or banned). Optional for post/comment moderation actions.\n\nNull if the moderation was not performed directly on a user account or if the specific target was a content item only."},"target_post_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"UUID of the post affected. References discuss_board_posts.id. Nullable for non-post moderation actions."},"target_comment_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"UUID of the comment affected. References discuss_board_comments.id. Nullable for non-comment moderation actions."},"appeal_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Optional UUID of the related appeal if this action is a response to or is linked with a user appeal. References discuss_board_appeals.id."},"action_type":{"type":"string","description":"Type of moderation action performed, e.g., 'remove_content', 'warn', 'suspend_user', 'ban_user', 'escalate'.\n\nThis field defines business logic/rules for the specific remediation or outcome enforced by the action."},"action_reason":{"type":"string","description":"Rationale or justification for the moderation action, provided by the moderator. This field is shown to the affected user (where appropriate) and is part of the audit log for legal/compliance review."},"decision_narrative":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional detailed narrative composed by the moderator, providing context, situational analysis, or additional business notes for the moderation action. May be used for later review, appeals, or transparency."},"status":{"type":"string","description":"Workflow status of this moderation action. E.g., 'active', 'reversed', 'escalated', 'completed', 'pending_applied'.\n\nControls business progression and is validated against allowed set of statuses."},"created_at":{"type":"string","format":"date-time","description":"UTC ISO 8601 timestamp when this moderation action was first recorded in the system. Used for audit ordering, time-window queries, and compliance reviews."},"updated_at":{"type":"string","format":"date-time","description":"UTC ISO 8601 timestamp when this moderation action was last updated. Distinguishes edits or workflow/progression in moderation business logic."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft-delete timestamp for compliance/audit. If null, moderation action is active; else, it is logically removed from normal searches."}},"required":["id","moderator_id","action_type","action_reason","status","created_at","updated_at"],"description":"Represents a record of a specific moderation action performed by a moderator or administrator as part of policy enforcement on the discussBoard platform. Each record documents the actor, target(s), action details, rationale, business workflow state, timestamps, and optional appeal linkage.\n\nThis schema is foundational for audit, compliance review, workflow tracking, and user notification across all moderation interventions, supporting transparency and accountability under the business rules defined for the platform."},"IDiscussBoardModerationAction.ICreate":{"type":"object","properties":{"moderator_id":{"type":"string","format":"uuid","description":"UUID of the moderator (or administrator) performing the action. Must reference an active privileged user in discuss_board_moderators or discuss_board_administrators."},"target_member_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"(Optional) UUID of the member being targeted by this moderation action (e.g., for user-focused intervention such as warnings, suspensions). Nullable if the action is taken on content only."},"target_post_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"(Optional) UUID of the affected post, if this action is taken on a post. Nullable when not applicable."},"target_comment_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"(Optional) UUID of the affected comment, if this action is focused on a comment. Nullable when not applicable."},"appeal_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"(Optional) UUID of the related appeal if this moderation action is in response to an appeal workflow. Nullable when not linked to appeal process."},"action_type":{"type":"string","description":"Type of moderation action performed, e.g., 'remove_content', 'warn', 'suspend_user', 'ban_user', 'escalate'. Must be supported by discussBoard's moderation policy/business rules."},"action_reason":{"type":"string","description":"Short justification for the action, usually shown to the affected party and used for compliance review. Must fulfill audit/logging policies."},"decision_narrative":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional extended reasoning, analysis, or explanation by the moderator to provide further context for the audit/history."},"status":{"type":"string","description":"Initial or current business workflow status assigned to this moderation action ('active', 'pending_applied', 'escalated', etc.)."}},"required":["moderator_id","action_type","action_reason","status"],"description":"Request schema for creating a new moderation action as part of content or user policy enforcement. Used primarily by moderators and administrators to record official intervention in response to content reports or user violations.\n\nAll references must exist in the platform’s tables, and the status and action_type fields must conform to supported business workflow."},"IDiscussBoardModerationAction.IUpdate":{"type":"object","properties":{"action_type":{"type":"string","description":"(Optional) New moderation action type. Used for changing the type of policy being enforced or transitioning to another business workflow state. Changes are subject to business rule validation."},"action_reason":{"type":"string","description":"(Optional) New rationale for the moderation action or status change. Goes into the compliance log for audit tracking."},"decision_narrative":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"(Optional) Updated or additional business explanation for the decision or workflow transition."},"status":{"type":"string","description":"(Optional) New workflow status for the moderation action (such as when being escalated, completed, or reversed). Supported statuses are validated by business logic."},"appeal_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"(Optional) UUID of the linked appeal if workflow permits updating the connected appeal record."}},"required":[],"description":"Request schema for updating/modifying details of a moderation action, typically as part of workflow transitions, escalations, reversals, or to add further reasoning. All updated fields are subject to full audit."},"IDiscussBoardAppeal.IRequest":{"type":"object","properties":{"moderation_action_id":{"type":"string","format":"uuid","description":"Filter by the specific moderation action this appeal targets/explains. Used to find appeals for a workflow history or compliance investigation."},"appellant_member_id":{"type":"string","format":"uuid","description":"Filter for appeals by a specific member (the appellant). Enables searching appeals submitted by a particular user."},"status":{"type":"string","description":"Filter by appeal workflow status (such as 'pending', 'in_review', 'accepted', 'denied', 'closed')."},"created_at_from":{"type":"string","format":"date-time","description":"Lower bound for search by creation time of appeal (inclusive, ISO 8601). Used for date-range filtering."},"created_at_to":{"type":"string","format":"date-time","description":"Upper bound for search by creation time of appeal (inclusive, ISO 8601)."},"page":{"type":"integer","description":"Results page number. Used for pagination (1-based)."},"limit":{"type":"integer","description":"Maximum number of results to return per page. Used for pagination control."},"sort":{"type":"string","description":"Sort direction/key for results (e.g., 'created_at_desc', 'status_asc')."}},"required":[],"description":"Request schema for searching/filtering appeals against moderation actions. Used by moderators, administrators, or the appellant to locate and review appeals submitted for workflow review, audit, or compliance purposes.\n\nSupports searching by moderation action, appellant, status, created at date range, and full paging/sorting controls."},"IDiscussBoardAppeal":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier (UUID) for this appeal record. Primary key, references discuss_board_appeals.id."},"moderation_action_id":{"type":"string","format":"uuid","description":"The moderation action (by ID) being appealed. Required for workflow association and compliance narratives."},"appellant_member_id":{"type":"string","format":"uuid","description":"UUID of the member submitting the appeal. Distinct from original moderator/admin."},"appeal_rationale":{"type":"string","description":"Freeform explanation/rationale provided by the appellant for the appeal. Used by moderators/admins during review. Max length as enforced by business rule."},"status":{"type":"string","description":"Appeal workflow status. E.g., 'pending', 'in_review', 'accepted', 'denied', 'escalated', 'closed'.\n\nOnly valid statuses per business logic are allowed."},"resolution_notes":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional administrative notes entered on appeal resolution. Documents the outcome for compliance and user transparency."},"created_at":{"type":"string","format":"date-time","description":"UTC ISO 8601 timestamp when this appeal was created. Used in audit/history and sorting workflows."},"updated_at":{"type":"string","format":"date-time","description":"UTC ISO 8601 timestamp when this appeal was last updated (e.g., review, status transition, or evidence submission)."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft-deletion timestamp, null if active, otherwise record is considered logically removed (for compliance/data retention)."}},"required":["id","moderation_action_id","appellant_member_id","appeal_rationale","status","created_at","updated_at"],"description":"Represents a user's appeal submitted against a specific moderation action performed on the discussBoard platform. Links to the moderation action (by ID), contains the appellant's rationale, tracks business workflow status, and provides resolution notes for transparency.\n\nThis schema documents the entire appeal lifecycle for both business audit and regulatory compliance, supporting workflow review, timeline tracing, and end-user notification."},"IDiscussBoardAppeal.ICreate":{"type":"object","properties":{"moderation_action_id":{"type":"string","format":"uuid","description":"The unique identifier for the moderation action being appealed.\n\nThis must reference an existing moderation action record as required by the business context.\n\nRequired for linking the appeal to the correct moderation workflow for review and audit purposes."},"appeal_rationale":{"type":"string","description":"The rationale or argument for the appeal provided by the member.\n\nThis should articulate in detail why the moderation action should be reconsidered, and may include references to platform policies, evidence, or additional context not previously considered during initial moderation.\n\nHelps administrators or reviewers to process the appeal fairly and transparently."}},"required":["moderation_action_id","appeal_rationale"],"description":"Payload for submitting a new appeal by a member against a specific moderation action.\n\nReferences a moderation action via UUID and provides a business rationale for the appeal. This payload enables users to initiate a review/appeals process according to the discussBoard platform's compliance and fairness requirements.\n\nSubmission of appeals is closely regulated per moderation/appeals workflow and audit process."},"IDiscussBoardAppeals.IUpdate":{"type":"object","properties":{"appeal_rationale":{"type":"string","description":"Updated rationale or additional evidence presented for reconsideration of the appeal.\n\nAllows the appellant or system administrator to present a revised argument or supporting information for the appeal workflow.\n\nThis field is important in the iterative appeals process, providing users an opportunity to strengthen their case with further detail."},"status":{"type":"string","description":"Status of the appeal workflow: pending, in_review, accepted, denied, closed, escalated, etc.\n\nUpdates to status trigger changes in backend workflow, affect audit logging, and may initiate notifications or other business logic.\n\nSystem typically restricts status transitions to defined workflows for legal and business compliance."},"resolution_notes":{"type":"string","description":"Administrative notes or rationale from platform staff or moderators upon review and resolution of the appeal.\n\nCaptured during the appeals process to ensure full transparency, audit traceability, and user notification of outcome and reasoning.\n\nResolution notes are retained for compliance and regulatory defense."}},"required":[],"description":"Payload for updating or responding to an existing appeal record within the discussBoard platform.\n\nPermits revision of the appeal rationale, status transitions according to the workflow (pending, in_review, resolved, etc.), and provides slots for administrative resolution notes."},"IDiscussBoardAppeals":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"The unique identifier of the appeal record in the discuss_board_appeals table."},"moderation_action_id":{"type":"string","format":"uuid","description":"The identifier for the moderation action that this appeal references.\n\nPermits backward pointer for auditing workflows and tracking the lifecycle of moderation and appeals."},"appellant_member_id":{"type":"string","format":"uuid","description":"The member account identifier who submitted the appeal.\n\nUsed to track appeals per user, allowing users, moderators, or administrators to retrieve history and administer process privileges."},"appeal_rationale":{"type":"string","description":"The detailed rationale for the appeal provided at creation or after subsequent updates.\n\nEnables moderators and administrators to review, assess, and respond fairly to the appellant's argument."},"status":{"type":"string","description":"Current status of the appeal in the workflow: e.g. pending, in_review, accepted, denied, closed, or escalated.\n\nGoverns the state machine for the appeals process and ensures compliance with defined escalation and resolution rules."},"resolution_notes":{"oneOf":[{"type":"string","description":"Business or administrative notes entered at appeal review/closure describing how the decision was made and any relevant regulatory defense or narrative.\n\nOptional, typically filled by review staff or moderators."},{"type":"null"}],"description":"Business or administrative notes entered at appeal review/closure describing how the decision was made and any relevant regulatory defense or narrative.\n\nOptional, typically filled by review staff or moderators."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when the appeal was initially submitted (ISO 8601 format, UTC).\n\nCritical for tracking the appeals window and timing compliance."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp when the appeal was last updated (ISO 8601, UTC).\n\nTriggers workflow logic and supports audit trail for all state changes, argument revisions, or outcome update events."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp when the appeal record was soft-deleted (for audit compliance), if applicable.\n\nNull if the record is still active."}},"required":["id","moderation_action_id","appellant_member_id","appeal_rationale","status","created_at","updated_at"],"description":"Schema for an individual appeal record in the discuss_board_appeals table, covering all properties managed in the workflow and audit process.\n\nThis is returned on detail or list endpoints allowing platform staff or the appellant to view all fields, history, and status for a specific appeal. Integrates with the platform's compliance, fairness, and workflow frameworks."},"IDiscussBoardModerationLogs.IRequest":{"type":"object","properties":{"event_type":{"type":"string","description":"Type of moderation log event to filter by: event types include report_received, action_taken, appeal_created, status_update, escalation, etc.\n\nPermits result reduction by event category for audit, review, and forensic investigation."},"event_details":{"type":"string","description":"Free text full-text search within the event_details field of moderation log entries.\n\nSupports discovery and filtering of logs with matching narrative, escalation keywords, or identifiers."},"created_after":{"type":"string","format":"date-time","description":"Filter logs by entries created at or after this specific ISO 8601 timestamp (UTC).\n\nUseful for bounding audit reviews or discovering changes within a compliance window."},"created_before":{"type":"string","format":"date-time","description":"Filter logs by entries created at or before this ISO 8601 timestamp (UTC).\n\nUsed together with created_after to define a time window for temporal analysis."},"page":{"type":"integer","description":"Pagination: results page number (1-based).\n\nSupports frontend/UI pagination; default and max-values enforced in business logic."},"limit":{"type":"integer","description":"Pagination: number of results per page (default, min, max as per business constraints).\n\nSmaller limits improve response time and reduce server load. Used in conjunction with page for result batching."}},"required":[],"description":"Payload to search, filter, or page through moderation log audit entries related to a specific moderation action or workflow.\n\nSupports filtering by event type, full-text search within event_details, and date-window bounding, as well as pagination controls for large action histories.\nDefined to enable compliance, deep-dive forensic, and operational workflow scenarios."},"IDiscussBoardModerationLogs":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"The unique identifier for the moderation log event."},"actor_member_id":{"oneOf":[{"type":"string","format":"uuid","description":"The user (member/moderator/admin) who performed/logged this moderation action.\n\nNull/undefined when the action was performed by the system/automation or mapping to legacy data."},{"type":"null"}],"description":"The user (member/moderator/admin) who performed/logged this moderation action.\n\nNull/undefined when the action was performed by the system/automation or mapping to legacy data."},"related_action_id":{"oneOf":[{"type":"string","format":"uuid","description":"Reference to the related moderation action or event (UUID).\n\nNull when no related moderation action or the log is a child of a different object type."},{"type":"null"}],"description":"Reference to the related moderation action or event (UUID).\n\nNull when no related moderation action or the log is a child of a different object type."},"related_appeal_id":{"oneOf":[{"type":"string","format":"uuid","description":"Reference to a related appeal that this action is part of.\n\nNull when the event is unrelated to an appeal."},{"type":"null"}],"description":"Reference to a related appeal that this action is part of.\n\nNull when the event is unrelated to an appeal."},"related_report_id":{"oneOf":[{"type":"string","format":"uuid","description":"Reference to an underlying content report ID that triggered this event.\n\nNull for direct action logs."},{"type":"null"}],"description":"Reference to an underlying content report ID that triggered this event.\n\nNull for direct action logs."},"event_type":{"type":"string","description":"Event type code: e.g. report_received, action_taken, appeal_created, status_update, escalation, etc.\n\nControls downstream workflow, filtering, and compliance audit behavior.\nMust be a valid system/business event value."},"event_details":{"oneOf":[{"type":"string","description":"Free-form narrative or metadata about this event (description, rationale, context, escalation reason, or business payload).\n\nIntended for auditing, investigation, workflow replays, and compliance defense. Can include user/system explanation or investigation notes."},{"type":"null"}],"description":"Free-form narrative or metadata about this event (description, rationale, context, escalation reason, or business payload).\n\nIntended for auditing, investigation, workflow replays, and compliance defense. Can include user/system explanation or investigation notes."},"created_at":{"type":"string","format":"date-time","description":"Timestamp (ISO 8601 UTC) when this moderation log event was recorded.\n\nImportant for audit trail, compliance records, and event ordering."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft-deletion timestamp for this moderation event, if applicable.\n\nNull if still active; otherwise indicates record is hidden for compliance without removal from backend database. Required for GDPR-style legal requirements or error recovery."}},"required":["id","event_type","created_at"],"description":"Schema for a single moderation log entry (discuss_board_moderation_logs), containing workflow, escalation, and audit data for every event during moderation review or appeals.\nReturned as part of moderation action audit history, compliance reviews, or detail views."},"IDiscussBoardModerationLogs.ICreate":{"type":"object","properties":{"actor_member_id":{"type":"string","format":"uuid","description":"Optional. The UUID of the actor (member/moderator/admin) responsible for this moderation log event. May be null for system events or escalations."},"related_action_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optional. The UUID of the moderation action related to this event log. Required for anchoring logs in workflow investigations."},{"type":"null"}],"description":"Optional. The UUID of the moderation action related to this event log. Required for anchoring logs in workflow investigations."},"related_appeal_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optional. The UUID of the appeal associated with this log event, if part of an appeal workflow."},{"type":"null"}],"description":"Optional. The UUID of the appeal associated with this log event, if part of an appeal workflow."},"related_report_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optional. The UUID of the content report associated with this moderation log, if traceable to a user-submitted report."},{"type":"null"}],"description":"Optional. The UUID of the content report associated with this moderation log, if traceable to a user-submitted report."},"event_type":{"type":"string","description":"Type of moderation event (e.g., 'report_received', 'action_taken', 'status_update', 'escalation', 'appeal_created'). This is a business context field describing log purpose."},"event_details":{"oneOf":[{"type":"string","description":"More detailed context or narrative description of this moderation log business event. Useful for audit, evidentiary, or compliance trails."},{"type":"null"}],"description":"More detailed context or narrative description of this moderation log business event. Useful for audit, evidentiary, or compliance trails."}},"required":["event_type"],"description":"Creation payload for a new moderation log record in the discussBoard moderation workflow.\n\nReferences key moderation workflow objects (actions, appeals, reports) and describes the business event. May be used by moderators or administrators in compliance with platform policies. All fields clarified by Prisma schema."},"IDiscussBoardModerationLogs.IUpdate":{"type":"object","properties":{"event_details":{"oneOf":[{"type":"string","description":"Optional narrative modification for this log event. Used for clarifying or expanding business context, compliance, or status explanations."},{"type":"null"}],"description":"Optional narrative modification for this log event. Used for clarifying or expanding business context, compliance, or status explanations."}},"required":[],"description":"Update payload for an existing discussBoard moderation log. Allows addition or modification of event details/narrative to enhance audit/compliance record. Only event_details is mutable after creation; other references are immutable for strict audit integrity."},"IDiscussBoardNotifications.IRequest":{"type":"object","properties":{"user_account_id":{"type":"string","format":"uuid","description":"Optional. Target user for whom notification events are searched—often specified by administrator."},"event_type":{"type":"string","description":"Optional. Filter notifications by the event type (e.g., reply, moderation, system_alert)."},"delivery_channel":{"type":"string","description":"Optional. Notification delivery channel filter ('email', 'sms', 'push', 'in_app', or external integrations)."},"delivery_status":{"type":"string","description":"Optional. Notification delivery status filter (e.g., 'pending', 'delivered', 'failed', 'bounced', 'suppressed')."},"created_at_from":{"type":"string","format":"date-time","description":"Optional. Begin filter window for creation timestamp (ISO 8601 UTC). Used to restrict search window for audits."},"created_at_to":{"type":"string","format":"date-time","description":"Optional. End filter window for creation timestamp (ISO 8601 UTC)."},"page":{"type":"integer","minimum":1,"description":"Optional. Page number for pagination (1-indexed)."},"limit":{"type":"integer","minimum":1,"maximum":1000,"description":"Optional. Pagination limit per page (max 1000)."},"sort_by":{"type":"string","description":"Optional. Sort field for advanced result ordering (e.g., 'created_at')."},"sort_direction":{"oneOf":[{"const":"asc","description":"Optional. Sort direction: 'asc' for ascending, 'desc' for descending."},{"const":"desc","description":"Optional. Sort direction: 'asc' for ascending, 'desc' for descending."}],"description":"Optional. Sort direction: 'asc' for ascending, 'desc' for descending."}},"required":[],"description":"Request type for searching paginated discussBoard notification delivery logs. Supports advanced filtering, sorting, and pagination for audit, analytics, or compliance reviews. Maps all query semantics to appropriate Prisma schema columns."},"IDiscussBoardNotification":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Primary key UUID of the notification record in discuss_board_notifications."},"user_account_id":{"type":"string","format":"uuid","description":"Recipient user account for this notification, references discuss_board_user_accounts.id."},"source_post_id":{"oneOf":[{"type":"string","format":"uuid","description":"Optional UUID of the source post that triggered this notification. References discuss_board_posts.id."},{"type":"null"}],"description":"Optional UUID of the source post that triggered this notification. References discuss_board_posts.id."},"event_type":{"type":"string","description":"Type of notification event (e.g., 'reply', 'moderation', 'system_alert', 'password_reset'). Used for compliance/audit."},"delivery_channel":{"type":"string","description":"Notification delivery channel: 'email', 'sms', 'push', 'in_app', or external/webhook integrations."},"subject":{"type":"string","description":"Subject line or summary of the notification (required for email/SMS, optional for push/in_app). Enables search, audit, and event tracking."},"body":{"type":"string","description":"Main message content for the notification, may include renderable markup or localization."},"external_message_id":{"oneOf":[{"type":"string","description":"ID assigned to this notification by external delivery systems (e.g., SMTP, SMS gateway). Enables cross-system tracing, troubleshooting, and compliance audits."},{"type":"null"}],"description":"ID assigned to this notification by external delivery systems (e.g., SMTP, SMS gateway). Enables cross-system tracing, troubleshooting, and compliance audits."},"delivery_status":{"type":"string","description":"Current message delivery status—pending, delivered, failed, bounced, suppressed, etc. Managed by delivery workflow for analytics/audit."},"delivery_attempts":{"type":"integer","minimum":0,"description":"Count of delivery attempts for this notification. Used for retry management and compliance logs."},"delivered_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp of successful notification delivery (if completed), ISO 8601 UTC. Enables audit and analytics."},{"type":"null"}],"description":"Timestamp of successful notification delivery (if completed), ISO 8601 UTC. Enables audit and analytics."},"error_message":{"oneOf":[{"type":"string","description":"Detailed error from notification delivery system if failed/bounced. Required for troubleshooting and monitoring integrations."},{"type":"null"}],"description":"Detailed error from notification delivery system if failed/bounced. Required for troubleshooting and monitoring integrations."},"created_at":{"type":"string","format":"date-time","description":"Timestamp for notification creation (enqueue time), ISO 8601 UTC."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp for last update (status change, metadata fix), ISO 8601 UTC."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp if the notification is soft-deleted (retained for audit, hidden in ordinary UIs)."},{"type":"null"}],"description":"Timestamp if the notification is soft-deleted (retained for audit, hidden in ordinary UIs)."}},"required":["id","user_account_id","event_type","delivery_channel","subject","body","delivery_status","delivery_attempts","created_at","updated_at"],"description":"Detail record for a notification delivery event in discussBoard, mapping all key fields in discuss_board_notifications. Covers audit, troubleshooting, compliance, and user support requirements. All UUID, string, and datetime fields as defined by Prisma DB schema."},"IDiscussBoardIntegrationLog.IRequest":{"type":"object","properties":{"user_account_id":{"type":"string","format":"uuid","description":"Optional. Search filter for integration logs related to a particular user account (discuss_board_user_accounts.id)."},"integration_type":{"type":"string","description":"Optional. Filter events by integration type (e.g., 'notification_delivery', 'analytics', 'abuse_detection', 'partner_api', etc.)."},"integration_partner":{"type":"string","description":"Optional. Filter integration log entries by external partner/service name (e.g., 'SendGrid')."},"integration_status":{"type":"string","description":"Optional. Filter logs by integration status (e.g., 'pending', 'success', 'failed', 'retried', 'quarantined')."},"triggered_event":{"type":"string","description":"Optional. Filter by triggered event (e.g., 'post_created', 'comment_reported', etc.)."},"created_at_from":{"type":"string","format":"date-time","description":"Optional. Begin window for integration event timestamp (ISO 8601 UTC). Narrows query window for audit or search."},"created_at_to":{"type":"string","format":"date-time","description":"Optional. End window for integration event timestamp (ISO 8601 UTC)."},"page":{"type":"integer","minimum":1,"description":"Optional pagination—page number (1-indexed)."},"limit":{"type":"integer","minimum":1,"maximum":1000,"description":"Optional pagination—results per page (max 1000 to limit resource use)."},"sort_by":{"type":"string","description":"Optional. Field to sort integration log results by (e.g., 'created_at', 'integration_type')."},"sort_direction":{"oneOf":[{"const":"asc","description":"Optional. Sort order: 'asc' for ascending, 'desc' for descending."},{"const":"desc","description":"Optional. Sort order: 'asc' for ascending, 'desc' for descending."}],"description":"Optional. Sort order: 'asc' for ascending, 'desc' for descending."}},"required":[],"description":"Paginated/filterable search request for discussBoard external integration logs. All search parameters map to corresponding Prisma schema fields and business workflow context for flexible audit or compliance review."},"IDiscussBoardIntegrationLog":{"type":"object","description":"Integration log record reporting a specific interaction with an external partner API/platform or service.\n\nFields include all primary metadata, status, and audit fields needed for troubleshooting, analytics, and business compliance. Only those fields present in discuss_board_integration_logs table are included. Sensitive payloads may be redacted at UI or business layer as required.","properties":{"id":{"type":"string","format":"uuid","description":"Unique integration log entry ID.\n\nThis value is a UUID that uniquely identifies the integration event within the system for search, retrieval, and audit purposes. Referenced by external compliance and troubleshooting infrastructure."},"user_account_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"If the integration event is tied to a user action or initiated on behalf of a user, this field contains the UUID of the account. Null if system-level."},"integration_type":{"type":"string","description":"Type or category of the integration event (e.g., notification_delivery, analytics, partner_api, abuse_detection).\n\nCritical for filtering, audit, and compliance reporting."},"integration_partner":{"type":"string","description":"The external service or platform integrated (e.g., SendGrid, Twilio, GoogleAnalytics, etc.)."},"payload":{"type":"string","description":"Serialized business/request/response or context (e.g., JSON) documenting the full event payload for audit and troubleshooting.\n\nMay be redacted if sensitive. Generally JSON or structured text."},"integration_status":{"type":"string","description":"Current status of the integration operation (pending, success, failed, retried, quarantined, etc.)."},"external_reference_id":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"External provider-issued reference or job/message/transaction ID. Used to troubleshoot across systems."},"triggered_event":{"type":"string","description":"Business event triggering the integration (e.g., post_created, moderation_action, account_export, etc.)."},"error_message":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Optional error details (string, log message, or JSON) if failed."},"created_at":{"type":"string","format":"date-time","description":"UTC timestamp for when this integration log was created."},"updated_at":{"type":"string","format":"date-time","description":"UTC last modification timestamp."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Soft delete timestamp: non-null if the log is logically deleted for compliance/history."}},"required":["id","integration_type","integration_partner","payload","integration_status","triggered_event","created_at","updated_at"]},"IDiscussBoardGlobalAuditLog.IRequest":{"type":"object","description":"Filter, sorting, and pagination structure for searching platform global audit logs (discuss_board_global_audit_logs).\n\nContains only those filters supported directly by schema.","properties":{"actor_type":{"type":"string","description":"Type of actor (e.g., 'member', 'moderator', 'admin', 'guest', 'service') for event search filtering."},"actor_id":{"type":"string","description":"UUID of the actor for audit filtering (nullable for system events)."},"action_category":{"type":"string","description":"Event/action category search (e.g., 'post_edit', 'moderation_action')."},"target_table":{"type":"string","description":"Target table/entity name for event search (e.g., 'discuss_board_posts')."},"target_id":{"type":"string","description":"ID of the target entity in the audit log (UUID, optional)."},"created_from":{"type":"string","format":"date-time","description":"ISO8601 timestamp for minimum creation (inclusive for range filtering)."},"created_to":{"type":"string","format":"date-time","description":"ISO8601 timestamp for maximum creation (inclusive for range filtering)."},"event_description_search":{"type":"string","description":"Full-text search string for audit log event_description field."},"page":{"type":"integer","description":"Page number of results for pagination."},"limit":{"type":"integer","description":"Page size for result pagination."},"sort":{"type":"string","description":"Field and order for sorting (e.g., 'created_at desc')."}},"required":[]},"IDiscussBoardGlobalAuditLog":{"type":"object","description":"Full audit log record for global system or user event/action (discuss_board_global_audit_logs).\n\nCaptures all required metadata for system-wide audit, compliance, and forensic review scenarios. Strictly follows table and business logic definitions. Sensitive or non-standard fields are handled at business/app layer.","properties":{"id":{"type":"string","format":"uuid","description":"Unique audit log entry ID.\n\nGlobally unique event identifier (UUID). Referenced by other audits, compliance, and search infrastructure."},"actor_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"The unique identifier of the actor responsible for the audit event. May be null for system-initiated or anonymous events."},"actor_type":{"type":"string","description":"Type/class of actor (member, moderator, admin, guest, service/automation, etc.)."},"action_category":{"type":"string","description":"Main action/event type (e.g., post_edit, user_login, moderation_action, consent_update).\n\nUsed for classification and event-type filtering in queries."},"target_table":{"type":"string","description":"Target table/entity name for this event (e.g., discuss_board_posts, discuss_board_comments)."},"target_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"ID of the primary target entity/object for this event (UUID, nullable for system/meta events)."},"event_payload":{"oneOf":[{"type":"string"},{"type":"null"}],"description":"Serialized pre/post state or rationale/context information for the event (JSON or text, or null if not applicable)."},"event_description":{"type":"string","description":"Summary human-readable description documenting the event for display/search purposes."},"created_at":{"type":"string","format":"date-time","description":"ISO8601 timestamp for the event's creation (system time, immutable)."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Deletion timestamp for the log event; present if soft-deleted due to record retention rules."}},"required":["id","actor_type","action_category","target_table","event_description","created_at"]},"IDiscussBoardModerator.ISummary":{"type":"object","description":"Moderator summary DTO for paginated collection listing in platform backoffice, management, or audit views.\n\nIncludes only metadata and status fields required for management and accountability business logic. Excludes member or admin details for performance/normalization. Use main IDiscussBoardModerator for full relation.","properties":{"id":{"type":"string","format":"uuid","description":"Unique moderator account record ID (UUID).\n\nIdentity anchor for this moderator assignment in the discuss_board_moderators table."},"member_id":{"type":"string","format":"uuid","description":"The member UUID associated with this moderator role assignment.\n\nAllowed to refer to associated member summary record."},"status":{"type":"string","description":"Active/revoked/suspended/role status. Drives RBAC and listing filters."},"assigned_at":{"type":"string","format":"date-time","description":"Timestamp (UTC, ISO8601) when the moderator role was granted/assigned."},"revoked_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Nullable timestamp of role revocation.\n\nNon-null means this moderator role is no longer active."},"created_at":{"type":"string","format":"date-time","description":"Record creation timestamp."},"updated_at":{"type":"string","format":"date-time","description":"Last updated timestamp for audit/accountability. May equal assigned_at or later if further edits occurred."}},"required":["id","member_id","status","assigned_at","created_at","updated_at"]},"IDiscussBoardAdministrator.ISummary":{"type":"object","description":"Administrator summary DTO for paginated search/listing. Contains critical status/audit fields for business/role management without full privilege, consent, or assignment links.\n\nUse full IDiscussBoardAdministrator for complete detail. This summary is for listing queries, membership dashboards, and audit surface overview.","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for this administrator role record in the discuss_board_administrators table."},"member_id":{"type":"string","format":"uuid","description":"UUID of the member assigned admin privilege (one to one mapping).\n\nAnchor for further member lookup."},"status":{"type":"string","description":"Admin privilege/status metadata (active, resigned, suspended, etc.)."},"escalated_at":{"type":"string","format":"date-time","description":"Timestamp at which admin role was first assigned."},"revoked_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Nullable timestamp when admin privilege was revoked, suspended, or removed."},"created_at":{"type":"string","format":"date-time","description":"Record created timestamp (ISO8601, UTC)."},"updated_at":{"type":"string","format":"date-time","description":"Record last updated timestamp."}},"required":["id","member_id","status","escalated_at","created_at","updated_at"]},"IDiscussBoardPost.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the post as a UUID. This field is the primary key for the post entity and is used across all references to the post. Corresponds to the 'id' field in discuss_board_posts."},"title":{"type":"string","description":"Primary title of the post. Used for search, display, and indexing. Restrictions on length enforced at application layer. Mirrors the 'title' field in discuss_board_posts."},"business_status":{"type":"string","description":"Logical post visibility/workflow state (e.g. public, limited, private, locked). Used by business/membership logic for filtering and access enforcement. Mirrors 'business_status' in discuss_board_posts."},"author_id":{"type":"string","format":"uuid","description":"ID of the member who authored this post, foreign key to discuss_board_members.id. Used for attribution, editing, and permission checks."},"created_at":{"type":"string","format":"date-time","description":"Timestamp (UTC, ISO 8601 format) of original post creation. Sets time window for edits, deletions. Mirrors 'created_at' field in schema."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp (UTC, ISO 8601 format) of most recent update to this post. Useful for ordering and change reporting. Derived from discuss_board_posts.updated_at."},"deleted_at":{"oneOf":[{"type":"string","format":"date-time","description":"Timestamp (UTC, ISO 8601) if the post is soft-deleted. Null if active. Field is present for compliance/audit but should be excluded from queries unless needed for admin/moderator interfaces."},{"type":"null"}],"description":"Soft-delete timestamp or null if post is active. Derived from discuss_board_posts.deleted_at."}},"required":["id","title","business_status","author_id","created_at","updated_at"],"description":"Summary representation of a post, for list/search APIs. Contains key reference fields and business metadata, but not the full text body."},"IDiscussBoardPostTag.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the post-tag relationship. Primary key of discuss_board_post_tags."},"tag_id":{"type":"string","format":"uuid","description":"Tag's unique identifier. References the tag applied to the post. See 'tag_id' in discuss_board_post_tags."},"created_at":{"type":"string","format":"date-time","description":"Timestamp (UTC, ISO 8601 format) of when this tag was assigned to the post."}},"required":["id","tag_id","created_at"],"description":"Summary of tag assignment for a post. Does not include tag name/metadata; this is a simple pairing reference."},"IDiscussBoardPostEditHistory.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the edit history entry. Primary key in discuss_board_post_edit_histories."},"post_id":{"type":"string","format":"uuid","description":"Post ID associated with this edit event, enabling grouping in audit trails or UI edit history displays."},"editor_id":{"type":"string","format":"uuid","description":"Member who performed the edit. Used for audit, rollback, and display. Corresponds to discuss_board_members.id."},"edited_title":{"type":"string","description":"Snapshot of the post title immediately after this edit. Helps show title history and change diffing."},"edit_reason":{"type":"string","description":"Optional reason/note for the edit (user or moderator supplied). Aids compliance and transparency."},"edit_timestamp":{"type":"string","format":"date-time","description":"Timestamp (UTC, ISO 8601) when the edit occurred. Used for timeline displays/UI ordering/audit."}},"required":["id","post_id","editor_id","edited_title","edit_timestamp"],"description":"Summary of a single post edit history entry. Used for UI timelines, audit trails, and history viewing."},"IDiscussBoardPostReaction.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique ID for the post reaction event, primary key of discuss_board_post_reactions. Used for audit and business logic."},"discuss_board_member_id":{"type":"string","format":"uuid","description":"ID of the member who created this reaction. Links to discuss_board_members.id."},"discuss_board_post_id":{"type":"string","format":"uuid","description":"ID of the post to which this reaction was applied. Corresponds to discuss_board_posts.id."},"reaction_type":{"type":"string","description":"Type of reaction: either 'like' or 'dislike' according to the platform policy. Value must match application constraint."},"created_at":{"type":"string","format":"date-time","description":"Timestamp (UTC, ISO 8601) of initial reaction creation."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp (UTC, ISO 8601) when this reaction event was last updated (toggled or metadata updated)."}},"required":["id","discuss_board_member_id","discuss_board_post_id","reaction_type","created_at","updated_at"],"description":"Summary view for a reaction to a post. Includes member, post, type, and timestamps for reporting and display."},"IDiscussBoardCommentReaction.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the comment reaction. Primary key of discuss_board_comment_reactions."},"discuss_board_member_id":{"type":"string","format":"uuid","description":"UUID of the member who performed this reaction (like/dislike)."},"discuss_board_comment_id":{"type":"string","format":"uuid","description":"Target comment UUID for the reaction."},"reaction_type":{"type":"string","description":"Reaction type (must be 'like' or 'dislike', per business rule)."},"created_at":{"type":"string","format":"date-time","description":"Timestamp (UTC, ISO 8601)."},"updated_at":{"type":"string","format":"date-time","description":"Timestamp (UTC, ISO 8601)."}},"required":["id","discuss_board_member_id","discuss_board_comment_id","reaction_type","created_at","updated_at"],"description":"Summary representation for a comment reaction, including reaction type and referencing both actor and target."},"IDiscussBoardContentReport.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the content report. Corresponds to the 'id' column in discuss_board_content_reports."},"content_type":{"type":"string","description":"Type of content being reported, referenced in the schema as 'content_type'. Typical values: 'post', 'comment'."},"status":{"type":"string","description":"Current workflow status for this report (e.g., 'pending', 'under_review', 'resolved', 'dismissed', 'escalated'). Sourced from 'status' in discuss_board_content_reports."},"created_at":{"type":"string","format":"date-time","description":"UTC timestamp when report was created. Maps to 'created_at' in discuss_board_content_reports."},"reporter_member_id":{"type":"string","format":"uuid","description":"Reporter member id (UUID) who submitted this report. Sourced from 'reporter_member_id'."},"content_post_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"UUID of the reported post if this report targets a post. Nullable, matched to 'content_post_id'."},"content_comment_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"UUID of the reported comment if this report targets a comment. Nullable, matched to 'content_comment_id'."},"reason":{"type":"string","description":"Reason for the report, from user-supplied 'reason' in the schema, up to 200 characters."},"moderation_action_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"ID of the linked moderation action (if assigned/resolved). Nullable, from 'moderation_action_id'."}},"required":["id","content_type","status","created_at","reporter_member_id","content_post_id","content_comment_id","reason","moderation_action_id"],"description":"Summary (list-view) of a content report for moderation or review aggregation. Contains identifying fields, report status, reporter info, target content references, and moderation workflow links. Used for dashboard and search result presentation; omits large or detailed context fields."},"IDiscussBoardModerationAction.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the moderation action (primary key in discuss_board_moderation_actions)."},"moderator_id":{"type":"string","format":"uuid","description":"UUID of the moderator who performed the action. References discuss_board_moderators."},"target_member_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Target member affected by this action, if applicable. Nullable, linked to 'target_member_id'."},"target_post_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Target post affected by this action, if any. Nullable, linked to 'target_post_id'."},"target_comment_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Target comment affected, if any. Nullable, corresponds to 'target_comment_id'."},"action_type":{"type":"string","description":"Type of moderation action taken (e.g., 'remove_content', 'warn', 'suspend_user', 'ban_user', 'escalate')."},"status":{"type":"string","description":"Status of moderation action (e.g., 'active', 'reversed', 'escalated', 'completed', 'pending_applied')."},"created_at":{"type":"string","format":"date-time","description":"Timestamp when action was created (ISO8601 UTC)."}},"required":["id","moderator_id","target_member_id","target_post_id","target_comment_id","action_type","status","created_at"],"description":"Summary (list/search view) of a moderation action event, for dashboard or aggregation use. Contains actor, affected user/content, action type, workflow status, and creation timestamp."},"IDiscussBoardAppeal.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique ID for an appeal (primary key in discuss_board_appeals)."},"moderation_action_id":{"type":"string","format":"uuid","description":"ID of the moderation action being appealed."},"appellant_member_id":{"type":"string","format":"uuid","description":"Member ID of the appellant (user submitting the appeal)."},"status":{"type":"string","description":"Workflow status for the appeal (e.g., 'pending', 'in_review', 'accepted', 'denied', 'escalated', 'closed')."},"created_at":{"type":"string","format":"date-time","description":"Appeal creation timestamp (ISO8601 UTC)."}},"required":["id","moderation_action_id","appellant_member_id","status","created_at"],"description":"Summary (list/search view) of a moderation appeals entity. Contains minimal fields for referenced action, appellant, status, and creation time. Used for table and dashboard views of appeals without detail context."},"IDiscussBoardModerationLogs.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for the moderation log event (primary key)."},"actor_member_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Actor (member, moderator) ID responsible for this log entry. Nullable; may be null for automation/system workflow or consensus actions."},"related_action_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Moderation action that this log is attached to (nullable)."},"related_appeal_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Appeal entity related to this log entry, if relevant (nullable)."},"related_report_id":{"oneOf":[{"type":"string","format":"uuid"},{"type":"null"}],"description":"Content report related to this log entry, for context (nullable)."},"event_type":{"type":"string","description":"Type of moderation event (e.g., 'report_received', 'action_taken', 'appeal_created', 'status_update', 'escalation', etc.)."},"created_at":{"type":"string","format":"date-time","description":"UTC timestamp for event occurrence (immutable)."}},"required":["id","actor_member_id","related_action_id","related_appeal_id","related_report_id","event_type","created_at"],"description":"Summary of a moderation log record (discuss_board_moderation_logs), with event type, actor, relationships, and timing for dashboard/search use."},"IDiscussBoardNotifications.ISummary":{"type":"object","properties":{"id":{"type":"string","format":"uuid","description":"Unique identifier for this notification event."},"user_account_id":{"type":"string","format":"uuid","description":"UUID of the user account receiving this notification event."},"event_type":{"type":"string","description":"Type of event (e.g., 'reply', 'moderation', 'system_alert', etc.)."},"delivery_channel":{"type":"string","description":"Method of delivery: 'email', 'sms', 'push', 'in_app', etc."},"subject":{"type":"string","description":"Notification subject/summary (truncated, for dashboard use)."},"delivery_status":{"type":"string","description":"Delivery status ('pending', 'delivered', 'failed', 'bounced', 'suppressed')."},"delivered_at":{"oneOf":[{"type":"string","format":"date-time"},{"type":"null"}],"description":"Timestamp of successful delivery, if occurred (nullable)."},"created_at":{"type":"string","format":"date-time","description":"Timestamp of notification creation."}},"required":["id","user_account_id","event_type","delivery_channel","subject","delivery_status","delivered_at","created_at"],"description":"Summary/aggregate search result for notification logs (discuss_board_notifications). Shows delivery status, recipient, subject, channel, and key timestamps. Used for dashboard/event table listings."}}}}