import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { post__auth_administrator_join } from "../../../providers/post__auth_administrator_join";
import { post__auth_administrator_login } from "../../../providers/post__auth_administrator_login";
import { post__auth_administrator_refresh } from "../../../providers/post__auth_administrator_refresh";

import { IDiscussBoardAdministrator } from "../../../api/structures/IDiscussBoardAdministrator";

@Controller("/auth/administrator")
export class AuthAdministratorController {
  /**
   * Register a new administrator account
   * (discuss_board_administrators/discuss_board_user_accounts) and receive JWT
   * tokens.
   *
   * This endpoint is for registering new administrator accounts in the
   * discussBoard platform. It leverages the schema’s
   * discuss_board_user_accounts and discuss_board_administrators tables to
   * ensure unique email verification, secure password hashing, and initial
   * privilege assignments.
   *
   * The registration process demands strong password policies, terms
   * acceptance, and optional audit/compliance data (all strictly derived from
   * existing schema fields). All input is validated against current business
   * rules, enforcing status codes and email uniqueness integrity checks.
   *
   * Upon success, this operation creates and links a
   * discuss_board_user_accounts record (tracking
   * email/password/status/email_verified) and a discuss_board_administrators
   * record referencing the associated member row. Tokens (access and refresh)
   * are issued in accordance with system policy, containing administrator
   * payload claims per requirements. Any related consent or audit logs are
   * appended using system workflows, not directly by this handler.
   *
   * Security is enforced at all levels: email must be confirmed unique,
   * password must meet strength standards, and tokens are generated
   * server-side. The function issues IDiscussBoardAdministrator.IAuthorized
   * response strictly for the new account, with all administrator privileges
   * reflected in the JWT claims.
   *
   * Related endpoints: administrator login and refresh operations (see
   * /auth/administrator/login and /auth/administrator/refresh). Role escalation
   * of an existing member to administrator is handled by a separate admin
   * policy enforcement flow, not by this endpoint.
   *
   * @param connection
   * @param body Administrator account registration payload, including email,
   *   hashed password, and terms consent (if required).
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("join")
  public async join(
    @TypedBody()
    body: IDiscussBoardAdministrator.IJoin,
  ): Promise<IDiscussBoardAdministrator.IAuthorized> {
    try {
      return await post__auth_administrator_join({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Administrator login/authentication
   * (discuss_board_user_accounts/discuss_board_administrators); JWT issuance on
   * valid credentials.
   *
   * Administrator login for the discussBoard platform uses email and password
   * authentication, referencing the discuss_board_user_accounts for credential
   * verification and discuss_board_administrators for status and role
   * enforcement.
   *
   * Input is validated for format and credential correctness. Only accounts
   * assigned administrator status (not merely member or moderator) may
   * authenticate here. Upon successful login, JWT tokens are issued, including
   * administrator-level claims and permission arrays. Login events are tracked
   * via audit logs and session management tables according to business policy.
   *
   * Security logic encompasses account lockout, invalid credential throttling,
   * and disabled-status check (all derived directly from schema fields). This
   * operation never exposes password hashes or internal audit data.
   *
   * The response provides IDiscussBoardAdministrator.IAuthorized payloads, with
   * JWT and claims for session establishment. Related endpoints include
   * registration (join) and refresh. Password resets or force login requests
   * are handled by separate security flows.
   *
   * @param connection
   * @param body Administrator login credentials: email and password.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("login")
  public async login(
    @TypedBody()
    body: IDiscussBoardAdministrator.ILogin,
  ): Promise<IDiscussBoardAdministrator.IAuthorized> {
    try {
      return await post__auth_administrator_login({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Refresh JWT tokens for administrator (discuss_board_jwt_sessions,
   * user_accounts, administrators); validates and renews session.
   *
   * This endpoint allows administrators to refresh their JWT access and refresh
   * tokens. The refresh workflow confirms session validity in the
   * discuss_board_jwt_sessions table, and checks the referenced user account’s
   * administrative status using discuss_board_administrators.
   *
   * Token expiry and revocation status are strictly enforced. If valid, a new
   * set of tokens is issued, with the same administrator claims as the original
   * login. Any invalid or expired token attempts result in detailed,
   * schema-driven error messages per business requirements. Session refresh
   * events update relevant audit and session tables as defined in the schema.
   *
   * The response includes the IDiscussBoardAdministrator.IAuthorized response,
   * mirroring the login and registration reply structure. Related flows: login
   * and join endpoints for administrators; logout and session management are
   * handled separately.
   *
   * @param connection
   * @param body JWT refresh token for administrator session renewal.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("refresh")
  public async refresh(
    @TypedBody()
    body: IDiscussBoardAdministrator.IRefresh,
  ): Promise<IDiscussBoardAdministrator.IAuthorized> {
    try {
      return await post__auth_administrator_refresh({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
