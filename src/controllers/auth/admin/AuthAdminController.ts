import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { post__auth_admin_join } from "../../../providers/post__auth_admin_join";
import { post__auth_admin_login } from "../../../providers/post__auth_admin_login";
import { post__auth_admin_refresh } from "../../../providers/post__auth_admin_refresh";

import { IDiscussionBoardAdmin } from "../../../api/structures/IDiscussionBoardAdmin";

@Controller("/auth/admin")
export class AuthAdminController {
  /**
   * Register a new administrator account in the discussion_board_admins table.
   *
   * This API operation is used for the registration of administrator accounts
   * in the discussionBoard system. Administrators are managed in the
   * `discussion_board_admins` table, which stores attributes such as `user_id`,
   * `assigned_at`, and `is_active`. The registration process requires a valid
   * and unique `user_id` referencing an already email-verified user in the
   * `discussion_board_users` table.
   *
   * Upon successful administrator registration, a new record is created in
   * `discussion_board_admins`, with `assigned_at` set to the current time and
   * `is_active` marked as true unless explicitly suspended. An audit log entry
   * is recorded in `discussion_board_audit_logs` with action_type
   * `admin_registration` to ensure traceability and compliance.
   *
   * The system enforces that only authorized system actors may perform admin
   * registration; public users cannot directly self-register as administrators.
   * This operation interacts with the platform's verification workflow by
   * enforcing email verification, and with compliance flows for root admin
   * approval.
   *
   * If input is invalid (e.g., duplicate admin for same user, user not
   * verified, improper authority), a detailed error is returned and the
   * registration is not persisted. This is designed to align with high-security
   * requirements, including explicit admin assignment/revocation events and
   * retention of audit logs for compliance.
   *
   * This operation is typically followed by the admin login process, after
   * which JWT tokens are issued for API access.
   *
   * @param connection
   * @param body Admin registration payload (must include reference to already
   *   verified user ID).
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("join")
  public async join(
    @TypedBody()
    body: IDiscussionBoardAdmin.ICreate,
  ): Promise<IDiscussionBoardAdmin.IAuthorized> {
    try {
      return await post__auth_admin_join({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Authenticate and login an active admin account for the
   * discussion_board_admins table.
   *
   * This operation handles admin authentication in the discussionBoard
   * platform. It validates admin login credentials by matching the provided
   * email and password (checked as a secure hash against the `password_hash`
   * field in `discussion_board_users`).
   *
   * Additionally, it ensures the user has an active, valid administrator role
   * by referencing `discussion_board_admins` (`is_active`: true, `revoked_at`:
   * null, and not soft-deleted). Email verification is enforced via the
   * `is_verified` flag in `discussion_board_users`, and lockout is implemented
   * for suspended accounts based on `is_suspended` and `suspended_until`.
   *
   * Upon successful authentication, this operation issues new JWT access and
   * refresh tokens and updates the `last_login_at` value for the admin user.
   * All login attempts, both successful and failed, are logged into
   * `discussion_board_audit_logs` under the `admin_login` action_type for
   * compliance and auditing. This endpoint supports rate limiting and explicit
   * error codes for invalid credentials, suspension, or failed login attempts.
   *
   * This operation is only available to previously assigned, verified admin
   * accounts. Admins must subsequently use the issued JWT tokens to access
   * restricted endpoints.
   *
   * @param connection
   * @param body Admin login payload (typically includes email and password).
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("login")
  public async login(
    @TypedBody()
    body: IDiscussionBoardAdmin.ILogin,
  ): Promise<IDiscussionBoardAdmin.IAuthorized> {
    try {
      return await post__auth_admin_login({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Refresh admin JWT access and refresh tokens using a valid refresh token for
   * session management.
   *
   * This operation issues a new JWT access token for an administrator,
   * exchanging a valid, non-expired refresh token (tracked in
   * `discussion_board_refresh_tokens`, `revoked_at` is null, `expires_at` is in
   * the future) for new tokens. It ensures the admin is active and not
   * currently suspended (using `is_active`, `revoked_at`, and `suspended_until`
   * from `discussion_board_admins` and `discussion_board_users`).
   *
   * Upon a valid refresh, this endpoint rotates refresh tokens and issues new
   * authentication credentials for continued API access. All usage is logged to
   * the `discussion_board_audit_logs` table under `admin_refresh` for audit and
   * regulatory compliance. If the refresh token is expired, revoked, or
   * invalid, a detailed error response is returned.
   *
   * This endpoint underpins the stateless session management system and is
   * critical for securely extending admin access. Tokens must be managed per
   * device/session, and this operation guarantees that existing refresh tokens
   * are correctly rotated or invalidated according to compliance rules.
   *
   * @param connection
   * @param body Refresh token request payload for admin session token renewal.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("refresh")
  public async refresh(
    @TypedBody()
    body: IDiscussionBoardAdmin.IRefresh,
  ): Promise<IDiscussionBoardAdmin.IAuthorized> {
    try {
      return await post__auth_admin_refresh({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
