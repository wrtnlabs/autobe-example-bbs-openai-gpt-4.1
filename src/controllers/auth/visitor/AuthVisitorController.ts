import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { post__auth_visitor_join } from "../../../providers/post__auth_visitor_join";
import { post__auth_visitor_refresh } from "../../../providers/post__auth_visitor_refresh";

import { IDiscussionBoardVisitor } from "../../../api/structures/IDiscussionBoardVisitor";

@Controller("/auth/visitor")
export class AuthVisitorController {
  /**
   * Visitor registration for unauthenticated guest actors in
   * discussion_board_visitors table.
   *
   * This API operation registers a new unauthenticated visitor by creating a
   * record in discussion_board_visitors. It issues a unique visitor_token for
   * session-based tracking without storing PII, and is used for anonymous
   * access onboarding. The endpoint processes registration requests, logs
   * device/IP/user_agent if provided, and ensures soft deletion (via
   * deleted_at) is respected for compliance. Registration enables analytics,
   * basic anti-fraud, auditing, and provides an entry point for privilege
   * escalation should the visitor later choose to register as a full member.
   * Each registration is auditable, aligns strictly to the schema, and avoids
   * overlap with user/member/admin actor tables. Interaction with this endpoint
   * is the first step in the authentication flow for guest users, related to
   * refresh endpoints for session continuation.
   *
   * @param connection
   * @param body Information required to register a new visitor and open a new
   *   guest session. Can include user_agent and IP for audit/security (if
   *   available).
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("join")
  public async join(
    @TypedBody()
    body: IDiscussionBoardVisitor.IJoin,
  ): Promise<IDiscussionBoardVisitor.IAuthorized> {
    try {
      return await post__auth_visitor_join({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Visitor token/session refresh in discussion_board_visitors (guest actors).
   *
   * This API operation allows an existing visitor to refresh the anonymous
   * session in the discussion_board_visitors table. The endpoint verifies the
   * provided visitor_token against active, non-soft-deleted records
   * (deleted_at), and, if valid, issues a fresh session token to extend guest
   * access. Operation ensures session continuity for unregistered/guest actors,
   * without collecting or exposing PII. Security checks ensure tokens from
   * suspended or soft-deleted records are not refreshed. Acts as a counterpart
   * to the join endpoint and integrates with guest upgrade flows (not handled
   * here). All actions align to strict visitor/guest schema logic, supporting
   * safe anonymous participation and strict audit traceability. No member or
   * admin rights are escalated or exposed from this operation.
   *
   * @param connection
   * @param body Request payload for refreshing a visitor (guest) session, must
   *   provide valid visitor_token.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("refresh")
  public async refresh(
    @TypedBody()
    body: IDiscussionBoardVisitor.IRefresh,
  ): Promise<IDiscussionBoardVisitor.IAuthorized> {
    try {
      return await post__auth_visitor_refresh({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
