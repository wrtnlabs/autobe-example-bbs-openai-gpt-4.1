import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { post__auth_user_join } from "../../../providers/post__auth_user_join";
import { post__auth_user_login } from "../../../providers/post__auth_user_login";
import { post__auth_user_refresh } from "../../../providers/post__auth_user_refresh";

import { IDiscussionBoardUser } from "../../../api/structures/IDiscussionBoardUser";

@Controller("/auth/user")
export class AuthUserController {
  /**
   * Register a new standard user member (discussion_board_users table) and
   * issue tokens.
   *
   * This endpoint enables guest users to register as standard users by
   * supplying unique email, username, password (hashed using the password_hash
   * field), and optional display_name. The user is created as unverified
   * (is_verified: false) and unsuspended (is_suspended: false) by default, in
   * accordance with the discussion_board_users schema. Email and username are
   * enforced as unique. The operation triggers an email verification process
   * (via related verification token table), but does not immediately allow
   * forum participation until verification (is_verified) is complete. Security
   * is ensured by storing only password_hash, never plaintext. In accordance
   * with security requirements and audit policy, registration attempts,
   * failures, and resulting states are logged for compliance. This operation
   * establishes user membership, laying the foundation of JWT-based
   * authentication for the entire service. Related operations: verification
   * initiation and login endpoints.
   *
   * @param connection
   * @param body User registration payload (email, username, password,
   *   display_name).
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("join")
  public async join(
    @TypedBody()
    body: IDiscussionBoardUser.ICreate,
  ): Promise<IDiscussionBoardUser.IAuthorized> {
    try {
      return await post__auth_user_join({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Authenticate a user (discussion_board_users) and issue new tokens for
   * member session.
   *
   * This endpoint authenticates a user using provided credentials (email or
   * username, plus password) by verifying against the discussion_board_users
   * schema (email/username, password_hash). The system only allows verified
   * (is_verified: true) and unsuspended (is_suspended: false) accounts to log
   * in, blocking those suspended or unverified, per the schema's security
   * requirements. On success, JWT access and refresh tokens including user id,
   * role, and permissions are returned. On failure, rate limiting and audit
   * logging of failed attempts are enforced as described in functional
   * requirements and audit logs for compliance. Passwords are never returned or
   * logged, only the password_hash is stored and compared securely. This is
   * crucial for user access to all member operations, acting as the gateway to
   * authenticated discussionBoard participation.
   *
   * @param connection
   * @param body User login payload (email/username and password).
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("login")
  public async login(
    @TypedBody()
    body: IDiscussionBoardUser.ILogin,
  ): Promise<IDiscussionBoardUser.IAuthorized> {
    try {
      return await post__auth_user_login({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Refresh a user JWT access token using a valid refresh token
   * (discussion_board_refresh_tokens table).
   *
   * This endpoint allows an authenticated user to refresh their JWT access
   * token by presenting a valid, non-revoked refresh token, as stored in
   * discussion_board_refresh_tokens. It ensures single-token-per-device and
   * that the user is not suspended or deleted as per the discussion_board_users
   * schema (is_suspended must be false, deleted_at null). On verification and
   * success, it rotates the refresh token and issues new tokens. This process
   * maintains session continuity for authenticated users, while aligning with
   * compliance, audit, and security policies enforced through schema
   * relationships on discussion_board_refresh_tokens and
   * discussion_board_users.
   *
   * @param connection
   * @param body Refresh token payload (typically just a refresh_token string).
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("refresh")
  public async refresh(
    @TypedBody()
    body: IDiscussionBoardUser.IRefresh,
  ): Promise<IDiscussionBoardUser.IAuthorized> {
    try {
      return await post__auth_user_refresh({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
