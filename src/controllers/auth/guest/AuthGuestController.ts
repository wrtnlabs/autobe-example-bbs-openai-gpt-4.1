import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { post__auth_guest_join } from "../../../providers/post__auth_guest_join";
import { post__auth_guest_refresh } from "../../../providers/post__auth_guest_refresh";

import { IDiscussBoardGuest } from "../../../api/structures/IDiscussBoardGuest";

@Controller("/auth/guest")
export class AuthGuestController {
  /**
   * Guest registration (join) for discuss_board_guests table: creates guest
   * record, issues temporary identity.
   *
   * Handles initial guest registration for the discussBoard platform. Creates a
   * new record in 'discuss_board_guests' for analytics/tracking and issues a
   * guest JWT if supported. No credentials are handled here. Guests can only be
   * created, not logged in or managed. For temporary identity allocation only.
   * Security and privacy are strictly enforced per data minimization policy.
   * Escalation to member role requires separate flow. No login or refresh
   * operations for guests. Only suitable for anonymous/temporary use.
   *
   * @param connection
   * @param body Guest analytics and conversion funnel data (IP, user agent,
   *   referer). Used for tracking, not authentication.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("join")
  public async join(
    @TypedBody()
    body: IDiscussBoardGuest.ICreate,
  ): Promise<IDiscussBoardGuest.IAuthorized> {
    try {
      return await post__auth_guest_join({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Guest token refresh (refresh) for discuss_board_guests: renews anonymous
   * access tokens if authorized.
   *
   * Handles guest token refresh for the discussBoard platform, using a valid
   * refresh token. As guests have no credentials, this endpoint renews
   * temporary access for guests already in 'discuss_board_guests'. No password
   * or login performed. Errors if the refresh token is invalid. Role upgrade
   * requires separate flow. Useful for continued, limited anonymous access
   * within privacy constraints.
   *
   * @param connection
   * @param body Refresh token data for temporary guest session validity check.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("refresh")
  public async refresh(
    @TypedBody()
    body: IDiscussBoardGuest.IRefresh,
  ): Promise<IDiscussBoardGuest.IAuthorized> {
    try {
      return await post__auth_guest_refresh({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
