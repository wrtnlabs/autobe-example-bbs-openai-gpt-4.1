import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { post__auth_member_join } from "../../../providers/post__auth_member_join";
import { post__auth_member_login } from "../../../providers/post__auth_member_login";
import { post__auth_member_refresh } from "../../../providers/post__auth_member_refresh";

import { IDiscussBoardMember } from "../../../api/structures/IDiscussBoardMember";

@Controller("/auth/member")
export class AuthMemberController {
  /**
   * Register a new discussBoard member account (discuss_board_user_accounts,
   * discuss_board_members, discuss_board_consent_records) and issue JWT
   * tokens.
   *
   * This API operation enables guest users to register as members of the
   * discussBoard platform by creating an account with a unique email, a
   * securely hashed password, and explicit agreement to platform policies
   * (terms of service and privacy policy), as described in the
   * discuss_board_user_accounts, discuss_board_members, and
   * discuss_board_consent_records schema tables.
   *
   * Upon receiving the registration request, the system validates the
   * uniqueness of the submitted email and checks that the password meets all
   * business security rules (as per the password_hash field constraints). The
   * account is created in a 'pending' or 'active' status depending on the email
   * verification process, and a member profile is initialized via the
   * discuss_board_members table, capturing assigned nickname and status.
   *
   * Consent records required by regulation (e.g. 'privacy_policy',
   * 'terms_of_service') are logged to the discuss_board_consent_records table
   * for future audit and compliance checks. If any required consents are
   * missing, the operation will fail and provide appropriate errors, as this is
   * a strict platform requirement.
   *
   * Successful registration triggers the issuance of JWT access and refresh
   * tokens, which are stored along with device/user_agent and ip_address info
   * in the discuss_board_jwt_sessions schema. These tokens enable the new
   * member to authenticate with the platform, and the initial session is
   * enforced as per audit requirements.
   *
   * Only users who pass consent, uniqueness, policy acceptance, and security
   * checks will be registered. Any attempt to register with already-used email
   * addresses, missing consents, or weak passwords will result in a business
   * error. This operation is the starting point for all member authentication
   * workflows and is essential for discussBoard’s secure, policy-driven
   * onboarding.
   *
   * @param connection
   * @param body Information required to register a new member, including unique
   *   email, secure password, nickname, and required policy consents.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("join")
  public async join(
    @TypedBody()
    body: IDiscussBoardMember.IJoin,
  ): Promise<IDiscussBoardMember.IAuthorized> {
    try {
      return await post__auth_member_join({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Authenticate a discussBoard member (discuss_board_user_accounts,
   * discuss_board_members); issue new JWT tokens after validating credentials
   * and status.
   *
   * This API operation authenticates a registered discussBoard member using the
   * email and password fields managed in the discuss_board_user_accounts table.
   * Authentication checks are performed against the stored password_hash
   * (hashed password) and email address, ensuring the account is in 'active'
   * status (or other eligible states as defined by business rules) and has
   * completed the required email verification (email_verified=true).
   *
   * Upon successful credential validation, the system issues new JWT access and
   * refresh tokens and creates a new record in the discuss_board_jwt_sessions
   * table to track the session, storing details such as user_agent, ip_address,
   * and session creation times. This operation enables returning or ongoing
   * members to continue their platform usage securely and triggers
   * login-session logic required by the platform’s audit policies.
   *
   * Failed authentication attempts due to wrong credentials,
   * locked/suspended/banned status, or missing email verification result in
   * clear, business-appropriate error responses as defined in the
   * discuss_board_user_accounts schema. All login attempts are logged for
   * security, anti-abuse, and compliance purposes.
   *
   * This endpoint is critical to account lifecycle and is directly tied to the
   * backend's authentication, session management, and business permission
   * boundaries. It must strictly enforce credential and status validation at
   * every call.
   *
   * @param connection
   * @param body Credential information for member login (email, password).
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("login")
  public async login(
    @TypedBody()
    body: IDiscussBoardMember.ILogin,
  ): Promise<IDiscussBoardMember.IAuthorized> {
    try {
      return await post__auth_member_login({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Issue new JWT tokens for a member by validating/rotating a refresh token
   * (discuss_board_jwt_sessions, discuss_board_user_accounts).
   *
   * This API operation allows an authenticated discussBoard member to refresh
   * their session by presenting a valid refresh token, which is stored and
   * validated against the discuss_board_jwt_sessions table
   * (refresh_token_hash). The operation ensures session activity status
   * ('active'), verifies that the refresh token has not been revoked, deleted,
   * or expired, and that the associated user’s account is not suspended,
   * banned, or otherwise disqualified per discuss_board_user_accounts status.
   *
   * Upon successful verification, new JWT access and refresh tokens are issued,
   * and the discuss_board_jwt_sessions record is updated with refreshed session
   * metadata (issued_at, expires_at, device info, rotation hash). Session
   * refresh also triggers session activity logs and anti-abuse analytics per
   * business requirements.
   *
   * Any error relating to token status, validity, revocation, or user
   * ineligibility will be surfaced at this endpoint and tracked for compliance
   * and fraud prevention purposes. The endpoint is foundational for maintaining
   * secure, long-lived member sessions according to discussBoard platform
   * policy.
   *
   * @param connection
   * @param body Refresh token and user authentication context for session
   *   refresh request.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("refresh")
  public async refresh(
    @TypedBody()
    body: IDiscussBoardMember.IRefresh,
  ): Promise<IDiscussBoardMember.IAuthorized> {
    try {
      return await post__auth_member_refresh({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
