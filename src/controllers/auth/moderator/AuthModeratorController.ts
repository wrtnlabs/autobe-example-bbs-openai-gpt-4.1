import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { post__auth_moderator_join } from "../../../providers/post__auth_moderator_join";
import { ModeratorAuth } from "../../../decorators/ModeratorAuth";
import { ModeratorPayload } from "../../../decorators/payload/ModeratorPayload";
import { post__auth_moderator_login } from "../../../providers/post__auth_moderator_login";
import { post__auth_moderator_refresh } from "../../../providers/post__auth_moderator_refresh";

import { IDiscussBoardModerator } from "../../../api/structures/IDiscussBoardModerator";

@Controller("/auth/moderator")
export class AuthModeratorController {
  /**
   * Register a moderator and issue JWT credentials (discuss_board_moderators,
   * admin flow).
   *
   * This API endpoint registers a new moderator by assigning moderator rights
   * to an existing member. It tightly references the 'discuss_board_moderators'
   * table, which tracks moderator role assignments, their administrative
   * status, and escalation history. The assignment is only valid for members
   * whose status permits escalation (i.e., not already banned, suspended, or
   * pending activation), in compliance with platform rules described in the
   * business requirements documentation. If the referenced 'member_id' does not
   * exist in 'discuss_board_members' or lacks a verified, active linked user
   * account in 'discuss_board_user_accounts', the registration fails. Upon
   * successful registration, JWT credentials conforming to platform rules are
   * issued and linked to the new or updated session in
   * 'discuss_board_jwt_sessions', enabling secure moderator access to protected
   * operations. Business logic ensures that duplicate moderator assignments,
   * unauthorized privilege escalations, or policy violations trigger detailed
   * errors and audit logs via the platform's audit and privacy log tables. This
   * endpoint is essential for managing the lifecycle of moderator accounts and
   * ensuring compliance with admin-only authentication flows. Related endpoints
   * include 'login', 'refresh', and moderation privilege transfers, which
   * require valid JWTs granted via the current operation.
   *
   * @param connection
   * @param body Information required to register and grant moderator rights to
   *   an existing member (referencing 'discuss_board_moderators' and
   *   'discuss_board_members').
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("join")
  public async join(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedBody()
    body: IDiscussBoardModerator.ICreate,
  ): Promise<IDiscussBoardModerator.IAuthorized> {
    try {
      return await post__auth_moderator_join({
        moderator,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Moderator login and JWT token issuance (discuss_board_moderators,
   * discuss_board_user_accounts).
   *
   * This operation provides secure password-based login for moderators,
   * robustly referencing the columns in 'discuss_board_user_accounts', with
   * additional privilege validation via 'discuss_board_moderators'. The login
   * flow verifies email, hashes and checks password against 'password_hash',
   * ensures 'email_verified' is true, and cross-checks that the user is
   * currently assigned the moderator role (with a valid 'status' and
   * non-revoked assignment). On success, securely issues JWT access and refresh
   * tokens, records the login session in 'discuss_board_jwt_sessions', and
   * returns session-relevant details for fine-grained audit and business logic
   * enforcement. Failed logins due to locked accounts, suspended, pending, or
   * otherwise unauthorized status are rejected with clear, descriptive errors
   * and corresponding audit entries in the compliance log. This endpoint is
   * central in the moderator authentication flow, and is always paired with
   * proper error handling, rate limiting, and compliance documentation as per
   * platform policy. Other related operations include moderator registration
   * ('join') and token refresh ('refresh').
   *
   * @param connection
   * @param body Moderator login credentials (email, password), referencing
   *   'discuss_board_user_accounts' and privilege checks via
   *   'discuss_board_moderators'.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("login")
  public async login(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedBody()
    body: IDiscussBoardModerator.ILogin,
  ): Promise<IDiscussBoardModerator.IAuthorized> {
    try {
      return await post__auth_moderator_login({
        moderator,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Refresh JWT access/refresh tokens for an authenticated moderator
   * (discuss_board_jwt_sessions, discuss_board_moderators).
   *
   * Provides a JWT access token refresh for authorized moderators by
   * referencing session and privilege details in both
   * 'discuss_board_jwt_sessions' and 'discuss_board_moderators'. The flow
   * requires a valid refresh token, checks session status in
   * 'discuss_board_jwt_sessions', and verifies ongoing eligibility in
   * 'discuss_board_moderators' (including 'status', 'revoked_at', and
   * assignment fields). New tokens are issued and the session record is
   * updated, provided all validations pass. Failures, such as expired or
   * invalid tokens, or privilege revocation since last login, are returned with
   * specific status codes and are always logged for compliance and incident
   * handling. Ensures strict business rules for secure moderator/token
   * rotation, as per documented platform authentication policies. Related APIs
   * include 'login', 'join', and moderator-protected API endpoints relying on
   * the refreshed token context.
   *
   * @param connection
   * @param body Moderator token refresh request context (contains refresh token
   *   and session info), referencing 'discuss_board_jwt_sessions' and
   *   'discuss_board_moderators'.
   * @setHeader token.access Authorization
   *
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post("refresh")
  public async refresh(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedBody()
    body: IDiscussBoardModerator.IRefresh,
  ): Promise<IDiscussBoardModerator.IAuthorized> {
    try {
      return await post__auth_moderator_refresh({
        moderator,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
