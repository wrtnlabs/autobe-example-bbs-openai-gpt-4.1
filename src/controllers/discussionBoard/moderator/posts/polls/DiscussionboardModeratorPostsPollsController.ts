import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { post__discussionBoard_moderator_posts_$postId_polls } from "../../../../../providers/post__discussionBoard_moderator_posts_$postId_polls";
import { ModeratorAuth } from "../../../../../decorators/ModeratorAuth";
import { ModeratorPayload } from "../../../../../decorators/payload/ModeratorPayload";
import { patch__discussionBoard_moderator_posts_$postId_polls } from "../../../../../providers/patch__discussionBoard_moderator_posts_$postId_polls";
import { put__discussionBoard_moderator_posts_$postId_polls_$pollId } from "../../../../../providers/put__discussionBoard_moderator_posts_$postId_polls_$pollId";
import { delete__discussionBoard_moderator_posts_$postId_polls_$pollId } from "../../../../../providers/delete__discussionBoard_moderator_posts_$postId_polls_$pollId";

import { IDiscussionBoardPoll } from "../../../../../api/structures/IDiscussionBoardPoll";
import { IPageIDiscussionBoardPoll } from "../../../../../api/structures/IPageIDiscussionBoardPoll";

@Controller("/discussionBoard/moderator/posts/:postId/polls")
export class DiscussionboardModeratorPostsPollsController {
  /**
   * Create a new poll attached to an existing post. Only authors, moderators,
   * and admins are allowed.
   *
   * Creates a new poll on an existing post by postId. The poll can be single-
   * or multi-choice, with validation enforcing both the poll format and the
   * post's ability to accept new polls (not locked or archived). Only the post
   * author, moderators, and admins can use this endpoint. All input data such
   * as poll title, description, and poll options must meet validation as
   * defined in the request DTO schema.
   *
   * The operation logs successful poll creation along with option records for
   * audit and compliance. Attempts to create more than one poll per post or on
   * locked/archived posts are rejected by business logic. Poll creation is
   * atomicâ€”either all records are written or none are saved in case of error.
   *
   * @param connection
   * @param postId Identifier of the post to which the poll is being attached.
   * @param body Full poll creation data, including required title, options
   *   list, and constraints per the schema.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IDiscussionBoardPoll.ICreate,
  ): Promise<IDiscussionBoardPoll> {
    try {
      return await post__discussionBoard_moderator_posts_$postId_polls({
        moderator,
        postId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a filtered, paginated list of polls for a given postId.
   *
   * Returns a paginated and filterable list of all polls associated with a
   * specific post, supporting filters such as poll status, type, and date
   * range. This endpoint is intended primarily for moderators and admins for
   * the purpose of audit, review, or bulk analysis rather than regular users.
   *
   * Access enforcement ensures that only privileged roles (moderator, admin)
   * can perform bulk retrieval or search of poll data on posts. Payloads are
   * optimized for both search/sort and for integration with UI dashboards.
   *
   * If there are no polls for the post, an empty result set is returned with
   * pagination metadata. This endpoint complements single poll GETs and poll
   * management operations.
   *
   * @param connection
   * @param postId Identifier of the parent post to retrieve polls for.
   * @param body Search, filter, and pagination options for polls associated
   *   with the postId.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IDiscussionBoardPoll.IRequest,
  ): Promise<IPageIDiscussionBoardPoll.ISummary> {
    try {
      return await patch__discussionBoard_moderator_posts_$postId_polls({
        moderator,
        postId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Edit an existing poll on a post. Restricted to authors, moderators, or
   * admins and not allowed if locked/closed.
   *
   * Updates an existing poll (such as changing the title, description, or poll
   * window). Only permitted for post authors, moderators, and admins. Locks and
   * closure dates are considered before modification is allowed. Edits must
   * remain compliant with schema and business logic. All updates are logged for
   * compliance, including changes to poll open/close state.
   *
   * Business logic prevents edits on locked or closed polls and ensures that
   * only the correct users (author, moderator, admin) can perform the update.
   * An error is returned if conditions are not met, such as insufficient
   * privileges, locked polls, or invalid state.
   *
   * @param connection
   * @param postId Identifier of the post that owns this poll.
   * @param pollId Identifier of the poll to update.
   * @param body Poll update information including fields to be modified, such
   *   as title, description, and timestamps.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":pollId")
  public async update(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedParam("pollId")
    pollId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IDiscussionBoardPoll.IUpdate,
  ): Promise<IDiscussionBoardPoll> {
    try {
      return await put__discussionBoard_moderator_posts_$postId_polls_$pollId({
        moderator,
        postId,
        pollId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete a poll attached to a post. Only moderators and admins are
   * authorized.
   *
   * Deletes (soft delete) a poll attached to a post by setting the 'deleted_at'
   * timestamp. Only moderators and admins can perform poll deletions. The
   * operation is denied if the poll is in active use or is protected by a
   * locked or archived parent post. On success, the poll remains recoverable
   * for compliance until a subsequent hard deletion by a system process. Audit
   * trail logs are created for all deletions. Users without privilege, or those
   * attempting to delete already-soft-deleted polls receive a business error.
   *
   * @param connection
   * @param postId Identifier of the parent post for this poll.
   * @param pollId Identifier of the poll to delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":pollId")
  public async erase(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedParam("pollId")
    pollId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__discussionBoard_moderator_posts_$postId_polls_$pollId(
        {
          moderator,
          postId,
          pollId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
