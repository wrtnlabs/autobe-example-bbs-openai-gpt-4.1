import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { post__discussionBoard_moderator_moderationActions } from "../../../../providers/post__discussionBoard_moderator_moderationActions";
import { ModeratorAuth } from "../../../../decorators/ModeratorAuth";
import { ModeratorPayload } from "../../../../decorators/payload/ModeratorPayload";
import { patch__discussionBoard_moderator_moderationActions } from "../../../../providers/patch__discussionBoard_moderator_moderationActions";
import { get__discussionBoard_moderator_moderationActions_$moderationActionId } from "../../../../providers/get__discussionBoard_moderator_moderationActions_$moderationActionId";
import { put__discussionBoard_moderator_moderationActions_$moderationActionId } from "../../../../providers/put__discussionBoard_moderator_moderationActions_$moderationActionId";
import { delete__discussionBoard_moderator_moderationActions_$moderationActionId } from "../../../../providers/delete__discussionBoard_moderator_moderationActions_$moderationActionId";

import { IDiscussionBoardModerationAction } from "../../../../api/structures/IDiscussionBoardModerationAction";
import { IPageIDiscussionBoardModerationAction } from "../../../../api/structures/IPageIDiscussionBoardModerationAction";

@Controller("/discussionBoard/moderator/moderationActions")
export class DiscussionboardModeratorModerationactionsController {
  /**
   * Create a new moderation action (warn, remove, restrict, etc.) by a
   * moderator or admin.
   *
   * Create a new moderation action record to log activity performed by
   * moderators or admins for enforcement of platform policies. This includes
   * actions against users, posts, or commentsâ€”such as warning, restricting,
   * muting, removing, or restoring content. The API requires identifying the
   * acting moderator, the target (user, post, or comment), specifying the type
   * of moderation action (e.g., warn, mute, remove, restore), the reason for
   * the action, and relevant effective timing. All actions are recorded in the
   * moderation_actions schema for audit and compliance.
   *
   * Security is ensured by restricting this endpoint to users with moderator or
   * admin roles; each action taken is logged and auditable. Linked records must
   * exist in the target tables (users, posts, or comments). Business logic will
   * validate action-specific requirements (such as only allowing restore
   * actions on content previously removed), and rejection reasons are clearly
   * reported.
   *
   * Expected behavior includes auditing/traceability and propagation of
   * moderation effects to related user/content state. This endpoint upholds
   * community integrity, enables regulatory compliance, and is a primary
   * interface for staff moderation activities.
   *
   * @param connection
   * @param body Information about the moderation action to record, including
   *   action type, target, reason, and timing.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedBody()
    body: IDiscussionBoardModerationAction.ICreate,
  ): Promise<IDiscussionBoardModerationAction> {
    try {
      return await post__discussionBoard_moderator_moderationActions({
        moderator,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and review moderation actions taken on posts, users, and comments.
   *
   * Fetch a paginated and optionally filtered list of all moderation actions,
   * such as removal, warning, edit, restrict, restore, or escalate, performed
   * by moderators and admins. Enables management and review of platform
   * moderation events for auditability and staff training.
   *
   * The list supports filtering by actor (moderator), target user/content, date
   * window, and action type. This is a privileged endpoint requiring at least
   * moderator role.
   *
   * @param connection
   * @param body Pagination, filter, and search parameters for moderation
   *   actions.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedBody()
    body: IDiscussionBoardModerationAction.IRequest,
  ): Promise<IPageIDiscussionBoardModerationAction.ISummary> {
    try {
      return await patch__discussionBoard_moderator_moderationActions({
        moderator,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get details of a specific moderation action taken by staff.
   *
   * Retrieve the full detail of a specific moderation action, including all
   * relational context and action notes. Accessible only by moderation staff
   * for security, audit, and operational clarity.
   *
   * Ensures compliance requirements regarding moderation transparency and
   * traceability are met, supporting integrity in community governance.
   *
   * @param connection
   * @param moderationActionId Unique identifier of the moderation action to
   *   retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":moderationActionId")
  public async at(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedParam("moderationActionId")
    moderationActionId: string & tags.Format<"uuid">,
  ): Promise<IDiscussionBoardModerationAction> {
    try {
      return await get__discussionBoard_moderator_moderationActions_$moderationActionId(
        {
          moderator,
          moderationActionId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing moderation action record (e.g., restriction
   * reason/time).
   *
   * Update (modify) an existing moderation action. This endpoint allows
   * moderators or admins to change the moderation action parameters, such as
   * action type, affected user/post/comment, reason, or restriction timeframe.
   * Changes are fully audited and tracked in the database to preserve
   * historical state and regulatory compliance.
   *
   * This operation ensures consistency and traceability for all moderation
   * enforcement history. Security is strict, with access limited to users
   * having moderator or admin roles. The operation checks existence of the
   * moderation action and validates appropriate permissions on both the action
   * and the affected target.
   *
   * All updates are logged for compliance, with business validation on which
   * fields may be changed post-creation, and responses include updated
   * moderation action records.
   *
   * @param connection
   * @param moderationActionId Unique identifier for the target moderation
   *   action to update.
   * @param body Updates to apply to the moderation action, such as reason,
   *   type, timing, or affected entity.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":moderationActionId")
  public async update(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedParam("moderationActionId")
    moderationActionId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IDiscussionBoardModerationAction.IUpdate,
  ): Promise<IDiscussionBoardModerationAction> {
    try {
      return await put__discussionBoard_moderator_moderationActions_$moderationActionId(
        {
          moderator,
          moderationActionId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete (retire) a moderation action for audit compliance.
   *
   * Soft delete (retire) a specific moderation action, setting its deleted_at
   * timestamp for logical deletion and audit compliance. The record remains
   * visible in audits but not returned in regular API queries. Only moderators
   * or admins can perform this function; the API enforces permissions and
   * validates action existence. Soft-deleted moderation actions cannot be
   * enforced and are treated as obsolete in business workflows.
   *
   * Every record soft-deleted here is auditable and traceable. Attempting to
   * delete a non-existent or already retired moderation action will result in a
   * clear error. Soft deletion supports legal compliance, as all moderation
   * changes remain discoverable in case of investigation.
   *
   * @param connection
   * @param moderationActionId Unique ID of the moderation action to soft
   *   delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":moderationActionId")
  public async erase(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedParam("moderationActionId")
    moderationActionId: string & tags.Format<"uuid">,
  ): Promise<IDiscussionBoardModerationAction> {
    try {
      return await delete__discussionBoard_moderator_moderationActions_$moderationActionId(
        {
          moderator,
          moderationActionId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
