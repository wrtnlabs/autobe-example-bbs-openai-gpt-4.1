import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { post__discussionBoard_moderator_threads_$threadId_posts_$postId_comments } from "../../../../../../providers/post__discussionBoard_moderator_threads_$threadId_posts_$postId_comments";
import { ModeratorAuth } from "../../../../../../decorators/ModeratorAuth";
import { ModeratorPayload } from "../../../../../../decorators/payload/ModeratorPayload";
import { put__discussionBoard_moderator_threads_$threadId_posts_$postId_comments_$commentId } from "../../../../../../providers/put__discussionBoard_moderator_threads_$threadId_posts_$postId_comments_$commentId";
import { delete__discussionBoard_moderator_threads_$threadId_posts_$postId_comments_$commentId } from "../../../../../../providers/delete__discussionBoard_moderator_threads_$threadId_posts_$postId_comments_$commentId";

import { IDiscussionBoardComment } from "../../../../../../api/structures/IDiscussionBoardComment";

@Controller(
  "/discussionBoard/moderator/threads/:threadId/posts/:postId/comments",
)
export class DiscussionboardModeratorThreadsPostsCommentsController {
  /**
   * Create a new comment on a post in a thread.
   *
   * Create a new comment under a post in a thread. This operation enforces
   * business rules such as maximum comment length and nesting level, validates
   * presence of mandatory fields, and updates indexing structures for future
   * retrieval. It supports both root comments and replies. The API triggers
   * business flows for notifications and subscription updates as appropriate.
   * Only active (non-suspended) authenticated users may create comments.
   * Rejected attempts for invalid input or permission results in error
   * responses. The newly created comment object, including all meta fields, is
   * returned on success.
   *
   * @param connection
   * @param threadId Unique identifier for the parent thread.
   * @param postId Unique identifier for the parent post.
   * @param body Information required to create a new comment, including parent
   *   id, body, and nesting.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedParam("threadId")
    threadId: string & tags.Format<"uuid">,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IDiscussionBoardComment.ICreate,
  ): Promise<IDiscussionBoardComment> {
    try {
      return await post__discussionBoard_moderator_threads_$threadId_posts_$postId_comments(
        {
          moderator,
          threadId,
          postId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update the content or metadata of a specific comment.
   *
   * Update an existing comment in a thread's post. The operation accepts new
   * comment content and optionally metadata fields subject to validation.
   * Checks for edit privilege: only the comment author or users with escalated
   * permissions (moderator/admin) may edit. All edits append an edit history
   * entry for audit trails. Attempts to update deleted, locked, or non-existent
   * comments result in errors. Moderators and admins can override restricted
   * update windows. Success returns detailed updated comment data.
   *
   * @param connection
   * @param threadId Unique identifier of the parent thread.
   * @param postId Unique identifier of the parent post.
   * @param commentId Unique identifier of the comment to update.
   * @param body New content and/or metadata for updating the comment.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":commentId")
  public async update(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedParam("threadId")
    threadId: string & tags.Format<"uuid">,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedParam("commentId")
    commentId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IDiscussionBoardComment.IUpdate,
  ): Promise<IDiscussionBoardComment> {
    try {
      return await put__discussionBoard_moderator_threads_$threadId_posts_$postId_comments_$commentId(
        {
          moderator,
          threadId,
          postId,
          commentId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete a specific comment in a thread's post by setting its deleted_at
   * timestamp.
   *
   * Soft delete a specific comment within a post. This operation, available to
   * the comment author, moderator, or admin, sets the comment's deleted_at
   * timestamp. The comment is no longer returned in public results but remains
   * in the database for compliance, moderation, and possible restoration. This
   * preserves auditability and allows for regulatory response. Associated child
   * comments, attachments, and votes are preserved but subject to parent
   * visibility logic. The API returns 403 on insufficient permissions and 404
   * for already deleted or non-existent resources. The operation supports
   * business rules on user-driven and privileged deletions, aligned with
   * role-based access.
   *
   * @param connection
   * @param threadId Unique identifier for the parent thread.
   * @param postId Unique identifier for the parent post.
   * @param commentId Unique identifier for the comment to be deleted.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":commentId")
  public async erase(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedParam("threadId")
    threadId: string & tags.Format<"uuid">,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedParam("commentId")
    commentId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__discussionBoard_moderator_threads_$threadId_posts_$postId_comments_$commentId(
        {
          moderator,
          threadId,
          postId,
          commentId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
