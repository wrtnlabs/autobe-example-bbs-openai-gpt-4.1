import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patch__discussionBoard_moderator_users_$userId_moderator } from "../../../../../providers/patch__discussionBoard_moderator_users_$userId_moderator";
import { ModeratorAuth } from "../../../../../decorators/ModeratorAuth";
import { ModeratorPayload } from "../../../../../decorators/payload/ModeratorPayload";

import { IDiscussionBoardModerator } from "../../../../../api/structures/IDiscussionBoardModerator";

@Controller("/discussionBoard/moderator/users/:userId/moderator")
export class DiscussionboardModeratorUsersModeratorController {
  /**
   * Get moderator role status/assignment by userId.
   *
   * Fetch a user's moderator status and assignment record, including active
   * status, suspension history, assignment, and revocation timestamps, as
   * managed in the discussion_board_moderators table. The endpoint is intended
   * for admins and moderators to verify or audit a user's moderation privileges
   * and compliance with assignment or revocation workflows.
   *
   * Response provides only the moderator-specific record for the userId, not
   * the base user account details. Use the /users/{userId} endpoint for general
   * profile information; this endpoint provides moderation context only.
   * Typical use cases include privileges checks, compliance audits, and
   * evaluating eligibility for moderation actions.
   *
   * @param connection
   * @param userId Unique identifier of the user whose moderator record is to be
   *   fetched
   * @param body Moderator record query parameters (future use)
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async moderatorStatus(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedParam("userId")
    userId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IDiscussionBoardModerator.IRequest,
  ): Promise<IDiscussionBoardModerator> {
    try {
      return await patch__discussionBoard_moderator_users_$userId_moderator({
        moderator,
        userId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
