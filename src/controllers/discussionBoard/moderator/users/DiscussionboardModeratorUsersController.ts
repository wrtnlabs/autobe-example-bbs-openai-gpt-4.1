import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patch__discussionBoard_moderator_users } from "../../../../providers/patch__discussionBoard_moderator_users";
import { ModeratorAuth } from "../../../../decorators/ModeratorAuth";
import { ModeratorPayload } from "../../../../decorators/payload/ModeratorPayload";
import { get__discussionBoard_moderator_users_$userId } from "../../../../providers/get__discussionBoard_moderator_users_$userId";
import { put__discussionBoard_moderator_users_$userId } from "../../../../providers/put__discussionBoard_moderator_users_$userId";
import { delete__discussionBoard_moderator_users_$userId } from "../../../../providers/delete__discussionBoard_moderator_users_$userId";

import { IPageIDiscussionBoardUser } from "../../../../api/structures/IPageIDiscussionBoardUser";
import { IDiscussionBoardUser } from "../../../../api/structures/IDiscussionBoardUser";

@Controller("/discussionBoard/moderator/users")
export class DiscussionboardModeratorUsersController {
  /**
   * Paginated, advanced search of users (moderator/admin access).
   *
   * Search and list registered users of the discussion board with advanced
   * filtering by role-based access, sorting by registration, last login, and
   * other profile attributes. The operation supports pagination for large user
   * sets, and optionally restricts results to the caller's visibility according
   * to their role (admin can view all, moderators can view most, standard users
   * cannot access this endpoint).
   *
   * User details may include email, username, account status
   * (verified/suspended), and important timestamps. Sensitive data (like
   * password hashes) is never exposed in responses. This endpoint helps
   * moderators and admins enforce compliance, monitor growth, or intervene
   * during incidents.
   *
   * Refer to the discussion_board_users Prisma schema for the full set of
   * accessible/returnable fields and use appropriate request and response types
   * to support scalable management workflows.
   *
   * @param connection
   * @param body User search criteria, including pagination and filters
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedBody()
    body: IDiscussionBoardUser.IRequest,
  ): Promise<IPageIDiscussionBoardUser> {
    try {
      return await patch__discussionBoard_moderator_users({
        moderator,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get a user's detailed profile/info by userId.
   *
   * Get detailed, role-appropriate information about a specific user by their
   * unique ID. Typically used by moderators and admins to review a user's
   * account health, status, last login, verification, and profile information.
   *
   * Standard users may not access this endpoint for others. Only authorized
   * roles see sensitive administrative information (such as suspension, status,
   * or timestamps), but password hashes and any confidential fields are never
   * returned.
   *
   * Response structure strictly reflects the schema for discussion_board_users
   * and includes all compliance-required metadata for auditing purposes.
   *
   * @param connection
   * @param userId Unique identifier of the user to retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":userId")
  public async at(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedParam("userId")
    userId: string & tags.Format<"uuid">,
  ): Promise<IDiscussionBoardUser> {
    try {
      return await get__discussionBoard_moderator_users_$userId({
        moderator,
        userId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Admin/moderator update to user account by userId.
   *
   * Update the profile and status of a user by userId. Allowed fields are set
   * by business rules mapped closely to the discussion_board_users schema, such
   * as display name, verification, suspension, and admin-controlled attributes.
   * Password resets and other security updates must be performed using
   * dedicated endpoints for audit and compliance.
   *
   * Authorization is limited to moderator or admin roles. The update operation
   * enforces all required validation and auditing, appending to the compliance
   * log as needed.
   *
   * @param connection
   * @param userId Unique identifier for the user being edited
   * @param body Attributes to update in the user account
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":userId")
  public async update(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedParam("userId")
    userId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IDiscussionBoardUser.IUpdate,
  ): Promise<IDiscussionBoardUser> {
    try {
      return await put__discussionBoard_moderator_users_$userId({
        moderator,
        userId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft-delete (deactivate) user by userId (mod/admin only).
   *
   * Soft-delete (hide) an existing user by setting deleted_at, so they no
   * longer appear in active API results or can authenticate, but are preserved
   * for audit and regulatory compliance. Access is limited to moderators and
   * admins. The operation ensures all references and compliance records are
   * preserved. Additional recovery or erasure flows are managed via separate
   * endpoints and workflows.
   *
   * If a user is already soft-deleted, the operation is idempotent. Attempts to
   * delete non-existent users return an error message. All actions are logged
   * for audit and incident response purposes.
   *
   * @param connection
   * @param userId Unique identifier of the user to soft-delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":userId")
  public async erase(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedParam("userId")
    userId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__discussionBoard_moderator_users_$userId({
        moderator,
        userId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
