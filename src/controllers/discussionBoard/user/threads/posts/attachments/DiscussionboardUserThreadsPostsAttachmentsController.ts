import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { post__discussionBoard_user_threads_$threadId_posts_$postId_attachments } from "../../../../../../providers/post__discussionBoard_user_threads_$threadId_posts_$postId_attachments";
import { UserAuth } from "../../../../../../decorators/UserAuth";
import { UserPayload } from "../../../../../../decorators/payload/UserPayload";
import { put__discussionBoard_user_threads_$threadId_posts_$postId_attachments_$attachmentId } from "../../../../../../providers/put__discussionBoard_user_threads_$threadId_posts_$postId_attachments_$attachmentId";
import { delete__discussionBoard_user_threads_$threadId_posts_$postId_attachments_$attachmentId } from "../../../../../../providers/delete__discussionBoard_user_threads_$threadId_posts_$postId_attachments_$attachmentId";

import { IDiscussionBoardAttachment } from "../../../../../../api/structures/IDiscussionBoardAttachment";

@Controller("/discussionBoard/user/threads/:threadId/posts/:postId/attachments")
export class DiscussionboardUserThreadsPostsAttachmentsController {
  /**
   * Upload a new attachment to a specified post in a thread.
   *
   * Create a new file or media attachment for a post within a discussion
   * thread. The user must be authenticated and authorized to upload, and the
   * post must not be locked or archived. If successful, the file metadata and
   * access URI is returned. File uploads are audited for compliance and are
   * subject to moderation and content policy review. Only the post author and
   * moderators may manage attachments. Security rules validate MIME type and
   * enforce per-file size limits. Error handling includes invalid format,
   * exceeding size quotas, or uploading to a deleted/locked/archived post.
   *
   * Authorization requires user authentication as either a regular user,
   * moderator, or admin. All uploads are logged in the audit log for
   * compliance. The operation references the discussion_board_attachments model
   * and ensures relational integrity with the parent post.
   *
   * @param connection
   * @param threadId Unique identifier of the thread containing the post.
   * @param postId Unique identifier of the post to attach the file to.
   * @param body Attachment metadata including file details, uploaded by the
   *   user.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @UserAuth()
    user: UserPayload,
    @TypedParam("threadId")
    threadId: string & tags.Format<"uuid">,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IDiscussionBoardAttachment.ICreate,
  ): Promise<IDiscussionBoardAttachment> {
    try {
      return await post__discussionBoard_user_threads_$threadId_posts_$postId_attachments(
        {
          user,
          threadId,
          postId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update metadata for a specific attachment on a post within a thread.
   *
   * Update file attachment metadata for a specific attachment belonging to a
   * post. Only the user who uploaded the file, a moderator, or an admin may
   * update attachment metadata (such as file name or content type). Changing
   * the physical file contents or URL is not supported through this operation.
   * The parent post must not be locked or archived, and the attachment must not
   * be soft deleted.
   *
   * All update actions are logged for compliance in audit logs. Business
   * validation ensures only allowed fields are changed and all field
   * constraints are respected. If attachment does not exist, is not owned by
   * the user, or permissions are insufficient, access is denied with an error.
   * Refer to discussion_board_attachments schema for updatable fields.
   *
   * @param connection
   * @param threadId Unique identifier of the thread containing the post.
   * @param postId Unique identifier of the post that owns the attachment.
   * @param attachmentId Unique identifier of the attachment to update.
   * @param body Updated attachment metadata (file name, content type, etc.).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":attachmentId")
  public async update(
    @UserAuth()
    user: UserPayload,
    @TypedParam("threadId")
    threadId: string & tags.Format<"uuid">,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedParam("attachmentId")
    attachmentId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IDiscussionBoardAttachment.IUpdate,
  ): Promise<IDiscussionBoardAttachment> {
    try {
      return await put__discussionBoard_user_threads_$threadId_posts_$postId_attachments_$attachmentId(
        {
          user,
          threadId,
          postId,
          attachmentId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft-delete an attachment from a post in a thread, retaining record for
   * compliance.
   *
   * Soft-delete a file or media attachment from a post in a thread. Only the
   * upload owner, moderator, or admin can perform this operation. Deletion is
   * recorded by setting the "deleted_at" timestamp, retaining the record for
   * audit and compliance. Once deleted, the attachment is no longer accessible
   * or displayed in user-facing APIs or the post/thread content view.
   * Operations are fully audited as per platform regulations.
   *
   * If the attachment or its parent post is already deleted or does not exist,
   * an appropriate error is returned. Business logic ensures no permanent erase
   * unless enforced by regulatory action. This endpoint operates on the
   * discussion_board_attachments model and requires validation of threadId,
   * postId, and attachmentId.
   *
   * @param connection
   * @param threadId Unique identifier for the discussion thread.
   * @param postId Unique identifier for the post from which the attachment will
   *   be deleted.
   * @param attachmentId Identifier for the attachment to soft-delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":attachmentId")
  public async erase(
    @UserAuth()
    user: UserPayload,
    @TypedParam("threadId")
    threadId: string & tags.Format<"uuid">,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedParam("attachmentId")
    attachmentId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__discussionBoard_user_threads_$threadId_posts_$postId_attachments_$attachmentId(
        {
          user,
          threadId,
          postId,
          attachmentId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
