import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { post__discussionBoard_user_threads_$threadId_posts_$postId_comments_$commentId_attachments } from "../../../../../../../providers/post__discussionBoard_user_threads_$threadId_posts_$postId_comments_$commentId_attachments";
import { UserAuth } from "../../../../../../../decorators/UserAuth";
import { UserPayload } from "../../../../../../../decorators/payload/UserPayload";
import { patch__discussionBoard_user_threads_$threadId_posts_$postId_comments_$commentId_attachments } from "../../../../../../../providers/patch__discussionBoard_user_threads_$threadId_posts_$postId_comments_$commentId_attachments";
import { get__discussionBoard_user_threads_$threadId_posts_$postId_comments_$commentId_attachments_$attachmentId } from "../../../../../../../providers/get__discussionBoard_user_threads_$threadId_posts_$postId_comments_$commentId_attachments_$attachmentId";
import { put__discussionBoard_user_threads_$threadId_posts_$postId_comments_$commentId_attachments_$attachmentId } from "../../../../../../../providers/put__discussionBoard_user_threads_$threadId_posts_$postId_comments_$commentId_attachments_$attachmentId";
import { delete__discussionBoard_user_threads_$threadId_posts_$postId_comments_$commentId_attachments_$attachmentId } from "../../../../../../../providers/delete__discussionBoard_user_threads_$threadId_posts_$postId_comments_$commentId_attachments_$attachmentId";

import { IDiscussionBoardAttachment } from "../../../../../../../api/structures/IDiscussionBoardAttachment";
import { IPageIDiscussionBoardAttachment } from "../../../../../../../api/structures/IPageIDiscussionBoardAttachment";

@Controller(
  "/discussionBoard/user/threads/:threadId/posts/:postId/comments/:commentId/attachments",
)
export class DiscussionboardUserThreadsPostsCommentsAttachmentsController {
  /**
   * Upload a new attachment file to a specific comment within a post/thread.
   *
   * Attach a new file to a comment on a post in a thread. The file is saved and
   * linked to the parent comment, and must comply with business and regulatory
   * rules on allowed attachments. Users must be authenticated and own/write the
   * comment or have moderator/admin privileges. All file attachments are
   * monitored for prohibited content and violations.
   *
   * Upon success, file metadata (id, file name, URL, content type, uploader id,
   * upload timestamp) is returned. The parent comment must not be locked,
   * archived, or deleted. Security logic enforces file type and file size
   * quotas. The operation references the discussion_board_attachments schema
   * for compliance and moderation protocols.
   *
   * @param connection
   * @param threadId ID of the thread containing the comment.
   * @param postId ID of the parent post.
   * @param commentId ID of the comment to attach the file to.
   * @param body Attachment details including file information, uploader, and
   *   link to comment ID.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @UserAuth()
    user: UserPayload,
    @TypedParam("threadId")
    threadId: string & tags.Format<"uuid">,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedParam("commentId")
    commentId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IDiscussionBoardAttachment.ICreate,
  ): Promise<IDiscussionBoardAttachment> {
    try {
      return await post__discussionBoard_user_threads_$threadId_posts_$postId_comments_$commentId_attachments(
        {
          user,
          threadId,
          postId,
          commentId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * List and search attachments linked to a specific comment on a post in a
   * thread.
   *
   * Retrieve a paginated, filterable, and sortable list of file or media
   * attachments for a specific comment on a post within a thread. This endpoint
   * supports advanced filtering by file type, upload date, or status, and
   * allows sorting and pagination for efficient navigation in threads with many
   * attachments. Only users with access to the comment (author, moderators,
   * admins) can view attachment metadata that isn't public.
   *
   * Relies on the discussion_board_attachments schema, especially leveraging
   * the comment_id field to filter results. Filtering criteria and pagination
   * must be provided in the request body. Useful for users wishing to see all
   * files attached to a comment, for moderation review, or for managing their
   * own uploads.
   *
   * @param connection
   * @param threadId Unique identifier of the thread containing the comment and
   *   post.
   * @param postId Unique identifier of the parent post.
   * @param commentId Unique identifier of the comment whose attachments are
   *   listed.
   * @param body Filtering, sorting, and pagination query parameters for
   *   attachment list.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @UserAuth()
    user: UserPayload,
    @TypedParam("threadId")
    threadId: string & tags.Format<"uuid">,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedParam("commentId")
    commentId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IDiscussionBoardAttachment.IRequest,
  ): Promise<IPageIDiscussionBoardAttachment> {
    try {
      return await patch__discussionBoard_user_threads_$threadId_posts_$postId_comments_$commentId_attachments(
        {
          user,
          threadId,
          postId,
          commentId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get full metadata for a specified attachment on a comment in a thread/post.
   *
   * Fetch full metadata for a single attachment linked to a comment on a
   * specific post within a thread. Users must be authenticated and have proper
   * authorization (comment author, post author, moderators, or admin) to access
   * restricted or non-public file information. Response includes metadata such
   * as attachment ID, file name, URL, content type, file size, upload
   * timestamp, and uploader identity. Results are drawn from the
   * discussion_board_attachments model using thread, post, comment, and
   * attachment IDs as context.
   *
   * Returns access error if attachment does not exist, is deleted, or the user
   * lacks sufficient privileges.
   *
   * @param connection
   * @param threadId Thread ID containing the comment.
   * @param postId Post ID containing the target comment.
   * @param commentId Comment ID for the parent comment.
   * @param attachmentId Attachment ID to query for full details.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":attachmentId")
  public async at(
    @UserAuth()
    user: UserPayload,
    @TypedParam("threadId")
    threadId: string & tags.Format<"uuid">,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedParam("commentId")
    commentId: string & tags.Format<"uuid">,
    @TypedParam("attachmentId")
    attachmentId: string & tags.Format<"uuid">,
  ): Promise<IDiscussionBoardAttachment> {
    try {
      return await get__discussionBoard_user_threads_$threadId_posts_$postId_comments_$commentId_attachments_$attachmentId(
        {
          user,
          threadId,
          postId,
          commentId,
          attachmentId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update attachment metadata for a file attached to a comment in a
   * post/thread.
   *
   * Edit (update) the metadata for a specific file attachment on a comment.
   * Only permitted for the file owner (uploader) or privileged actors
   * (moderator/admin). The API accepts updates only for allowed attributes
   * (file name, content type), with strict validation, audit, and compliance
   * logging. Attempts to update non-editable properties such as the file
   * content or URL are rejected. If the attachment is deleted or the user lacks
   * permission, the system responds with proper error handling and audit
   * record.
   *
   * All changes are routed through the discussion_board_attachments schemaâ€™s
   * update logic, ensuring proper relationship with comment, post, and thread.
   *
   * @param connection
   * @param threadId Thread ID for parent context.
   * @param postId Post ID holding the target comment.
   * @param commentId Comment ID owning the attachment.
   * @param attachmentId Attachment ID to update.
   * @param body New metadata values (file name, content type) to update.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":attachmentId")
  public async update(
    @UserAuth()
    user: UserPayload,
    @TypedParam("threadId")
    threadId: string & tags.Format<"uuid">,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedParam("commentId")
    commentId: string & tags.Format<"uuid">,
    @TypedParam("attachmentId")
    attachmentId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IDiscussionBoardAttachment.IUpdate,
  ): Promise<IDiscussionBoardAttachment> {
    try {
      return await put__discussionBoard_user_threads_$threadId_posts_$postId_comments_$commentId_attachments_$attachmentId(
        {
          user,
          threadId,
          postId,
          commentId,
          attachmentId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft-delete an attachment from a comment, retaining metadata for
   * compliance.
   *
   * Soft-delete a file/media attachment from a comment (within a post/thread).
   * The operation sets the attachment's deleted_at timestamp. Only the
   * uploader, moderator, or admin can access the endpoint, and the parent
   * comment must not be deleted or locked. Soft-deleted attachments remain for
   * audit and regulatory review, but are no longer visible in user APIs. If the
   * attachment does not exist or is already deleted, the endpoint returns an
   * error. All actions are audited.
   *
   * @param connection
   * @param threadId Thread ID for parent container.
   * @param postId Post ID housing the comment and attachment.
   * @param commentId Comment ID for the parent comment.
   * @param attachmentId Attachment ID to be soft deleted.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":attachmentId")
  public async erase(
    @UserAuth()
    user: UserPayload,
    @TypedParam("threadId")
    threadId: string & tags.Format<"uuid">,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedParam("commentId")
    commentId: string & tags.Format<"uuid">,
    @TypedParam("attachmentId")
    attachmentId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__discussionBoard_user_threads_$threadId_posts_$postId_comments_$commentId_attachments_$attachmentId(
        {
          user,
          threadId,
          postId,
          commentId,
          attachmentId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
