import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { post__discussionBoard_user_threads_$threadId_posts_$postId_comments_$commentId_replies } from "../../../../../../../providers/post__discussionBoard_user_threads_$threadId_posts_$postId_comments_$commentId_replies";
import { UserAuth } from "../../../../../../../decorators/UserAuth";
import { UserPayload } from "../../../../../../../decorators/payload/UserPayload";
import { patch__discussionBoard_user_threads_$threadId_posts_$postId_comments_$commentId_replies } from "../../../../../../../providers/patch__discussionBoard_user_threads_$threadId_posts_$postId_comments_$commentId_replies";
import { get__discussionBoard_user_threads_$threadId_posts_$postId_comments_$commentId_replies_$replyId } from "../../../../../../../providers/get__discussionBoard_user_threads_$threadId_posts_$postId_comments_$commentId_replies_$replyId";
import { put__discussionBoard_user_threads_$threadId_posts_$postId_comments_$commentId_replies_$replyId } from "../../../../../../../providers/put__discussionBoard_user_threads_$threadId_posts_$postId_comments_$commentId_replies_$replyId";
import { delete__discussionBoard_user_threads_$threadId_posts_$postId_comments_$commentId_replies_$replyId } from "../../../../../../../providers/delete__discussionBoard_user_threads_$threadId_posts_$postId_comments_$commentId_replies_$replyId";

import { IDiscussionBoardComment } from "../../../../../../../api/structures/IDiscussionBoardComment";
import { IPageIDiscussionBoardComment } from "../../../../../../../api/structures/IPageIDiscussionBoardComment";

@Controller(
  "/discussionBoard/user/threads/:threadId/posts/:postId/comments/:commentId/replies",
)
export class DiscussionboardUserThreadsPostsCommentsRepliesController {
  /**
   * Create a new reply to a comment (discussion_board_comments).
   *
   * This operation allows an authenticated user to post a new reply beneath an
   * existing comment (as a nested comment) within a thread and post. It records
   * the association via the parent_id and post_id fields, increments the
   * nesting_level, and ensures replies do not exceed a maximum hierarchy depth
   * (usually 5). The request validates presence and length of reply body,
   * checks authorization, and automatically links the reply to the creating
   * user for audit. Soft-deletion and moderation workflows are supported;
   * actions are retained in compliance/audit trails. The response returns the
   * full reply object as created, with standard metadata.
   *
   * @param connection
   * @param threadId Thread UUID for the reply tree
   * @param postId Post UUID to which this reply belongs
   * @param commentId Parent comment UUID under which to add the reply
   * @param body Body, author, and hierarchy details for new reply creation.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @UserAuth()
    user: UserPayload,
    @TypedParam("threadId")
    threadId: string & tags.Format<"uuid">,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedParam("commentId")
    commentId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IDiscussionBoardComment.ICreate,
  ): Promise<IDiscussionBoardComment> {
    try {
      return await post__discussionBoard_user_threads_$threadId_posts_$postId_comments_$commentId_replies(
        {
          user,
          threadId,
          postId,
          commentId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Paginated, filtered retrieval of all replies to a comment
   * (discussion_board_comments).
   *
   * This operation retrieves all replies (nested comments) under a specific
   * parent comment for a given thread and post. Replies are modeled as
   * discussion_board_comments with their parent_id field referencing the parent
   * comment, and the nesting_level field capturing how deep this comment is in
   * the hierarchy (up to five). The operation returns results with full reply
   * information (text, author, time, nesting, and soft-deletion status),
   * supports filtering by date/user/nesting_level, paginates results for
   * performance, and ensures only non-soft-deleted replies are visible to
   * normal users. Moderators may use additional filters to review
   * hidden/deleted replies. This endpoint is fundamental for rendering threaded
   * conversations and supports sorting (by created_at, nesting_level, etc.).
   *
   * Security: Only authenticated users may see their own hidden/deleted
   * replies; otherwise, replies with deleted_at set are excluded.
   * Moderator/admin roles may receive all results including soft-deleted
   * comments for moderation workflows.
   *
   * @param connection
   * @param threadId Target thread's unique identifier (UUID format)
   * @param postId Target post's unique identifier (UUID format)
   * @param commentId Target parent comment's unique identifier (UUID format)
   * @param body Search/filtering and pagination specification for fetching
   *   comment replies.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @UserAuth()
    user: UserPayload,
    @TypedParam("threadId")
    threadId: string & tags.Format<"uuid">,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedParam("commentId")
    commentId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IDiscussionBoardComment.IRequest,
  ): Promise<IPageIDiscussionBoardComment> {
    try {
      return await patch__discussionBoard_user_threads_$threadId_posts_$postId_comments_$commentId_replies(
        {
          user,
          threadId,
          postId,
          commentId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Fetch a single reply's detailed information by its ID
   * (discussion_board_comments).
   *
   * Retrieve the full details of a specific reply (nested comment) belonging to
   * a parent comment under a given thread and post. Replies are tracked in the
   * discussion_board_comments table, with fields including author, content,
   * nesting level (for threaded hierarchy up to 5 levels), creation and update
   * timestamps, and optional soft-delete. For normal users, soft-deleted
   * replies are hidden; moderators/admins may retrieve deleted replies as part
   * of moderation. The full reply object includes links to related post and
   * thread, along with edit history if needed for compliance or audit.
   *
   * Security: User authentication is required. Moderators and admins have
   * extended visibility. Returns not found if reply is not visible in context
   * or access is denied.
   *
   * Useful for rendering reply context, supporting moderation, or navigating to
   * specific reply locations in the UI.
   *
   * @param connection
   * @param threadId Thread UUID to scope lookup
   * @param postId Post UUID for reply context
   * @param commentId Parent comment UUID for reply
   * @param replyId The reply (discussion_board_comments.id) UUID to retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":replyId")
  public async at(
    @UserAuth()
    user: UserPayload,
    @TypedParam("threadId")
    threadId: string & tags.Format<"uuid">,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedParam("commentId")
    commentId: string & tags.Format<"uuid">,
    @TypedParam("replyId")
    replyId: string & tags.Format<"uuid">,
  ): Promise<IDiscussionBoardComment> {
    try {
      return await get__discussionBoard_user_threads_$threadId_posts_$postId_comments_$commentId_replies_$replyId(
        {
          user,
          threadId,
          postId,
          commentId,
          replyId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update content of a reply (discussion_board_comments).
   *
   * This operation updates the content of an existing reply beneath a comment
   * on a given thread and post. The reply must be active (not soft-deleted),
   * unless a moderator/admin is performing the update. Only the reply's author,
   * moderators, or admins are permitted to update. Fields subject to update
   * include the reply body and optionally status fields. All updates are
   * tracked with edit histories for full audit compliance. Validation rules
   * enforce proper nesting and soft-delete semantics. Returns full reply object
   * with current state.
   *
   * @param connection
   * @param threadId Thread UUID for reply tree context
   * @param postId Post UUID the reply belongs to
   * @param commentId Parent comment UUID
   * @param replyId Reply UUID to update
   * @param body Updated reply content and metadata. Only updatable fields are
   *   allowed.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":replyId")
  public async update(
    @UserAuth()
    user: UserPayload,
    @TypedParam("threadId")
    threadId: string & tags.Format<"uuid">,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedParam("commentId")
    commentId: string & tags.Format<"uuid">,
    @TypedParam("replyId")
    replyId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IDiscussionBoardComment.IUpdate,
  ): Promise<IDiscussionBoardComment> {
    try {
      return await put__discussionBoard_user_threads_$threadId_posts_$postId_comments_$commentId_replies_$replyId(
        {
          user,
          threadId,
          postId,
          commentId,
          replyId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft-delete a reply under a comment (discussion_board_comments).
   *
   * Deletes a specific reply (nested comment) from a comment thread. This
   * operation performs a soft delete by setting the deleted_at timestamp on the
   * targeted reply (discussion_board_comments record). The reply will no longer
   * be visible to standard users but is retained for moderators, possible
   * restoration, and compliance audits. Only the reply author, moderators, or
   * administrators may execute this operation. All deletions are logged for
   * compliance. If a moderator/admin performs the deletion, the system
   * immediately hides the reply from all users. Soft-deleted data can support
   * future recovery, if needed.
   *
   * @param connection
   * @param threadId Thread UUID
   * @param postId Post UUID
   * @param commentId Parent comment UUID
   * @param replyId Reply UUID (comment id) to be soft-deleted
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":replyId")
  public async erase(
    @UserAuth()
    user: UserPayload,
    @TypedParam("threadId")
    threadId: string & tags.Format<"uuid">,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedParam("commentId")
    commentId: string & tags.Format<"uuid">,
    @TypedParam("replyId")
    replyId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__discussionBoard_user_threads_$threadId_posts_$postId_comments_$commentId_replies_$replyId(
        {
          user,
          threadId,
          postId,
          commentId,
          replyId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
