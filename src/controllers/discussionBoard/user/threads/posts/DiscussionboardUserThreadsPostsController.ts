import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { post__discussionBoard_user_threads_$threadId_posts } from "../../../../../providers/post__discussionBoard_user_threads_$threadId_posts";
import { UserAuth } from "../../../../../decorators/UserAuth";
import { UserPayload } from "../../../../../decorators/payload/UserPayload";
import { put__discussionBoard_user_threads_$threadId_posts_$postId } from "../../../../../providers/put__discussionBoard_user_threads_$threadId_posts_$postId";
import { delete__discussionBoard_user_threads_$threadId_posts_$postId } from "../../../../../providers/delete__discussionBoard_user_threads_$threadId_posts_$postId";

import { IDiscussionBoardPost } from "../../../../../api/structures/IDiscussionBoardPost";

@Controller("/discussionBoard/user/threads/:threadId/posts")
export class DiscussionboardUserThreadsPostsController {
  /**
   * Create a new post in a thread (discussion_board_posts).
   *
   * Create a new post as part of a specified discussion thread. The request
   * body should include required fields such as title and body; author/user
   * context and timestamps are set by the backend. Newly created posts are
   * unlocked by default and attributed to the authenticated user.
   *
   * This operation supports only authenticated users (roles: user, moderator,
   * admin). Access is forbidden if the target thread does not exist, is locked,
   * or the user is suspended or not verified. Duplicate post titles within the
   * same thread are rejected according to business and schema rules. Moderation
   * queues, flagging, and post lifecycle management are handled elsewhere. Upon
   * success, full post details are returned.
   *
   * @param connection
   * @param threadId Identifier of the thread in which to create the post.
   * @param body Fields for creating a new post in the thread.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @UserAuth()
    user: UserPayload,
    @TypedParam("threadId")
    threadId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IDiscussionBoardPost.ICreate,
  ): Promise<IDiscussionBoardPost> {
    try {
      return await post__discussionBoard_user_threads_$threadId_posts({
        user,
        threadId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a post in a thread (discussion_board_posts).
   *
   * Update an existing post identified by both thread and post ID. Only
   * permitted fields as defined in the post update schema (title, body, lock
   * status) may be altered. The system validates that the acting user is either
   * the post owner or has moderator/admin privileges. Title must remain unique
   * within the thread.
   *
   * On update, the system records the modification in both the main post record
   * (updated_at) and in the edit histories table for compliance. Posts that are
   * locked or soft-deleted cannot be updated except by elevated roles. Errors
   * include not found, forbidden, or validation failures.
   *
   * @param connection
   * @param threadId ID of the thread containing the post.
   * @param postId Unique ID of the post to update.
   * @param body Fields to update on the post.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":postId")
  public async update(
    @UserAuth()
    user: UserPayload,
    @TypedParam("threadId")
    threadId: string & tags.Format<"uuid">,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IDiscussionBoardPost.IUpdate,
  ): Promise<IDiscussionBoardPost> {
    try {
      return await put__discussionBoard_user_threads_$threadId_posts_$postId({
        user,
        threadId,
        postId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete a specific post in a thread by setting its deleted_at
   * timestamp.
   *
   * Delete a specific post within a thread by performing a soft deletion. This
   * API sets the post's deleted_at timestamp, effectively hiding the post from
   * standard user access while retaining it for compliance, moderation, or
   * later auditing. Only authorized users (the post author, moderators, or
   * admins) may invoke this operation. The operation does not erase associated
   * comments or attachments, but those may become hidden through parent
   * soft-deletion logic. A successful soft delete allows the forum to maintain
   * audit trails and supports moderator review in case of disputes or appeals.
   * If inappropriate users attempt deletion, an explicit permission denied
   * error will be returned. Attempting to delete a non-existent or
   * already-deleted post results in a 404 error with appropriate messaging.
   *
   * @param connection
   * @param threadId Unique identifier for the parent discussion thread.
   * @param postId Unique identifier for the target post within the thread.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":postId")
  public async erase(
    @UserAuth()
    user: UserPayload,
    @TypedParam("threadId")
    threadId: string & tags.Format<"uuid">,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__discussionBoard_user_threads_$threadId_posts_$postId(
        {
          user,
          threadId,
          postId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
