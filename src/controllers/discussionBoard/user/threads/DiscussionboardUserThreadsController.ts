import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { post__discussionBoard_user_threads } from "../../../../providers/post__discussionBoard_user_threads";
import { UserAuth } from "../../../../decorators/UserAuth";
import { UserPayload } from "../../../../decorators/payload/UserPayload";
import { put__discussionBoard_user_threads_$threadId } from "../../../../providers/put__discussionBoard_user_threads_$threadId";
import { delete__discussionBoard_user_threads_$threadId } from "../../../../providers/delete__discussionBoard_user_threads_$threadId";

import { IDiscussionBoardThread } from "../../../../api/structures/IDiscussionBoardThread";

@Controller("/discussionBoard/user/threads")
export class DiscussionboardUserThreadsController {
  /**
   * Create a new discussion thread (discussion_board_threads).
   *
   * Create a new discussion thread under the current user's identity. This
   * endpoint accepts the thread input payload, including the thread's title,
   * and automatically populates creator, timestamps, and default status flags
   * (unlocked/unarchived). Only authenticated users (user, moderator, admin
   * roles) are allowed to create threads.
   *
   * Thread titles must be unique and non-empty per validation rules in the
   * discussion_board_threads schema. Attempts to create a thread with a
   * duplicate title will result in a validation error. Additional thread
   * management (locking/archiving) is performed through separate
   * moderator/admin workflows.
   *
   * Business logic requires moderation or automatic flagging for prohibited
   * thread content or rapid, duplicate thread creation. Upon success, full
   * thread metadata including ID is returned. If a user is suspended or not
   * verified, creation is forbidden.
   *
   * @param connection
   * @param body Information for creating a new thread (title, etc.)
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @UserAuth()
    user: UserPayload,
    @TypedBody()
    body: IDiscussionBoardThread.ICreate,
  ): Promise<IDiscussionBoardThread> {
    try {
      return await post__discussionBoard_user_threads({
        user,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing discussion thread by ID (discussion_board_threads).
   *
   * Update a thread's properties, such as title or status (lock/archive), by
   * its unique identifier. The request body should contain only the editable
   * fields permitted by system policy. Thread ownership is required unless the
   * acting user is a moderator or admin, who may update any thread per
   * community or moderation guidelines.
   *
   * All updates are tracked via the thread's updated_at field and may be
   * accompanied by audit log entries or edit history per compliance. Soft
   * deletion is not supported by this endpoint. Title changes are validated for
   * uniqueness.
   *
   * Errors include thread not found, permission denied, and validation
   * failures. Only authenticated users, moderators, or admins may perform
   * updates.
   *
   * @param connection
   * @param threadId ID of the thread to update
   * @param body Update payload for the discussion thread. Only editable fields
   *   should be sent.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":threadId")
  public async update(
    @UserAuth()
    user: UserPayload,
    @TypedParam("threadId")
    threadId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IDiscussionBoardThread.IUpdate,
  ): Promise<IDiscussionBoardThread> {
    try {
      return await put__discussionBoard_user_threads_$threadId({
        user,
        threadId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete a discussion thread by ID (discussion_board_threads).
   *
   * Soft delete a discussion thread so that it is no longer visible to regular
   * users but is retained for compliance and potential restoration by
   * moderators or admins. The endpoint sets the deleted_at timestamp for the
   * thread, adhering to platform policy for logical deletion.
   *
   * Only authenticated users, who are either the thread owners or possess
   * moderator/admin privileges, may perform this action. Regular users cannot
   * delete threads they do not own. Deletion actions are logged for audit
   * purposes, ensuring traceability per compliance requirements. Physically
   * removed threads are only supported by admin workflow, not by this
   * endpoint.
   *
   * Expected errors include thread not found, permission denied, or already
   * deleted. No response body is returned on success; relevant status and
   * timestamp can be inferred elsewhere.
   *
   * @param connection
   * @param threadId Unique identifier of the thread to be soft deleted.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":threadId")
  public async erase(
    @UserAuth()
    user: UserPayload,
    @TypedParam("threadId")
    threadId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__discussionBoard_user_threads_$threadId({
        user,
        threadId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
