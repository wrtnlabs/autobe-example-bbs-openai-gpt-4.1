import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { post__discussionBoard_user_polls_$pollId_pollVotes } from "../../../../../providers/post__discussionBoard_user_polls_$pollId_pollVotes";
import { UserAuth } from "../../../../../decorators/UserAuth";
import { UserPayload } from "../../../../../decorators/payload/UserPayload";
import { patch__discussionBoard_user_polls_$pollId_pollVotes } from "../../../../../providers/patch__discussionBoard_user_polls_$pollId_pollVotes";
import { get__discussionBoard_user_polls_$pollId_pollVotes_$pollVoteId } from "../../../../../providers/get__discussionBoard_user_polls_$pollId_pollVotes_$pollVoteId";
import { put__discussionBoard_user_polls_$pollId_pollVotes_$pollVoteId } from "../../../../../providers/put__discussionBoard_user_polls_$pollId_pollVotes_$pollVoteId";

import { IDiscussionBoardPollVote } from "../../../../../api/structures/IDiscussionBoardPollVote";
import { IPageIDiscussionBoardPollVote } from "../../../../../api/structures/IPageIDiscussionBoardPollVote";

@Controller("/discussionBoard/user/polls/:pollId/pollVotes")
export class DiscussionboardUserPollsPollvotesController {
  /**
   * Vote in a poll (single or multiple choice as poll allows).
   *
   * Enables authenticated users to submit their vote in a poll by selecting one
   * or more poll options. The operation enforces poll state (must be open),
   * user eligibility (one vote per option), and respects poll configuration
   * (single-choice or multi-choice). Votes can only be cast if the poll and
   * selected options are active and not marked as deleted.
   *
   * Duplicate voting, attempts to vote in closed or deleted polls, or invalid
   * option selection will result in explicit error responses. Successful vote
   * submission updates aggregate results and may trigger notification or audit
   * log updates per compliance rules. Voting is traceable to user for
   * transparency and abuse prevention. Multiple votes per poll/option submitted
   * in a batch may be supported for multi-choice polls.
   *
   * @param connection
   * @param pollId Unique identifier for the poll to vote in.
   * @param body Payload describing the vote(s): user-selected poll option(s),
   *   batch eligibility, and any relevant assignment data.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @UserAuth()
    user: UserPayload,
    @TypedParam("pollId")
    pollId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IDiscussionBoardPollVote.ICreate,
  ): Promise<IDiscussionBoardPollVote> {
    try {
      return await post__discussionBoard_user_polls_$pollId_pollVotes({
        user,
        pollId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and paginate poll votes for a given poll.
   *
   * Returns a paginated set of poll votes for the specified poll. Useful for
   * poll result tallies, identifying user voting patterns (where permitted), or
   * for situational analysis in audits. Supports advanced query filtering by
   * user, option, date, or vote status (where enabled). May be restricted:
   * in-progress polls may hide full results from regular users but show to
   * creators/moderators, while concluded polls usually expose full voting
   * statistics.
   *
   * Only users with authorization (poll creator, moderator/admin, or user who
   * participated) may see full details if the poll is not public. Pagination
   * and sorting are supported. All accesses are logged for compliance as voting
   * data may be sensitive.
   *
   * @param connection
   * @param pollId Unique identifier for the poll whose votes are being
   *   searched.
   * @param body Filtering, search, and pagination parameters for poll votes.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @UserAuth()
    user: UserPayload,
    @TypedParam("pollId")
    pollId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IDiscussionBoardPollVote.IRequest,
  ): Promise<IPageIDiscussionBoardPollVote> {
    try {
      return await patch__discussionBoard_user_polls_$pollId_pollVotes({
        user,
        pollId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get user voting record for a poll by pollVoteId.
   *
   * Returns the detailed record for a specific poll vote associated with a
   * poll. Commonly used for moderation review or to confirm a user's
   * participation/vote in a poll. Access is strictly controlled—only the owner
   * of the vote, moderators, or admins are permitted to retrieve this
   * information unless poll is configured for full transparency.
   *
   * Permission checks prevent users from accessing the votes of others unless
   * privileged. Attempting to access non-existent or soft-deleted votes results
   * in clear business errors with appropriate audit logging. Compliance rules
   * may require additional data suppression for certain privacy-sensitive
   * polls.
   *
   * @param connection
   * @param pollId Unique identifier for the poll.
   * @param pollVoteId Unique identifier for the poll vote.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":pollVoteId")
  public async at(
    @UserAuth()
    user: UserPayload,
    @TypedParam("pollId")
    pollId: string & tags.Format<"uuid">,
    @TypedParam("pollVoteId")
    pollVoteId: string & tags.Format<"uuid">,
  ): Promise<IDiscussionBoardPollVote> {
    try {
      return await get__discussionBoard_user_polls_$pollId_pollVotes_$pollVoteId(
        {
          user,
          pollId,
          pollVoteId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a poll vote (moderator/admin override or correction).
   *
   * This operation updates the selection or meta-data of a specific poll
   * vote—typically used in moderation cases where an incorrect vote or abuse is
   * detected. Only allowed for privileged users. Ensures that voting rules
   * (such as one vote per poll option per user) are preserved. Changes are
   * tracked in the audit log with old and new states recorded for
   * traceability.
   *
   * Improper attempts (such as normal users updating votes after submission, or
   * votes in closed/deleted polls) result in explicit business errors. The
   * endpoint validates poll, vote, and user eligibility and ensures all
   * modifications are consistent with poll configuration policies.
   * Audit/compliance and notification hooks are triggered as appropriate.
   *
   * @param connection
   * @param pollId Unique identifier for the target poll.
   * @param pollVoteId Unique identifier of the poll vote.
   * @param body Fields to update in an existing poll vote. Only privileged
   *   users allowed.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":pollVoteId")
  public async update(
    @UserAuth()
    user: UserPayload,
    @TypedParam("pollId")
    pollId: string & tags.Format<"uuid">,
    @TypedParam("pollVoteId")
    pollVoteId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IDiscussionBoardPollVote.IUpdate,
  ): Promise<IDiscussionBoardPollVote> {
    try {
      return await put__discussionBoard_user_polls_$pollId_pollVotes_$pollVoteId(
        {
          user,
          pollId,
          pollVoteId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
