import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { get__discussionBoard_user_posts_$postId_polls_$pollId } from "../../../../../providers/get__discussionBoard_user_posts_$postId_polls_$pollId";
import { UserAuth } from "../../../../../decorators/UserAuth";
import { UserPayload } from "../../../../../decorators/payload/UserPayload";
import { put__discussionBoard_user_posts_$postId_polls_$pollId } from "../../../../../providers/put__discussionBoard_user_posts_$postId_polls_$pollId";
import { post__discussionBoard_user_posts_$postId_polls } from "../../../../../providers/post__discussionBoard_user_posts_$postId_polls";

import { IDiscussionBoardPoll } from "../../../../../api/structures/IDiscussionBoardPoll";

@Controller("/discussionBoard/user/posts/:postId/polls")
export class DiscussionboardUserPostsPollsController {
  /**
   * Get detailed metadata for a specific poll on a post by pollId.
   *
   * Retrieves the full details of a specific poll by pollId, including poll
   * options, vote counts, and current status (open/closed). If the poll belongs
   * to a soft-deleted post, the operation returns a 'not found' or compliance
   * error. Returns icons or flags for whether poll is multiple choice, and
   * provides the user's voting status if applicable.
   *
   * This endpoint is open to any authenticated user. Access may be restricted
   * on soft-deleted content. Errors are accompanied by actionable messages for
   * UI integration.
   *
   * This endpoint is usually consumed for rendering poll UIs or for voting
   * interactions in post threads.
   *
   * @param connection
   * @param postId Identifier of the post this poll belongs to.
   * @param pollId Unique identifier of the poll to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":pollId")
  public async at(
    @UserAuth()
    user: UserPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedParam("pollId")
    pollId: string & tags.Format<"uuid">,
  ): Promise<IDiscussionBoardPoll> {
    try {
      return await get__discussionBoard_user_posts_$postId_polls_$pollId({
        user,
        postId,
        pollId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Edit an existing poll on a post. Restricted to authors, moderators, or
   * admins and not allowed if locked/closed.
   *
   * Updates an existing poll (such as changing the title, description, or poll
   * window). Only permitted for post authors, moderators, and admins. Locks and
   * closure dates are considered before modification is allowed. Edits must
   * remain compliant with schema and business logic. All updates are logged for
   * compliance, including changes to poll open/close state.
   *
   * Business logic prevents edits on locked or closed polls and ensures that
   * only the correct users (author, moderator, admin) can perform the update.
   * An error is returned if conditions are not met, such as insufficient
   * privileges, locked polls, or invalid state.
   *
   * @param connection
   * @param postId Identifier of the post that owns this poll.
   * @param pollId Identifier of the poll to update.
   * @param body Poll update information including fields to be modified, such
   *   as title, description, and timestamps.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":pollId")
  public async update(
    @UserAuth()
    user: UserPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedParam("pollId")
    pollId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IDiscussionBoardPoll.IUpdate,
  ): Promise<IDiscussionBoardPoll> {
    try {
      return await put__discussionBoard_user_posts_$postId_polls_$pollId({
        user,
        postId,
        pollId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Create a new poll attached to an existing post. Only authors, moderators,
   * and admins are allowed.
   *
   * Creates a new poll on an existing post by postId. The poll can be single-
   * or multi-choice, with validation enforcing both the poll format and the
   * post's ability to accept new polls (not locked or archived). Only the post
   * author, moderators, and admins can use this endpoint. All input data such
   * as poll title, description, and poll options must meet validation as
   * defined in the request DTO schema.
   *
   * The operation logs successful poll creation along with option records for
   * audit and compliance. Attempts to create more than one poll per post or on
   * locked/archived posts are rejected by business logic. Poll creation is
   * atomicâ€”either all records are written or none are saved in case of error.
   *
   * @param connection
   * @param postId Identifier of the post to which the poll is being attached.
   * @param body Full poll creation data, including required title, options
   *   list, and constraints per the schema.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @UserAuth()
    user: UserPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IDiscussionBoardPoll.ICreate,
  ): Promise<IDiscussionBoardPoll> {
    try {
      return await post__discussionBoard_user_posts_$postId_polls({
        user,
        postId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
