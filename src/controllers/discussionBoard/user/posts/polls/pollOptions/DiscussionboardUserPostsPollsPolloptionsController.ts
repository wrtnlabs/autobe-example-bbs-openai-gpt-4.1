import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { get__discussionBoard_user_posts_$postId_polls_$pollId_pollOptions_$pollOptionId } from "../../../../../../providers/get__discussionBoard_user_posts_$postId_polls_$pollId_pollOptions_$pollOptionId";
import { UserAuth } from "../../../../../../decorators/UserAuth";
import { UserPayload } from "../../../../../../decorators/payload/UserPayload";
import { put__discussionBoard_user_posts_$postId_polls_$pollId_pollOptions_$pollOptionId } from "../../../../../../providers/put__discussionBoard_user_posts_$postId_polls_$pollId_pollOptions_$pollOptionId";
import { delete__discussionBoard_user_posts_$postId_polls_$pollId_pollOptions_$pollOptionId } from "../../../../../../providers/delete__discussionBoard_user_posts_$postId_polls_$pollId_pollOptions_$pollOptionId";
import { post__discussionBoard_user_posts_$postId_polls_$pollId_pollOptions } from "../../../../../../providers/post__discussionBoard_user_posts_$postId_polls_$pollId_pollOptions";

import { IDiscussionBoardPollOption } from "../../../../../../api/structures/IDiscussionBoardPollOption";

@Controller("/discussionBoard/user/posts/:postId/polls/:pollId/pollOptions")
export class DiscussionboardUserPostsPollsPolloptionsController {
  /**
   * Get a specific poll option under a poll attached to a post.
   *
   * This operation fetches the detailed information of a specific poll option
   * belonging to a poll under a given post. The endpoint requires valid post,
   * poll, and pollOption IDs and is used to retrieve option label, its sequence
   * order, and status for rendering poll voting interfaces, reviewing poll
   * setups, or displaying historical polls for audit or analytics.
   *
   * Access is restricted to authenticated users, and additional business logic
   * may filter results based on poll privacy or poll closure status. If a poll
   * or its parent post is deleted or inactive, this operation will respond with
   * a clear error, ensuring compliance with business rules. This endpoint
   * supports admin and moderator review for poll management and
   * troubleshooting.
   *
   * @param connection
   * @param postId Unique identifier for the parent post.
   * @param pollId Unique identifier for the poll belonging to the post.
   * @param pollOptionId Unique identifier for the poll option to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":pollOptionId")
  public async at(
    @UserAuth()
    user: UserPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedParam("pollId")
    pollId: string & tags.Format<"uuid">,
    @TypedParam("pollOptionId")
    pollOptionId: string & tags.Format<"uuid">,
  ): Promise<IDiscussionBoardPollOption> {
    try {
      return await get__discussionBoard_user_posts_$postId_polls_$pollId_pollOptions_$pollOptionId(
        {
          user,
          postId,
          pollId,
          pollOptionId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a poll option in a poll under a post.
   *
   * This endpoint facilitates modification of an existing poll option's label
   * (option_text) or display sequence for a poll under a post. It is used to
   * correct typos, reorder options, or adapt options in active poll drafts.
   * Ownership and poll lifecycle rules are enforced: poll creators may update
   * before voting starts, while moderators and admins may update for policy
   * enforcement or correcting violations.
   *
   * Edits to options in closed or deleted polls are rejected. All updates are
   * tracked in the audit log for compliance review. If an update attempts to
   * duplicate a sequence or label within the poll, a business error is
   * returned.
   *
   * @param connection
   * @param postId Unique identifier for the parent post.
   * @param pollId Unique identifier for the parent poll.
   * @param pollOptionId Unique identifier of the poll option to update.
   * @param body Fields to update for this poll option (label, sequence, etc).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":pollOptionId")
  public async update(
    @UserAuth()
    user: UserPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedParam("pollId")
    pollId: string & tags.Format<"uuid">,
    @TypedParam("pollOptionId")
    pollOptionId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IDiscussionBoardPollOption.IUpdate,
  ): Promise<IDiscussionBoardPollOption> {
    try {
      return await put__discussionBoard_user_posts_$postId_polls_$pollId_pollOptions_$pollOptionId(
        {
          user,
          postId,
          pollId,
          pollOptionId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete a poll option (remove from voting, keep for audit).
   *
   * Performs a soft deletion of a specific poll option. Once deleted, the
   * option becomes unavailable for user voting but remains in the database for
   * regulatory and audit purposes. Only authorized actors (poll creator,
   * moderator, or admin) may perform deletions. Poll status is checked: options
   * may only be deleted pre-poll open or by privileged roles post-open in the
   * case of abuse, error, or compliance needs.
   *
   * A deleted poll option cannot be restored via this API; a new option must be
   * created in its place. The endpoint audits all operations for compliance and
   * may trigger notifications depending on notification policy. Errors from
   * trying to delete options in active, locked, or non-existing polls will
   * return explicit business error codes.
   *
   * @param connection
   * @param postId Unique identifier for the parent post.
   * @param pollId Unique identifier for the parent poll.
   * @param pollOptionId Unique identifier for the poll option to be deleted.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":pollOptionId")
  public async erase(
    @UserAuth()
    user: UserPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedParam("pollId")
    pollId: string & tags.Format<"uuid">,
    @TypedParam("pollOptionId")
    pollOptionId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__discussionBoard_user_posts_$postId_polls_$pollId_pollOptions_$pollOptionId(
        {
          user,
          postId,
          pollId,
          pollOptionId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Add a new option to a poll under a post.
   *
   * This endpoint allows eligible users to create a new option for a poll that
   * belongs to a specific post. The request requires poll and post context to
   * ensure referential integrity and proper sequence ordering. Validation
   * ensures that the new option label is not duplicated within the same poll,
   * and that the poll is not closed (no options may be added after closure).
   *
   * Only authenticated users with correct ownership or moderator/admin roles
   * can perform this action; users may only add options to polls they created
   * or have explicit rights to manage. Moderators and admins may override
   * lifecycle restrictions for extraordinary governance or compliance needs. If
   * the poll is deleted or closed, creation requests are rejected with a clear
   * business error.
   *
   * @param connection
   * @param postId Unique identifier for the parent post.
   * @param pollId Unique identifier for the poll.
   * @param body Information needed to create a new poll option, including label
   *   and optional sequence placement.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @UserAuth()
    user: UserPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedParam("pollId")
    pollId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IDiscussionBoardPollOption.ICreate,
  ): Promise<IDiscussionBoardPollOption> {
    try {
      return await post__discussionBoard_user_posts_$postId_polls_$pollId_pollOptions(
        {
          user,
          postId,
          pollId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
