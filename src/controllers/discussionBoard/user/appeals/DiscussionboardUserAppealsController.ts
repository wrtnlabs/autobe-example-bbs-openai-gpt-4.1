import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { post__discussionBoard_user_appeals } from "../../../../providers/post__discussionBoard_user_appeals";
import { UserAuth } from "../../../../decorators/UserAuth";
import { UserPayload } from "../../../../decorators/payload/UserPayload";
import { patch__discussionBoard_user_appeals } from "../../../../providers/patch__discussionBoard_user_appeals";
import { get__discussionBoard_user_appeals_$appealId } from "../../../../providers/get__discussionBoard_user_appeals_$appealId";
import { put__discussionBoard_user_appeals_$appealId } from "../../../../providers/put__discussionBoard_user_appeals_$appealId";
import { delete__discussionBoard_user_appeals_$appealId } from "../../../../providers/delete__discussionBoard_user_appeals_$appealId";

import { IDiscussionBoardAppeal } from "../../../../api/structures/IDiscussionBoardAppeal";
import { IPageIDiscussionBoardAppeal } from "../../../../api/structures/IPageIDiscussionBoardAppeal";

@Controller("/discussionBoard/user/appeals")
export class DiscussionboardUserAppealsController {
  /**
   * Create a new appeal against a moderation action or flag report.
   *
   * Submit a new appeal to challenge a moderation action or flag report. Users
   * provide a reason, reference to the moderation action or flag report being
   * appealed, and any supporting narrative. Only authorized users may submit
   * appeals for affected actions/reports; duplicates are disallowed. Successful
   * creation records the lifecycle start for the appeal and notifies moderation
   * for handling.
   *
   * End users can only appeal moderation actions or reports affecting their own
   * activity. Permissions and eligibility are validated. All appeal creation
   * actions are recorded for compliance review and appeal queueing. This
   * endpoint helps uphold user rights and platform transparency.
   *
   * @param connection
   * @param body Information required to start a new appeal, specifying
   *   appellant, moderation action or flag, and narrative.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @UserAuth()
    user: UserPayload,
    @TypedBody()
    body: IDiscussionBoardAppeal.ICreate,
  ): Promise<IDiscussionBoardAppeal> {
    try {
      return await post__discussionBoard_user_appeals({
        user,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve appeals with filtering, pagination, and workflow
   * sorting.
   *
   * Retrieve a filtered, paginated list of appeals against moderation actions
   * or flag reports. Supports advanced search/filtering by appellant user,
   * status, reason, related moderation action or flag report, and
   * submission/resolution timestamps. Includes pagination controls, keyword
   * search, and sorting options for workflow efficiency.
   *
   * Security rules prevent disclosure of sensitive details to unauthorized
   * users; only moderators and admins can access all appeals, while users may
   * see their own. The endpoint supports compliance needs and moderation
   * workflow management. Related appeals, moderation actions, and report status
   * are included for triage and compliance review.
   *
   * Search is optimized for volume and includes filtering and ordering
   * consistent with administrative/triage use cases.
   *
   * @param connection
   * @param body Search, filtering, and pagination information for appeal
   *   triage.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @UserAuth()
    user: UserPayload,
    @TypedBody()
    body: IDiscussionBoardAppeal.IRequest,
  ): Promise<IPageIDiscussionBoardAppeal> {
    try {
      return await patch__discussionBoard_user_appeals({
        user,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get details for a specific appeal by its ID.
   *
   * Retrieve appeal detail for the identified appeal. Returns all relevant
   * information for the appealâ€”including status, reason, timestamps, related
   * moderation/flag actions, and resolution comments. Permission logic ensures
   * that end users can retrieve their own appeals, while moderators/admins
   * access all details for their review purposes. The operation responds with
   * full detail for compliant auditing and user communications.
   *
   * @param connection
   * @param appealId Unique identifier of the appeal to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":appealId")
  public async at(
    @UserAuth()
    user: UserPayload,
    @TypedParam("appealId")
    appealId: string & tags.Format<"uuid">,
  ): Promise<IDiscussionBoardAppeal> {
    try {
      return await get__discussionBoard_user_appeals_$appealId({
        user,
        appealId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update or correct an existing appeal, reason, status, or linkage.
   *
   * Update an existing appeal against a moderation action or flag report.
   * Allows correction or addition of appeal narrative, adjust status (e.g.,
   * moderator/admin review), update resolution comments, or amend linked
   * moderation/flag report reference if appropriate. All updates are logged for
   * regulatory compliance and audit, and responses include the full updated
   * appeal record.
   *
   * Permission logic enforces that only the original appellant, a moderator, or
   * an admin may update an appeal in allowed workflow states. Attempts by
   * unauthorized or out-of-sequence actors will be denied and logged. This
   * ensures appeal integrity, audit trails, and structured workflow management
   * while retaining a complete history of modifications.
   *
   * @param connection
   * @param appealId Unique identifier for the appeal to update.
   * @param body Appeal updates or corrections, such as narrative, status,
   *   resolution comments, or linkage.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":appealId")
  public async update(
    @UserAuth()
    user: UserPayload,
    @TypedParam("appealId")
    appealId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IDiscussionBoardAppeal.IUpdate,
  ): Promise<IDiscussionBoardAppeal> {
    try {
      return await put__discussionBoard_user_appeals_$appealId({
        user,
        appealId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete (retire) an appeal for compliance/audit purposes.
   *
   * Soft delete (retire) an appeal record. This marks the appeal as deleted
   * (sets deleted_at), rendering it inaccessible in public queries but
   * maintaining the record for audit/compliance. Permission logic enforces that
   * only the appellant, moderators, or admins may retire appeals, and only in
   * allowed workflow states (e.g., after closure/resolution or where personal
   * data rights permit). Attempts to retire ineligible appeals are denied and
   * logged for transparency.
   *
   * Soft-deletion is audit-safe, preserves data for regulatory and compliance
   * checks, and cannot be reversed without admin intervention. The API provides
   * confirmation and updated record of retirement state.
   *
   * @param connection
   * @param appealId Unique ID of the appeal to soft delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":appealId")
  public async erase(
    @UserAuth()
    user: UserPayload,
    @TypedParam("appealId")
    appealId: string & tags.Format<"uuid">,
  ): Promise<IDiscussionBoardAppeal> {
    try {
      return await delete__discussionBoard_user_appeals_$appealId({
        user,
        appealId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
