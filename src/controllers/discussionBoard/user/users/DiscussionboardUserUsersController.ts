import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { get__discussionBoard_user_users_$userId } from "../../../../providers/get__discussionBoard_user_users_$userId";
import { UserAuth } from "../../../../decorators/UserAuth";
import { UserPayload } from "../../../../decorators/payload/UserPayload";
import { put__discussionBoard_user_users_$userId } from "../../../../providers/put__discussionBoard_user_users_$userId";
import { delete__discussionBoard_user_users_$userId } from "../../../../providers/delete__discussionBoard_user_users_$userId";

import { IDiscussionBoardUser } from "../../../../api/structures/IDiscussionBoardUser";

@Controller("/discussionBoard/user/users/:userId")
export class DiscussionboardUserUsersController {
  /**
   * Retrieve detailed user account information by userId from
   * discussion_board_users.
   *
   * Retrieve detailed information about a specific user account in the
   * discussion board. This operation accesses the discussion_board_users table
   * as defined in the Prisma schema and provides all configurable fields and
   * associated user profile data, such as email, username, display_name,
   * verification status, and account state properties.
   *
   * This API is designed for viewing user profile information, viewing
   * participant statistics, and supporting profile display operations in the
   * frontend. The endpoint will enforce security rules so that only
   * authenticated users or users with permissions (e.g., self or authorized
   * roles) can view protected details. Sensitive attributes such as password
   * hashes are not exposed in the response.
   *
   * The API integrates with multiple user-centric operations, supports account
   * moderation states (is_suspended, is_verified), and can be used for
   * displaying user profile pages or self-service account management. Related
   * operations include list, update, and erase endpoints for user management.
   *
   * The API expects a valid userId path parameter in UUID format, matching an
   * existing discussion_board_users record. Clients must handle not-found and
   * unauthorized scenarios in accordance with API error handling conventions.
   *
   * @param connection
   * @param userId Unique identifier of the target user
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async at(
    @UserAuth()
    user: UserPayload,
    @TypedParam("userId")
    userId: string & tags.Format<"uuid">,
  ): Promise<IDiscussionBoardUser> {
    try {
      return await get__discussionBoard_user_users_$userId({
        user,
        userId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update mutable fields of a user profile by userId.
   *
   * Update the mutable, non-sensitive fields of an existing user account
   * identified by userId. This operation is rooted in the
   * discussion_board_users table, allowing changes to the display_name,
   * username, or other updatable fields as defined in the business logic and
   * the Prisma schema.
   *
   * Security measures ensure only the account owner, or authorized roles (e.g.,
   * moderators or admins), may perform updates. Critical fields like password
   * hashes, suspension status, or deletion cannot be updated via this
   * endpoint—instead, such changes are handled by special-purpose APIs. The
   * update timestamp is refreshed and an audit trail is maintained according to
   * compliance policy.
   *
   * Related APIs include the user profile retrieval, account suspension/role
   * assignment, and account erasure endpoints. The expected behavior for
   * updates is transactional integrity and complete validation per business
   * rules (e.g., username uniqueness).
   *
   * Clients must provide a valid userId in the path and a request body that
   * validates against IDiscussionBoardUser.IUpdate.
   *
   * @param connection
   * @param userId Unique identifier of the user to be updated
   * @param body Update request data for the user profile (non-sensitive fields
   *   only)
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async update(
    @UserAuth()
    user: UserPayload,
    @TypedParam("userId")
    userId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IDiscussionBoardUser.IUpdate,
  ): Promise<IDiscussionBoardUser> {
    try {
      return await put__discussionBoard_user_users_$userId({
        user,
        userId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete (deactivate) a user account by userId (sets deleted_at).
   *
   * Soft-deletes a user account in the discussion board by marking the
   * deleted_at field with the current timestamp for the user referenced by
   * userId. This operation makes the account inaccessible to regular users but
   * retains the record and key metadata for compliance, moderation, and
   * auditing.
   *
   * Account removal respects all standard soft deletion patterns, meaning all
   * direct relations (posts, comments, etc.) are not removed but may be hidden
   * or anonymized from public view according to business logic. The operation
   * requires self-authorization unless escalated (e.g., by moderators/admins).
   * Complies with user data erasure policies, enabling administrators and users
   * to initiate their own account removal.
   *
   * A successful deletion will only affect logical removal—not physical
   * deletion. Related APIs must handle visibility of soft-deleted records and
   * include compliance with any legal erasure requirements.
   *
   * @param connection
   * @param userId Unique identifier of the account to be soft-deleted
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async erase(
    @UserAuth()
    user: UserPayload,
    @TypedParam("userId")
    userId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__discussionBoard_user_users_$userId({
        user,
        userId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
