import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody } from "@nestia/core";
import typia from "typia";
import { post__discussionBoard_user_flagReports } from "../../../../providers/post__discussionBoard_user_flagReports";
import { UserAuth } from "../../../../decorators/UserAuth";
import { UserPayload } from "../../../../decorators/payload/UserPayload";

import { IDiscussionBoardFlagReport } from "../../../../api/structures/IDiscussionBoardFlagReport";

@Controller("/discussionBoard/user/flagReports")
export class DiscussionboardUserFlagreportsController {
  /**
   * Flag a post or comment by creating a new user content flag report.
   *
   * Create a new flag report in response to a user's request to flag content.
   * This operation requires the reporting user to provide a valid reason
   * category (e.g., 'abuse', 'spam', 'misinformation') and optionally include
   * detailed justification. The API ensures all necessary information is
   * provided and stored securely, allowing future moderation triage. Duplicate
   * flag submissions by the same user for the same content are prevented.
   *
   * Upon successful submission, the flag report is set as 'pending' and queued
   * for moderator review. If the flagged item has already exceeded a reporting
   * threshold, it may be automatically hidden from public view pending review.
   * The response includes the new flag report's unique identifier and
   * associated metadata for user feedback and moderation queueing.
   *
   * The endpoint enforces permissions to restrict flag submission to
   * authenticated users in good standing (not suspended or banned).
   *
   * @param connection
   * @param body Details of the flagged content, the reason, and any extra
   *   justification from the reporting user.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @UserAuth()
    user: UserPayload,
    @TypedBody()
    body: IDiscussionBoardFlagReport.ICreate,
  ): Promise<IDiscussionBoardFlagReport> {
    try {
      return await post__discussionBoard_user_flagReports({
        user,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
