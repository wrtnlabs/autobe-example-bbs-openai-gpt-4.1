import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { post__discussionBoard_user_votes } from "../../../../providers/post__discussionBoard_user_votes";
import { UserAuth } from "../../../../decorators/UserAuth";
import { UserPayload } from "../../../../decorators/payload/UserPayload";
import { patch__discussionBoard_user_votes } from "../../../../providers/patch__discussionBoard_user_votes";
import { get__discussionBoard_user_votes_$voteId } from "../../../../providers/get__discussionBoard_user_votes_$voteId";
import { put__discussionBoard_user_votes_$voteId } from "../../../../providers/put__discussionBoard_user_votes_$voteId";
import { delete__discussionBoard_user_votes_$voteId } from "../../../../providers/delete__discussionBoard_user_votes_$voteId";

import { IDiscussionBoardVote } from "../../../../api/structures/IDiscussionBoardVote";
import { IPageIDiscussionBoardVote } from "../../../../api/structures/IPageIDiscussionBoardVote";

@Controller("/discussionBoard/user/votes")
export class DiscussionboardUserVotesController {
  /**
   * Submit a new vote (upvote/downvote) on a post or comment
   * (discussion_board_votes).
   *
   * This operation creates a new vote (upvote/downvote) for a post or comment.
   * Each vote must be unique per user/content combination. On creation, the
   * system validates vote_type ('up' or 'down'), confirms no duplicate votes,
   * and enforces business rules (no self-voting). On passing validation, the
   * new vote record is inserted with links to user and target, audit
   * timestamps, and vote status. Compliance with analytic and moderation
   * policies is enforced. The returned object contains full vote metadata.
   * Important for recording user engagement and powering content quality
   * algorithms.
   *
   * @param connection
   * @param body Vote creation input: user, content target, vote type
   *   ('up'/'down'), audit basis.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @UserAuth()
    user: UserPayload,
    @TypedBody()
    body: IDiscussionBoardVote.ICreate,
  ): Promise<IDiscussionBoardVote> {
    try {
      return await post__discussionBoard_user_votes({
        user,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and list user votes with filtering and pagination
   * (discussion_board_votes).
   *
   * This operation retrieves a searchable, paginated list of all votes
   * (upvotes/downvotes) cast by users on posts and comments. Each vote record
   * is tracked in the discussion_board_votes table and includes links to the
   * voting user, post/comment, vote_type (up/down), timestamps, and soft-delete
   * marker. Filtering options allow result restriction by voter's id, target
   * post/comment, vote type, and creation ranges. Paginated and sorted response
   * enables use in analytics dashboards, user profile voting history, or
   * moderation review panels. Soft-deleted votes are excluded from normal
   * queries; moderators may view for auditing. Essential for engagement
   * analytics and user transparency.
   *
   * @param connection
   * @param body Flexible search and pagination options for vote query.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @UserAuth()
    user: UserPayload,
    @TypedBody()
    body: IDiscussionBoardVote.IRequest,
  ): Promise<IPageIDiscussionBoardVote> {
    try {
      return await patch__discussionBoard_user_votes({
        user,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get a single vote record by its ID (discussion_board_votes).
   *
   * Get detailed information about a single vote (upvote or downvote) by its
   * vote ID. Each vote object includes details on the voter (user), the target
   * content (post or comment), the type ('up'/'down'), creation and update
   * timestamps, and soft-deletion status. The discussion_board_votes model
   * ensures all votes are unique per user/content target and supports retention
   * for compliance/audit. Normal users may only view their own votes;
   * moderators/admins have extended access for moderation and platform
   * analysis. Provides context for application UI (has user already voted, show
   * vote status, etc.) and audit panels.
   *
   * @param connection
   * @param voteId Unique identifier of the vote (UUID format)
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":voteId")
  public async at(
    @UserAuth()
    user: UserPayload,
    @TypedParam("voteId")
    voteId: string & tags.Format<"uuid">,
  ): Promise<IDiscussionBoardVote> {
    try {
      return await get__discussionBoard_user_votes_$voteId({
        user,
        voteId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing vote (upvote/downvote) for a post or comment by voteId.
   *
   * This API allows an authenticated user to update an existing vote (upvote or
   * downvote) that they have previously cast on a post or comment. The
   * operation validates that the voteId belongs to the current user and that
   * the new vote type is valid ('up' or 'down'), as constrained by the schema.
   * All modifications are logged in the associated history table for audit
   * purposes.
   *
   * Role-based access control ensures only the owner of the vote may update it.
   * Attempts by other users or unauthenticated actors are denied with a clear
   * error message. The endpoint enforces deduplication rules to prevent
   * duplicate voting by the same user on a single piece of content.
   *
   * Business logic ensures that votes cannot be updated for soft-deleted or
   * deleted content, and any attempts to update non-existent votes will return
   * a not found or access denied error. The response includes the updated vote
   * details for immediate UI feedback.
   *
   * If the operation is performed on a vote linked to a soft-deleted post or
   * comment, a business-level error is returned. All updates are reflected in
   * the main table and the detailed vote history log for compliance and
   * traceability. Related endpoints include vote creation (POST), vote
   * retrieval (GET), vote deletion (DELETE), and vote audit trail (GET).
   *
   * @param connection
   * @param voteId Target vote's unique identifier to update.
   * @param body Information needed to perform the vote update, including the
   *   new vote type ('up' or 'down').
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":voteId")
  public async update(
    @UserAuth()
    user: UserPayload,
    @TypedParam("voteId")
    voteId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IDiscussionBoardVote.IUpdate,
  ): Promise<IDiscussionBoardVote> {
    try {
      return await put__discussionBoard_user_votes_$voteId({
        user,
        voteId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently delete (hard delete) the authenticated user's vote by voteId.
   * This action cannot be undone.
   *
   * This API provides a hard deletion operation for votes by their unique
   * voteId. The endpoint validates that the requesting user owns the vote to be
   * deleted and that the vote exists. If the vote does not exist or the user is
   * not authorized, a not-found or forbidden error code is returned.
   *
   * Vote deletions are performed by completely removing the vote record from
   * the database, even though a 'deleted_at' field exists. This is to avoid
   * duplicate voting and maintain integrity with the deduplication logic.
   *
   * Audit trails are maintained by inserting a deletion event into the vote
   * history, including actor and timestamp, for regulatory and compliance
   * requirements. No restoration is possible after deletion.
   *
   * @param connection
   * @param voteId Unique identifier of the vote to delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":voteId")
  public async erase(
    @UserAuth()
    user: UserPayload,
    @TypedParam("voteId")
    voteId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__discussionBoard_user_votes_$voteId({
        user,
        voteId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
