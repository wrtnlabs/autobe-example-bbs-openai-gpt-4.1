import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patch__discussionBoard_user_jwtTokens } from "../../../../providers/patch__discussionBoard_user_jwtTokens";
import { UserAuth } from "../../../../decorators/UserAuth";
import { UserPayload } from "../../../../decorators/payload/UserPayload";
import { get__discussionBoard_user_jwtTokens_$jwtTokenId } from "../../../../providers/get__discussionBoard_user_jwtTokens_$jwtTokenId";
import { put__discussionBoard_user_jwtTokens_$jwtTokenId } from "../../../../providers/put__discussionBoard_user_jwtTokens_$jwtTokenId";
import { delete__discussionBoard_user_jwtTokens_$jwtTokenId } from "../../../../providers/delete__discussionBoard_user_jwtTokens_$jwtTokenId";

import { IPageIDiscussionBoardJwtToken } from "../../../../api/structures/IPageIDiscussionBoardJwtToken";
import { IDiscussionBoardJwtToken } from "../../../../api/structures/IDiscussionBoardJwtToken";

@Controller("/discussionBoard/user/jwtTokens")
export class DiscussionboardUserJwttokensController {
  /**
   * List/manage a user's active and historical JWT token sessions.
   *
   * Retrieve a paginated set of active and historical JWT session tokens
   * associated with the current user.
   *
   * This endpoint supports device/session management, audit, and security
   * workflows by allowing users to audit which devices, browsers, and locations
   * have valid tokens for their account. Only tokens belonging to the
   * requesting user are shown.
   *
   * Various filtering criteria, such as token status (active, expired,
   * revoked), issue time/range, and device metadata, may be supported in the
   * query model. Use cases include reviewing suspicious sessions, logging out
   * other devices, and visibility into active sessions for compliance.
   *
   * @param connection
   * @param body Filtering, sorting, and pagination options for JWT token query.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @UserAuth()
    user: UserPayload,
    @TypedBody()
    body: IDiscussionBoardJwtToken.IRequest,
  ): Promise<IPageIDiscussionBoardJwtToken.ISummary> {
    try {
      return await patch__discussionBoard_user_jwtTokens({
        user,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve all information about a single JWT token session by id.
   *
   * Fetch JWT token details for a session matching the provided id. This
   * enables the user to see token metadata including device/browser info, times
   * of issue and expiry, forced logout/revocation state, etc.
   *
   * Requires session ownership: only the requesting user's JWT tokens may be
   * accessed. Used in workflow where a user is reviewing their own
   * authentication sessions for suspicious activity or security audit. Enables
   * compliance with security and privacy policies.
   *
   * @param connection
   * @param jwtTokenId The UUID id of the JWT token session to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":jwtTokenId")
  public async at(
    @UserAuth()
    user: UserPayload,
    @TypedParam("jwtTokenId")
    jwtTokenId: string & tags.Format<"uuid">,
  ): Promise<IDiscussionBoardJwtToken> {
    try {
      return await get__discussionBoard_user_jwtTokens_$jwtTokenId({
        user,
        jwtTokenId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update (e.g. revoke) a user's JWT token session by id.
   *
   * Update (or revoke) a JWT token session record by id for the authenticated
   * user. Permits device/session logout and state change for auditable control
   * over which sessions remain valid.
   *
   * Security checks prevent modifying token records not owned by the user.
   * Revocation timestamps and updated device_info or metadata may be set. No
   * access to other users' JWT sessions is allowed. Used in security/audit
   * scenarios such as forced device logout or session metadata correction.
   *
   * @param connection
   * @param jwtTokenId JWT token session id (UUID) to update/revoke.
   * @param body Fields to update or revoke the JWT session token (e.g.
   *   revoked_at, device_info).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":jwtTokenId")
  public async update(
    @UserAuth()
    user: UserPayload,
    @TypedParam("jwtTokenId")
    jwtTokenId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IDiscussionBoardJwtToken.IUpdate,
  ): Promise<IDiscussionBoardJwtToken> {
    try {
      return await put__discussionBoard_user_jwtTokens_$jwtTokenId({
        user,
        jwtTokenId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete a user's JWT token session by id for privacy/audit hygiene.
   *
   * Soft delete (remove) a JWT token session from visibility for the
   * authenticated user. The deleted_at field is set to hide the session in user
   * interfaces, but the record is retained for audit and compliance. This does
   * not terminate the actual session if the token itself is still valid and not
   * previously revoked.
   *
   * The operation verifies the session's ownership by the requesting user.
   * Attempts to delete (soft-delete) sessions not owned by the user are denied.
   * Already deleted or non-existent sessions result in an error message. This
   * supports user-driven session hygiene and privacy controls.
   *
   * @param connection
   * @param jwtTokenId Unique identifier of the JWT token session to be soft
   *   deleted (UUID).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":jwtTokenId")
  public async erase(
    @UserAuth()
    user: UserPayload,
    @TypedParam("jwtTokenId")
    jwtTokenId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__discussionBoard_user_jwtTokens_$jwtTokenId({
        user,
        jwtTokenId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
