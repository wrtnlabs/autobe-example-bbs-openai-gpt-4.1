import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patch__discussionBoard_user_notificationSubscriptions } from "../../../../providers/patch__discussionBoard_user_notificationSubscriptions";
import { UserAuth } from "../../../../decorators/UserAuth";
import { UserPayload } from "../../../../decorators/payload/UserPayload";
import { get__discussionBoard_user_notificationSubscriptions_$subscriptionId } from "../../../../providers/get__discussionBoard_user_notificationSubscriptions_$subscriptionId";
import { put__discussionBoard_user_notificationSubscriptions_$subscriptionId } from "../../../../providers/put__discussionBoard_user_notificationSubscriptions_$subscriptionId";
import { delete__discussionBoard_user_notificationSubscriptions_$subscriptionId } from "../../../../providers/delete__discussionBoard_user_notificationSubscriptions_$subscriptionId";

import { IPageIDiscussionBoardNotificationSubscription } from "../../../../api/structures/IPageIDiscussionBoardNotificationSubscription";
import { IDiscussionBoardNotificationSubscription } from "../../../../api/structures/IDiscussionBoardNotificationSubscription";

@Controller("/discussionBoard/user/notificationSubscriptions")
export class DiscussionboardUserNotificationsubscriptionsController {
  /**
   * Get a paginated list of the user's notification subscriptions.
   *
   * Retrieve a list of notification subscription records for the current
   * authenticated user. This allows users to view and audit which discussions,
   * categories, or entities they are currently following and receiving
   * notifications for, based on preference.
   *
   * The response contains paginated results, supports searching/filtering by
   * notification target type (post, thread, category, tag), and enables
   * inspection of subscription creation or deleted/unsubscribed state for
   * compliance.
   *
   * Security checks ensure that only the requesting user's records are
   * returned, protecting privacy and complying with business rules for
   * user-managed notification subscriptions. Unauthenticated users are not
   * permitted to access this endpoint.
   *
   * @param connection
   * @param body Search/filter and paging criteria for subscription query.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @UserAuth()
    user: UserPayload,
    @TypedBody()
    body: IDiscussionBoardNotificationSubscription.IRequest,
  ): Promise<IPageIDiscussionBoardNotificationSubscription.ISummary> {
    try {
      return await patch__discussionBoard_user_notificationSubscriptions({
        user,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get detailed information for a single notification subscription by id.
   *
   * Fetch details about a specific notification subscription by its unique id.
   * Users can inspect which thread, post, category, or tag they are watching
   * and audit its creation time, target type/id, and active/deleted state.
   *
   * The operation verifies that the subscription belongs to the requesting
   * user. Security rules deny access to resources not owned by the user,
   * supporting privacy requirements and compliance. This is typically used when
   * a client drills down from a subscription list to view details about one
   * subscription.
   *
   * @param connection
   * @param subscriptionId Unique notification subscription id (UUID) to
   *   retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":subscriptionId")
  public async at(
    @UserAuth()
    user: UserPayload,
    @TypedParam("subscriptionId")
    subscriptionId: string & tags.Format<"uuid">,
  ): Promise<IDiscussionBoardNotificationSubscription> {
    try {
      return await get__discussionBoard_user_notificationSubscriptions_$subscriptionId(
        {
          user,
          subscriptionId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update the properties of a user's notification subscription by id.
   *
   * Update a specific notification subscription by id for the authenticated
   * user.
   *
   * This enables users to unsubscribe, change which specific resource (post,
   * category, etc.) they are following, or otherwise modify their subscription
   * state. Only the subscription record belonging to the requesting user can be
   * modified. Attempts to update others' subscriptions are denied.
   *
   * Validation rules enforce proper resource existence, correct target types,
   * and compliance with unique constraints per user. Soft deletion is supported
   * by setting deleted_at. The endpoint also updates the record's timestamp.
   *
   * @param connection
   * @param subscriptionId Unique id for the notification subscription to
   *   update.
   * @param body Fields to update on the notification subscription.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":subscriptionId")
  public async update(
    @UserAuth()
    user: UserPayload,
    @TypedParam("subscriptionId")
    subscriptionId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IDiscussionBoardNotificationSubscription.IUpdate,
  ): Promise<IDiscussionBoardNotificationSubscription> {
    try {
      return await put__discussionBoard_user_notificationSubscriptions_$subscriptionId(
        {
          user,
          subscriptionId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete (unsubscribe) a user's notification subscription by id.
   *
   * Unsubscribe or remove a notification subscription by marking it as deleted
   * using the deleted_at field. This hides the subscription from a user's
   * active subscription list but does not permanently erase it from the system,
   * supporting audit/compliance policy.
   *
   * Only records belonging to the requesting authenticated user can be deleted
   * through this endpoint. Attempts to delete other users' subscriptions are
   * forbidden. If the subscription is already deleted or does not exist, a
   * descriptive error is returned.
   *
   * @param connection
   * @param subscriptionId The unique id of the notification subscription to be
   *   deleted (soft deleted).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":subscriptionId")
  public async erase(
    @UserAuth()
    user: UserPayload,
    @TypedParam("subscriptionId")
    subscriptionId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__discussionBoard_user_notificationSubscriptions_$subscriptionId(
        {
          user,
          subscriptionId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
