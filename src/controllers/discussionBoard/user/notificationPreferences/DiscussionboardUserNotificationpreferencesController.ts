import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patch__discussionBoard_user_notificationPreferences } from "../../../../providers/patch__discussionBoard_user_notificationPreferences";
import { UserAuth } from "../../../../decorators/UserAuth";
import { UserPayload } from "../../../../decorators/payload/UserPayload";
import { get__discussionBoard_user_notificationPreferences_$preferenceId } from "../../../../providers/get__discussionBoard_user_notificationPreferences_$preferenceId";
import { put__discussionBoard_user_notificationPreferences_$preferenceId } from "../../../../providers/put__discussionBoard_user_notificationPreferences_$preferenceId";
import { delete__discussionBoard_user_notificationPreferences_$preferenceId } from "../../../../providers/delete__discussionBoard_user_notificationPreferences_$preferenceId";

import { IPageIDiscussionBoardNotificationPreference } from "../../../../api/structures/IPageIDiscussionBoardNotificationPreference";
import { IDiscussionBoardNotificationPreference } from "../../../../api/structures/IDiscussionBoardNotificationPreference";

@Controller("/discussionBoard/user/notificationPreferences")
export class DiscussionboardUserNotificationpreferencesController {
  /**
   * List and filter notification preferences for the authenticated user.
   *
   * Allows the authenticated user to list and filter their notification channel
   * preferences. Users can search preferences by delivery type (in-app, email,
   * push), frequency, and categories. Responses include pertinent details, such
   * as mute settings and coverage intervals. This enables users to optimize
   * notification delivery across all categories and event types, ensuring
   * alignment with privacy and engagement goals.
   *
   * Access is always limited to the requesting user's own preferences; security
   * checks prevent access to other users' preferences. This operation is
   * typically used for displaying in profile, account, or notification settings
   * screens.
   *
   * Potential error cases include searching for preferences before any are
   * defined, attempting to access another user's preferences, or providing
   * invalid pagination/filter parameters.
   *
   * @param connection
   * @param body Search, filter, or pagination options for listing notification
   *   preferences.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @UserAuth()
    user: UserPayload,
    @TypedBody()
    body: IDiscussionBoardNotificationPreference.IRequest,
  ): Promise<IPageIDiscussionBoardNotificationPreference> {
    try {
      return await patch__discussionBoard_user_notificationPreferences({
        user,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve details of notification preference by preferenceId for the current
   * user.
   *
   * Allows an authenticated user to retrieve the full details of a single
   * notification preference configuration. The operation only permits access to
   * preferences owned by the requesting user. Results include active channel
   * selections (in-app, email, push), notification frequency, mute interval,
   * and covered event categories.
   *
   * Strong ownership rules and security checks are enforced to prevent access
   * to another user's preferences. Error responses are returned when the
   * specified record does not exist, has been deleted, or does not belong to
   * the requesting user.
   *
   * @param connection
   * @param preferenceId Unique identifier of the notification preference
   *   record.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":preferenceId")
  public async at(
    @UserAuth()
    user: UserPayload,
    @TypedParam("preferenceId")
    preferenceId: string & tags.Format<"uuid">,
  ): Promise<IDiscussionBoardNotificationPreference> {
    try {
      return await get__discussionBoard_user_notificationPreferences_$preferenceId(
        {
          user,
          preferenceId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update the configuration of a notification preference record by
   * preferenceId.
   *
   * This endpoint enables authenticated users to update their notification
   * preference configurations. Supported updates include changing which
   * channels are enabled (such as toggling email, push, or in-app
   * notifications), adjusting the delivery frequency, choosing applicable
   * categories/events, or setting a new muted interval. This facilitates
   * personalized notification control for each user.
   *
   * Ownership and authorization are strictly enforced. Attempts to update
   * another user's notification preferences or settings not owned by the
   * requester will fail with a precise business error. The update is reflected
   * immediately and is available in subsequent operations to fetch or list
   * preferences.
   *
   * @param connection
   * @param preferenceId Identifier of the notification preference to update.
   * @param body Updated configuration details for the notification preference.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":preferenceId")
  public async update(
    @UserAuth()
    user: UserPayload,
    @TypedParam("preferenceId")
    preferenceId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IDiscussionBoardNotificationPreference.IUpdate,
  ): Promise<IDiscussionBoardNotificationPreference> {
    try {
      return await put__discussionBoard_user_notificationPreferences_$preferenceId(
        {
          user,
          preferenceId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete a notification preference configuration by its identifier for the
   * authenticated user.
   *
   * Enables authenticated users to delete (hard-delete) their notification
   * preference configuration. This operation is irreversible and results in the
   * removal of the preferences from the data store. Ownership checks ensure
   * that only the requesting user may delete their own preference record. After
   * deletion, system or default notification settings apply for the affected
   * notification categories or channels.
   *
   * Related operations include listing preferences, viewing by ID, and updating
   * (PUT). Deletion attempts for non-existent or non-owned preferences are
   * denied with explicit business error responses. Once deleted, preference
   * configurations cannot be restored.
   *
   * @param connection
   * @param preferenceId Unique identifier of the notification preference to
   *   delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":preferenceId")
  public async erase(
    @UserAuth()
    user: UserPayload,
    @TypedParam("preferenceId")
    preferenceId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__discussionBoard_user_notificationPreferences_$preferenceId(
        {
          user,
          preferenceId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
