import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { post__discussionBoard_admin_categories } from "../../../../providers/post__discussionBoard_admin_categories";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { patch__discussionBoard_admin_categories } from "../../../../providers/patch__discussionBoard_admin_categories";
import { get__discussionBoard_admin_categories_$categoryId } from "../../../../providers/get__discussionBoard_admin_categories_$categoryId";
import { put__discussionBoard_admin_categories_$categoryId } from "../../../../providers/put__discussionBoard_admin_categories_$categoryId";
import { delete__discussionBoard_admin_categories_$categoryId } from "../../../../providers/delete__discussionBoard_admin_categories_$categoryId";

import { IDiscussionBoardCategory } from "../../../../api/structures/IDiscussionBoardCategory";
import { IPageIDiscussionBoardCategory } from "../../../../api/structures/IPageIDiscussionBoardCategory";

@Controller("/discussionBoard/admin/categories")
export class DiscussionboardAdminCategoriesController {
  /**
   * Create a new category for the discussion board.
   *
   * Create a new category for classifying discussion posts and threads.
   * Requires a unique name and may include a description, is_active flag, and
   * sort_order. The operation integrates validation on uniqueness of the
   * category name and adheres to schema constraints on field types and
   * attributes.
   *
   * Created categories become available for use by users (if is_active), or can
   * be staged for moderation/admin review. Audit trails log creator and status.
   * Only authorized staff (e.g., admins) are permitted to create categories,
   * enforcing strict access control.
   *
   * @param connection
   * @param body Data needed to create a new discussion board category.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IDiscussionBoardCategory.ICreate,
  ): Promise<IDiscussionBoardCategory> {
    try {
      return await post__discussionBoard_admin_categories({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a paginated and filterable list of discussion board categories.
   *
   * Retrieve a paginated, searchable, and sortable list of all discussion board
   * categories. This API is crucial for both general users to browse available
   * categories as well as for moderators/admins to manage category status and
   * details.
   *
   * Filtering can be applied on fields such as name, is_active, and sort_order.
   * Supports complex search scenarios for backend moderation dashboards as well
   * as public listings. The response supports efficient pagination for
   * performance and user experience.
   *
   * Access is typically restricted to authenticated users for management, but
   * may also allow public listing with is_active=true. The list integrates with
   * category-tag relations, and can be extended to support tag-based filtering
   * in the future.
   *
   * @param connection
   * @param body Search, filter, and pagination options for querying categories.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IDiscussionBoardCategory.IRequest,
  ): Promise<IPageIDiscussionBoardCategory.ISummary> {
    try {
      return await patch__discussionBoard_admin_categories({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get details for a single discussion board category by ID.
   *
   * Get all details about a single category based on its unique identifier.
   * Returns all fields including name, description, active state, ordering, and
   * timestamps. Used for admin and moderator workflows, as well as public
   * category detail if is_active.
   *
   * Authorization ensures that only users with sufficient permissions may view
   * inactive categories or full details. The response allows UI to present rich
   * category information, and supports further management operations.
   *
   * @param connection
   * @param categoryId Unique identifier of the target category.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":categoryId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("categoryId")
    categoryId: string & tags.Format<"uuid">,
  ): Promise<IDiscussionBoardCategory> {
    try {
      return await get__discussionBoard_admin_categories_$categoryId({
        admin,
        categoryId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a discussion board category by ID.
   *
   * Update the attributes of an existing discussion board category. Can change
   * name (must remain unique), description, is_active status, and sort_order.
   * The API validates all updates against schema and business
   * requirementsâ€”incorrect or duplicate parameters (such as non-unique name)
   * result in errors.
   *
   * Only admin users have access, and all changes are auditable. Updates may
   * alter how categories appear in both public listings and admin panels, as
   * well as their activation for post submission.
   *
   * @param connection
   * @param categoryId Unique identifier of the category to update.
   * @param body Fields and values to update for the target category.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":categoryId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("categoryId")
    categoryId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IDiscussionBoardCategory.IUpdate,
  ): Promise<IDiscussionBoardCategory> {
    try {
      return await put__discussionBoard_admin_categories_$categoryId({
        admin,
        categoryId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete a discussion board category by ID.
   *
   * Soft-deletes the target category by setting deleted_at to the current
   * timestamp, preserving the record for compliance and potential recovery.
   * Deleted categories are excluded from future listings and cannot be used for
   * new post classification, though audit and system logs retain their
   * information.
   *
   * The operation is available solely to admin users due to its impact on forum
   * structure. Attempts to delete already-deleted or non-existent categories
   * return appropriate errors. Soft deletion preserves data integrity for audit
   * trails and system history.
   *
   * @param connection
   * @param categoryId Unique identifier of the category to soft delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":categoryId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("categoryId")
    categoryId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__discussionBoard_admin_categories_$categoryId({
        admin,
        categoryId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
