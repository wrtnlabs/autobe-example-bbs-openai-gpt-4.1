import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { post__discussionBoard_admin_privacyDashboards } from "../../../../providers/post__discussionBoard_admin_privacyDashboards";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { patch__discussionBoard_admin_privacyDashboards } from "../../../../providers/patch__discussionBoard_admin_privacyDashboards";
import { get__discussionBoard_admin_privacyDashboards_$privacyDashboardId } from "../../../../providers/get__discussionBoard_admin_privacyDashboards_$privacyDashboardId";
import { put__discussionBoard_admin_privacyDashboards_$privacyDashboardId } from "../../../../providers/put__discussionBoard_admin_privacyDashboards_$privacyDashboardId";
import { delete__discussionBoard_admin_privacyDashboards_$privacyDashboardId } from "../../../../providers/delete__discussionBoard_admin_privacyDashboards_$privacyDashboardId";

import { IDiscussionBoardPrivacyDashboard } from "../../../../api/structures/IDiscussionBoardPrivacyDashboard";
import { IPageIDiscussionBoardPrivacyDashboard } from "../../../../api/structures/IPageIDiscussionBoardPrivacyDashboard";

@Controller("/discussionBoard/admin/privacyDashboards")
export class DiscussionboardAdminPrivacydashboardsController {
  /**
   * Create a new compliance privacy dashboard record for user data
   * access/export.
   *
   * Creates a new privacy dashboard record, used to track a user's request for
   * data access or privacy report export as required for regulatory (GDPR/CCPA)
   * compliance. This operation is only used by compliance staff, automation, or
   * admin workflowsâ€”not normal end users.
   *
   * Request body captures all required metadata: user, time of request,
   * (optionally) link to fulfillment/export, and the generated privacy summary
   * information. All access and creation of privacy dashboard records must be
   * auditable for regulatory reasons. Duplicate records for the same user and
   * request datetime are prohibited by schema uniqueness.
   *
   * Appropriate validation is required to ensure only authorized staff/systems
   * invoke this API, and that all provided information conforms to the schema
   * and privacy requirements.
   *
   * @param connection
   * @param body Data access/export event metadata and details for privacy
   *   dashboard creation
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IDiscussionBoardPrivacyDashboard.ICreate,
  ): Promise<IDiscussionBoardPrivacyDashboard> {
    try {
      return await post__discussionBoard_admin_privacyDashboards({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and list privacy dashboards for compliance export/audit.
   *
   * This operation provides compliance and admin users with a
   * paginated/searchable collection of privacy dashboards. Each dashboard entry
   * summarizes a user's data access/export history, including generated privacy
   * reports, data portability files, and export URIs. Complex filtering by
   * user, request time, or completion status is supported to facilitate
   * regulatory review and incident-response investigations.
   *
   * Privacy dashboard entries are generated when a user requests data
   * access/export; this API allows staff to efficiently locate, examine, and
   * verify fulfillment of such requests. Use-case examples include regular
   * audit reviews, responding to regulatory inquiries, and supporting data
   * subject rights fulfillment.
   *
   * Sensitive fields in dashboard_payload and export_file_uri are redacted or
   * filtered per role. Best practices are to allow only authorized admins
   * access, and to trace all access for compliance.
   *
   * @param connection
   * @param body Filtering, searching, and paging criteria for privacy dashboard
   *   listing
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IDiscussionBoardPrivacyDashboard.IRequest,
  ): Promise<IPageIDiscussionBoardPrivacyDashboard> {
    try {
      return await patch__discussionBoard_admin_privacyDashboards({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve details of a compliance privacy dashboard entry.
   *
   * Retrieves the full detail of a privacy dashboard export, including the time
   * of user access request, fulfillment status, and links to any generated
   * export files. This endpoint is intended for compliance audits or in
   * response to user-initiated access/portability requests, so only admins or
   * compliance officers may access it.
   *
   * All details relating to fulfilled data portability, JSON dashboards, and
   * associated files are exposed to admins. For privacy reasons, user ownership
   * of the record must be validated. The operation should be fully auditable,
   * tracking all accesses for compliance.
   *
   * @param connection
   * @param privacyDashboardId Unique ID of the privacy dashboard to retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":privacyDashboardId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("privacyDashboardId")
    privacyDashboardId: string & tags.Format<"uuid">,
  ): Promise<IDiscussionBoardPrivacyDashboard> {
    try {
      return await get__discussionBoard_admin_privacyDashboards_$privacyDashboardId(
        {
          admin,
          privacyDashboardId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a compliance privacy dashboard entry for user data export/access.
   *
   * Updates an existing privacy dashboard entry, used for adjusting fields such
   * as fulfillment status, export file URI, or dashboard summary content for a
   * user data access/export request. This supports compliance investigations,
   * corrections based on regulatory queries, and repair of potentially
   * incomplete or previously errored exports.
   *
   * Only compliance, regulatory, or admin staff are permitted to invoke this
   * operation, which enforces schema-level field constraints and uniqueness
   * where applicable. All modifications must be logged and auditable for
   * compliance review. The privacy dashboard updated by this endpoint is
   * identified by its unique ID in the path.
   *
   * @param connection
   * @param privacyDashboardId Unique ID of the privacy dashboard to update
   * @param body Fields to update on the privacy dashboard record (status,
   *   export URI, summary)
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":privacyDashboardId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("privacyDashboardId")
    privacyDashboardId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IDiscussionBoardPrivacyDashboard.IUpdate,
  ): Promise<IDiscussionBoardPrivacyDashboard> {
    try {
      return await put__discussionBoard_admin_privacyDashboards_$privacyDashboardId(
        {
          admin,
          privacyDashboardId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently (soft) delete a compliance privacy dashboard record by ID.
   *
   * Deletes a privacy dashboard record from the compliance management tables,
   * reflecting removal of a data subject access/export event record. This
   * operation supports soft deletion by populating the deleted_at timestamp.
   * All deletion operations must be logged for compliance, and records should
   * remain available for audit review until regulatory retention windows
   * expire.
   *
   * Access to this operation is strictly limited to compliance staff and system
   * admins. The endpoint accepts the privacy dashboard ID in the path, and does
   * not require a request body. Deletion is performed on the record, not on
   * exported/user data itself.
   *
   * @param connection
   * @param privacyDashboardId Unique ID of the privacy dashboard entry to
   *   delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":privacyDashboardId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("privacyDashboardId")
    privacyDashboardId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__discussionBoard_admin_privacyDashboards_$privacyDashboardId(
        {
          admin,
          privacyDashboardId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
