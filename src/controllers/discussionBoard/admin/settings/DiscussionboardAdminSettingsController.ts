import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { post__discussionBoard_admin_settings } from "../../../../providers/post__discussionBoard_admin_settings";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { patch__discussionBoard_admin_settings } from "../../../../providers/patch__discussionBoard_admin_settings";
import { get__discussionBoard_admin_settings_$settingId } from "../../../../providers/get__discussionBoard_admin_settings_$settingId";
import { put__discussionBoard_admin_settings_$settingId } from "../../../../providers/put__discussionBoard_admin_settings_$settingId";
import { delete__discussionBoard_admin_settings_$settingId } from "../../../../providers/delete__discussionBoard_admin_settings_$settingId";

import { IDiscussionBoardSetting } from "../../../../api/structures/IDiscussionBoardSetting";
import { IPageIDiscussionBoardSetting } from "../../../../api/structures/IPageIDiscussionBoardSetting";

@Controller("/discussionBoard/admin/settings")
export class DiscussionboardAdminSettingsController {
  /**
   * Create a new system/business setting (discussion_board_settings table).
   *
   * This API endpoint allows platform admins to register new configuration
   * settings (e.g., feature flags, operational limits, system parameters) into
   * the board configuration. Uniqueness is enforced for the key field, and the
   * API returns full metadata for audit. Business logic may validate the key
   * and value pattern, with errors returned for collisions or invalid settings.
   * This enables fast, code-free reconfiguration of board/platform features as
   * business requirements evolve. Related endpoints support update or delete.
   * Audit logs are recorded automatically.
   *
   * @param connection
   * @param body Fields for the new system or business setting entry.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IDiscussionBoardSetting.ICreate,
  ): Promise<IDiscussionBoardSetting> {
    try {
      return await post__discussionBoard_admin_settings({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and paginate discussion_board_settings (system configuration/audit).
   *
   * This API endpoint delivers advanced search and pagination across discussion
   * board system settings, enabling filtering by key, value, or description.
   * Admins use this operation to quickly locate, review, or audit settings and
   * their changes, especially for system configuration and compliance
   * requirements. Pagination, sorting, and filter capabilities support
   * efficient UI and backend management for growing systems. Returning results
   * includes all metadata without exposing sensitive values to unauthorized
   * users. Related endpoints include individual setting CRUD.
   *
   * @param connection
   * @param body Criteria and pagination options for filtering global settings.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IDiscussionBoardSetting.IRequest,
  ): Promise<IPageIDiscussionBoardSetting> {
    try {
      return await patch__discussionBoard_admin_settings({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get details of a discussion_board_settings row by id (setting detail).
   *
   * This endpoint retrieves complete information for a single configuration
   * setting entry, supporting admin UI, direct API access, or automated audit
   * reviews. The returned object includes key, value, whether the setting is
   * system-level, and all metadata. Used to display or validate live or
   * historical settings for the platform. Only accessible to admins. Not found
   * or permission errors apply.
   *
   * @param connection
   * @param settingId Unique identifier for the specific system setting to
   *   retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":settingId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("settingId")
    settingId: string & tags.Format<"uuid">,
  ): Promise<IDiscussionBoardSetting> {
    try {
      return await get__discussionBoard_admin_settings_$settingId({
        admin,
        settingId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing system/business setting (discussion_board_settings row).
   *
   * This API updates the value, description, or metadata of a specific
   * configuration setting by id. Only admins may call this endpoint, and
   * changes are reflected in the returned setting object. Business logic
   * applies validation on updated values, system-flag rules, and audit logging.
   * Primary key id is immutable. Use related endpoints for listing or deleting
   * settings. Error scenarios include duplicate keys, missing ids, or
   * validation rule breaches.
   *
   * @param connection
   * @param settingId Unique identifier of the system setting to update.
   * @param body Fields and new values to update for the setting row.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":settingId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("settingId")
    settingId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IDiscussionBoardSetting.IUpdate,
  ): Promise<IDiscussionBoardSetting> {
    try {
      return await put__discussionBoard_admin_settings_$settingId({
        admin,
        settingId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete a system/business setting (compliance/audit,
   * discussion_board_settings).
   *
   * This endpoint marks a system configuration setting as deleted (soft
   * deletion), hiding it from normal system usage but retaining the row for
   * audit and compliance. The deleted_at field is updated. Only admins may call
   * this endpoint. It is used as part of configuration lifecycle management and
   * ensures traceability. Not found and permission errors are handled, with
   * related endpoints for listing and undelete. Deletion affects active system
   * configuration upon propagation or cache invalidation.
   *
   * @param connection
   * @param settingId Unique identifier of the setting to soft delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":settingId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("settingId")
    settingId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__discussionBoard_admin_settings_$settingId({
        admin,
        settingId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
