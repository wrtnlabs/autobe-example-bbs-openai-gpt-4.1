import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patch__discussionBoard_admin_passwordResets } from "../../../../providers/patch__discussionBoard_admin_passwordResets";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { get__discussionBoard_admin_passwordResets_$passwordResetId } from "../../../../providers/get__discussionBoard_admin_passwordResets_$passwordResetId";
import { put__discussionBoard_admin_passwordResets_$passwordResetId } from "../../../../providers/put__discussionBoard_admin_passwordResets_$passwordResetId";
import { delete__discussionBoard_admin_passwordResets_$passwordResetId } from "../../../../providers/delete__discussionBoard_admin_passwordResets_$passwordResetId";

import { IPageIDiscussionBoardPasswordReset } from "../../../../api/structures/IPageIDiscussionBoardPasswordReset";
import { IDiscussionBoardPasswordReset } from "../../../../api/structures/IDiscussionBoardPasswordReset";

@Controller("/discussionBoard/admin/passwordResets")
export class DiscussionboardAdminPasswordresetsController {
  /**
   * Get filterable list of password reset token records for audit or account
   * recovery management.
   *
   * Retrieves a filtered and paginated list of all password reset records. This
   * allows clients to audit and review reset flows, rate-limiting, user status,
   * and usage statistics for compliance and security. Filtering supports lookup
   * by user, token status (used or pending), expiration window, and time-based
   * review. Authorization is strictly enforced to admins or the owner.
   * Sensitive reset token values are to be masked in business logic. Errors
   * include access denied, validation failures, or out-of-range pagination
   * queries. Related endpoints allow inspection, update, and deletion of
   * individual password reset events.
   *
   * @param connection
   * @param body Paginated search/filter definition for reset token events.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IDiscussionBoardPasswordReset.IRequest,
  ): Promise<IPageIDiscussionBoardPasswordReset> {
    try {
      return await patch__discussionBoard_admin_passwordResets({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get reset token flow detail by passwordResetId for support or account
   * recovery.
   *
   * Retrieves details for a specific password reset flow event, given its
   * unique identifier (UUID). Useful during ongoing reset for status
   * verification or, for admins, to investigate anomalous password resets.
   * Returns all metadata except for actual raw reset token (excluded for
   * security compliance unless policy permits visibility to admins).
   * Authorization is enforced for owners or admins. Handles not-found and
   * unauthorized access as distinct error cases. Related: password reset
   * request, verify, update/reset actions.
   *
   * @param connection
   * @param passwordResetId Password reset record's unique ID (UUID) to view
   *   details for.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":passwordResetId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("passwordResetId")
    passwordResetId: string & tags.Format<"uuid">,
  ): Promise<IDiscussionBoardPasswordReset> {
    try {
      return await get__discussionBoard_admin_passwordResets_$passwordResetId({
        admin,
        passwordResetId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a password reset request record (e.g., mark as used or extend) by
   * ID.
   *
   * Updates information for a password reset event, typically to mark it as
   * used after a successful reset, extend expiry under policy, or add
   * support/audit metadata. This operation supports account recovery, support
   * scenarios, and admin compliance investigations. Only specific fields
   * (used_at, expires_at) are mutable; all others are immutable. Authorization
   * is based on admin rights or token ownership. Error handling includes
   * validation errors for invalid field modification and access control
   * violations. Related endpoints: reset token list, single reset retrieval,
   * deletion/cleanup of expired or used tokens.
   *
   * @param connection
   * @param passwordResetId Unique identifier (UUID) of the password reset entry
   *   to update.
   * @param body Fields to update in one password reset record (e.g., used_at,
   *   expires_at).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":passwordResetId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("passwordResetId")
    passwordResetId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IDiscussionBoardPasswordReset.IUpdate,
  ): Promise<IDiscussionBoardPasswordReset> {
    try {
      return await put__discussionBoard_admin_passwordResets_$passwordResetId({
        admin,
        passwordResetId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete a password reset event for audit, cleanup, or GDPR compliance.
   *
   * Deletes (soft-delete, by setting deleted_at) a password reset record in the
   * system by its unique ID. Used for cleaning up expired or used tokens, or
   * handling data retention in compliance scenarios. Only token owners or
   * administrators may utilize this operation, with all deletions preserved for
   * audit. Error responses are defined for cases where the resource is not
   * found, already deleted, or when unauthorized access is attempted. Related
   * APIs allow retrieval and update for both audit and recovery support.
   *
   * @param connection
   * @param passwordResetId UUID of the password reset record to delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":passwordResetId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("passwordResetId")
    passwordResetId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__discussionBoard_admin_passwordResets_$passwordResetId(
        {
          admin,
          passwordResetId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
