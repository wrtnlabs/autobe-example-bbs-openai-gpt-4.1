import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patch__discussionBoard_admin_posts_$postId_polls_$pollId_pollOptions } from "../../../../../../providers/patch__discussionBoard_admin_posts_$postId_polls_$pollId_pollOptions";
import { AdminAuth } from "../../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../../decorators/payload/AdminPayload";

import { IPageIDiscussionBoardPollOption } from "../../../../../../api/structures/IPageIDiscussionBoardPollOption";
import { IDiscussionBoardPollOption } from "../../../../../../api/structures/IDiscussionBoardPollOption";

@Controller("/discussionBoard/admin/posts/:postId/polls/:pollId/pollOptions")
export class DiscussionboardAdminPostsPollsPolloptionsController {
  /**
   * List and filter poll options for a poll on a post. Moderators and admins
   * only.
   *
   * Lists and filters poll options for a given pollId, supporting advanced
   * filters (sequence ordering, text match, state). Output is paginated for UI
   * consumption. Moderators and admins use this endpoint for routine audits or
   * quality reviews.
   *
   * Soft-deleted options are only included in the response when requested by an
   * admin role. Optionally, the endpoint allows sorting by sequence or updated
   * date. This endpoint complements single-poll metadata retrieval and poll
   * option CRUD operations.
   *
   * @param connection
   * @param postId Identifier of the parent post for the poll.
   * @param pollId Identifier of the poll whose options are to be listed.
   * @param body Search and pagination input for poll options attached to the
   *   given pollId.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedParam("pollId")
    pollId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IDiscussionBoardPollOption.IRequest,
  ): Promise<IPageIDiscussionBoardPollOption.ISummary> {
    try {
      return await patch__discussionBoard_admin_posts_$postId_polls_$pollId_pollOptions(
        {
          admin,
          postId,
          pollId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
