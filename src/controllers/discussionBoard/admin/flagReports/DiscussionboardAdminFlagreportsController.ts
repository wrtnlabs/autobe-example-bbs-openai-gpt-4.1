import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patch__discussionBoard_admin_flagReports } from "../../../../providers/patch__discussionBoard_admin_flagReports";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { get__discussionBoard_admin_flagReports_$flagReportId } from "../../../../providers/get__discussionBoard_admin_flagReports_$flagReportId";
import { put__discussionBoard_admin_flagReports_$flagReportId } from "../../../../providers/put__discussionBoard_admin_flagReports_$flagReportId";
import { delete__discussionBoard_admin_flagReports_$flagReportId } from "../../../../providers/delete__discussionBoard_admin_flagReports_$flagReportId";

import { IPageIDiscussionBoardFlagReport } from "../../../../api/structures/IPageIDiscussionBoardFlagReport";
import { IDiscussionBoardFlagReport } from "../../../../api/structures/IDiscussionBoardFlagReport";

@Controller("/discussionBoard/admin/flagReports")
export class DiscussionboardAdminFlagreportsController {
  /**
   * Search, filter, and retrieve a paginated list of all user-submitted content
   * flag reports.
   *
   * Retrieve a paginated list of all content flag reports for moderation
   * review. This endpoint exposes all flag reports submitted by users who have
   * observed inappropriate, abusive, or policy-violating behavior in posts or
   * comments. The operation supports advanced filtering by flag status
   * (pending, triaged, dismissed, accepted, escalated), content type
   * (post/comment), report reason, reporter, creation timestamp, and reviewed
   * status.
   *
   * The response is designed for use by moderators and administrators. It
   * allows rapid triage and decision-making on reported content. Integration
   * with user, post, and comment information enables moderators to investigate
   * the flagged context fully. Deleted (soft deleted) reports are excluded from
   * general review lists unless specifically requested, fulfilling audit and
   * compliance expectations.
   *
   * Pagination, sorting, and search capabilities follow platform-wide standards
   * for moderator tooling, enabling large-volume queue management and efficient
   * workflow prioritization.
   *
   * @param connection
   * @param body Filtering, pagination, and sorting criteria for flag report
   *   retrieval, with support for status filtering, content type filters, and
   *   free-text keyword search.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IDiscussionBoardFlagReport.IRequest,
  ): Promise<IPageIDiscussionBoardFlagReport.ISummary> {
    try {
      return await patch__discussionBoard_admin_flagReports({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve details of a single content flag report by its unique identifier.
   *
   * Retrieve the full details of a specific content flag report identified by
   * its unique flagReportId. The operation exposes all relevant report
   * information, including the reporter identities (user), flagged post/comment
   * context, reason for reporting, and all review lifecycle metadata.
   *
   * Intended for use by moderators and admins for in-depth investigation or
   * audit. Includes review timestamps, moderation actions, and status (pending,
   * dismissed, accepted, escalated, etc.). The endpoint enforces required
   * permission checks to restrict detailed report data to authorized staff
   * only.
   *
   * This endpoint supports business logic for moderation triage, follow-up
   * actions, audit trails, and compliance with transparency requirements.
   *
   * @param connection
   * @param flagReportId Unique identifier of the flag report to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":flagReportId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("flagReportId")
    flagReportId: string & tags.Format<"uuid">,
  ): Promise<IDiscussionBoardFlagReport> {
    try {
      return await get__discussionBoard_admin_flagReports_$flagReportId({
        admin,
        flagReportId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing content flag report to reflect review or status changes.
   *
   * Update an existing content flag report as part of the moderation workflow.
   * Moderators and admins may change the status (such as from 'pending' to
   * 'triaged', 'accepted', 'dismissed', or 'escalated'), set reviewed
   * timestamps, or update moderator notes based on the investigation outcome.
   *
   * Immutable fields such as reporter, post, comment, and original submission
   * data remain unchanged. The operation enforces audit trails by updating the
   * updated_at field and may append moderator comments as permitted by schema
   * and business rules. Fields subject to update must reflect business process
   * constraints and ensure accuracy for compliance review.
   *
   * Permission checks require the actor to have moderator or admin status. The
   * API response includes the updated flag report entity for further workflow
   * integration, such as status display or audit export.
   *
   * @param connection
   * @param flagReportId Unique identifier of the flag report to update.
   * @param body Fields to update in the flag report; typically moderation
   *   status and notes.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":flagReportId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("flagReportId")
    flagReportId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IDiscussionBoardFlagReport.IUpdate,
  ): Promise<IDiscussionBoardFlagReport> {
    try {
      return await put__discussionBoard_admin_flagReports_$flagReportId({
        admin,
        flagReportId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete a content flag report by marking it as deleted (retained for
   * compliance).
   *
   * Perform a soft deletion of a content flag report, removing it from routine
   * moderation review and user interfaces while preserving the record for
   * compliance, investigation, and future audits. This operation sets the
   * deleted_at field to the current timestamp, making the entry invisible to
   * ordinary queries but retrievable for privileged or audit access as needed
   * by policy.
   *
   * Only moderators and administrators may execute this operation. The deletion
   * does not erase the original report details, context, or review history, in
   * alignment with documented business requirements for compliance and
   * moderation trace reliability.
   *
   * @param connection
   * @param flagReportId Unique identifier of the flag report to delete (soft
   *   delete).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":flagReportId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("flagReportId")
    flagReportId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__discussionBoard_admin_flagReports_$flagReportId({
        admin,
        flagReportId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
