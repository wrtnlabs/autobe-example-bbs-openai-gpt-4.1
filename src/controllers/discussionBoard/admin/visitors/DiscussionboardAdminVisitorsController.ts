import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patch__discussionBoard_admin_visitors } from "../../../../providers/patch__discussionBoard_admin_visitors";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { get__discussionBoard_admin_visitors_$visitorId } from "../../../../providers/get__discussionBoard_admin_visitors_$visitorId";

import { IPageIDiscussionBoardVisitor } from "../../../../api/structures/IPageIDiscussionBoardVisitor";
import { IDiscussionBoardVisitor } from "../../../../api/structures/IDiscussionBoardVisitor";

@Controller("/discussionBoard/admin/visitors")
export class DiscussionboardAdminVisitorsController {
  /**
   * List/search visitor accounts (discussion_board_visitors) with filtering and
   * pagination.
   *
   * Retrieves a paginated and searchable list of visitor accounts registered in
   * the system. This endpoint provides viewing, searching, and filter
   * capabilities for auditing, anti-abuse, or operational analytics purposes.
   * Accessible only to admin users as visitor info is considered sensitive even
   * without PII.
   *
   * The result is a summary of visitor records, filtered and paginated
   * according to the query parameters defined in the request body.
   *
   * This endpoint references the discussion_board_visitors table and leverages
   * its metadata columns for filtering and audit. Related operations may
   * include retrieving visitor details or associating a visitor with an
   * authenticated user for escalation.
   *
   * @param connection
   * @param body Visitor search, filter, pagination, and sort options.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IDiscussionBoardVisitor.IRequest,
  ): Promise<IPageIDiscussionBoardVisitor.ISummary> {
    try {
      return await patch__discussionBoard_admin_visitors({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve visitor account details by visitorId (discussion_board_visitors).
   *
   * Retrieve the detail of a single visitor account by its visitorId. Supplies
   * the full set of available non-PII metadata for auditing, operational
   * analysis, or security context.
   *
   * This endpoint references the discussion_board_visitors model, allowing
   * inspection of any individual session or visitor identified by their UUID.
   * Only accessible to platform admins for compliance and regulatory controls.
   * Related endpoints include searching all visitors and associating sessions
   * with user sign-ups.
   *
   * @param connection
   * @param visitorId Unique identifier (UUID) of the visitor account.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":visitorId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("visitorId")
    visitorId: string & tags.Format<"uuid">,
  ): Promise<IDiscussionBoardVisitor> {
    try {
      return await get__discussionBoard_admin_visitors_$visitorId({
        admin,
        visitorId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
