import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patch__discussionBoard_admin_complianceEvents } from "../../../../providers/patch__discussionBoard_admin_complianceEvents";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { get__discussionBoard_admin_complianceEvents_$complianceEventId } from "../../../../providers/get__discussionBoard_admin_complianceEvents_$complianceEventId";

import { IPageIDiscussionBoardComplianceEvent } from "../../../../api/structures/IPageIDiscussionBoardComplianceEvent";
import { IDiscussionBoardComplianceEvent } from "../../../../api/structures/IDiscussionBoardComplianceEvent";

@Controller("/discussionBoard/admin/complianceEvents")
export class DiscussionboardAdminComplianceeventsController {
  /**
   * Search and retrieve paginated compliance events for audit/regulatory
   * review.
   *
   * This endpoint allows compliance and admin users to search, page, and filter
   * through all compliance event records on the platform. Each compliance event
   * entry may represent a regulatory request, data erasure, policy update, or
   * any other compliance activity tracked in the table. Advanced queries by
   * initiated user, event type, date, assignment, or status are supported.
   *
   * The endpoint returns a paginated list of matching events suitable for
   * review, reporting, or regulatory inquiry responses. Only admin users may
   * perform this operation, and all searches and accesses must be logged for
   * audit. This is a read-only operation; no modification or deletion of
   * compliance events is supported here.
   *
   * @param connection
   * @param body Filtering, sorting, and paging parameters for compliance event
   *   search/index
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IDiscussionBoardComplianceEvent.IRequest,
  ): Promise<IPageIDiscussionBoardComplianceEvent> {
    try {
      return await patch__discussionBoard_admin_complianceEvents({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get details for a single compliance event record by ID.
   *
   * Returns full compliance/audit-level details of an individual compliance
   * event as tracked in the system. Typical use cases include regulatory
   * reporting, internal admin review, or compliance workflow management. Only
   * administrative or compliance users can access this endpoint.
   *
   * The record contains type, status, assignment, timestamps, regulator
   * reference if present, and all event-specific details. Any access to this
   * endpoint should be logged to preserve the audit trail. Deletion or
   * modification of event records is not provided by this API operation.
   *
   * @param connection
   * @param complianceEventId Unique ID of the compliance event to retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":complianceEventId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("complianceEventId")
    complianceEventId: string & tags.Format<"uuid">,
  ): Promise<IDiscussionBoardComplianceEvent> {
    try {
      return await get__discussionBoard_admin_complianceEvents_$complianceEventId(
        {
          admin,
          complianceEventId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
