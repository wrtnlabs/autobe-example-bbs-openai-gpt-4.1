import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patch__discussionBoard_admin_actionLogs } from "../../../../providers/patch__discussionBoard_admin_actionLogs";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { get__discussionBoard_admin_actionLogs_$actionLogId } from "../../../../providers/get__discussionBoard_admin_actionLogs_$actionLogId";

import { IPageIDiscussionBoardActionLog } from "../../../../api/structures/IPageIDiscussionBoardActionLog";
import { IDiscussionBoardActionLog } from "../../../../api/structures/IDiscussionBoardActionLog";

@Controller("/discussionBoard/admin/actionLogs")
export class DiscussionboardAdminActionlogsController {
  /**
   * List/search detailed action logs for compliance and administration.
   *
   * Search and retrieve a paginated list of action log entries, which serve as
   * detailed sub-events or system-level traces attached to audit logs. Each log
   * details its status, metadata, and creation timestamp, providing granular
   * visibility into the internal operations and compliance story of the
   * platform.
   *
   * This endpoint is commonly used by compliance auditors, admins, and (when
   * appropriate) technical support personnel to investigate incidents, confirm
   * audit trails, or debug complex sequences of platform actions. List results
   * can be filtered, sorted, and paginated according to business rules and
   * performance considerations.
   *
   * This operation references the discussion_board_action_logs table, returning
   * relevant child records that may be associated with larger audit events, all
   * according to the Prisma schema fields and documented relationships.
   *
   * @param connection
   * @param body Action log search criteria, filters, and pagination/sorting
   *   options
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IDiscussionBoardActionLog.IRequest,
  ): Promise<IPageIDiscussionBoardActionLog> {
    try {
      return await patch__discussionBoard_admin_actionLogs({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get a specific action log by ID (admin-only).
   *
   * Fetch a single action log record by its unique ID, including embedded
   * status, metadata, and timestamp. Useful for compliance audit, root-cause
   * analysis, and advanced troubleshooting tasks. The endpoint cross-references
   * parent audit log data for investigative context and is primarily intended
   * for admin and compliance workflows.
   *
   * Access is strictly limited to admin role to safeguard sensitive traces of
   * platform logic or user actions. If the action log does not exist, a
   * not-found error is returned. Each record maps directly to the
   * discussion_board_action_logs Prisma schema and relates upward to an audit
   * log for full event history.
   *
   * @param connection
   * @param actionLogId Unique identifier of the action log record
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":actionLogId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("actionLogId")
    actionLogId: string & tags.Format<"uuid">,
  ): Promise<IDiscussionBoardActionLog> {
    try {
      return await get__discussionBoard_admin_actionLogs_$actionLogId({
        admin,
        actionLogId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
