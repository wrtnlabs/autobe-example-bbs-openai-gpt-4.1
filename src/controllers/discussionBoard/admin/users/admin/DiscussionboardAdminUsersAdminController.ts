import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { put__discussionBoard_admin_users_$userId_admin } from "../../../../../providers/put__discussionBoard_admin_users_$userId_admin";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";
import { patch__discussionBoard_admin_users_$userId_admin } from "../../../../../providers/patch__discussionBoard_admin_users_$userId_admin";
import { delete__discussionBoard_admin_users_$userId_admin } from "../../../../../providers/delete__discussionBoard_admin_users_$userId_admin";

import { IDiscussionBoardAdmin } from "../../../../../api/structures/IDiscussionBoardAdmin";

@Controller("/discussionBoard/admin/users/:userId/admin")
export class DiscussionboardAdminUsersAdminController {
  /**
   * Assign or update admin privileges for a user (discussion_board_admins).
   *
   * Grant administrator privileges to a user by creating or updating an admin
   * record tied to the provided userId. This operation is restricted to
   * existing administrators.
   *
   * Privileges include the highest-level access on the platform, with
   * assignment and revocation recorded for auditing. Each assignment should be
   * unique and not overlap with suspended or revoked records. This endpoint
   * follows regulatory role management rules and is fully auditable.
   *
   * All admin assignments are managed via this single admin table. The endpoint
   * validates user status, ensures idempotency, and triggers notifications if
   * business logic so requires.
   *
   * @param connection
   * @param userId Target user ID for admin privilege assignment.
   * @param body Admin assignment details.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async assignAdmin(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("userId")
    userId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IDiscussionBoardAdmin.ICreate,
  ): Promise<IDiscussionBoardAdmin> {
    try {
      return await put__discussionBoard_admin_users_$userId_admin({
        admin,
        userId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Restore/reinstate admin privilege for a user in discussion_board_admins.
   *
   * Restore the admin role for a user with the provided userId by reactivating
   * or reinstating a previously-revoked administrator record. This endpoint
   * allows the admin team to re-elevate prior admins who may have been
   * suspended or revoked in the past.
   *
   * Security checks ensure only admins may access this feature. The response
   * confirms the admin's privileges have been reinstated, with current status
   * and metadata. All such actions are logged for audit/compliance.
   *
   * Related operations include creating new admin assignments and revoking or
   * suspending admin access. The admins table is the primary store for this
   * privilege.
   *
   * @param connection
   * @param userId User ID to reinstate as admin.
   * @param body Details for admin reinstatement (generally minimal, but allows
   *   for justifications or assignment options).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async reinstateAdmin(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("userId")
    userId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IDiscussionBoardAdmin.IUpdate,
  ): Promise<IDiscussionBoardAdmin> {
    try {
      return await patch__discussionBoard_admin_users_$userId_admin({
        admin,
        userId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Revoke admin privilege from a user (discussion_board_admins).
   *
   * Revoke administrator privileges for the given user by soft deleting the
   * corresponding record in discussion_board_admins. This operation updates the
   * admin's assignment row with a deleted_at timestamp, inactivating their
   * admin status, but retains audit history for compliance.
   *
   * Revocation is only available to users with admin role, and the system
   * validates assignment before proceeding. Attempts to revoke non-existent or
   * already-revoked admin privileges will result in a clear error.
   *
   * This endpoint completes the privilege management cycle, allowing full
   * compliance with escalation and demotion workflows. It also supports audit,
   * export, and compliance tracing features.
   *
   * @param connection
   * @param userId ID of user to revoke admin privileges from.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async revokeAdmin(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("userId")
    userId: string & tags.Format<"uuid">,
  ): Promise<IDiscussionBoardAdmin> {
    try {
      return await delete__discussionBoard_admin_users_$userId_admin({
        admin,
        userId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
