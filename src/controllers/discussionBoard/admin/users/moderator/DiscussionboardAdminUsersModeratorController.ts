import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { put__discussionBoard_admin_users_$userId_moderator } from "../../../../../providers/put__discussionBoard_admin_users_$userId_moderator";
import { AdminAuth } from "../../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../../decorators/payload/AdminPayload";
import { patch__discussionBoard_admin_users_$userId_moderator } from "../../../../../providers/patch__discussionBoard_admin_users_$userId_moderator";
import { delete__discussionBoard_admin_users_$userId_moderator } from "../../../../../providers/delete__discussionBoard_admin_users_$userId_moderator";

import { IDiscussionBoardModerator } from "../../../../../api/structures/IDiscussionBoardModerator";

@Controller("/discussionBoard/admin/users/:userId/moderator")
export class DiscussionboardAdminUsersModeratorController {
  /**
   * Assign moderator role to a user (discussion_board_users,
   * discussion_board_moderators).
   *
   * This operation assigns moderator privileges to a user with the specified
   * userId. Upon execution, the user is given elevated permissions as defined
   * by the discussion_board_moderators model, which supports audit and
   * suspension fields. Moderator assignment is managed exclusively by admins,
   * and the system will log the assignment event for auditing.
   *
   * Security is critical: Only admins can call this endpoint. The system checks
   * user role and may require justification for the assignment. If the user is
   * already a moderator, the call will have no effect.
   *
   * The operation references the discussion_board_moderators table; it checks
   * for existing active assignments, ensures no duplicates, and creates a new
   * assignment record. Related actions include revoking moderator status and
   * listing all moderators for admin management. The business rules follow the
   * platform's escalation and role management guidelines.
   *
   * @param connection
   * @param userId Target user ID to assign moderator role.
   * @param body Assignment details (if extra info is needed; generally empty
   *   for assignment)
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async assignModerator(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("userId")
    userId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IDiscussionBoardModerator.ICreate,
  ): Promise<IDiscussionBoardModerator> {
    try {
      return await put__discussionBoard_admin_users_$userId_moderator({
        admin,
        userId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get moderator role status/assignment by userId.
   *
   * Fetch a user's moderator status and assignment record, including active
   * status, suspension history, assignment, and revocation timestamps, as
   * managed in the discussion_board_moderators table. The endpoint is intended
   * for admins and moderators to verify or audit a user's moderation privileges
   * and compliance with assignment or revocation workflows.
   *
   * Response provides only the moderator-specific record for the userId, not
   * the base user account details. Use the /users/{userId} endpoint for general
   * profile information; this endpoint provides moderation context only.
   * Typical use cases include privileges checks, compliance audits, and
   * evaluating eligibility for moderation actions.
   *
   * @param connection
   * @param userId Unique identifier of the user whose moderator record is to be
   *   fetched
   * @param body Moderator record query parameters (future use)
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async moderatorStatus(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("userId")
    userId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IDiscussionBoardModerator.IRequest,
  ): Promise<IDiscussionBoardModerator> {
    try {
      return await patch__discussionBoard_admin_users_$userId_moderator({
        admin,
        userId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Revoke moderator role from a user (discussion_board_moderators).
   *
   * Revoke moderator privileges for the specified userId. This operation marks
   * the moderator's record as deleted (soft delete) and records the revocation
   * with a deleted_at timestamp.
   *
   * Admins use this endpoint to remove moderator status and associated rights
   * from users. The operation adds a compliance-auditable record and prevents
   * this user from moderating until possibly re-assigned in the future.
   * Security audit is maintained for all privilege changes.
   *
   * The endpoint validates the user is currently a moderator and marks the
   * assigned record deleted. Related endpoints manage assignment (PUT), listing
   * moderators, or user detail inspection. All business rules and audit
   * compliance are observed.
   *
   * @param connection
   * @param userId ID of the user whose moderator privileges are being revoked.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async revokeModerator(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("userId")
    userId: string & tags.Format<"uuid">,
  ): Promise<IDiscussionBoardModerator> {
    try {
      return await delete__discussionBoard_admin_users_$userId_moderator({
        admin,
        userId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
