import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patch__discussionBoard_admin_refreshTokens } from "../../../../providers/patch__discussionBoard_admin_refreshTokens";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { get__discussionBoard_admin_refreshTokens_$refreshTokenId } from "../../../../providers/get__discussionBoard_admin_refreshTokens_$refreshTokenId";
import { put__discussionBoard_admin_refreshTokens_$refreshTokenId } from "../../../../providers/put__discussionBoard_admin_refreshTokens_$refreshTokenId";
import { delete__discussionBoard_admin_refreshTokens_$refreshTokenId } from "../../../../providers/delete__discussionBoard_admin_refreshTokens_$refreshTokenId";

import { IPageIDiscussionBoardRefreshToken } from "../../../../api/structures/IPageIDiscussionBoardRefreshToken";
import { IDiscussionBoardRefreshToken } from "../../../../api/structures/IDiscussionBoardRefreshToken";

@Controller("/discussionBoard/admin/refreshTokens")
export class DiscussionboardAdminRefreshtokensController {
  /**
   * Retrieve a paginated and filterable list of refresh tokens for session and
   * security audit.
   *
   * This operation allows retrieval of a filtered and paginated list of refresh
   * token entities in the discussion board system. It enables clients (such as
   * admins or system users) to audit, search, and review refresh tokens that
   * have been issued to users for maintaining session continuity. The operation
   * supports filtering by user, token status, issuance/expiration time, and
   * device metadata. Security is paramount as this operation exposes sensitive
   * session dataâ€”access should be limited to users with proper authority, such
   * as 'admin' or the user themselves viewing their own token list. Sensitive
   * data such as raw token values should be masked as appropriate within
   * business logic. Error handling includes returning clear messages for access
   * denied, validation errors in filter parameters, and pagination
   * out-of-range. This endpoint is crucial for users wishing to audit their own
   * active sessions or for administrators conducting security and compliance
   * reviews. Related endpoints include single token retrieval, revocation, and
   * management of password and session policies.
   *
   * @param connection
   * @param body Filter and pagination criteria for retrieving refresh tokens.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IDiscussionBoardRefreshToken.IRequest,
  ): Promise<IPageIDiscussionBoardRefreshToken> {
    try {
      return await patch__discussionBoard_admin_refreshTokens({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get detailed information for a specific refresh token by ID.
   *
   * Allows retrieval of a single refresh token entity and its metadata by
   * specifying its unique identifier in the path parameter. This endpoint
   * provides details necessary for advanced session management, including
   * audits, debugging user session issues, and detecting anomalous activity.
   * The operation ensures sensitive information such as the actual token value
   * is appropriately masked or excluded unless safely readable by a
   * high-privilege actor (such as an admin). Authorization is enforced: only
   * the user to whom the token belongs or an admin may use this endpoint.
   * Handling includes not-found and access-denied error scenarios. Related
   * endpoints: token list retrieval, token revocation or update, password reset
   * flows.
   *
   * @param connection
   * @param refreshTokenId The unique identifier (UUID) of the refresh token to
   *   retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":refreshTokenId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("refreshTokenId")
    refreshTokenId: string & tags.Format<"uuid">,
  ): Promise<IDiscussionBoardRefreshToken> {
    try {
      return await get__discussionBoard_admin_refreshTokens_$refreshTokenId({
        admin,
        refreshTokenId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update (e.g., revoke) a refresh token to invalidate a session by ID.
   *
   * Updates a specific refresh token record's metadata, generally to revoke a
   * session (set revoked_at) or update device/session information, for audit
   * and compliance purposes. This action supports user-initiated single-device
   * logout or administrative forced logout scenarios. Only mutable fields
   * (revoked_at, device_info) are updatable; all other fields remain immutable
   * for security and traceability. Endpoint enforces strict access control so
   * that users may only update their own sessions and admins can act on all.
   * Error conditions include invalid payload, forbidden field update attempts,
   * and access denied. Related APIs include list, retrieve, and delete token
   * operations.
   *
   * @param connection
   * @param refreshTokenId The unique identifier (UUID) of the refresh token to
   *   update.
   * @param body Fields that may be updated for a refresh token, such as
   *   revoked_at and device_info.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":refreshTokenId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("refreshTokenId")
    refreshTokenId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IDiscussionBoardRefreshToken.IUpdate,
  ): Promise<IDiscussionBoardRefreshToken> {
    try {
      return await put__discussionBoard_admin_refreshTokens_$refreshTokenId({
        admin,
        refreshTokenId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete a refresh token to disable a session (logout from device).
   *
   * Deletes a refresh token entry by its unique identifier by performing a soft
   * delete (sets the deleted_at timestamp) for regulatory compliance and audit
   * retention. This enables users or administrators to invalidate active
   * sessions safely without irreversibly losing the audit trail. The endpoint
   * applies strict authorization: only the owner user of the token or an admin
   * may delete. Error conditions include access denied, resource not found, or
   * token already invalidated. Associated operations include logout from all
   * devices (mass-revocation), listing all tokens for a user, and session/token
   * restoration under defined business flows.
   *
   * @param connection
   * @param refreshTokenId The unique identifier (UUID) of the refresh token to
   *   remove.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":refreshTokenId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("refreshTokenId")
    refreshTokenId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__discussionBoard_admin_refreshTokens_$refreshTokenId({
        admin,
        refreshTokenId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
