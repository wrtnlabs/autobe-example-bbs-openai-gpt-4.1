import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { post__discussionBoard_admin_tags } from "../../../../providers/post__discussionBoard_admin_tags";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { patch__discussionBoard_admin_tags } from "../../../../providers/patch__discussionBoard_admin_tags";
import { get__discussionBoard_admin_tags_$tagId } from "../../../../providers/get__discussionBoard_admin_tags_$tagId";
import { put__discussionBoard_admin_tags_$tagId } from "../../../../providers/put__discussionBoard_admin_tags_$tagId";
import { delete__discussionBoard_admin_tags_$tagId } from "../../../../providers/delete__discussionBoard_admin_tags_$tagId";

import { IDiscussionBoardTag } from "../../../../api/structures/IDiscussionBoardTag";
import { IPageIDiscussionBoardTag } from "../../../../api/structures/IPageIDiscussionBoardTag";

@Controller("/discussionBoard/admin/tags")
export class DiscussionboardAdminTagsController {
  /**
   * Create a new tag for organizing content.
   *
   * Create a new tag instance for use within categories and as a tool for
   * discussion board organization. Requires a unique label and optional
   * description, with is_active controlling immediate usability in tagging
   * flows.
   *
   * Strict controls prevent tag duplication and allow for moderation review
   * where needed. Useful for evolving forum taxonomy, supporting user
   * engagement, and enabling advanced content filtering. All actions are logged
   * for audit.
   *
   * @param connection
   * @param body Information required to create a new tag.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IDiscussionBoardTag.ICreate,
  ): Promise<IDiscussionBoardTag> {
    try {
      return await post__discussionBoard_admin_tags({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Paginated, filterable list of discussion board tags.
   *
   * Fetch a paginated, searchable, and filterable list of tags for use in
   * category and post management. Tags power faceted search, user suggestions,
   * and advanced moderation workflows. The API enables filtering on tag label
   * and is_active status, with ordering for user-facing or moderation needs.
   *
   * Used both by admin users for backend tag management and by end-users for
   * tag browsing or selection. Soft-deleted tags are excluded unless explicitly
   * included by business logic. Supports growth and evolution of tag taxonomy.
   *
   * @param connection
   * @param body Filtering, search, and pagination options for retrieving tags.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IDiscussionBoardTag.IRequest,
  ): Promise<IPageIDiscussionBoardTag.ISummary> {
    try {
      return await patch__discussionBoard_admin_tags({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get details about a specific discussion board tag.
   *
   * Fetch a complete detail record for a single tag specified by its unique
   * tagId. The response includes label, description, activation status, audit
   * timestamps, and any admin-level details relevant to management or
   * moderation.
   *
   * Access is controlled for sensitive or inactive tags, but public tags may be
   * visible depending on system configuration. Enables UI workflows such as tag
   * editing, merging, or detail popovers in tag suggestion lists.
   *
   * @param connection
   * @param tagId Unique identifier of the target tag.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":tagId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("tagId")
    tagId: string & tags.Format<"uuid">,
  ): Promise<IDiscussionBoardTag> {
    try {
      return await get__discussionBoard_admin_tags_$tagId({
        admin,
        tagId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing tag (label/description/status) in the discussion board
   * (discussion_board_tags).
   *
   * This API allows an admin to update the label, description, or active status
   * of a tag used throughout the discussion board. Tag modifications may
   * include correcting spelling, updating descriptions to reflect community
   * standards, or toggling active status for moderation. The system enforces
   * tag label uniqueness and updates affected relationships across categories.
   * Only admin users have access to this endpoint to prevent unauthorized
   * modifications to the platform's taxonomy. Related endpoints include tag
   * creation (POST /tags), tag retrieval, and tag list endpoints for
   * categorization management. In case of validation failure (e.g., duplicate
   * tag label), a descriptive error message is returned.
   *
   * @param connection
   * @param tagId Unique identifier of the tag to update.
   * @param body Fields and new values for the tag update.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":tagId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("tagId")
    tagId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IDiscussionBoardTag.IUpdate,
  ): Promise<IDiscussionBoardTag> {
    try {
      return await put__discussionBoard_admin_tags_$tagId({
        admin,
        tagId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete a tag in the discussion_board_tags table (taxonomy/tag
   * management).
   *
   * This endpoint allows administrators to disable or remove a tag from the
   * taxonomy by performing a soft delete operation. The deleted_at field marks
   * the tag as unavailable for new categorization, but the tag remains in the
   * database for audit and compliance reasons. Existing category or post
   * relationships referencing the tag remain unchanged, supporting historical
   * analysis. Only admin users may access this endpoint to prevent loss of
   * platform structure. Operation errors include not found and permission
   * denial. To restore a tag, use a separate (not provided here)
   * undelete/recover endpoint.
   *
   * @param connection
   * @param tagId Unique identifier of the tag to soft delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":tagId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("tagId")
    tagId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__discussionBoard_admin_tags_$tagId({
        admin,
        tagId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
