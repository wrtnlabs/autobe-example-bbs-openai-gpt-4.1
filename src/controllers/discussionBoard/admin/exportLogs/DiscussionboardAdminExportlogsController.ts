import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { get__discussionBoard_admin_exportLogs_$exportLogId } from "../../../../providers/get__discussionBoard_admin_exportLogs_$exportLogId";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { put__discussionBoard_admin_exportLogs_$exportLogId } from "../../../../providers/put__discussionBoard_admin_exportLogs_$exportLogId";
import { delete__discussionBoard_admin_exportLogs_$exportLogId } from "../../../../providers/delete__discussionBoard_admin_exportLogs_$exportLogId";
import { post__discussionBoard_admin_exportLogs } from "../../../../providers/post__discussionBoard_admin_exportLogs";
import { patch__discussionBoard_admin_exportLogs } from "../../../../providers/patch__discussionBoard_admin_exportLogs";

import { IDiscussionBoardExportLog } from "../../../../api/structures/IDiscussionBoardExportLog";
import { IPageIDiscussionBoardExportLog } from "../../../../api/structures/IPageIDiscussionBoardExportLog";

@Controller("/discussionBoard/admin/exportLogs")
export class DiscussionboardAdminExportlogsController {
  /**
   * Retrieve audit details for a specific export log record by ID.
   *
   * Get the full details and audit record for a specific export log, identified
   * by exportLogId. This read-only operation returns requester information,
   * file location, export timing, type, status, and trace metadata for
   * compliance or forensic review.
   *
   * The endpoint ensures only authorized admins can access potentially
   * sensitive export histories. It supports compliance and audit by providing
   * all relevant context for a given export event logged in the system.
   *
   * If the exportLogId does not correspond to an existing record, the operation
   * should return an appropriate error response indicating not found or
   * unauthorized access, as relevant.
   *
   * @param connection
   * @param exportLogId Unique identifier of the export log record to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":exportLogId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("exportLogId")
    exportLogId: string & tags.Format<"uuid">,
  ): Promise<IDiscussionBoardExportLog> {
    try {
      return await get__discussionBoard_admin_exportLogs_$exportLogId({
        admin,
        exportLogId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing export log record's audit data by ID.
   *
   * Update the details of an export log record by ID, such as its status, file
   * location URI, or exported time to reflect delivery or final audit outcomes.
   * Administrators use this operation to keep export tracking up to date for
   * proper compliance and regulatory reporting.
   *
   * The endpoint requires valid admin privileges and a valid exportLogId. Input
   * will be validated for audit accuracy, uniqueness (for file URI), and proper
   * update sequencing.
   *
   * If exportLogId does not correspond to a current record, the service will
   * return an error indicating missing resource or access permission denial.
   *
   * @param connection
   * @param exportLogId Unique identifier of the export log record to update.
   * @param body Update fields for the export log record.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":exportLogId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("exportLogId")
    exportLogId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IDiscussionBoardExportLog.IUpdate,
  ): Promise<IDiscussionBoardExportLog> {
    try {
      return await put__discussionBoard_admin_exportLogs_$exportLogId({
        admin,
        exportLogId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft-delete an export log entry for compliance lifecycle management.
   *
   * Soft-delete a single export log entry by exportLogId. This operation will
   * mark the log record as deleted using the 'deleted_at' column, preserving it
   * for future compliance or incident review. The record will be omitted from
   * non-audit log lookups after deletion.
   *
   * Only users with the admin role may execute this operation. For audit and
   * compliance, the operation should log the deletion's actor and timestamp. If
   * the export log record is not found, a not found or error response will be
   * provided.
   *
   * @param connection
   * @param exportLogId Unique identifier of the export log record to delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":exportLogId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("exportLogId")
    exportLogId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__discussionBoard_admin_exportLogs_$exportLogId({
        admin,
        exportLogId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Create a new export log entry for compliance or audit file delivery.
   *
   * Create and record a new export log entry for tracking compliance and audit
   * file deliveries in the discussion board service. Administrators can provide
   * all necessary details about the export event—requester (if any), export
   * target type, the URI of the export file, its MIME type, export date, and
   * initial status—for full compliance traceability.
   *
   * The endpoint will validate that all required fields are provided and that
   * file URIs remain unique. This helps maintain a complete audit trail and
   * ensures regulatory and business export events are documented.
   *
   * This operation should only be accessible to users with the admin role, as
   * it involves sensitive audit/audit log data and compliance actions.
   *
   * @param connection
   * @param body Details for the export log record to be created.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IDiscussionBoardExportLog.ICreate,
  ): Promise<IDiscussionBoardExportLog> {
    try {
      return await post__discussionBoard_admin_exportLogs({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve and filter export log records with pagination for compliance
   * audit.
   *
   * Retrieve a filtered, paginated list of export log records used for tracking
   * downloads and exports of compliance, audit, or privacy data. This operation
   * enables administrators and compliance teams to monitor the lifecycle of
   * export files, audit export activity, and investigate export history for
   * regulatory and business needs.
   *
   * The endpoint supports advanced searching, filtering (by target type,
   * status, file type), and configurable sorting mechanisms. Administrators can
   * use this API to review which users or staff requested particular exports,
   * when files were made available, and the current status of each logged
   * event.
   *
   * Data returned does not include personal PII outside of user identifiers for
   * audit. The endpoint only exposes information to authorized admin users. Use
   * this operation together with detailed retrieval and update endpoints to
   * audit or manage export log records.
   *
   * @param connection
   * @param body Advanced search and pagination request for export log records.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IDiscussionBoardExportLog.IRequest,
  ): Promise<IPageIDiscussionBoardExportLog.ISummary> {
    try {
      return await patch__discussionBoard_admin_exportLogs({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
