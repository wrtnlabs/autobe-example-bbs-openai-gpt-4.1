import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patch__discussionBoard_admin_verificationTokens } from "../../../../providers/patch__discussionBoard_admin_verificationTokens";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { get__discussionBoard_admin_verificationTokens_$verificationTokenId } from "../../../../providers/get__discussionBoard_admin_verificationTokens_$verificationTokenId";
import { put__discussionBoard_admin_verificationTokens_$verificationTokenId } from "../../../../providers/put__discussionBoard_admin_verificationTokens_$verificationTokenId";
import { delete__discussionBoard_admin_verificationTokens_$verificationTokenId } from "../../../../providers/delete__discussionBoard_admin_verificationTokens_$verificationTokenId";

import { IPageIDiscussionBoardVerificationToken } from "../../../../api/structures/IPageIDiscussionBoardVerificationToken";
import { IDiscussionBoardVerificationToken } from "../../../../api/structures/IDiscussionBoardVerificationToken";

@Controller("/discussionBoard/admin/verificationTokens")
export class DiscussionboardAdminVerificationtokensController {
  /**
   * Search and retrieve a paginated list of verification tokens for audit and
   * admin use.
   *
   * Retrieve a filtered, paginated list of verification tokens from the system
   * for investigation or administration purposes.
   *
   * This API allows authorized users (typically admin or moderator roles) to
   * search, filter, and paginate verification tokens issued for account
   * registration, password resets, or multi-factor authentication events. Query
   * filters may include purpose (such as 'email_verification',
   * 'password_reset'), issuance and expiration dates, and the user ID
   * associated with the token. Tokens that are expired, used, or revoked will
   * be included or excluded in results depending on filters.
   *
   * Security is paramount: token values are never returned directly. Only
   * summary/admin-safe fields, such as creation/expiry timestamps, usage
   * information, or token status, are exposed for administration and
   * compliance. This operation serves as an audit mechanism supporting business
   * and regulatory needs, with full traceability as described in the Prisma
   * schema. Only users with proper administrative or moderation privileges can
   * call this endpoint.
   *
   * @param connection
   * @param body Advanced search/filter and pagination criteria for verification
   *   tokens
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IDiscussionBoardVerificationToken.IRequest,
  ): Promise<IPageIDiscussionBoardVerificationToken.ISummary> {
    try {
      return await patch__discussionBoard_admin_verificationTokens({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information about a specific verification token by ID.
   *
   * Retrieve full details about a verification token by its ID for audit,
   * compliance, or troubleshooting use cases.
   *
   * The endpoint supports administrative visibility into a specific
   * verification token's lifecycle, including creation time, expiration, use
   * status, and assigned user (via userId). This operation is designed for
   * workflow troubleshooting, escalated support, and security incident
   * analysis, and only available to authorized admin roles. Sensitive
   * properties such as the raw verification token value are not exposed in the
   * response.
   *
   * Token status and audit information must be handled in accordance with
   * privacy and compliance rules described in the Prisma schema.
   *
   * @param connection
   * @param verificationTokenId Unique identifier for the target verification
   *   token
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":verificationTokenId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("verificationTokenId")
    verificationTokenId: string & tags.Format<"uuid">,
  ): Promise<IDiscussionBoardVerificationToken> {
    try {
      return await get__discussionBoard_admin_verificationTokens_$verificationTokenId(
        {
          admin,
          verificationTokenId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update non-sensitive verification token metadata (admin only).
   *
   * Update metadata or non-sensitive properties of a verification token, such
   * as adjusting expiration, marking as used, or updating administrative
   * notes.
   *
   * This operation is restricted to administrative and compliance staff, as
   * changes to verification tokens can impact security and account activation
   * workflows. The operation never allows direct modification of the token
   * value itself. All property updates are subject to detailed audit logging
   * per compliance requirements. Only the fields allowed in the
   * IDiscussionBoardVerificationToken.IUpdate schema may be changed.
   *
   * Typical use cases include resolving user support escalations,
   * compliance-driven metadata updates, or exceptional case workflow
   * adjustments. Full compliance with the Prisma schema's field definitions and
   * relations is enforced.
   *
   * @param connection
   * @param verificationTokenId Unique identifier for the target verification
   *   token
   * @param body New values for updatable verification token fields (excluding
   *   the token string)
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":verificationTokenId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("verificationTokenId")
    verificationTokenId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IDiscussionBoardVerificationToken.IUpdate,
  ): Promise<IDiscussionBoardVerificationToken> {
    try {
      return await put__discussionBoard_admin_verificationTokens_$verificationTokenId(
        {
          admin,
          verificationTokenId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete a verification token by ID (admin only, audit retained).
   *
   * Soft delete a verification token by marking it as deleted, ensuring it is
   * no longer used for authentication or workflow purposes, but is retained for
   * audit and compliance traceability.
   *
   * Authorized admins or compliance staff can use this operation for regulatory
   * purposes, incident remediation, or to purge invalid/expired tokens. Actual
   * record is not permanently removed from the databaseâ€”deleted_at is set to
   * current time for soft deletion. All actions are logged for compliance in
   * accordance with the Prisma schema.
   *
   * @param connection
   * @param verificationTokenId Unique identifier for the target verification
   *   token
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":verificationTokenId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("verificationTokenId")
    verificationTokenId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__discussionBoard_admin_verificationTokens_$verificationTokenId(
        {
          admin,
          verificationTokenId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
