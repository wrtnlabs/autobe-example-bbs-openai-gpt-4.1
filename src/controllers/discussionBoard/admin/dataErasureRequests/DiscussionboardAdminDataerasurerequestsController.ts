import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { post__discussionBoard_admin_dataErasureRequests } from "../../../../providers/post__discussionBoard_admin_dataErasureRequests";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { patch__discussionBoard_admin_dataErasureRequests } from "../../../../providers/patch__discussionBoard_admin_dataErasureRequests";
import { get__discussionBoard_admin_dataErasureRequests_$dataErasureRequestId } from "../../../../providers/get__discussionBoard_admin_dataErasureRequests_$dataErasureRequestId";
import { put__discussionBoard_admin_dataErasureRequests_$dataErasureRequestId } from "../../../../providers/put__discussionBoard_admin_dataErasureRequests_$dataErasureRequestId";
import { delete__discussionBoard_admin_dataErasureRequests_$dataErasureRequestId } from "../../../../providers/delete__discussionBoard_admin_dataErasureRequests_$dataErasureRequestId";

import { IDiscussionBoardDataErasureRequest } from "../../../../api/structures/IDiscussionBoardDataErasureRequest";
import { IPageIDiscussionBoardDataErasureRequest } from "../../../../api/structures/IPageIDiscussionBoardDataErasureRequest";

@Controller("/discussionBoard/admin/dataErasureRequests")
export class DiscussionboardAdminDataerasurerequestsController {
  /**
   * Create and submit a new GDPR/CCPA data erasure request.
   *
   * Submit a new data erasure request to the platform, according to rights
   * under GDPR, CCPA, or similar, for account or content deletion.
   *
   * This POST endpoint receives all required erasure request data, such as type
   * (full, partial, etc.), justification, and references to the submitting
   * user. Validations occur for user status and eligibility, and detailed audit
   * trail is created. A summary of the newly created request is returned in the
   * response for recordkeeping, monitoring, or user-facing privacy dashboards.
   * Privacy protocols and access restrictions align to those described in the
   * schema and the business requirements.
   *
   * @param connection
   * @param body Data required for a new erasure request submission
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IDiscussionBoardDataErasureRequest.ICreate,
  ): Promise<IDiscussionBoardDataErasureRequest> {
    try {
      return await post__discussionBoard_admin_dataErasureRequests({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and retrieve data erasure requests for compliance, privacy, or user
   * review.
   *
   * Retrieve a filtered, paginated list of data erasure requests.
   *
   * This API allows administrators (or, where permitted, users) to find,
   * filter, and paginate requests for account or data erasure under privacy
   * regulations such as GDPR or CCPA. Filters support request status, type
   * (full account, partial, post-only, etc.), time range, or user association.
   *
   * All response records expose only summary or non-sensitive details to
   * respect user privacy and regulatory boundaries. This operation inherently
   * supports privacy dashboards, compliance monitoring, and proactive incident
   * response as described in the business requirements and schema. Access is
   * role-based: admins and compliance officers may see all; users may only see
   * their own requests.
   *
   * @param connection
   * @param body Advanced search/filter/group criteria for data erasure requests
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IDiscussionBoardDataErasureRequest.IRequest,
  ): Promise<IPageIDiscussionBoardDataErasureRequest.ISummary> {
    try {
      return await patch__discussionBoard_admin_dataErasureRequests({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information about a data erasure request by its ID.
   *
   * Retrieve the details and full history of a user data erasure request by its
   * unique identifier.
   *
   * This endpoint provides complete audit, compliance, and support insight into
   * an individual erasure request, consistent with privacy law protocols.
   * Exposed data includes request lifecycle status, type (full/partial),
   * relevant timestamps, justification, agency references, and outcome
   * payloads. The operation cross-references the user for full compliance
   * context and business workflow integration. All actions are subject to user
   * privacy and compliance disclosure policies specified in the schema.
   *
   * @param connection
   * @param dataErasureRequestId Unique identifier for the data erasure request
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":dataErasureRequestId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("dataErasureRequestId")
    dataErasureRequestId: string & tags.Format<"uuid">,
  ): Promise<IDiscussionBoardDataErasureRequest> {
    try {
      return await get__discussionBoard_admin_dataErasureRequests_$dataErasureRequestId(
        {
          admin,
          dataErasureRequestId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update compliance details or status on a data erasure request.
   *
   * Update compliance or administrative status fields for an existing data
   * erasure request, aligning with business, privacy, and regulatory needs.
   *
   * Allowable updates include changing the request's status, admin/verification
   * metadata, processed timestamp, or adding outcome details
   * (response_payload). No alteration of the original submitting user or
   * erasure request type is permitted for integrity. All changes are fully
   * logged for legal and compliance safety. Only authorized compliance or admin
   * roles may invoke this operation.
   *
   * @param connection
   * @param dataErasureRequestId ID of the data erasure request to update
   * @param body Data for compliance/admin fields to update on the erasure
   *   request
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":dataErasureRequestId")
  public async update(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("dataErasureRequestId")
    dataErasureRequestId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IDiscussionBoardDataErasureRequest.IUpdate,
  ): Promise<IDiscussionBoardDataErasureRequest> {
    try {
      return await put__discussionBoard_admin_dataErasureRequests_$dataErasureRequestId(
        {
          admin,
          dataErasureRequestId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently remove a data erasure request for compliance/audit management.
   *
   * This operation permanently deletes a user data erasure request from the
   * compliance records. The data erasure request is modelled in the
   * discussion_board_data_erasure_requests table, which tracks user-initiated
   * GDPR/CCPA-style requests for account/data removal.
   *
   * Administrators use this endpoint to remove a specific erasure request after
   * appropriate review or compliance handling. Deletion is performed via hard
   * delete unless soft deletion (using deleted_at) is enabled. Access is
   * strictly limited to admins to preserve regulatory compliance and
   * auditability, ensuring that only authorized staff can manage or remove
   * erasure records.
   *
   * If the erasure request record includes personally identifiable
   * justification, regulator references, or response payloads (per the schema),
   * these are also irreversibly removed. Auditability must be preserved by
   * logging all delete actions involving compliance records.
   *
   * @param connection
   * @param dataErasureRequestId Unique ID of the data erasure request to delete
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":dataErasureRequestId")
  public async erase(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("dataErasureRequestId")
    dataErasureRequestId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__discussionBoard_admin_dataErasureRequests_$dataErasureRequestId(
        {
          admin,
          dataErasureRequestId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
