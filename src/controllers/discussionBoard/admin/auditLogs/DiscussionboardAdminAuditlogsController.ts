import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patch__discussionBoard_admin_auditLogs } from "../../../../providers/patch__discussionBoard_admin_auditLogs";
import { AdminAuth } from "../../../../decorators/AdminAuth";
import { AdminPayload } from "../../../../decorators/payload/AdminPayload";
import { get__discussionBoard_admin_auditLogs_$auditLogId } from "../../../../providers/get__discussionBoard_admin_auditLogs_$auditLogId";

import { IPageIDiscussionBoardAuditLog } from "../../../../api/structures/IPageIDiscussionBoardAuditLog";
import { IDiscussionBoardAuditLog } from "../../../../api/structures/IDiscussionBoardAuditLog";

@Controller("/discussionBoard/admin/auditLogs")
export class DiscussionboardAdminAuditlogsController {
  /**
   * Search and retrieve paginated audit logs for platform/system events.
   *
   * This API allows platform administrators to search and retrieve detailed
   * audit logs of critical system activities, supporting multi-dimensional
   * queries (filter by actor, time, event type, or description). The endpoint
   * assists in compliance, breach investigation, or operational review for
   * system administrators. Returned data respects privacy and access controls,
   * ensuring that only authorized admins can view sensitive action details. The
   * API is intended for backend audit panels and API-based compliance
   * automation. Pagination and complex query filters are supported for large
   * event volumes.
   *
   * @param connection
   * @param body Advanced query, filter, and pagination parameters for audit log
   *   search.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdminAuth()
    admin: AdminPayload,
    @TypedBody()
    body: IDiscussionBoardAuditLog.IRequest,
  ): Promise<IPageIDiscussionBoardAuditLog> {
    try {
      return await patch__discussionBoard_admin_auditLogs({
        admin,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get a single audit log entry by ID (admin-only).
   *
   * Retrieve a detailed audit log record by its unique identifier, exposing all
   * major fields such as actor details, action type, target object,
   * description, and timestamps. Typical use cases include compliance audit,
   * review of administrative actions, and root-cause analysis during incident
   * review.
   *
   * Only administrators may access this endpoint, ensuring it is used strictly
   * for legal, operational, or high-stake support purposes. The returned
   * structure maps directly to the audit log schema and includes all available
   * contextual and relationship data. Associated action logs (lower-level
   * traces) can be separately queried using the actionLogs endpoints for
   * advanced investigations.
   *
   * Appropriate error messages will be returned if the entry does not exist or
   * if the requesting user's role is insufficient to view the information.
   *
   * @param connection
   * @param auditLogId Unique identifier for the target audit log entry
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":auditLogId")
  public async at(
    @AdminAuth()
    admin: AdminPayload,
    @TypedParam("auditLogId")
    auditLogId: string & tags.Format<"uuid">,
  ): Promise<IDiscussionBoardAuditLog> {
    try {
      return await get__discussionBoard_admin_auditLogs_$auditLogId({
        admin,
        auditLogId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
