import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patch__discussionBoard_threads } from "../../../providers/patch__discussionBoard_threads";
import { get__discussionBoard_threads_$threadId } from "../../../providers/get__discussionBoard_threads_$threadId";

import { IPageIDiscussionBoardThread } from "../../../api/structures/IPageIDiscussionBoardThread";
import { IDiscussionBoardThread } from "../../../api/structures/IDiscussionBoardThread";

@Controller("/discussionBoard/threads")
export class DiscussionboardThreadsController {
  /**
   * List/search discussion threads (discussion_board_threads) with advanced
   * filters.
   *
   * Get a filtered, paginated, and sorted list of discussion threads available
   * on the platform. This endpoint is public and accessible by any user
   * (including visitors and authenticated users), reflecting the public nature
   * of most discussion threads.
   *
   * Supports advanced filters (by title, status, date range, or creator ID),
   * keyword search (by title), pagination (page number/size), and sorting (by
   * created_at or updated_at). Related endpoints provide methods for thread
   * detail view, thread creation, or post-management within threads.
   *
   * The operation uses the discussion_board_threads model; fields include
   * title, status flags (locked/archived), and standard timestamps. Business
   * rules restrict display of soft-deleted or locked threads as per platform
   * guidelines. Results reflect the user's access level and platform-wide
   * discovery rules.
   *
   * @param connection
   * @param body Thread search, filter, pagination, and sort options.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @TypedBody()
    body: IDiscussionBoardThread.IRequest,
  ): Promise<IPageIDiscussionBoardThread.ISummary> {
    try {
      return await patch__discussionBoard_threads({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a single discussion thread by ID (discussion_board_threads).
   *
   * Retrieve a single discussion thread by its unique identifier. This endpoint
   * provides access to thread-level data, including core properties such as
   * title, locked/archived flags, creation time, and the creator's user ID, as
   * defined in the discussion_board_threads schema.
   *
   * Only threads that have not been soft-deleted (where deleted_at is null) are
   * accessible via this endpoint. The thread's associated metadata, such as the
   * number of related posts or posts themselves, are available through other
   * endpoints, but not included in this response by default.
   *
   * Permissions: All roles (visitor, user, moderator, admin) may access this
   * endpoint to display public thread information. Thread-level access control
   * is enforced elsewhere if thread privacy is enabled in the future. Review
   * errors include thread not found, deleted, or permission denied based on
   * user status.
   *
   * @param connection
   * @param threadId Unique identifier of the discussion thread to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":threadId")
  public async at(
    @TypedParam("threadId")
    threadId: string & tags.Format<"uuid">,
  ): Promise<IDiscussionBoardThread> {
    try {
      return await get__discussionBoard_threads_$threadId({
        threadId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
