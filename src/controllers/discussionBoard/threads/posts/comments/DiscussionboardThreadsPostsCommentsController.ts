import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patch__discussionBoard_threads_$threadId_posts_$postId_comments } from "../../../../../providers/patch__discussionBoard_threads_$threadId_posts_$postId_comments";
import { get__discussionBoard_threads_$threadId_posts_$postId_comments_$commentId } from "../../../../../providers/get__discussionBoard_threads_$threadId_posts_$postId_comments_$commentId";

import { IPageIDiscussionBoardComment } from "../../../../../api/structures/IPageIDiscussionBoardComment";
import { IDiscussionBoardComment } from "../../../../../api/structures/IDiscussionBoardComment";

@Controller("/discussionBoard/threads/:threadId/posts/:postId/comments")
export class DiscussionboardThreadsPostsCommentsController {
  /**
   * Search and retrieve a paginated, filterable list of comments for a post.
   *
   * Obtain a filtered, paginated list of comments for a specific post within a
   * thread. This operation enables recursive comment structures up to five
   * levels deep. Supports advanced search by author, keyword, nesting level,
   * date range, and ordering. Excludes soft-deleted comments (those with
   * deleted_at set) unless the user is a moderator or admin. Pagination and
   * sorting parameters allow efficient display for posts with high comment
   * volume. Includes support for building hierarchical/collapsible comment
   * trees in the client UI. Requires appropriate permissions for viewing
   * deleted or flagged comments. Returns summary/comment list data optimized
   * for threaded views.
   *
   * @param connection
   * @param threadId Unique identifier for the parent thread.
   * @param postId Unique identifier for the specific post within the thread.
   * @param body Filter and pagination criteria for retrieving comments.
   *   Includes search keyword, nesting level, author filtering, date range, and
   *   sort options.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @TypedParam("threadId")
    threadId: string & tags.Format<"uuid">,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IDiscussionBoardComment.IRequest,
  ): Promise<IPageIDiscussionBoardComment.ISummary> {
    try {
      return await patch__discussionBoard_threads_$threadId_posts_$postId_comments(
        {
          threadId,
          postId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get detailed information about a specific comment in a post/thread.
   *
   * Retrieve a single comment in detail given its unique identifiers within
   * thread and post. This operation provides client applications with the full
   * content, author, created timestamp, nesting level, and parent/child
   * structure. Only visible to non-privileged users if not soft-deleted.
   * Moderators and admins may access soft-deleted comments for review or audit.
   * Intended for comment detail views, direct comment links, moderator tools,
   * and compliance reviews. Errors include not found or insufficient permission
   * for blocked/deleted comments.
   *
   * @param connection
   * @param threadId Unique identifier for the parent thread.
   * @param postId Unique identifier for the parent post.
   * @param commentId Unique identifier of the target comment.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":commentId")
  public async at(
    @TypedParam("threadId")
    threadId: string & tags.Format<"uuid">,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedParam("commentId")
    commentId: string & tags.Format<"uuid">,
  ): Promise<IDiscussionBoardComment> {
    try {
      return await get__discussionBoard_threads_$threadId_posts_$postId_comments_$commentId(
        {
          threadId,
          postId,
          commentId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
