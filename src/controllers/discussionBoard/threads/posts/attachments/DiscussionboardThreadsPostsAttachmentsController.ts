import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patch__discussionBoard_threads_$threadId_posts_$postId_attachments } from "../../../../../providers/patch__discussionBoard_threads_$threadId_posts_$postId_attachments";
import { get__discussionBoard_threads_$threadId_posts_$postId_attachments_$attachmentId } from "../../../../../providers/get__discussionBoard_threads_$threadId_posts_$postId_attachments_$attachmentId";

import { IPageIDiscussionBoardAttachment } from "../../../../../api/structures/IPageIDiscussionBoardAttachment";
import { IDiscussionBoardAttachment } from "../../../../../api/structures/IDiscussionBoardAttachment";

@Controller("/discussionBoard/threads/:threadId/posts/:postId/attachments")
export class DiscussionboardThreadsPostsAttachmentsController {
  /**
   * Retrieve a paginated, filtered list of file/media attachments for a post.
   *
   * Obtain a filtered, paginated list of attachments for a specific post in a
   * thread (not for comment-attached files). The API supports filtering by file
   * name, uploader, content type, and range. Sort and pagination allow
   * efficient handling for posts with multiple media or file uploads. Only
   * non-deleted (deleted_at is null) attachments are shown to normal users.
   * Moderators/admins may view soft-deleted files for audit purposes. Use cases
   * include user file management, moderator content review, and compliance
   * evidence download. Errors may arise if the post does not exist or user
   * lacks permission to view certain attachment types.
   *
   * @param connection
   * @param threadId Unique identifier for the parent thread.
   * @param postId Unique identifier for the parent post.
   * @param body Search, pagination, and filter criteria for retrieving
   *   attachments. May include file name, uploader, date, or type.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @TypedParam("threadId")
    threadId: string & tags.Format<"uuid">,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IDiscussionBoardAttachment.IRequest,
  ): Promise<IPageIDiscussionBoardAttachment.ISummary> {
    try {
      return await patch__discussionBoard_threads_$threadId_posts_$postId_attachments(
        {
          threadId,
          postId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get metadata and download information for a single attachment on a post.
   *
   * Fetch the full metadata and access information for a specific file/media
   * attachment tied to a post in a thread. The operation is available for both
   * users (with access rights) and moderators. Regular users cannot see
   * metadata for soft-deleted files, while privileged actors can access for
   * compliance and moderation. Typical output includes upload info, audit
   * fields, and download URI. Supports both client UI renderings and backend
   * compliance processes. API returns permission errors for unqualified users,
   * and 404 errors if the attachment does not exist or is not associated with
   * the post/thread specified.
   *
   * @param connection
   * @param threadId Unique identifier for the parent thread.
   * @param postId Unique identifier for the post containing this attachment.
   * @param attachmentId Unique identifier for the target attachment file.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":attachmentId")
  public async at(
    @TypedParam("threadId")
    threadId: string & tags.Format<"uuid">,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedParam("attachmentId")
    attachmentId: string & tags.Format<"uuid">,
  ): Promise<IDiscussionBoardAttachment> {
    try {
      return await get__discussionBoard_threads_$threadId_posts_$postId_attachments_$attachmentId(
        {
          threadId,
          postId,
          attachmentId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
