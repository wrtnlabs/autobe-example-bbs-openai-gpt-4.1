import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patch__discussionBoard_threads_$threadId_posts } from "../../../../providers/patch__discussionBoard_threads_$threadId_posts";
import { get__discussionBoard_threads_$threadId_posts_$postId } from "../../../../providers/get__discussionBoard_threads_$threadId_posts_$postId";

import { IPageIDiscussionBoardPost } from "../../../../api/structures/IPageIDiscussionBoardPost";
import { IDiscussionBoardPost } from "../../../../api/structures/IDiscussionBoardPost";

@Controller("/discussionBoard/threads/:threadId/posts")
export class DiscussionboardThreadsPostsController {
  /**
   * List/paginate posts for a thread (discussion_board_posts).
   *
   * Retrieve a paginated and filtered list of discussion board posts for a
   * given thread. This endpoint allows searching posts by title, body, author,
   * date range, and sort order within the context of a single discussion
   * thread.
   *
   * The returned list is suitable for displaying thread content with the
   * ability to paginate through posts. Only posts that have not been
   * soft-deleted (deleted_at is null) are returned. Users may view thread posts
   * if they have access to the parent thread; private threads, if implemented
   * later, would restrict access according to business rules.
   *
   * Search and filter options are provided via the request body schema
   * IDiscussionBoardPost.IRequest, and paginated summary results are returned
   * for efficient client consumption. Common uses include thread detail views
   * and topic exploration workflows.
   *
   * @param connection
   * @param threadId Identifier of the parent discussion thread.
   * @param body Search, filter, and pagination request for thread posts.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @TypedParam("threadId")
    threadId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IDiscussionBoardPost.IRequest,
  ): Promise<IPageIDiscussionBoardPost.ISummary> {
    try {
      return await patch__discussionBoard_threads_$threadId_posts({
        threadId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a single post by ID within a thread (discussion_board_posts).
   *
   * Fetch a single post within a thread, identified by its unique post ID and
   * thread ID. This endpoint returns all relevant fields from the
   * discussion_board_posts schema, including title, body, author, locked
   * status, and timestamps.
   *
   * Only posts that are not soft-deleted (deleted_at is null) are accessible.
   * Post content is only available to users who have access to the parent
   * thread according to platform policy (all roles for public threads).
   * Ownership and moderator/admin permissions are considered for access
   * control. Errors may include not found, already deleted, or forbidden based
   * on status.
   *
   * @param connection
   * @param threadId Unique identifier of the thread.
   * @param postId Unique identifier of the post.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":postId")
  public async at(
    @TypedParam("threadId")
    threadId: string & tags.Format<"uuid">,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
  ): Promise<IDiscussionBoardPost> {
    try {
      return await get__discussionBoard_threads_$threadId_posts_$postId({
        threadId,
        postId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
