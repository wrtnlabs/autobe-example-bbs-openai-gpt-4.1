import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patch__discussBoard_moderator_appeals } from "../../../../providers/patch__discussBoard_moderator_appeals";
import { ModeratorAuth } from "../../../../decorators/ModeratorAuth";
import { ModeratorPayload } from "../../../../decorators/payload/ModeratorPayload";
import { get__discussBoard_moderator_appeals_$appealId } from "../../../../providers/get__discussBoard_moderator_appeals_$appealId";

import { IPageIDiscussBoardAppeal } from "../../../../api/structures/IPageIDiscussBoardAppeal";
import { IDiscussBoardAppeal } from "../../../../api/structures/IDiscussBoardAppeal";

@Controller("/discussBoard/moderator/appeals")
export class DiscussboardModeratorAppealsController {
  /**
   * Retrieve paginated list of all appeals submitted against moderation actions
   * (moderator/admin only) from discuss_board_appeals.
   *
   * Allows privileged users to search, filter, and paginate through all appeals
   * submitted by members against moderation decisions. Supports filtering by
   * status, appellant, moderation action, creation date, and rationale
   * keywords.
   *
   * Result set is summarized for operational review and workflow management.
   * Only accessible to moderators and administrators due to the sensitive
   * nature of appeal review. Business logic ensures members may only view their
   * own appeals through other endpoints, not the full list.
   *
   * Related endpoints include /appeals/{appealId} (detail fetch), and POST for
   * submitting new appeals. Unauthorized access results in clear error
   * messaging.
   *
   * @param connection
   * @param body Filtering, searching, and pagination criteria for appeals
   *   listing.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedBody()
    body: IDiscussBoardAppeal.IRequest,
  ): Promise<IPageIDiscussBoardAppeal.ISummary> {
    try {
      return await patch__discussBoard_moderator_appeals({
        moderator,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get details of a single appeal for a moderation action (moderator/admin
   * only) from discuss_board_appeals.
   *
   * Fetch a complete record for a particular appeal, including appeal
   * rationale, status, outcome notes, workflow timestamps, and linked
   * moderation action and appellant member. The endpoint is required for
   * moderation scenario reviews, transparency, and audit requirements as part
   * of fair appeals handling.
   *
   * Only moderators and administrators may use this endpoint; members may
   * access only their own appeals through distinct endpoints. Cross-references
   * appeal details with related moderation decisions and logs. Business logic
   * enforces strict role checks and notifies users when access is unauthorized
   * or the appeal does not exist.
   *
   * @param connection
   * @param appealId The unique identifier of the appeal to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":appealId")
  public async at(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedParam("appealId")
    appealId: string & tags.Format<"uuid">,
  ): Promise<IDiscussBoardAppeal> {
    try {
      return await get__discussBoard_moderator_appeals_$appealId({
        moderator,
        appealId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
