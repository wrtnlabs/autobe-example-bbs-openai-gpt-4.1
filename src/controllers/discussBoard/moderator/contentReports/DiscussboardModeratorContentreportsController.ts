import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patch__discussBoard_moderator_contentReports } from "../../../../providers/patch__discussBoard_moderator_contentReports";
import { ModeratorAuth } from "../../../../decorators/ModeratorAuth";
import { ModeratorPayload } from "../../../../decorators/payload/ModeratorPayload";
import { get__discussBoard_moderator_contentReports_$contentReportId } from "../../../../providers/get__discussBoard_moderator_contentReports_$contentReportId";
import { put__discussBoard_moderator_contentReports_$contentReportId } from "../../../../providers/put__discussBoard_moderator_contentReports_$contentReportId";
import { delete__discussBoard_moderator_contentReports_$contentReportId } from "../../../../providers/delete__discussBoard_moderator_contentReports_$contentReportId";

import { IPageIDiscussBoardContentReport } from "../../../../api/structures/IPageIDiscussBoardContentReport";
import { IDiscussBoardContentReport } from "../../../../api/structures/IDiscussBoardContentReport";

@Controller("/discussBoard/moderator/contentReports")
export class DiscussboardModeratorContentreportsController {
  /**
   * Search and retrieve a list of content reports
   * (discuss_board_content_reports table).
   *
   * Retrieves a paginated collection of content reports submitted by members
   * for moderation purposes. The discuss_board_content_reports table captures
   * each report's details including reporter, target post or comment, type,
   * reason, current status, and timestamps. Moderators and administrators use
   * this endpoint to triage reports, view trends, and manage outstanding
   * moderation actions.
   *
   * The request body supports search filters such as content_type
   * (post/comment), reporter_member_id, moderation status, time window, and
   * full-text reason search. Sorting may be performed by status,
   * creation/update time, or reason relevance.
   *
   * Security is enforced to allow only moderators and administrators to access
   * all reports. Members may only query their own submitted reports for
   * transparency. Data returned are summaries suitable for moderation dashboard
   * display. Errors and constraints are clearly described, and the operation is
   * logged for compliance.
   *
   * @param connection
   * @param body Search and filter parameters for content report listing
   *   (pagination and search).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedBody()
    body: IDiscussBoardContentReport.IRequest,
  ): Promise<IPageIDiscussBoardContentReport.ISummary> {
    try {
      return await patch__discussBoard_moderator_contentReports({
        moderator,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a specific content report by ID (discuss_board_content_reports
   * table).
   *
   * Fetches full content report details, including reporter, reported content
   * (post or comment), reason, workflow status, and any moderation/appeal
   * linkage. The discuss_board_content_reports schema ensures each report
   * references exactly one post or comment, and tracks resolution status.
   *
   * Authorization restricts access to the reporting member, moderators, or
   * administrators, ensuring privacy and integrity of moderation
   * investigations. This endpoint is used to support review, audit, and
   * decision-making for each report through moderation workflows. All access is
   * logged for transparency and regulatory purposes.
   *
   * Relates to report listing and moderation decision/action endpoints for full
   * workflow coverage.
   *
   * @param connection
   * @param contentReportId Unique identifier for the content report to
   *   retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":contentReportId")
  public async at(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedParam("contentReportId")
    contentReportId: string & tags.Format<"uuid">,
  ): Promise<IDiscussBoardContentReport> {
    try {
      return await get__discussBoard_moderator_contentReports_$contentReportId({
        moderator,
        contentReportId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update a content report (discuss_board_content_reports table) by ID.
   *
   * Updates a content report record, typically during the moderation workflow.
   * Moderators or administrators may set status (under_review, resolved,
   * escalated, dismissed), attach moderation action ID, or add resolution notes
   * per business logic. Members who submitted the report may withdraw or
   * annotate their pending (untriaged) reports only if review has not started.
   *
   * Data changes are validated for business workflow (e.g., only one status
   * update per step, appropriate progression of states). The update is audited
   * in detail and triggers notification or workflow handoff as described in
   * moderation policy. Invalid state transitions or unauthorized changes are
   * rejected with clear errors. Changes are designed for full traceability in
   * audit and compliance scenarios.
   *
   * @param connection
   * @param contentReportId ID of the content report to update.
   * @param body Changes to report status, moderator linkage, or resolution
   *   note. Revisit schema for allowed fields.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":contentReportId")
  public async update(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedParam("contentReportId")
    contentReportId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IDiscussBoardContentReport.IUpdate,
  ): Promise<IDiscussBoardContentReport> {
    try {
      return await put__discussBoard_moderator_contentReports_$contentReportId({
        moderator,
        contentReportId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft-delete a content report (discuss_board_content_reports table) by ID.
   *
   * Deletes (soft deletes) an existing content report by marking deleted_at in
   * the discuss_board_content_reports schema. Only the reporting member may
   * perform this action before moderation review begins, or
   * moderators/administrators may remove test, abuse, or obviously invalid
   * reports. The content report remains in the system for audit, workflow, and
   * regulatory compliance.
   *
   * Business rules strictly enforce who may delete a report and under what
   * circumstances. Once moderation review has begun or a moderation action is
   * attached, deletion by the reporting member is no longer allowed. All
   * deletion actions are logged for review by compliance or platform
   * investigators.
   *
   * @param connection
   * @param contentReportId ID of the content report to delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":contentReportId")
  public async erase(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedParam("contentReportId")
    contentReportId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__discussBoard_moderator_contentReports_$contentReportId(
        {
          moderator,
          contentReportId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
