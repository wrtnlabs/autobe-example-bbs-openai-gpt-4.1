import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { get__discussBoard_moderator_notifications_$notificationId } from "../../../../providers/get__discussBoard_moderator_notifications_$notificationId";
import { ModeratorAuth } from "../../../../decorators/ModeratorAuth";
import { ModeratorPayload } from "../../../../decorators/payload/ModeratorPayload";

import { IDiscussBoardNotification } from "../../../../api/structures/IDiscussBoardNotification";

@Controller("/discussBoard/moderator/notifications/:notificationId")
export class DiscussboardModeratorNotificationsController {
  /**
   * Retrieve a specific notification event (discuss_board_notifications) by ID.
   *
   * This operation retrieves the details of a notification event sent by the
   * discussBoard platform to a specific user. The operation provides full
   * metadata from the discuss_board_notifications Prisma table, including the
   * event type (such as reply, moderation, system alert), delivery channel
   * (email, sms, push, in_app), subject and body, status indicators (delivered,
   * pending, failed), and any external partner IDs.
   *
   * Only authenticated members, moderators, or administrators are permitted to
   * access their own notification records, while administrators may view all.
   * Security considerations include strict filtering to ensure users cannot
   * access each other's notification metadata.
   *
   * The operation supports troubleshooting by exposing relevant error details
   * on failed notifications, links notifications to triggering posts (if
   * relevant), and includes all required timestamps and channel-specific
   * fields. Related operations include listing notifications, searching by
   * criteria, or updating delivery preferences (not included in this call).
   * Attempting to access a nonexistent or unauthorized notification will
   * provide clear error scenarios for auditing and support.
   *
   * @param connection
   * @param notificationId Unique identifier for the notification event to
   *   retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async at(
    @ModeratorAuth()
    moderator: ModeratorPayload,
    @TypedParam("notificationId")
    notificationId: string & tags.Format<"uuid">,
  ): Promise<IDiscussBoardNotification> {
    try {
      return await get__discussBoard_moderator_notifications_$notificationId({
        moderator,
        notificationId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
