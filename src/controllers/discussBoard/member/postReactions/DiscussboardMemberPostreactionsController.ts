import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { post__discussBoard_member_postReactions } from "../../../../providers/post__discussBoard_member_postReactions";
import { MemberAuth } from "../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../decorators/payload/MemberPayload";
import { patch__discussBoard_member_postReactions } from "../../../../providers/patch__discussBoard_member_postReactions";
import { get__discussBoard_member_postReactions_$postReactionId } from "../../../../providers/get__discussBoard_member_postReactions_$postReactionId";
import { put__discussBoard_member_postReactions_$postReactionId } from "../../../../providers/put__discussBoard_member_postReactions_$postReactionId";
import { delete__discussBoard_member_postReactions_$postReactionId } from "../../../../providers/delete__discussBoard_member_postReactions_$postReactionId";

import { IDiscussBoardPostReaction } from "../../../../api/structures/IDiscussBoardPostReaction";
import { IPageIDiscussBoardPostReaction } from "../../../../api/structures/IPageIDiscussBoardPostReaction";

@Controller("/discussBoard/member/postReactions")
export class DiscussboardMemberPostreactionsController {
  /**
   * Create a new post reaction (like/dislike) for a post
   * (discuss_board_post_reactions).
   *
   * Allows a member to create a like or dislike reaction to a post. Enforces
   * uniqueness (one reaction per member/post) and ensures input conformance
   * (the reaction_type field must be 'like' or 'dislike').
   *
   * On submission, business logic checks for existing reactions by the member
   * for the post, updating or toggling as required by platform rules. Rate
   * limiting, anti-abuse checks, and moderation triggers are integrated with
   * this endpoint.
   *
   * Strict authorization ensures only authenticated members may create
   * reactions. Attempts to submit duplicate or invalid reactions are rejected
   * with clarification.
   *
   * @param connection
   * @param body Reaction creation data (target post, reaction type, etc.)
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @MemberAuth()
    member: MemberPayload,
    @TypedBody()
    body: IDiscussBoardPostReaction.ICreate,
  ): Promise<IDiscussBoardPostReaction> {
    try {
      return await post__discussBoard_member_postReactions({
        member,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * List/filter post reactions (discuss_board_post_reactions) with pagination
   * support.
   *
   * Retrieve a paginated list of reactions (likes/dislikes) on posts. Supports
   * parameters for filtering by member, post, reaction type, or time range, as
   * defined in the discuss_board_post_reactions model. The summary response
   * aids analytics, reputation tracking, and moderation audits.
   *
   * This endpoint is essential for both user-facing features (displaying
   * reaction counts, toggling reactions) and administrative functions
   * (identifying spam, abuse, or manipulation of reaction features).
   *
   * Public information (aggregated counts) may be accessed by guests, while
   * detailed member-specific reactions require appropriate authorization.
   *
   * @param connection
   * @param body Filter and pagination criteria for post reactions (member,
   *   post, reaction type, etc.).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @MemberAuth()
    member: MemberPayload,
    @TypedBody()
    body: IDiscussBoardPostReaction.IRequest,
  ): Promise<IPageIDiscussBoardPostReaction.ISummary> {
    try {
      return await patch__discussBoard_member_postReactions({
        member,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get a specific post reaction record (discuss_board_post_reactions) by ID.
   *
   * Get a single post reaction record by its ID. Returns information such as
   * who reacted, to which post, what type of reaction, and creation/update
   * timestamps. This enables reaction management, auditing, and personalized
   * features (e.g. reaction toggles for current user).
   *
   * Access to detailed records is typically limited to the reactor, target post
   * owner, or privileged staff, enabling transparency while protecting privacy.
   * Unauthorized access results in appropriate errors, and all access is
   * auditable.
   *
   * @param connection
   * @param postReactionId UUID of the post reaction record to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":postReactionId")
  public async at(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("postReactionId")
    postReactionId: string & tags.Format<"uuid">,
  ): Promise<IDiscussBoardPostReaction> {
    try {
      return await get__discussBoard_member_postReactions_$postReactionId({
        member,
        postReactionId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing post reaction (toggle like/dislike)
   * (discuss_board_post_reactions).
   *
   * Enables a member to update their reaction on a given post, typically
   * toggling between 'like' and 'dislike', or correcting an input. The request
   * body must specify the new state, conforming to the allowed reaction_type
   * values.
   *
   * The endpoint enforces integrity rulesâ€”there can only be one active reaction
   * per member/post. Abusive or invalid requests are rejected with error
   * messages. Only the reaction's owner or authorized staff can perform
   * updates. All changes are logged for audit and for possible rollbacks or
   * dispute resolution.
   *
   * @param connection
   * @param postReactionId UUID of the post reaction to update.
   * @param body Update data for the reaction (reaction type, etc.)
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":postReactionId")
  public async update(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("postReactionId")
    postReactionId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IDiscussBoardPostReaction.IUpdate,
  ): Promise<IDiscussBoardPostReaction> {
    try {
      return await put__discussBoard_member_postReactions_$postReactionId({
        member,
        postReactionId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete (soft-delete) a post reaction (discuss_board_post_reactions).
   *
   * Delete a member's reaction (like/dislike) to a post. The operation marks
   * the reaction as deleted by setting the deleted_at timestamp, ensuring the
   * action is reversible and all audit/history/aggregate information remains
   * accurate.
   *
   * Authorization ensures that only the member performing the original
   * reaction, authorized staff, or moderators can delete the reaction record.
   * Abusive or repeated deletion attempts are prevented by business policy.
   *
   * Audit logs and aggregate reaction counts are updated appropriately to
   * reflect the removal. All delete actions are tracked for compliance and can
   * be reviewed by administrators.
   *
   * @param connection
   * @param postReactionId UUID of the post reaction to delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":postReactionId")
  public async erase(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("postReactionId")
    postReactionId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__discussBoard_member_postReactions_$postReactionId({
        member,
        postReactionId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
