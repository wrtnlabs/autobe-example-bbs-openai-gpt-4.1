import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { post__discussBoard_member_contentReports } from "../../../../providers/post__discussBoard_member_contentReports";
import { MemberAuth } from "../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../decorators/payload/MemberPayload";
import { delete__discussBoard_member_contentReports_$contentReportId } from "../../../../providers/delete__discussBoard_member_contentReports_$contentReportId";

import { IDiscussBoardContentReport } from "../../../../api/structures/IDiscussBoardContentReport";

@Controller("/discussBoard/member/contentReports")
export class DiscussboardMemberContentreportsController {
  /**
   * Create a new content report (discuss_board_content_reports table) for a
   * post or comment.
   *
   * Creates a new content report targeting a post or comment. The
   * discuss_board_content_reports schema requires reporter identity, target
   * content identification, content type, and reason (from a pre-approved set
   * or custom text capped to 200 chars). Only authenticated members may file
   * reports. The operation validates policy (single report per member/content),
   * report frequency, and rate limits to prevent abuse. Duplicate and spam
   * reports trigger error responses and can affect reporting privileges.
   *
   * Reports are routed to moderation workflows for triage. Once created, a
   * report can be tracked by the member and acted upon by moderators or
   * administrators. All creation and business rule checks are audited for
   * compliance. Members may view their own reports, but only
   * moderators/administrators may search or view all reports.
   *
   * @param connection
   * @param body Content report details (target content, reporter member, type,
   *   and reason).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @MemberAuth()
    member: MemberPayload,
    @TypedBody()
    body: IDiscussBoardContentReport.ICreate,
  ): Promise<IDiscussBoardContentReport> {
    try {
      return await post__discussBoard_member_contentReports({
        member,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft-delete a content report (discuss_board_content_reports table) by ID.
   *
   * Deletes (soft deletes) an existing content report by marking deleted_at in
   * the discuss_board_content_reports schema. Only the reporting member may
   * perform this action before moderation review begins, or
   * moderators/administrators may remove test, abuse, or obviously invalid
   * reports. The content report remains in the system for audit, workflow, and
   * regulatory compliance.
   *
   * Business rules strictly enforce who may delete a report and under what
   * circumstances. Once moderation review has begun or a moderation action is
   * attached, deletion by the reporting member is no longer allowed. All
   * deletion actions are logged for review by compliance or platform
   * investigators.
   *
   * @param connection
   * @param contentReportId ID of the content report to delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":contentReportId")
  public async erase(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("contentReportId")
    contentReportId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__discussBoard_member_contentReports_$contentReportId({
        member,
        contentReportId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
