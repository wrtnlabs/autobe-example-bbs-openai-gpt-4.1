import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { post__discussBoard_member_commentReactions } from "../../../../providers/post__discussBoard_member_commentReactions";
import { MemberAuth } from "../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../decorators/payload/MemberPayload";
import { patch__discussBoard_member_commentReactions } from "../../../../providers/patch__discussBoard_member_commentReactions";
import { get__discussBoard_member_commentReactions_$commentReactionId } from "../../../../providers/get__discussBoard_member_commentReactions_$commentReactionId";
import { put__discussBoard_member_commentReactions_$commentReactionId } from "../../../../providers/put__discussBoard_member_commentReactions_$commentReactionId";
import { delete__discussBoard_member_commentReactions_$commentReactionId } from "../../../../providers/delete__discussBoard_member_commentReactions_$commentReactionId";

import { IDiscussBoardCommentReaction } from "../../../../api/structures/IDiscussBoardCommentReaction";
import { IPageIDiscussBoardCommentReaction } from "../../../../api/structures/IPageIDiscussBoardCommentReaction";

@Controller("/discussBoard/member/commentReactions")
export class DiscussboardMemberCommentreactionsController {
  /**
   * Create a new reaction (like/dislike) for a comment
   * (discuss_board_comment_reactions table).
   *
   * Creates a new reaction (like/dislike) by a member for a specified comment.
   * Only authenticated members can perform this action, and only if they have
   * not already reacted to the comment. If a previous reaction by the user
   * exists and was soft-deleted, business logic SHOULD un-delete and update the
   * reaction instead of creating a duplicate.
   *
   * Reactions are constrained in the discuss_board_comment_reactions schema to
   * a single reaction per member/comment pair. This maintains data integrity
   * and accurate like/dislike counts, ensuring users cannot spam reactions. If
   * the same member attempts to react to a comment more than once, the API
   * returns an error and does not create a new record.
   *
   * The API enforces business rules such as preventing a comment author from
   * reacting to their own comment, rejecting invalid reaction types, and
   * checking that the comment is not locked or deleted. Audit and moderation
   * requirements apply to all modifications to comment reactions for compliance
   * tracking.
   *
   * Related endpoints for reaction update and deletion should be used for
   * subsequent changes to existing reactions. Errors and business rule
   * enforcement are reported with descriptive messages and clear HTTP status
   * codes.
   *
   * @param connection
   * @param body Comment reaction creation details (comment, member, and
   *   reaction type).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @MemberAuth()
    member: MemberPayload,
    @TypedBody()
    body: IDiscussBoardCommentReaction.ICreate,
  ): Promise<IDiscussBoardCommentReaction> {
    try {
      return await post__discussBoard_member_commentReactions({
        member,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * List/filter all comment reactions (discuss_board_comment_reactions) with
   * pagination.
   *
   * List and search all comment reactions (like/dislike), supporting advanced
   * filters for member ID, comment ID, reaction type (like/dislike), and date
   * ranges. The summary response supports efficient delivery of aggregate
   * feedback to users, and enables moderation/administrator audits for abuse or
   * spam.
   *
   * This endpoint fulfills both user and analytics needs; for privacy, detailed
   * data is limited to the reactor and authorized roles. Unauthorized access or
   * use for scraping purposes is logged and rate limited as per platform
   * policy.
   *
   * @param connection
   * @param body Filter, search, and pagination options for comment reactions.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @MemberAuth()
    member: MemberPayload,
    @TypedBody()
    body: IDiscussBoardCommentReaction.IRequest,
  ): Promise<IPageIDiscussBoardCommentReaction.ISummary> {
    try {
      return await patch__discussBoard_member_commentReactions({
        member,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get a specific comment reaction record (discuss_board_comment_reactions) by
   * ID.
   *
   * Get a single comment reaction record by its unique ID. Returns data such as
   * member reactor, associated comment, reaction type ('like' or 'dislike'),
   * status, and timestamps (created_at, updated_at, deleted_at for
   * audit/soft-deletion).
   *
   * Access control restricts detailed information to the reactor, the relevant
   * comment owner, or authorized moderation staff; attempts to access another
   * member's reaction are denied unless properly privileged.
   *
   * Enables fine-grained audit, personalized displays, and moderation review
   * for comment reactions on the discussBoard platform.
   *
   * @param connection
   * @param commentReactionId UUID of the comment reaction record to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":commentReactionId")
  public async at(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("commentReactionId")
    commentReactionId: string & tags.Format<"uuid">,
  ): Promise<IDiscussBoardCommentReaction> {
    try {
      return await get__discussBoard_member_commentReactions_$commentReactionId(
        {
          member,
          commentReactionId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update (toggle/switch) an existing comment reaction
   * (discuss_board_comment_reactions table).
   *
   * Updates an existing comment reaction, allowing the member to toggle the
   * type (like <> dislike) or restore a previously soft-deleted reaction. Only
   * the member who created the reaction may perform this operation. Business
   * rules enforced include validating the member's identity, ensuring the
   * target reaction exists and is not deleted, and restricting reaction type
   * values to 'like' or 'dislike'.
   *
   * The operation references the discuss_board_comment_reactions schema, which
   * links each reaction to member, comment, and type. The API includes
   * validation for concurrent changes and returns errors as appropriate.
   * Changes are audited for compliance and to protect against abuse or misuse
   * of the reaction feature.
   *
   * @param connection
   * @param commentReactionId Unique identifier of the comment reaction to
   *   update.
   * @param body Updated reaction details (must reference valid reaction type
   *   and member).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":commentReactionId")
  public async update(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("commentReactionId")
    commentReactionId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IDiscussBoardCommentReaction.IUpdate,
  ): Promise<IDiscussBoardCommentReaction> {
    try {
      return await put__discussBoard_member_commentReactions_$commentReactionId(
        {
          member,
          commentReactionId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft-delete a comment reaction (discuss_board_comment_reactions table) by
   * ID.
   *
   * Deletes (soft-deletes) a member's reaction to a comment. Only the member
   * who reacted, or a moderator/administrator with proper permissions, may
   * invoke this operation. The record is not hard-deleted but is marked as
   * deleted via the deleted_at timestamp as defined in the
   * discuss_board_comment_reactions schema. The reaction will no longer
   * contribute to like/dislike counts or user notifications but remains
   * available for compliance and audit purposes.
   *
   * Business logic ensures the operation is allowed only if the reaction
   * exists, is not already deleted, and the user is permitted to perform the
   * action. Changes are logged for auditability and can only be reversed by
   * moderator/administrator intervention if justified. All deletion actions are
   * captured in moderation and audit logs.
   *
   * @param connection
   * @param commentReactionId ID of the comment reaction to delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":commentReactionId")
  public async erase(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("commentReactionId")
    commentReactionId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__discussBoard_member_commentReactions_$commentReactionId(
        {
          member,
          commentReactionId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
