import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { put__discussBoard_member_members_$memberId_profile } from "../../../../../providers/put__discussBoard_member_members_$memberId_profile";
import { MemberAuth } from "../../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../../decorators/payload/MemberPayload";

import { IDiscussBoardUserProfile } from "../../../../../api/structures/IDiscussBoardUserProfile";

@Controller("/discussBoard/member/members/:memberId/profile")
export class DiscussboardMemberMembersProfileController {
  /**
   * Update a user's public profile with new metadata
   * (discuss_board_user_profiles table).
   *
   * Allows a member or administrator to update the profile metadata for a user
   * account. Using the supplied memberId and validated request body
   * (IDiscussBoardUserProfile.IUpdate), the operation modifies fields such as
   * displayName, bio, avatarUri, location, and website.
   *
   * Business logic enforces permission checks: the member can edit their own
   * profile, while administrators can modify any member's profile as necessary.
   * Each profile update triggers a change in both the updated_at field and
   * platform audit logs, enabling inspection and rollback if needed.
   *
   * Relates to profile retrieval (GET), member detail (account) APIs, and
   * notification systems if profile changes warrant alerting followers or
   * system monitors.
   *
   * @param connection
   * @param memberId Unique identifier of the member whose profile is being
   *   updated.
   * @param body Updated profile data for the target member.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async update(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("memberId")
    memberId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IDiscussBoardUserProfile.IUpdate,
  ): Promise<IDiscussBoardUserProfile> {
    try {
      return await put__discussBoard_member_members_$memberId_profile({
        member,
        memberId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
