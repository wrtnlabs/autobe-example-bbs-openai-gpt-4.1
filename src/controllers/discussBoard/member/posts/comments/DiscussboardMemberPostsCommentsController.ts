import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { post__discussBoard_member_posts_$postId_comments } from "../../../../../providers/post__discussBoard_member_posts_$postId_comments";
import { MemberAuth } from "../../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../../decorators/payload/MemberPayload";
import { put__discussBoard_member_posts_$postId_comments_$commentId } from "../../../../../providers/put__discussBoard_member_posts_$postId_comments_$commentId";
import { delete__discussBoard_member_posts_$postId_comments_$commentId } from "../../../../../providers/delete__discussBoard_member_posts_$postId_comments_$commentId";

import { IDiscussBoardComment } from "../../../../../api/structures/IDiscussBoardComment";

@Controller("/discussBoard/member/posts/:postId/comments")
export class DiscussboardMemberPostsCommentsController {
  /**
   * Create a new comment under a given post (discuss_board_comments).
   *
   * This operation allows an authenticated member to create a new comment on a
   * designated post. It acts on the discuss_board_comments table, utilizing
   * business logic and validations specified in platform requirements:
   * minimum/max content length, forbidden word filtering, comment status
   * initialization, and maximum allowed nesting depth for replies. If parentId
   * is provided, verifies parent exists, is part of the same post, and does not
   * exceed the platform nesting limit.
   *
   * The comment's author is inferred from the JWT session or user context; no
   * direct author/member id inclusion in the client request. The resulting
   * comment includes all persisted data: content, author, status, creation
   * timestamps, and business rules for initial lock and edit state. Moderation
   * workflows may flag or delay display based on policy if thresholds (e.g.,
   * forbidden language) are hit.
   *
   * This endpoint is used by posting UIs, threaded comment components, and
   * reply flows enforcing deep-tree limitation and content moderation
   * policies.
   *
   * @param connection
   * @param postId UUID of the post under which the comment is being created.
   * @param body Comment creation payload including content, (optional) parent
   *   ID, and business logic context, following creation rules.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IDiscussBoardComment.ICreate,
  ): Promise<IDiscussBoardComment> {
    try {
      return await post__discussBoard_member_posts_$postId_comments({
        member,
        postId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update content of an existing comment (discuss_board_comments).
   *
   * This operation updates the specified comment's content under a given post,
   * as described in the discuss_board_comments table and related business
   * rules. Enforces that only the comment author may edit their own comment
   * within the platform-defined window (e.g., 15 minutes), and that editing is
   * disallowed if the is_locked flag is true, except for elevated roles
   * (moderator/admin). Edits are captured as snapshots in the comment edit
   * history (discuss_board_comment_edit_histories).
   *
   * Business logic ensures content is checked for forbidden language and meets
   * length requirements. Moderators and administrators may edit any comment
   * regardless of the window or lock, always with a valid business rationale.
   * All edits update the updated_at timestamp and maintain the audit/compliance
   * chain for review or rollback.
   *
   * UI workflows often call this API in edit or reply-with-edit contexts. The
   * response delivers the full updated comment for UI refresh and possible user
   * notification.
   *
   * @param connection
   * @param postId UUID of the post containing the comment to update.
   * @param commentId UUID of the comment to update.
   * @param body Update payload specifying new content and optional edit
   *   context/business rationale.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":commentId")
  public async update(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedParam("commentId")
    commentId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IDiscussBoardComment.IUpdate,
  ): Promise<IDiscussBoardComment> {
    try {
      return await put__discussBoard_member_posts_$postId_comments_$commentId({
        member,
        postId,
        commentId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft-delete a comment (discuss_board_comments) with audit logging.
   *
   * This operation performs a soft-delete on the specific comment under a post,
   * updating the deleted_at field and changing the comment business status per
   * compliance and moderation rules. Uses both postId and commentId for precise
   * targeting. Only the original author can self-delete their comment, and only
   * within the system-defined window (e.g., 15 minutes). Moderators and
   * administrators may delete any comment outside the user window, with full
   * audit-trail capture.
   *
   * Deleting a comment updates the discuss_board_comment_deletion_logs record,
   * referencing the deleting actor's user account, reason, and timestamp for
   * audit and compliance reviews. A soft-deleted comment remains in the
   * database for moderator/admin review and for regulatory requirements, but is
   * no longer shown in standard user or guest queries. Associated replies may
   * be recursively soft-deleted as defined by cascade settings or business
   * process.
   *
   * This endpoint is critical for enforcing application policy, regulatory
   * compliance, and transparent audit of deletion events. Error responses
   * clarify whether the process failed due to permissions, timing, or already
   * deleted state.
   *
   * @param connection
   * @param postId UUID of the post connected to the comment to delete.
   * @param commentId UUID of the comment to delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":commentId")
  public async erase(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedParam("commentId")
    commentId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__discussBoard_member_posts_$postId_comments_$commentId(
        {
          member,
          postId,
          commentId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
