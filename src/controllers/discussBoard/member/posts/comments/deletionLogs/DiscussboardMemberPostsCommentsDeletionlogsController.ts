import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { get__discussBoard_member_posts_$postId_comments_$commentId_deletionLogs_$deletionLogId } from "../../../../../../providers/get__discussBoard_member_posts_$postId_comments_$commentId_deletionLogs_$deletionLogId";
import { MemberAuth } from "../../../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../../../decorators/payload/MemberPayload";

import { IDiscussBoardCommentDeletionLog } from "../../../../../../api/structures/IDiscussBoardCommentDeletionLog";

@Controller(
  "/discussBoard/member/posts/:postId/comments/:commentId/deletionLogs/:deletionLogId",
)
export class DiscussboardMemberPostsCommentsDeletionlogsController {
  /**
   * Get details of a specific comment deletion log
   * (discuss_board_comment_deletion_logs).
   *
   * Retrieve a specific deletion log entry for a comment in a post. This
   * endpoint allows authorized users to obtain details such as the actor's user
   * account who deleted the comment, the deletion reason, any actor note, and
   * the timestamp of deletion.
   *
   * The operation is tightly linked to regulatory and dispute resolution
   * requirements, enabling users, especially moderators and administrators, to
   * audit the history of comment moderation and removal events.
   *
   * Security enforcement ensures that only the owner of the comment, the
   * responsible staff, or users with appropriate privilege can access sensitive
   * deletion log information. Unauthorized access attempts are logged and
   * denied with informative errors.
   *
   * @param connection
   * @param postId UUID of the post containing the comment.
   * @param commentId UUID of the comment for which the deletion log is queried.
   * @param deletionLogId UUID of the specific deletion log record.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async at(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedParam("commentId")
    commentId: string & tags.Format<"uuid">,
    @TypedParam("deletionLogId")
    deletionLogId: string & tags.Format<"uuid">,
  ): Promise<IDiscussBoardCommentDeletionLog> {
    try {
      return await get__discussBoard_member_posts_$postId_comments_$commentId_deletionLogs_$deletionLogId(
        {
          member,
          postId,
          commentId,
          deletionLogId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
