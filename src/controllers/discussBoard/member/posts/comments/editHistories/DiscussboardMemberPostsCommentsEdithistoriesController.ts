import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patch__discussBoard_member_posts_$postId_comments_$commentId_editHistories } from "../../../../../../providers/patch__discussBoard_member_posts_$postId_comments_$commentId_editHistories";
import { MemberAuth } from "../../../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../../../decorators/payload/MemberPayload";
import { get__discussBoard_member_posts_$postId_comments_$commentId_editHistories_$editHistoryId } from "../../../../../../providers/get__discussBoard_member_posts_$postId_comments_$commentId_editHistories_$editHistoryId";

import { IPageIDiscussBoardCommentEditHistory } from "../../../../../../api/structures/IPageIDiscussBoardCommentEditHistory";
import { IDiscussBoardCommentEditHistory } from "../../../../../../api/structures/IDiscussBoardCommentEditHistory";

@Controller(
  "/discussBoard/member/posts/:postId/comments/:commentId/editHistories",
)
export class DiscussboardMemberPostsCommentsEdithistoriesController {
  /**
   * Paginate and search comment edit histories
   * (discuss_board_comment_edit_histories).
   *
   * This operation retrieves a paginated, filterable list of all edit events
   * for a specific comment, as defined in the
   * discuss_board_comment_edit_histories schema. Provides audit-trail data for
   * tracking all edits made to comment content, status, or editor notes,
   * allowing compliance review and rollback as per business rules. Query
   * filters support search by editor, date, or reason for edit, with sort and
   * pagination for large histories.
   *
   * Access control ensures only authorized users (comment author, moderators,
   * admins) view full histories; guests do not have access. Each history entry
   * shows who edited, when, previous content, status, and editorial notes,
   * supporting rich UI features like timeline views or detailed compliance
   * reporting. Critical for transparent discussion moderation and evidentiary
   * requirements in appeals.
   *
   * @param connection
   * @param postId UUID of the post containing the comment.
   * @param commentId UUID of the comment whose edit history is being queried.
   * @param body Edit history search, filtering, and pagination specification.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedParam("commentId")
    commentId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IDiscussBoardCommentEditHistory.IRequest,
  ): Promise<IPageIDiscussBoardCommentEditHistory> {
    try {
      return await patch__discussBoard_member_posts_$postId_comments_$commentId_editHistories(
        {
          member,
          postId,
          commentId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information for a single comment edit history record.
   *
   * This operation fetches the complete details of a single edit event for a
   * comment, based on the discuss_board_comment_edit_histories table record.
   * All required IDs are path parameters: postId (parent post), commentId
   * (parent comment), and editHistoryId (the specific edit event). Contains
   * full snapshot of prior content, business status, editor, and any
   * editor-provided note with UTC timestamp for audit and timeline display.
   *
   * Access is restricted to the comment author, moderators, or administrators.
   * Used for deep-dive compliance investigation, restoration UI, or trusted
   * history reviews in appeals. Works in conjunction with the edit history list
   * and rollback endpoints.
   *
   * @param connection
   * @param postId UUID of the post containing the comment (hierarchy for
   *   context).
   * @param commentId UUID of the comment for which edit history is requested.
   * @param editHistoryId UUID of the specific edit history record to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":editHistoryId")
  public async at(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedParam("commentId")
    commentId: string & tags.Format<"uuid">,
    @TypedParam("editHistoryId")
    editHistoryId: string & tags.Format<"uuid">,
  ): Promise<IDiscussBoardCommentEditHistory> {
    try {
      return await get__discussBoard_member_posts_$postId_comments_$commentId_editHistories_$editHistoryId(
        {
          member,
          postId,
          commentId,
          editHistoryId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
