import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { post__discussBoard_member_posts_$postId_tags } from "../../../../../providers/post__discussBoard_member_posts_$postId_tags";
import { MemberAuth } from "../../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../../decorators/payload/MemberPayload";
import { delete__discussBoard_member_posts_$postId_tags_$tagId } from "../../../../../providers/delete__discussBoard_member_posts_$postId_tags_$tagId";

import { IDiscussBoardPostTag } from "../../../../../api/structures/IDiscussBoardPostTag";

@Controller("/discussBoard/member/posts/:postId/tags")
export class DiscussboardMemberPostsTagsController {
  /**
   * Add a new tag to a discussBoard post by postId and tagId.
   *
   * This endpoint enables authenticated users to assign an additional tag to a
   * post by providing the tag's unique identifier and, optionally, metadata
   * about the tag assignment. The postId path parameter specifies the post
   * being updated.
   *
   * Upon successful assignment, the tag is associated with the post in the
   * discuss_board_post_tags table, and the updated association is returned.
   * Business rules prevent exceeding the maximum allowable tags per post and
   * block duplicate assignments. Authorization checks ensure only the post
   * owner, moderators, or administrators can add tags.
   *
   * @param connection
   * @param postId The unique identifier of the post to assign a tag to.
   * @param body Payload containing the tagId to be assigned and any metadata.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IDiscussBoardPostTag.ICreate,
  ): Promise<IDiscussBoardPostTag> {
    try {
      return await post__discussBoard_member_posts_$postId_tags({
        member,
        postId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Remove a tag association from a discussBoard post by postId and tagId.
   *
   * By specifying the postId and tagId path parameters, authenticated users can
   * dissociate a tag from a post. This operation performs a direct deletion of
   * the post-tag association, updating the post's visible tags and supporting
   * user-driven tag management. If the specified tag is not assigned to the
   * post, a proper not-found or error response is returned.
   *
   * Business logic restricts this action to those with editing rights for the
   * post: post owners (if within edit window), moderators, or administrators.
   * The operation does not affect the tag entity itself, only its association
   * with the given post.
   *
   * @param connection
   * @param postId The unique identifier of the post from which the tag will be
   *   removed.
   * @param tagId The unique identifier of the tag to dissociate from the post.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":tagId")
  public async erase(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedParam("tagId")
    tagId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__discussBoard_member_posts_$postId_tags_$tagId({
        member,
        postId,
        tagId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
