import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { post__discussBoard_member_appeals } from "../../../../providers/post__discussBoard_member_appeals";
import { MemberAuth } from "../../../../decorators/MemberAuth";
import { MemberPayload } from "../../../../decorators/payload/MemberPayload";
import { put__discussBoard_member_appeals_$appealId } from "../../../../providers/put__discussBoard_member_appeals_$appealId";

import { IDiscussBoardAppeal } from "../../../../api/structures/IDiscussBoardAppeal";
import { IDiscussBoardAppeals } from "../../../../api/structures/IDiscussBoardAppeals";

@Controller("/discussBoard/member/appeals")
export class DiscussboardMemberAppealsController {
  /**
   * Create a new appeal of a moderation action (authenticated member only) in
   * discuss_board_appeals.
   *
   * Submit a new appeal citing a specific moderation action ID and providing a
   * detailed rationale/argument. The operation verifies that the member is
   * eligible to appeal (e.g., has standing as the affected party), that the
   * moderation action exists, and the business workflow permits new appeals
   * (not already resolved or duplicated).
   *
   * Upon creation, status is 'pending', and the record is accessible for
   * subsequent moderator/admin review. Only authenticated members (not guests)
   * may submit appeals.
   *
   * Validation handles duplicate appeals, missing or invalid moderation action
   * IDs, and rationale content compliance. Errors include 403 for unauthorized
   * user or non-appealable target.
   *
   * @param connection
   * @param body Rationale and target moderation action for appeal submission.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @MemberAuth()
    member: MemberPayload,
    @TypedBody()
    body: IDiscussBoardAppeal.ICreate,
  ): Promise<IDiscussBoardAppeal> {
    try {
      return await post__discussBoard_member_appeals({
        member,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing appeal for a moderation action in the
   * discuss_board_appeals table.
   *
   * Update an existing appeal for a moderation action by specifying the
   * appeal's unique identifier. This operation is designed for the appellant
   * (the user submitting the appeal) or administrators to present updated
   * rationale, submit additional evidence, or correct prior submissions. The
   * system verifies that only authorized users are permitted to update appeal
   * records: namely, the original appetant or a system administrator.
   *
   * Each update is recorded with a timestamp, and any changes are appended to
   * the appeal’s resolution notes section for full visibility. The appeal’s
   * status may advance through the workflow from pending, to in_review, to
   * resolved or escalated, with all transitions requiring business logic
   * enforcement and audit logging.
   *
   * This endpoint does not allow altering the linkage to the original
   * moderation action, nor does it support creating new appeals. For new
   * appeals, use the proper POST operation. Error handling includes rejecting
   * unauthorized changes and validating that updates comply with current
   * workflow status (e.g., appeals that are closed cannot be edited).
   *
   * @param connection
   * @param appealId Unique identifier of the appeal record to update.
   * @param body Fields for updating an appeal, such as updated rationale or
   *   status.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":appealId")
  public async update(
    @MemberAuth()
    member: MemberPayload,
    @TypedParam("appealId")
    appealId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IDiscussBoardAppeals.IUpdate,
  ): Promise<IDiscussBoardAppeals> {
    try {
      return await put__discussBoard_member_appeals_$appealId({
        member,
        appealId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
