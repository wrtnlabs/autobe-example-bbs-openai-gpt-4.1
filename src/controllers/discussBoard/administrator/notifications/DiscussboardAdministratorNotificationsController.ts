import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patch__discussBoard_administrator_notifications } from "../../../../providers/patch__discussBoard_administrator_notifications";
import { AdministratorAuth } from "../../../../decorators/AdministratorAuth";
import { AdministratorPayload } from "../../../../decorators/payload/AdministratorPayload";
import { get__discussBoard_administrator_notifications_$notificationId } from "../../../../providers/get__discussBoard_administrator_notifications_$notificationId";

import { IPageIDiscussBoardNotifications } from "../../../../api/structures/IPageIDiscussBoardNotifications";
import { IDiscussBoardNotifications } from "../../../../api/structures/IDiscussBoardNotifications";
import { IDiscussBoardNotification } from "../../../../api/structures/IDiscussBoardNotification";

@Controller("/discussBoard/administrator/notifications")
export class DiscussboardAdministratorNotificationsController {
  /**
   * Search and retrieve a paginated, filterable list of notification delivery
   * log entries (discuss_board_notifications).
   *
   * Search and retrieve a paginated list of notification events from the
   * discussBoard platformâ€™s notification delivery log. The notification records
   * include delivery status, recipient, event type, timing, and metadata
   * necessary for compliance, audit, and troubleshooting. Request body allows
   * search filters on user_account_id, event_type, delivery_channel,
   * delivery_status, created_at date windows, and supports standard pagination
   * controls (page number, page size, sort).
   *
   * Administrators can use this endpoint to audit notification delivery
   * performance, diagnose issues for specific users or events, and assure
   * compliance with notification and privacy regulations. If filters are not
   * supplied, the endpoint returns the most recent notification events.
   * Unauthorized attempts to access notification data return strict 403 errors
   * with audit triggers.
   *
   * @param connection
   * @param body Search and pagination criteria for filtering notification log
   *   results, such as event type, recipient, channel, status, or date range.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedBody()
    body: IDiscussBoardNotifications.IRequest,
  ): Promise<IPageIDiscussBoardNotifications.ISummary> {
    try {
      return await patch__discussBoard_administrator_notifications({
        administrator,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a specific notification event (discuss_board_notifications) by ID.
   *
   * This operation retrieves the details of a notification event sent by the
   * discussBoard platform to a specific user. The operation provides full
   * metadata from the discuss_board_notifications Prisma table, including the
   * event type (such as reply, moderation, system alert), delivery channel
   * (email, sms, push, in_app), subject and body, status indicators (delivered,
   * pending, failed), and any external partner IDs.
   *
   * Only authenticated members, moderators, or administrators are permitted to
   * access their own notification records, while administrators may view all.
   * Security considerations include strict filtering to ensure users cannot
   * access each other's notification metadata.
   *
   * The operation supports troubleshooting by exposing relevant error details
   * on failed notifications, links notifications to triggering posts (if
   * relevant), and includes all required timestamps and channel-specific
   * fields. Related operations include listing notifications, searching by
   * criteria, or updating delivery preferences (not included in this call).
   * Attempting to access a nonexistent or unauthorized notification will
   * provide clear error scenarios for auditing and support.
   *
   * @param connection
   * @param notificationId Unique identifier for the notification event to
   *   retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":notificationId")
  public async at(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedParam("notificationId")
    notificationId: string & tags.Format<"uuid">,
  ): Promise<IDiscussBoardNotification> {
    try {
      return await get__discussBoard_administrator_notifications_$notificationId(
        {
          administrator,
          notificationId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
