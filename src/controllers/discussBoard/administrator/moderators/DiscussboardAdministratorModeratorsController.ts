import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patch__discussBoard_administrator_moderators } from "../../../../providers/patch__discussBoard_administrator_moderators";
import { AdministratorAuth } from "../../../../decorators/AdministratorAuth";
import { AdministratorPayload } from "../../../../decorators/payload/AdministratorPayload";
import { get__discussBoard_administrator_moderators_$moderatorId } from "../../../../providers/get__discussBoard_administrator_moderators_$moderatorId";
import { put__discussBoard_administrator_moderators_$moderatorId } from "../../../../providers/put__discussBoard_administrator_moderators_$moderatorId";
import { delete__discussBoard_administrator_moderators_$moderatorId } from "../../../../providers/delete__discussBoard_administrator_moderators_$moderatorId";

import { IPageIDiscussBoardModerator } from "../../../../api/structures/IPageIDiscussBoardModerator";
import { IDiscussBoardModerator } from "../../../../api/structures/IDiscussBoardModerator";

@Controller("/discussBoard/administrator/moderators")
export class DiscussboardAdministratorModeratorsController {
  /**
   * Retrieve a filtered, paginated list of registered moderators
   * (discuss_board_moderators table).
   *
   * Provides an indexed, searchable view of all moderator role accounts on the
   * platform. Supports retrieval of records filtered by moderator status,
   * timeframes, or linked member nickname for administrative and compliance use
   * cases. Utilizes the discuss_board_moderators table, which links to member
   * records by member_id.
   *
   * Returned results are paginated and summarized, omitting full audit
   * histories but including primary identifiers, statuses, assignment info, and
   * supporting efficient review. Administrators are authorized for unrestricted
   * access, and other roles may require additional system logic for limited
   * listing views.
   *
   * Complimentary endpoints include detailed moderator retrieval, status
   * updates, or role assignment endpoints.
   *
   * @param connection
   * @param body Search criteria, filter options, pagination for moderator
   *   listing.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedBody()
    body: IDiscussBoardModerator.IRequest,
  ): Promise<IPageIDiscussBoardModerator.ISummary> {
    try {
      return await patch__discussBoard_administrator_moderators({
        administrator,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Fetch complete details for a single moderator account
   * (discuss_board_moderators table).
   *
   * Fetches and returns a single moderator account's complete record, by
   * referencing the provided moderatorId. Gathers data from the
   * discuss_board_moderators table, including member_id, assigned_at,
   * revoked_at, assignment status, the administrator who assigned role, and
   * current status. Used for audits, status updates, contextual management, or
   * history review.
   *
   * Access to this endpoint is strictly limited to administrator users, as
   * moderator account details are sensitive. Related endpoints include
   * moderator update, assignment, or revocation actions. Results returned are
   * suitable for detailed inspection, not general listing.
   *
   * @param connection
   * @param moderatorId Unique identifier of the moderator to be retrieved.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":moderatorId")
  public async at(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedParam("moderatorId")
    moderatorId: string & tags.Format<"uuid">,
  ): Promise<IDiscussBoardModerator> {
    try {
      return await get__discussBoard_administrator_moderators_$moderatorId({
        administrator,
        moderatorId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update moderator account fields including status and revocation
   * (discuss_board_moderators table).
   *
   * Enables administrators to alter an existing moderator account by updating
   * core fields including status, revocation timestamp, or other relevant
   * moderator metadata. Operation validates all changes, enforcing field
   * constraints and checking business policy compliance on role changes (e.g.,
   * only administrators can revoke role).
   *
   * Direct edits to the discuss_board_moderators table are recorded in system
   * audit logs and compliance history, ensuring full traceability for all
   * modifications. Related endpoints include moderator detail (GET), listing
   * (PATCH), and role assignment APIs.
   *
   * @param connection
   * @param moderatorId Unique identifier of the moderator to be updated.
   * @param body Updated data/fields for the moderator account.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":moderatorId")
  public async update(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedParam("moderatorId")
    moderatorId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IDiscussBoardModerator.IUpdate,
  ): Promise<IDiscussBoardModerator> {
    try {
      return await put__discussBoard_administrator_moderators_$moderatorId({
        administrator,
        moderatorId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft-delete (revoke) a moderator role by moderatorId in
   * discuss_board_moderators.
   *
   * This operation is designed for administrator-level users to revoke
   * moderator privileges from a member. The discuss_board_moderators table in
   * the Prisma schema represents elevated user roles with special enforcement,
   * review, and moderation privileges.
   *
   * Revoking moderator status does not delete the user; it updates the
   * deleted_at field to indicate the user no longer holds moderator rights,
   * retaining a full audit trail for future compliance. Only administrators may
   * access this endpoint and initiate the removal process. Security checks in
   * controller/provider ensure that moderatorId is valid, belongs to an active
   * moderator, and that the request is performed within appropriate escalation
   * bounds.
   *
   * Associated audit and moderation logs linked to this moderator are
   * preserved, supporting review of all enforcement actions taken prior to
   * revocation. Should a moderator's privileges be removed in error,
   * reinstatement would require administrator re-assignment rather than
   * restoration from deletion.
   *
   * Error handling covers invalid moderatorId, attempts to delete currently
   * active administrators, or system/database issues during the operation. Hard
   * deletion is never performedâ€”record retention aligns with regulatory
   * requirements for moderator actions and workflow history.
   *
   * @param connection
   * @param moderatorId Unique identifier of the moderator to be deleted (UUID).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":moderatorId")
  public async erase(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedParam("moderatorId")
    moderatorId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__discussBoard_administrator_moderators_$moderatorId({
        administrator,
        moderatorId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
