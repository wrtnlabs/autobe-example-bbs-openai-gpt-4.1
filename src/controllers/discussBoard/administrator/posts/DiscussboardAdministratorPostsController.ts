import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { put__discussBoard_administrator_posts_$postId } from "../../../../providers/put__discussBoard_administrator_posts_$postId";
import { AdministratorAuth } from "../../../../decorators/AdministratorAuth";
import { AdministratorPayload } from "../../../../decorators/payload/AdministratorPayload";
import { delete__discussBoard_administrator_posts_$postId } from "../../../../providers/delete__discussBoard_administrator_posts_$postId";

import { IDiscussBoardPost } from "../../../../api/structures/IDiscussBoardPost";

@Controller("/discussBoard/administrator/posts/:postId")
export class DiscussboardAdministratorPostsController {
  /**
   * Update an existing discussBoard post by ID.
   *
   * This endpoint enables a member to update their post by providing new values
   * for editable post fields such as title, body, and status. If the editing
   * window (30 minutes after creation) has expired, members are forbidden from
   * updating their own posts, while moderators or administrators retain full
   * update access at any time.
   *
   * Security enforcement restricts post modification to the author during the
   * allowed period, or to moderators/administrators after that window. The
   * system checks for forbidden words through policy-maintained expressions and
   * applies business validations on title/body length and duplicate detection.
   *
   * When successful, the operation returns the full updated post. Edit
   * histories should be appended in the discuss_board_post_edit_histories table
   * but are not managed directly by this endpoint. Error cases include expired
   * edit window, content/policy violations, and insufficient authorization.
   *
   * @param connection
   * @param postId The unique identifier of the post to update.
   * @param body Fields for updating the post (title, body, business status,
   *   etc).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async update(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IDiscussBoardPost.IUpdate,
  ): Promise<IDiscussBoardPost> {
    try {
      return await put__discussBoard_administrator_posts_$postId({
        administrator,
        postId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Delete (soft-delete) a discussBoard post by ID.
   *
   * This endpoint allows a user to delete a post by specifying its unique ID.
   * For members, deletion is allowed only within 30 minutes of post creation;
   * after this window expires, only moderators or administrators may delete
   * posts. The deletion is a soft-delete: the post's deleted_at field is set to
   * the current timestamp, removing the post from normal queries but preserving
   * data for compliance.
   *
   * Related comments and reply threads associated with the post are also
   * soft-deleted as required by regulatory business logic. Each delete action
   * is recorded in the discuss_board_post_deletion_logs table for auditability.
   * Abuse, policy violations, or expired delete windows will result in proper
   * error responses.
   *
   * Authorization checks ensure users cannot delete content they do not own
   * unless they have moderator or administrator privileges.
   *
   * @param connection
   * @param postId The unique identifier of the post to soft-delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete()
  public async erase(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__discussBoard_administrator_posts_$postId({
        administrator,
        postId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
