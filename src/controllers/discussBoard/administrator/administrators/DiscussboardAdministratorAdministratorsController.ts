import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patch__discussBoard_administrator_administrators } from "../../../../providers/patch__discussBoard_administrator_administrators";
import { AdministratorAuth } from "../../../../decorators/AdministratorAuth";
import { AdministratorPayload } from "../../../../decorators/payload/AdministratorPayload";
import { get__discussBoard_administrator_administrators_$administratorId } from "../../../../providers/get__discussBoard_administrator_administrators_$administratorId";
import { put__discussBoard_administrator_administrators_$administratorId } from "../../../../providers/put__discussBoard_administrator_administrators_$administratorId";
import { delete__discussBoard_administrator_administrators_$administratorId } from "../../../../providers/delete__discussBoard_administrator_administrators_$administratorId";

import { IPageIDiscussBoardAdministrator } from "../../../../api/structures/IPageIDiscussBoardAdministrator";
import { IDiscussBoardAdministrator } from "../../../../api/structures/IDiscussBoardAdministrator";

@Controller("/discussBoard/administrator/administrators")
export class DiscussboardAdministratorAdministratorsController {
  /**
   * Search and paginate administrator accounts in discuss_board_administrators.
   *
   * Use this endpoint to search the discuss_board_administrators table for
   * administrator accounts. It supports advanced filtering by status (active,
   * resigned, suspended), assignment/escalation history, creation or status
   * update dates, and can sort by timestamps or status values.
   *
   * Pagination and search options help with administrative oversight, audit,
   * and compliance reviews of platform superusers. Returned fields cover
   * administrator/member linkage, escalation metadata, and current admin
   * status. Security is strict: only other administrators may search the admin
   * directory. Members, moderators, or guests are explicitly denied access to
   * this function.
   *
   * The request body allows specifying search filters, sort keys, and
   * pagination limits. The response is a paginated array of administrator
   * summary objects, optimized for audit dashboards or internal policy review.
   *
   * Error responses include unauthorized access, malformed search queries, and
   * database errors. Related operations for creating, modifying, or deleting
   * administrator roles are available in separate endpoints, all restricted to
   * administrator users.
   *
   * @param connection
   * @param body Filter, sort, and pagination criteria for administrators
   *   search.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedBody()
    body: IDiscussBoardAdministrator.IRequest,
  ): Promise<IPageIDiscussBoardAdministrator.ISummary> {
    try {
      return await patch__discussBoard_administrator_administrators({
        administrator,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a single administrator account detail by administratorId from
   * discuss_board_administrators.
   *
   * Use this endpoint to retrieve all profile and role metadata for a single
   * platform administrator. The discuss_board_administrators table links
   * administrator role assignments directly to member accounts, tracks
   * assignment/revocation history, and contains business fields for auditing.
   *
   * Returned data includes admin assignment/escalation origin, current status,
   * assignment and revocation dates, and associated member account metadata.
   * The endpoint enforces strict access controlâ€”only administrator users may
   * query individual administrator details.
   *
   * Security logic ensures that records found by administratorId exist, are not
   * soft-deleted, and that the requesting user is authorized for high-privilege
   * data access. Attempts to reference invalid or revoked administratorId
   * values result in precise 404/403 error codes.
   *
   * For managing or updating admin roles, separate endpoints exist. For
   * audit/history, the payload contains timestamps for creation, updates, and
   * revocation if relevant. This operation is core to platform governance and
   * role verification flows.
   *
   * @param connection
   * @param administratorId Unique identifier for the administrator account
   *   (UUID).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":administratorId")
  public async at(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedParam("administratorId")
    administratorId: string & tags.Format<"uuid">,
  ): Promise<IDiscussBoardAdministrator> {
    try {
      return await get__discussBoard_administrator_administrators_$administratorId(
        {
          administrator,
          administratorId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update administrator account properties in discuss_board_administrators by
   * administratorId.
   *
   * Administrators may use this endpoint to change the properties of an
   * administrator account, identified by administratorId. Common update
   * scenarios include adjusting admin status (e.g., suspended, resigned),
   * correcting escalation data, or updating administrative metadata per audit
   * requirements. The full set of updatable fields corresponds to the
   * discuss_board_administrators schema.
   *
   * Only an administrator may update another administrator's records, and the
   * requesting user must have escalation permissions over the target record.
   * Updates trigger audit logging to ensure compliance.
   *
   * Request body validation ensures all modifications are business-legal
   * (cannot demote self without secondary confirmation, cannot assign statuses
   * not present in admin status enum, etc.). Only unrevoked records can be
   * altered. The response payload returns the updated administrator account
   * entity, reflecting all business-enforced changes.
   *
   * Error cases include invalid administratorId, disallowed status transitions,
   * or lack of sufficient permissions. Update operations on revoked/deleted
   * admin accounts are rejected with explanatory error messages.
   *
   * @param connection
   * @param administratorId Unique identifier for the target administrator
   *   account (UUID) to update.
   * @param body Update-able administrator account information for the target
   *   admin.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":administratorId")
  public async update(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedParam("administratorId")
    administratorId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IDiscussBoardAdministrator.IUpdate,
  ): Promise<IDiscussBoardAdministrator> {
    try {
      return await put__discussBoard_administrator_administrators_$administratorId(
        {
          administrator,
          administratorId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Revoke (soft-delete) administrator account and privileges in
   * discuss_board_administrators by administratorId.
   *
   * Administrators can use this endpoint to remove administrator privileges
   * from a platform user, identified by administratorId. The operation marks
   * the target record as soft-deleted (deleted_at filled) according to the
   * schema, thus retaining full audit trail for compliance and investigations.
   *
   * Self-deletion is permitted only with additional authentication in
   * production logic. The endpoint enforces business logic preventing deletion
   * of the final remaining admin to ensure platform coverage. The deletion
   * operation is logged for audit and recovery.
   *
   * Requests with invalid or already revoked administratorId are rejected with
   * detailed errors. Associated member records remain intact; only privileges
   * at the administrator level are impacted. Complete action results in the
   * removal of admin access and privilege escalation rights for the target
   * account.
   *
   * No entity is physically removed from the database; record retention follows
   * organizational compliance and data recovery best practices.
   *
   * @param connection
   * @param administratorId Unique administrator account identifier for
   *   privilege revocation (UUID).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":administratorId")
  public async erase(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedParam("administratorId")
    administratorId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__discussBoard_administrator_administrators_$administratorId(
        {
          administrator,
          administratorId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
