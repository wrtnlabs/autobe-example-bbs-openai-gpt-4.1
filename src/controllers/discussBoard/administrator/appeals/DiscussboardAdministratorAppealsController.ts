import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patch__discussBoard_administrator_appeals } from "../../../../providers/patch__discussBoard_administrator_appeals";
import { AdministratorAuth } from "../../../../decorators/AdministratorAuth";
import { AdministratorPayload } from "../../../../decorators/payload/AdministratorPayload";
import { get__discussBoard_administrator_appeals_$appealId } from "../../../../providers/get__discussBoard_administrator_appeals_$appealId";
import { put__discussBoard_administrator_appeals_$appealId } from "../../../../providers/put__discussBoard_administrator_appeals_$appealId";
import { delete__discussBoard_administrator_appeals_$appealId } from "../../../../providers/delete__discussBoard_administrator_appeals_$appealId";

import { IPageIDiscussBoardAppeal } from "../../../../api/structures/IPageIDiscussBoardAppeal";
import { IDiscussBoardAppeal } from "../../../../api/structures/IDiscussBoardAppeal";
import { IDiscussBoardAppeals } from "../../../../api/structures/IDiscussBoardAppeals";

@Controller("/discussBoard/administrator/appeals")
export class DiscussboardAdministratorAppealsController {
  /**
   * Retrieve paginated list of all appeals submitted against moderation actions
   * (moderator/admin only) from discuss_board_appeals.
   *
   * Allows privileged users to search, filter, and paginate through all appeals
   * submitted by members against moderation decisions. Supports filtering by
   * status, appellant, moderation action, creation date, and rationale
   * keywords.
   *
   * Result set is summarized for operational review and workflow management.
   * Only accessible to moderators and administrators due to the sensitive
   * nature of appeal review. Business logic ensures members may only view their
   * own appeals through other endpoints, not the full list.
   *
   * Related endpoints include /appeals/{appealId} (detail fetch), and POST for
   * submitting new appeals. Unauthorized access results in clear error
   * messaging.
   *
   * @param connection
   * @param body Filtering, searching, and pagination criteria for appeals
   *   listing.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedBody()
    body: IDiscussBoardAppeal.IRequest,
  ): Promise<IPageIDiscussBoardAppeal.ISummary> {
    try {
      return await patch__discussBoard_administrator_appeals({
        administrator,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get details of a single appeal for a moderation action (moderator/admin
   * only) from discuss_board_appeals.
   *
   * Fetch a complete record for a particular appeal, including appeal
   * rationale, status, outcome notes, workflow timestamps, and linked
   * moderation action and appellant member. The endpoint is required for
   * moderation scenario reviews, transparency, and audit requirements as part
   * of fair appeals handling.
   *
   * Only moderators and administrators may use this endpoint; members may
   * access only their own appeals through distinct endpoints. Cross-references
   * appeal details with related moderation decisions and logs. Business logic
   * enforces strict role checks and notifies users when access is unauthorized
   * or the appeal does not exist.
   *
   * @param connection
   * @param appealId The unique identifier of the appeal to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":appealId")
  public async at(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedParam("appealId")
    appealId: string & tags.Format<"uuid">,
  ): Promise<IDiscussBoardAppeal> {
    try {
      return await get__discussBoard_administrator_appeals_$appealId({
        administrator,
        appealId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing appeal for a moderation action in the
   * discuss_board_appeals table.
   *
   * Update an existing appeal for a moderation action by specifying the
   * appeal's unique identifier. This operation is designed for the appellant
   * (the user submitting the appeal) or administrators to present updated
   * rationale, submit additional evidence, or correct prior submissions. The
   * system verifies that only authorized users are permitted to update appeal
   * records: namely, the original appetant or a system administrator.
   *
   * Each update is recorded with a timestamp, and any changes are appended to
   * the appeal’s resolution notes section for full visibility. The appeal’s
   * status may advance through the workflow from pending, to in_review, to
   * resolved or escalated, with all transitions requiring business logic
   * enforcement and audit logging.
   *
   * This endpoint does not allow altering the linkage to the original
   * moderation action, nor does it support creating new appeals. For new
   * appeals, use the proper POST operation. Error handling includes rejecting
   * unauthorized changes and validating that updates comply with current
   * workflow status (e.g., appeals that are closed cannot be edited).
   *
   * @param connection
   * @param appealId Unique identifier of the appeal record to update.
   * @param body Fields for updating an appeal, such as updated rationale or
   *   status.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":appealId")
  public async update(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedParam("appealId")
    appealId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IDiscussBoardAppeals.IUpdate,
  ): Promise<IDiscussBoardAppeals> {
    try {
      return await put__discussBoard_administrator_appeals_$appealId({
        administrator,
        appealId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Erase (permanently delete) an appeal record from the discuss_board_appeals
   * table by ID.
   *
   * Erase an appeal record from the system by providing the unique appealId.
   * Appeals can only be erased by users with administrative privilege or the
   * original appellant if the appeal is still pending and has not been acted
   * on. The system checks that the target appeal is not currently in an
   * escalated or in_review state, and that deleting the record does not affect
   * ongoing moderation or compliance processes.
   *
   * Upon successful removal, the operation triggers audit log creation
   * referencing the actor, target, and action. If the attempt violates workflow
   * or status rules (such as attempting to delete an active or escalated
   * appeal), the system returns an appropriate error response and preserves the
   * record. This is a hard delete operation unless an explicit soft-delete
   * timestamp is maintained per requirements.
   *
   * @param connection
   * @param appealId Unique identifier of the appeal record to erase.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":appealId")
  public async erase(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedParam("appealId")
    appealId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__discussBoard_administrator_appeals_$appealId({
        administrator,
        appealId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
