import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { post__discussBoard_administrator_forbiddenWords } from "../../../../providers/post__discussBoard_administrator_forbiddenWords";
import { AdministratorAuth } from "../../../../decorators/AdministratorAuth";
import { AdministratorPayload } from "../../../../decorators/payload/AdministratorPayload";
import { patch__discussBoard_administrator_forbiddenWords } from "../../../../providers/patch__discussBoard_administrator_forbiddenWords";
import { get__discussBoard_administrator_forbiddenWords_$forbiddenWordId } from "../../../../providers/get__discussBoard_administrator_forbiddenWords_$forbiddenWordId";
import { put__discussBoard_administrator_forbiddenWords_$forbiddenWordId } from "../../../../providers/put__discussBoard_administrator_forbiddenWords_$forbiddenWordId";
import { delete__discussBoard_administrator_forbiddenWords_$forbiddenWordId } from "../../../../providers/delete__discussBoard_administrator_forbiddenWords_$forbiddenWordId";

import { IDiscussBoardForbiddenWords } from "../../../../api/structures/IDiscussBoardForbiddenWords";
import { IPageIDiscussBoardForbiddenWords } from "../../../../api/structures/IPageIDiscussBoardForbiddenWords";

@Controller("/discussBoard/administrator/forbiddenWords")
export class DiscussboardAdministratorForbiddenwordsController {
  /**
   * Create a new forbidden word moderation rule (discuss_board_forbidden_words
   * table).
   *
   * Adds a new entry to the forbidden words/phrases list for discussBoard,
   * enforcing new policy rules for future content. Payload must define the
   * expression/pattern, optional description/rationale, and is validated for
   * uniqueness (expression must not duplicate existing records,
   * case-insensitive).
   *
   * Strictly restricted to administrative roles due to significant impact on
   * user content moderation and censorship. The creation is auditable, triggers
   * policy update notifications to moderation teams, and can be rolled back or
   * soft-deleted if needed. This is coordinated with the forbidden word index
   * endpoint and supports platform-level compliance.
   *
   * @param connection
   * @param body Data describing the new forbidden word to add
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedBody()
    body: IDiscussBoardForbiddenWords.ICreate,
  ): Promise<IDiscussBoardForbiddenWords> {
    try {
      return await post__discussBoard_administrator_forbiddenWords({
        administrator,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * List/search forbidden word rules for content moderation
   * (discuss_board_forbidden_words table).
   *
   * Returns a paginated list of forbidden words/phrases/regex patterns
   * currently enforced for post and comment filtering, as records from the
   * discuss_board_forbidden_words table. Supports filtering, search, and
   * sorting.
   *
   * Primarily for administrators (or moderators) managing platform compliance
   * and community standards. Typical use cases include reviewing current
   * forbidden word policies, responding to regulatory audits, or performing
   * bulk edits. Soft-deleted entries are not included unless specifically
   * searched for by authorized personnel. This is usually paired with endpoints
   * for adding, updating, or deleting forbidden keyword rules.
   *
   * Strict authorization required: Only administrators and sometimes moderators
   * may view or manage the forbidden words list.
   *
   * @param connection
   * @param body Filtering and pagination criteria for forbidden keyword rules
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedBody()
    body: IDiscussBoardForbiddenWords.IRequest,
  ): Promise<IPageIDiscussBoardForbiddenWords> {
    try {
      return await patch__discussBoard_administrator_forbiddenWords({
        administrator,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get forbidden word rule detail (discuss_board_forbidden_words table).
   *
   * Retrieves the complete specification for a single forbidden word, phrase,
   * or regex rule used for content filtering on discussBoard. The record is
   * identified by its unique UUID as the forbiddenWordId parameter.
   *
   * The endpoint returns all fields from discuss_board_forbidden_words,
   * including expression, description/rationale, and timestamps (created_at,
   * updated_at, deleted_at if soft-deleted).
   *
   * Standard error responses include not-found for invalid ID, permission
   * denied for unauthorized roles, and possibly auditing soft-deleted rules for
   * compliance. Used in content moderation configuration UIs and administrative
   * audit workflows.
   *
   * @param connection
   * @param forbiddenWordId UUID of the forbidden words record to retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":forbiddenWordId")
  public async at(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedParam("forbiddenWordId")
    forbiddenWordId: string & tags.Format<"uuid">,
  ): Promise<IDiscussBoardForbiddenWords> {
    try {
      return await get__discussBoard_administrator_forbiddenWords_$forbiddenWordId(
        {
          administrator,
          forbiddenWordId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing forbidden word rule (discuss_board_forbidden_words
   * table).
   *
   * Updates a forbidden words record by its unique ID, allowing modification of
   * the expression, rationale, or other properties for compliance or moderation
   * policy changes. Supports audit logging and validation for unique
   * expressions (case-insensitive).
   *
   * Strictly restricted to administrative roles. When an existing forbidden
   * word is changed, system policy update logic may notify affected services or
   * moderation users. Related to creation, deletion, and listing endpoints.
   *
   * @param connection
   * @param forbiddenWordId UUID of the forbidden word filtering rule to update
   * @param body Forbidden words update payload (expression, description, etc.)
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":forbiddenWordId")
  public async update(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedParam("forbiddenWordId")
    forbiddenWordId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IDiscussBoardForbiddenWords.IUpdate,
  ): Promise<IDiscussBoardForbiddenWords> {
    try {
      return await put__discussBoard_administrator_forbiddenWords_$forbiddenWordId(
        {
          administrator,
          forbiddenWordId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Soft delete a forbidden word rule (discuss_board_forbidden_words table).
   *
   * Removes (soft deletes) a forbidden word or phrase from the moderation
   * filtering policy by marking deleted_at on the record. This prevents further
   * enforcement against this expression but keeps the record for audit,
   * transparency, or potential future restoration.
   *
   * Strict authorization is required: Only administrators can delete forbidden
   * word rules. Audit logs must capture who deleted the rule, when, and the
   * business rationale. Errors include not found (invalid ID), already deleted,
   * or permission denied.
   *
   * Typically coordinated with list and create endpoints for comprehensive
   * moderation management.
   *
   * @param connection
   * @param forbiddenWordId UUID of the forbidden word rule to delete (soft
   *   delete marks deleted_at)
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":forbiddenWordId")
  public async erase(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedParam("forbiddenWordId")
    forbiddenWordId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__discussBoard_administrator_forbiddenWords_$forbiddenWordId(
        {
          administrator,
          forbiddenWordId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
