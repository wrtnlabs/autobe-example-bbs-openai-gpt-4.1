import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patch__discussBoard_administrator_consentRecords } from "../../../../providers/patch__discussBoard_administrator_consentRecords";
import { AdministratorAuth } from "../../../../decorators/AdministratorAuth";
import { AdministratorPayload } from "../../../../decorators/payload/AdministratorPayload";
import { get__discussBoard_administrator_consentRecords_$consentRecordId } from "../../../../providers/get__discussBoard_administrator_consentRecords_$consentRecordId";

import { IPageIDiscussBoardConsentRecords } from "../../../../api/structures/IPageIDiscussBoardConsentRecords";
import { IDiscussBoardConsentRecords } from "../../../../api/structures/IDiscussBoardConsentRecords";

@Controller("/discussBoard/administrator/consentRecords")
export class DiscussboardAdministratorConsentrecordsController {
  /**
   * Retrieve a paginated and filterable list of user consent records.
   *
   * Retrieve a paginated and filterable list of user consent records from the
   * system. Each record in the discuss_board_consent_records table represents a
   * specific consent event for a user, such as granting, revoking, or updating
   * their agreement to a given policy (privacy policy, terms of service, or
   * marketing opt-in). Administrators may use this API for regulatory
   * compliance, audit requests, and ensuring users' data rights are respected.
   *
   * The operation provides filtering by user_account_id, policy_type,
   * consent_action, and date range, helping administrators locate specific
   * records efficiently. Pagination ensures performance and usability when
   * reviewing a large number of records. Access to this endpoint is restricted
   * to administrators due to the sensitivity of consent data.
   *
   * Related endpoints include detailed retrieval of a single consent record and
   * operations for handling privacy logs associated with data rights requests.
   * Errors may be returned if filtering criteria are invalid or requested
   * records do not exist.
   *
   * @param connection
   * @param body Filtering and pagination options for searching user consent
   *   records.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedBody()
    body: IDiscussBoardConsentRecords.IRequest,
  ): Promise<IPageIDiscussBoardConsentRecords> {
    try {
      return await patch__discussBoard_administrator_consentRecords({
        administrator,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Fetch details of a specific user consent record by ID.
   *
   * Retrieve detailed information about a single consent record stored in the
   * discuss_board_consent_records table. This includes which policy the consent
   * is for, the type of event (granted, revoked, updated), the timestamp, and
   * any optional business notes.
   *
   * Access to this operation is restricted to administrators to maintain legal
   * and regulatory privacy standards. The returned record may be used for
   * compliance audits or investigation of specific user requests. If the
   * specified consentRecordId does not exist, an appropriate error response
   * will be provided.
   *
   * This endpoint complements the bulk search operation for consent records and
   * is related to other privacy and compliance APIs.
   *
   * @param connection
   * @param consentRecordId Unique identifier of the consent record to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":consentRecordId")
  public async at(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedParam("consentRecordId")
    consentRecordId: string & tags.Format<"uuid">,
  ): Promise<IDiscussBoardConsentRecords> {
    try {
      return await get__discussBoard_administrator_consentRecords_$consentRecordId(
        {
          administrator,
          consentRecordId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
