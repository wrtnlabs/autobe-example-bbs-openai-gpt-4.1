import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patch__discussBoard_administrator_integrationLogs } from "../../../../providers/patch__discussBoard_administrator_integrationLogs";
import { AdministratorAuth } from "../../../../decorators/AdministratorAuth";
import { AdministratorPayload } from "../../../../decorators/payload/AdministratorPayload";
import { get__discussBoard_administrator_integrationLogs_$integrationLogId } from "../../../../providers/get__discussBoard_administrator_integrationLogs_$integrationLogId";

import { IPageIDiscussBoardIntegrationLog } from "../../../../api/structures/IPageIDiscussBoardIntegrationLog";
import { IDiscussBoardIntegrationLog } from "../../../../api/structures/IDiscussBoardIntegrationLog";

@Controller("/discussBoard/administrator/integrationLogs")
export class DiscussboardAdministratorIntegrationlogsController {
  /**
   * Search and page through external integration events
   * (discuss_board_integration_logs).
   *
   * This operation enables administrators to query integration logs from the
   * discuss_board_integration_logs table using a variety of filters, supporting
   * investigative, compliance, and maintenance scenarios. The search request
   * body allows filtering by integration_type (e.g., notification_delivery,
   * analytics, abuse_detection, partner_api), partner names, event
   * type/trigger, integration status, time ranges, and optional user account.
   *
   * Results are paginated and may be sorted by creation or update timestamps.
   * The response includes essential audit fields such as integration status,
   * error messages, external reference IDs, and links to original business
   * events.
   *
   * Access to this operation is restricted to administrators due to the
   * sensitive nature of payloads and potential PII in logs. Attempting access
   * without sufficient permission is rejected with an explicit error. Other
   * related endpoints include retrieving a single integration log by ID.
   *
   * @param connection
   * @param body Search and filtering criteria for integration logs, supporting
   *   advanced pagination and filtering.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedBody()
    body: IDiscussBoardIntegrationLog.IRequest,
  ): Promise<IPageIDiscussBoardIntegrationLog> {
    try {
      return await patch__discussBoard_administrator_integrationLogs({
        administrator,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a specific integration log event (discuss_board_integration_logs)
   * by ID.
   *
   * This operation provides full access to a single integration log entry from
   * the discuss_board_integration_logs Prisma table. Administrators can use
   * this endpoint to verify the details of external API calls, notification
   * deliveries, analytics updates, or abuse detection events involving
   * third-party platforms.
   *
   * The response includes all columns from the integration log, including
   * integration_type, partner, statuses, payload (JSON), status/error info,
   * user reference (when available), external tracking IDs, and creation/update
   * timestamps. This API is essential for troubleshooting failed notifications,
   * auditing partner interactions, and ensuring SLAs are met for business
   * integrations.
   *
   * The operation is tightly access-controlledâ€”regular users and moderators
   * cannot access integration logs due to potential PII/PHI or confidential
   * partner data. Related operations include paginated log search or
   * event-specific filtering endpoints.
   *
   * @param connection
   * @param integrationLogId Unique identifier for the integration log event to
   *   retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":integrationLogId")
  public async at(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedParam("integrationLogId")
    integrationLogId: string & tags.Format<"uuid">,
  ): Promise<IDiscussBoardIntegrationLog> {
    try {
      return await get__discussBoard_administrator_integrationLogs_$integrationLogId(
        {
          administrator,
          integrationLogId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
