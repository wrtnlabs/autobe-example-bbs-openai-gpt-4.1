import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { post__discussBoard_administrator_moderationActions } from "../../../../providers/post__discussBoard_administrator_moderationActions";
import { AdministratorAuth } from "../../../../decorators/AdministratorAuth";
import { AdministratorPayload } from "../../../../decorators/payload/AdministratorPayload";
import { patch__discussBoard_administrator_moderationActions } from "../../../../providers/patch__discussBoard_administrator_moderationActions";
import { get__discussBoard_administrator_moderationActions_$moderationActionId } from "../../../../providers/get__discussBoard_administrator_moderationActions_$moderationActionId";
import { put__discussBoard_administrator_moderationActions_$moderationActionId } from "../../../../providers/put__discussBoard_administrator_moderationActions_$moderationActionId";
import { delete__discussBoard_administrator_moderationActions_$moderationActionId } from "../../../../providers/delete__discussBoard_administrator_moderationActions_$moderationActionId";

import { IDiscussBoardModerationAction } from "../../../../api/structures/IDiscussBoardModerationAction";
import { IPageIDiscussBoardModerationAction } from "../../../../api/structures/IPageIDiscussBoardModerationAction";

@Controller("/discussBoard/administrator/moderationActions")
export class DiscussboardAdministratorModerationactionsController {
  /**
   * Create a new moderation action record in discuss_board_moderation_actions.
   * Moderator/admin only.
   *
   * Create a new moderation action record, specifying moderator identity,
   * target member (if applicable), affected post or comment, action_type,
   * action_reason, status, and optional decision narrative for audit and
   * appeals.
   *
   * Business logic includes validating moderator/admin identities, checking
   * target content/user existence, and linking with the appropriate report.
   * Schema-level and business constraints ensure only permitted action types
   * and status values. The created record is audit-trail critical and
   * foundational for further appeals or business review.
   *
   * Error handling covers invalid action types, missing references, and
   * non-permitted access.
   *
   * @param connection
   * @param body Data required to create a moderation action (actor, target,
   *   action_type, etc.).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedBody()
    body: IDiscussBoardModerationAction.ICreate,
  ): Promise<IDiscussBoardModerationAction> {
    try {
      return await post__discussBoard_administrator_moderationActions({
        administrator,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a paginated, filterable list of moderation actions
   * (moderator/admin only) from discuss_board_moderation_actions.
   *
   * Retrieve a filtered and paginated list of moderation actions taken across
   * the platform. This operation is intended for moderator and administrator
   * oversight, as business rules require all such actions to be reviewable for
   * audit and policy compliance.
   *
   * The operation uses the discuss_board_moderation_actions table from the
   * Prisma schema, enabling filtering on moderator identity, target user,
   * associated content, action type (e.g., remove_content, suspend_user, warn),
   * action status, and time window. Pagination and sorting are supported for
   * efficient operational use.
   *
   * Security is paramount: Only authenticated users with moderator or
   * administrator roles may access this endpoint. Audit trails and business
   * reporting are facilitated by this list, which may be cross-referenced with
   * appeals, reports, or user actions.
   *
   * This operation is related to /moderationActions/{moderationActionId}
   * (detail fetch), and write actions for moderation interventions. Error
   * handling includes appropriate messaging for unauthorized access or invalid
   * filter parameters.
   *
   * @param connection
   * @param body Filter, search, and pagination criteria for moderation action
   *   retrieval.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedBody()
    body: IDiscussBoardModerationAction.IRequest,
  ): Promise<IPageIDiscussBoardModerationAction.ISummary> {
    try {
      return await patch__discussBoard_administrator_moderationActions({
        administrator,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve details for a specific moderation action from
   * discuss_board_moderation_actions by moderationActionId.
   *
   * Retrieve all details for a specific moderation action, including moderator
   * identity, target member, affected post or comment, action type and reason,
   * status, associated appeal link (if any), and decision narrative.
   *
   * This endpoint provides granular access for privileged users to all recorded
   * audit details and is critical for transparency, compliance, and escalation
   * processes. Only moderators and administrators may use this endpoint, with
   * system-enforced access checks.
   *
   * Links other moderation, reporting, and appeals records for holistic
   * moderation review. Error handling includes 404 for non-existent IDs, and
   * 403 for insufficient permissions.
   *
   * @param connection
   * @param moderationActionId The unique identifier of the target moderation
   *   action.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":moderationActionId")
  public async at(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedParam("moderationActionId")
    moderationActionId: string & tags.Format<"uuid">,
  ): Promise<IDiscussBoardModerationAction> {
    try {
      return await get__discussBoard_administrator_moderationActions_$moderationActionId(
        {
          administrator,
          moderationActionId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing moderation action in discuss_board_moderation_actions.
   * Moderator/admin only.
   *
   * Update select fields on a given moderation action: decision_narrative,
   * status, action_reason, and possible appeal linkage. This is restricted to
   * authenticated moderators and administrators and may only be used when the
   * business workflow permits changes (for example, status transitions from
   * pending to completed, narrative clarifications, or appeal resolution
   * linkage).
   *
   * The operation will validate modification rights, audit all changes, and
   * preserve a record of updates for business review. Parent operations include
   * read and list endpoints. Errors include attempts to edit restricted fields
   * or insufficient permissions.
   *
   * @param connection
   * @param moderationActionId The unique identifier of the moderation action to
   *   update.
   * @param body Update information for the moderation action (status,
   *   narrative, appeal link, etc.).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":moderationActionId")
  public async update(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedParam("moderationActionId")
    moderationActionId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IDiscussBoardModerationAction.IUpdate,
  ): Promise<IDiscussBoardModerationAction> {
    try {
      return await put__discussBoard_administrator_moderationActions_$moderationActionId(
        {
          administrator,
          moderationActionId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently delete a moderation action record by ID from
   * discuss_board_moderation_actions. Admin only.
   *
   * Permanently remove a specific moderation action from the database. This
   * action cannot be undone and should only be used under explicit compliance
   * requirements or legal orders (e.g., GDPR right to erasure, audit retention
   * policies reached). No business-level soft delete field is defined for this
   * entity, so all associated references (audit logs, appeals, moderation logs,
   * etc.) must be handled appropriately. Use is strictly limited to
   * administrator role.
   *
   * Attempted use by moderators should result in a 403 error; non-existent IDs
   * return 404. Only administrators may perform this operation.
   *
   * @param connection
   * @param moderationActionId The unique identifier of the moderation action to
   *   delete.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":moderationActionId")
  public async erase(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedParam("moderationActionId")
    moderationActionId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__discussBoard_administrator_moderationActions_$moderationActionId(
        {
          administrator,
          moderationActionId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
