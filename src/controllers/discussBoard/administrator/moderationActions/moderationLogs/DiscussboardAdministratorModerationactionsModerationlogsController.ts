import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { post__discussBoard_administrator_moderationActions_$moderationActionId_moderationLogs } from "../../../../../providers/post__discussBoard_administrator_moderationActions_$moderationActionId_moderationLogs";
import { AdministratorAuth } from "../../../../../decorators/AdministratorAuth";
import { AdministratorPayload } from "../../../../../decorators/payload/AdministratorPayload";
import { patch__discussBoard_administrator_moderationActions_$moderationActionId_moderationLogs } from "../../../../../providers/patch__discussBoard_administrator_moderationActions_$moderationActionId_moderationLogs";
import { get__discussBoard_administrator_moderationActions_$moderationActionId_moderationLogs_$moderationLogId } from "../../../../../providers/get__discussBoard_administrator_moderationActions_$moderationActionId_moderationLogs_$moderationLogId";
import { put__discussBoard_administrator_moderationActions_$moderationActionId_moderationLogs_$moderationLogId } from "../../../../../providers/put__discussBoard_administrator_moderationActions_$moderationActionId_moderationLogs_$moderationLogId";
import { delete__discussBoard_administrator_moderationActions_$moderationActionId_moderationLogs_$moderationLogId } from "../../../../../providers/delete__discussBoard_administrator_moderationActions_$moderationActionId_moderationLogs_$moderationLogId";

import { IDiscussBoardModerationLogs } from "../../../../../api/structures/IDiscussBoardModerationLogs";
import { IPageIDiscussBoardModerationLogs } from "../../../../../api/structures/IPageIDiscussBoardModerationLogs";

@Controller(
  "/discussBoard/administrator/moderationActions/:moderationActionId/moderationLogs",
)
export class DiscussboardAdministratorModerationactionsModerationlogsController {
  /**
   * Create a new log record in the moderation workflow for a given moderation
   * action.
   *
   * Append a new event log to the workflow of a specific moderation action by
   * submitting structured event information. Moderation logs are critical for
   * workflow and compliance: they capture each event, status transition,
   * escalation, or rationale made during review and enforcement.
   *
   * Parameters are validated against business rules, including role
   * authorization—only users with moderation permissions (moderators and
   * administrators) are allowed to create logs via this endpoint. Every
   * addition is timestamped and captures reference pointers for audit or
   * downstream analytic processes.
   *
   * The response returns the full, newly created log entry with all supplied
   * and system-generated fields. Log creation is subject to policy review;
   * invalid workflows, missing fields, or unauthorized users are denied access
   * with explicit error codes.
   *
   * @param connection
   * @param moderationActionId ID of the moderation action to which the new log
   *   will be attached.
   * @param body Required fields for new moderation log: event_type,
   *   event_details, actor reference, and optional escalation meta.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedParam("moderationActionId")
    moderationActionId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IDiscussBoardModerationLogs.ICreate,
  ): Promise<IDiscussBoardModerationLogs> {
    try {
      return await post__discussBoard_administrator_moderationActions_$moderationActionId_moderationLogs(
        {
          administrator,
          moderationActionId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a paginated, filterable list of moderation logs for a specific
   * moderation action.
   *
   * Given a moderation action identifier (moderationActionId), return a
   * paginated and filterable list of moderation logs associated with that
   * action. Moderation logs are append-only records documenting business
   * events, status changes, escalation steps, workflow transitions, or decision
   * notes, referencing both the actor and the related action.
   *
   * This operation is primarily for administrators, compliance auditors, and
   * senior moderators to review the complete workflow history surrounding a
   * particular moderation outcome. The request body allows for advanced
   * filtering—such as event_type, event_details full-text, or created_at time
   * windows—and supports customizable pagination settings. The response returns
   * moderation log summaries with all relevant metadata to inform
   * investigations or support appeals processes.
   *
   * Sensitive log details are returned based on the requesting user's role
   * privileges. Unauthorized users are denied access with appropriate errors.
   *
   * @param connection
   * @param moderationActionId The unique identifier of the moderation action
   *   being queried.
   * @param body Advanced filter, search, and pagination criteria for retrieving
   *   moderation logs attached to a moderation action.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedParam("moderationActionId")
    moderationActionId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IDiscussBoardModerationLogs.IRequest,
  ): Promise<IPageIDiscussBoardModerationLogs.ISummary> {
    try {
      return await patch__discussBoard_administrator_moderationActions_$moderationActionId_moderationLogs(
        {
          administrator,
          moderationActionId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve the details of a specific moderation log entry for a moderation
   * action.
   *
   * Retrieve full detail of a single moderation log by specifying both the
   * parent moderation action (moderationActionId) and the target moderation log
   * record (moderationLogId). This record contains all essential information
   * documenting an audit event, escalation step, or decision change during
   * moderation of content or user accounts.
   *
   * Access is restricted to users with appropriate moderation privileges.
   * Returned fields include actors, event_type, event_details, and timestamps.
   * This operation is critical for reconstructing histories and investigating
   * workflow correctness in disciplinary reviews or user appeals.
   *
   * @param connection
   * @param moderationActionId ID of the moderation action to which the log is
   *   attached.
   * @param moderationLogId ID of the moderation log record to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":moderationLogId")
  public async at(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedParam("moderationActionId")
    moderationActionId: string & tags.Format<"uuid">,
    @TypedParam("moderationLogId")
    moderationLogId: string & tags.Format<"uuid">,
  ): Promise<IDiscussBoardModerationLogs> {
    try {
      return await get__discussBoard_administrator_moderationActions_$moderationActionId_moderationLogs_$moderationLogId(
        {
          administrator,
          moderationActionId,
          moderationLogId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing moderation log record in the moderation workflow for an
   * action.
   *
   * Modify a point-in-time moderation log event record by specifying both the
   * unique moderation action and the target moderation log. Fields updatable
   * include event_details, escalation information, or status narrative—core to
   * providing more comprehensive workflow visibility and correcting prior
   * entries.
   *
   * Each update triggers a version increment and audit event to ensure business
   * controls are enforced and reviewers can retrace decisionmaking. The
   * operation is limited to privileged moderators and administrators. Invalid
   * update attempts (e.g., by non-authorized users or edits to logs outside the
   * workflow update window) are denied with detailed errors.
   *
   * @param connection
   * @param moderationActionId ID of the moderation action related to this log
   *   record.
   * @param moderationLogId ID of the moderation log record to update.
   * @param body Mutable fields for an update to a moderation log, such as
   *   event_details or escalation info.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":moderationLogId")
  public async update(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedParam("moderationActionId")
    moderationActionId: string & tags.Format<"uuid">,
    @TypedParam("moderationLogId")
    moderationLogId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IDiscussBoardModerationLogs.IUpdate,
  ): Promise<IDiscussBoardModerationLogs> {
    try {
      return await put__discussBoard_administrator_moderationActions_$moderationActionId_moderationLogs_$moderationLogId(
        {
          administrator,
          moderationActionId,
          moderationLogId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently remove a moderation log record from a moderation action's
   * workflow by ID.
   *
   * Erase (delete) a single moderation log record from a moderation workflow by
   * specifying both moderationActionId and moderationLogId. Erasure may only be
   * performed by an administrator, and the system checks whether the target log
   * is eligible for deletion (such as not being referenced by open appeals or
   * under legal hold).
   *
   * If the deletion is valid, it is recorded in the system audit trail, and the
   * underlying log record is removed from primary query scope. Attempted
   * deletions that fail validation produce appropriate error codes, and no
   * records are lost or altered unless business and compliance rules are
   * satisfied.
   *
   * @param connection
   * @param moderationActionId ID of the moderation action related to this log
   *   record.
   * @param moderationLogId ID of the moderation log record being erased.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":moderationLogId")
  public async erase(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedParam("moderationActionId")
    moderationActionId: string & tags.Format<"uuid">,
    @TypedParam("moderationLogId")
    moderationLogId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__discussBoard_administrator_moderationActions_$moderationActionId_moderationLogs_$moderationLogId(
        {
          administrator,
          moderationActionId,
          moderationLogId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
