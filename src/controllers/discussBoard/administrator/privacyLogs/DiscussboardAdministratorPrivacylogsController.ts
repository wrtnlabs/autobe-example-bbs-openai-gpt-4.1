import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patch__discussBoard_administrator_privacyLogs } from "../../../../providers/patch__discussBoard_administrator_privacyLogs";
import { AdministratorAuth } from "../../../../decorators/AdministratorAuth";
import { AdministratorPayload } from "../../../../decorators/payload/AdministratorPayload";
import { get__discussBoard_administrator_privacyLogs_$privacyLogId } from "../../../../providers/get__discussBoard_administrator_privacyLogs_$privacyLogId";

import { IPageIDiscussBoardPrivacyLogs } from "../../../../api/structures/IPageIDiscussBoardPrivacyLogs";
import { IDiscussBoardPrivacyLogs } from "../../../../api/structures/IDiscussBoardPrivacyLogs";

@Controller("/discussBoard/administrator/privacyLogs")
export class DiscussboardAdministratorPrivacylogsController {
  /**
   * Retrieve a paginated and filterable set of privacy action logs.
   *
   * Retrieve a paginated, filterable list of privacy logs documenting all
   * privacy-relevant actions on user data, such as exports, deletions, consent
   * changes, or policy modifications. Each log entry in the
   * discuss_board_privacy_logs table contains identifiers for the
   * actor/subject, type of action performed, and the associated result status.
   * This operation supports audit processes and regular compliance checks.
   *
   * Filters may include actor_user_account_id, data_subject_user_account_id,
   * action_type, result_status, and timestamp ranges. Due to the sensitivity of
   * privacy logs, only administrators may use this endpoint. Related operations
   * include fetching individual log details and searching by user or event
   * type.
   *
   * Proper error messages are returned when filters are invalid or no logs
   * match the given criteria.
   *
   * @param connection
   * @param body Filter and pagination data for searching privacy logs.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedBody()
    body: IDiscussBoardPrivacyLogs.IRequest,
  ): Promise<IPageIDiscussBoardPrivacyLogs> {
    try {
      return await patch__discussBoard_administrator_privacyLogs({
        administrator,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Fetch details of a specific privacy log entry by ID.
   *
   * Fetch the complete details for a single privacy log entry covering a
   * sensitive user data operation, identified by privacyLogId. The record
   * contains the acting user's ID and the data subject's ID (if applicable),
   * the type of operation (access, export, delete, policy change), the business
   * reason or outcome, and the exact timestamp of the event.
   *
   * Access is strictly limited to administrator users due to legal risk and
   * privacy obligations. Errors are returned if the requested log entry does
   * not exist or access is denied. This API is typically used for internal
   * audit, compliance checks, and incident investigation workflows.
   *
   * This operation complements the list/search of privacy logs and may be
   * referenced in compliance reports or external audits.
   *
   * @param connection
   * @param privacyLogId Unique identifier of the privacy log entry to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":privacyLogId")
  public async at(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedParam("privacyLogId")
    privacyLogId: string & tags.Format<"uuid">,
  ): Promise<IDiscussBoardPrivacyLogs> {
    try {
      return await get__discussBoard_administrator_privacyLogs_$privacyLogId({
        administrator,
        privacyLogId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
