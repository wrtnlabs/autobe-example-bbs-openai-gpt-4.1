import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { get__discussBoard_administrator_members_$memberId_notificationPreferences } from "../../../../../providers/get__discussBoard_administrator_members_$memberId_notificationPreferences";
import { AdministratorAuth } from "../../../../../decorators/AdministratorAuth";
import { AdministratorPayload } from "../../../../../decorators/payload/AdministratorPayload";
import { put__discussBoard_administrator_members_$memberId_notificationPreferences } from "../../../../../providers/put__discussBoard_administrator_members_$memberId_notificationPreferences";

import { IDiscussBoardUserNotificationPreference } from "../../../../../api/structures/IDiscussBoardUserNotificationPreference";

@Controller(
  "/discussBoard/administrator/members/:memberId/notificationPreferences",
)
export class DiscussboardAdministratorMembersNotificationpreferencesController {
  /**
   * Retrieve notification channel settings for a given member
   * (discuss_board_user_notification_preferences table).
   *
   * Fetches and returns all current notification channel preferences for the
   * given member, including email, sms, push, and newsletter options. Uses the
   * discuss_board_user_notification_preferences table with filtering via
   * memberId path parameter.
   *
   * Enforces strict access: only the member (profile owner) or administrators
   * may view/set preferences, with application logic checking that the
   * requesting user matches or possesses administrator privileges. This data is
   * privacy-sensitive but not generally exposed publically; it primarily
   * supports user management and notification delivery workflows.
   *
   * Modifying these preferences is performed by a related PUT endpoint.
   * Preference settings affect all subsequent notification workflows across the
   * system, including mailing and messaging backend integrations.
   *
   * @param connection
   * @param memberId Unique identifier of the target member whose preferences
   *   are being retrieved.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get()
  public async at(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedParam("memberId")
    memberId: string & tags.Format<"uuid">,
  ): Promise<IDiscussBoardUserNotificationPreference> {
    try {
      return await get__discussBoard_administrator_members_$memberId_notificationPreferences(
        {
          administrator,
          memberId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update notification settings for a member account
   * (discuss_board_user_notification_preferences table).
   *
   * Applies changes to a member's notification delivery preferences, taking new
   * configuration from the request body and applying them to the specified
   * member by memberId. Only the member themself or administrators may alter
   * these settings, and all inputs are validated for proper boolean semantics.
   *
   * This operation updates the discuss_board_user_notification_preferences
   * table using validated payloads
   * (IDiscussBoardUserNotificationPreference.IUpdate), changing whether email,
   * sms, push notifications or newsletters are enabled for the user. The
   * updated_at timestamp is refreshed, and an audit log is created for
   * record-keeping.
   *
   * Tied to notification workflow and system compliance; frequent adjunct to
   * self-service account configuration UI.
   *
   * @param connection
   * @param memberId Unique identifier of the member whose notification
   *   preferences are being updated.
   * @param body Updated notification settings for the target member.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put()
  public async update(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedParam("memberId")
    memberId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IDiscussBoardUserNotificationPreference.IUpdate,
  ): Promise<IDiscussBoardUserNotificationPreference> {
    try {
      return await put__discussBoard_administrator_members_$memberId_notificationPreferences(
        {
          administrator,
          memberId,
          body,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
