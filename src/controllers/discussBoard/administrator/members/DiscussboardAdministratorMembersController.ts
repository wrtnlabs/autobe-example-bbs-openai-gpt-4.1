import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { post__discussBoard_administrator_members } from "../../../../providers/post__discussBoard_administrator_members";
import { AdministratorAuth } from "../../../../decorators/AdministratorAuth";
import { AdministratorPayload } from "../../../../decorators/payload/AdministratorPayload";
import { patch__discussBoard_administrator_members } from "../../../../providers/patch__discussBoard_administrator_members";
import { get__discussBoard_administrator_members_$memberId } from "../../../../providers/get__discussBoard_administrator_members_$memberId";
import { put__discussBoard_administrator_members_$memberId } from "../../../../providers/put__discussBoard_administrator_members_$memberId";
import { delete__discussBoard_administrator_members_$memberId } from "../../../../providers/delete__discussBoard_administrator_members_$memberId";

import { IDiscussBoardMembers } from "../../../../api/structures/IDiscussBoardMembers";
import { IPageIDiscussBoardMembers } from "../../../../api/structures/IPageIDiscussBoardMembers";

@Controller("/discussBoard/administrator/members")
export class DiscussboardAdministratorMembersController {
  /**
   * Create a new member by administrator action.
   *
   * Create a new member record in the discuss_board_members table by providing
   * necessary account and membership data, including a unique user_account_id,
   * nickname, and initial status (such as 'active'). On successful creation,
   * the details of the created member are returned. This API is used by
   * administrators for onboarding, migration, or manual intervention.
   *
   * Strict validation is performed on uniqueness of nickname/user account
   * linkages and business status. Only administrators may access this endpoint,
   * reflecting its privileged nature. Related APIs support member listing,
   * detail view, and profile updates.
   *
   * @param connection
   * @param body Member creation data, including user account and initial
   *   status.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Post()
  public async create(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedBody()
    body: IDiscussBoardMembers.ICreate,
  ): Promise<IDiscussBoardMembers> {
    try {
      return await post__discussBoard_administrator_members({
        administrator,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * List and search discussion board members with filtering and pagination.
   *
   * Fetch a paginated list of member accounts from the discuss_board_members
   * table, allowing advanced search and filtering options. Administrators may
   * filter by account status (active, suspended, banned, etc.), nickname, or
   * date range. Pagination makes the endpoint performant when reviewing large
   * membership bases.
   *
   * The endpoint is designed to make it easy for administrators to locate
   * specific users, audit system membership, or support moderation actions.
   * Related APIs include member detail retrieval, creation, and updates. Only
   * administrator users may access this data, in alignment with audit and
   * privacy requirements.
   *
   * @param connection
   * @param body Search and pagination criteria for filtering member accounts.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedBody()
    body: IDiscussBoardMembers.IRequest,
  ): Promise<IPageIDiscussBoardMembers> {
    try {
      return await patch__discussBoard_administrator_members({
        administrator,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve full details of a specific member account by ID.
   *
   * Fetch the detailed profile and account status for a specific member using
   * their memberId. Information includes the member's public nickname,
   * associated user account, current status, creation/update dates, and
   * possible links to moderator or administrator roles.
   *
   * This endpoint aids administrators in managing accounts, viewing user
   * history, and evaluating members for escalation or moderation. If the
   * specified member does not exist, a clear error is returned. Related APIs
   * include member search/listing, creation, and update endpoints.
   *
   * Access is restricted to users with administrator privileges due to account
   * data sensitivity.
   *
   * @param connection
   * @param memberId Unique identifier of the member to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":memberId")
  public async at(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedParam("memberId")
    memberId: string & tags.Format<"uuid">,
  ): Promise<IDiscussBoardMembers> {
    try {
      return await get__discussBoard_administrator_members_$memberId({
        administrator,
        memberId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update details of an existing member by administrator action.
   *
   * Update the specified member's account attributes, such as status or
   * nickname, using their memberId as the target. This operation enforces all
   * business rules, including validation of new nicknames, status updates
   * (active, suspended, banned), and links to user accounts as appropriate. On
   * completion, the entire updated member record is returned for confirmation.
   *
   * Only administrators may execute this operation due to potential impact on
   * account and system integrity. Related endpoints include member creation,
   * retrieval, and search. Errors may occur if the update yields duplicates or
   * violates rules enforced in the schema or business logic.
   *
   * @param connection
   * @param memberId Unique identifier of the member to update.
   * @param body Updatable fields for the target member, such as status or
   *   nickname.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":memberId")
  public async update(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedParam("memberId")
    memberId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IDiscussBoardMembers.IUpdate,
  ): Promise<IDiscussBoardMembers> {
    try {
      return await put__discussBoard_administrator_members_$memberId({
        administrator,
        memberId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Permanently removes (soft-deletes) a member account from the system
   * (discuss_board_members table).
   *
   * This endpoint enables administrators to erase a specific member account by
   * its unique member ID from the discuss_board_members table.
   *
   * The operation enforces strict access control, allowing only administrators
   * to perform member deletions, to prevent abuse or accidental account
   * removals. It integrates with audit and compliance requirements set by
   * platform policies: member removal triggers logs and may cascade to
   * associated content for further workflow processing, such as soft-deletion
   * of posts/comments or anonymization.
   *
   * When executed, the deleted_at field of the corresponding member row is set,
   * which signals a soft deletion for compliance and retention purposes. This
   * operation cannot be recovered except via special administrative tools.
   *
   * Related APIs include member detail retrieval, profile history, and
   * audit/history review, which may be useful for post-deletion inspection or
   * dispute resolution.
   *
   * @param connection
   * @param memberId Unique identifier of the member to be deleted.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Delete(":memberId")
  public async erase(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedParam("memberId")
    memberId: string & tags.Format<"uuid">,
  ): Promise<void> {
    try {
      return await delete__discussBoard_administrator_members_$memberId({
        administrator,
        memberId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
