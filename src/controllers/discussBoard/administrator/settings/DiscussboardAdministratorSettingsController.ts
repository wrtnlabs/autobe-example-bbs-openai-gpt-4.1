import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { get__discussBoard_administrator_settings_$id } from "../../../../providers/get__discussBoard_administrator_settings_$id";
import { AdministratorAuth } from "../../../../decorators/AdministratorAuth";
import { AdministratorPayload } from "../../../../decorators/payload/AdministratorPayload";
import { put__discussBoard_administrator_settings_$id } from "../../../../providers/put__discussBoard_administrator_settings_$id";
import { patch__discussBoard_administrator_settings } from "../../../../providers/patch__discussBoard_administrator_settings";

import { IDiscussBoardSettings } from "../../../../api/structures/IDiscussBoardSettings";
import { IPageIDiscussBoardSettings } from "../../../../api/structures/IPageIDiscussBoardSettings";

@Controller("/discussBoard/administrator/settings")
export class DiscussboardAdministratorSettingsController {
  /**
   * Get detail of a discussBoard platform setting (discuss_board_settings
   * table).
   *
   * Retrieves full details for a specific discussBoard global system
   * configuration, identified by its unique UUID as the primary key in the
   * discuss_board_settings table.
   *
   * Administrators may use this endpoint for audit, system diagnosis, or review
   * of changes to platform-wide settings. As system settings are sensitive,
   * this operation must enforce strict access controls and auditing.
   *
   * Error scenarios include not-found for invalid ID or permission denied for
   * insufficient privileges. This is closely related to configuration update
   * endpoints and typically used in platform management interfaces.
   *
   * @param connection
   * @param id UUID of the discussBoard settings record to retrieve
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":id")
  public async at(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
  ): Promise<IDiscussBoardSettings> {
    try {
      return await get__discussBoard_administrator_settings_$id({
        administrator,
        id,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Update an existing discussBoard system settings record
   * (discuss_board_settings table).
   *
   * Overwrites and updates a discussBoard platform system settings record.
   * Requires passing the full edit payload—typically configuration JSON and
   * updated timestamps—targeting the row identified by its UUID key. Only
   * administrators may perform this operation and all updates should trigger
   * audit logs for compliance.
   *
   * The operation will validate update payloads for required fields and
   * semantics. Rollback or archival of previous configuration is handled by
   * business logic outside this endpoint. Error responses include not-found,
   * invalid payload, or permission denied.
   *
   * @param connection
   * @param id UUID of the system configuration record to update
   * @param body Updated configuration object for the settings record
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Put(":id")
  public async update(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedParam("id")
    id: string & tags.Format<"uuid">,
    @TypedBody()
    body: IDiscussBoardSettings.IUpdate,
  ): Promise<IDiscussBoardSettings> {
    try {
      return await put__discussBoard_administrator_settings_$id({
        administrator,
        id,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Search and paginate discussBoard system settings (discuss_board_settings
   * table).
   *
   * Returns a paginated, filterable, and sortable collection of discussBoard
   * system-wide settings from the discuss_board_settings Prisma table.
   *
   * This endpoint enables privileged users (administrators) to search for and
   * view historical or current platform configuration records. A single
   * instance typically exists for global settings, but this endpoint allows for
   * operational flexibility and audit scenarios where multiple records,
   * rollbacks, or migrations may be tracked.
   *
   * Security-sensitive: Only administrators can access this information.
   * Supports standard pagination and filtering by created_at and other fields,
   * returning JSON blobs of configuration data used by the backend. This
   * endpoint may be used in conjunction with configuration update or
   * detail-retrieval endpoints.
   *
   * @param connection
   * @param body Filtering, search, and pagination options for system
   *   configuration records
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedBody()
    body: IDiscussBoardSettings.IRequest,
  ): Promise<IPageIDiscussBoardSettings> {
    try {
      return await patch__discussBoard_administrator_settings({
        administrator,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
