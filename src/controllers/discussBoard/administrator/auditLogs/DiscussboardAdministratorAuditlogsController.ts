import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patch__discussBoard_administrator_auditLogs } from "../../../../providers/patch__discussBoard_administrator_auditLogs";
import { AdministratorAuth } from "../../../../decorators/AdministratorAuth";
import { AdministratorPayload } from "../../../../decorators/payload/AdministratorPayload";
import { get__discussBoard_administrator_auditLogs_$auditLogId } from "../../../../providers/get__discussBoard_administrator_auditLogs_$auditLogId";

import { IPageIDiscussBoardGlobalAuditLog } from "../../../../api/structures/IPageIDiscussBoardGlobalAuditLog";
import { IDiscussBoardGlobalAuditLog } from "../../../../api/structures/IDiscussBoardGlobalAuditLog";

@Controller("/discussBoard/administrator/auditLogs")
export class DiscussboardAdministratorAuditlogsController {
  /**
   * Search and paginate global audit logs (discuss_board_global_audit_logs).
   *
   * This operation enables administrators to query, search, and page through
   * audit trail entries from the discuss_board_global_audit_logs table.
   * Supported filters in the request body cover actor type (e.g., member,
   * moderator, admin), actor ID, action category (such as post_edit,
   * user_login, moderation_action), date intervals, target table/entity types,
   * target IDs, and free-text descriptions.
   *
   * Audit logs document major system and business events in detail, recording
   * actor, target, event category, custom event payloads (where available), and
   * brief descriptions. This endpoint is critical for regulatory compliance,
   * forensic investigations, review of high-impact changes, and ongoing system
   * integrity checks.
   *
   * Pagination, sorting, and complex search criteria are supported via the
   * request body. Due to the sensitive nature of actions recorded, only
   * administrators can execute this operation. Other endpoints provide detail
   * retrieval for a specific audit log entry.
   *
   * @param connection
   * @param body Search and filtering criteria for global audit logs, supporting
   *   pagination, range, and free-text filtering.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedBody()
    body: IDiscussBoardGlobalAuditLog.IRequest,
  ): Promise<IPageIDiscussBoardGlobalAuditLog> {
    try {
      return await patch__discussBoard_administrator_auditLogs({
        administrator,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a specific global audit log (discuss_board_global_audit_logs) by
   * ID.
   *
   * This operation fetches a single global audit log entry from the
   * discuss_board_global_audit_logs table, identified by its unique ID. Only
   * administrators have access rights, as audit logs can contain sensitive and
   * PII data about platform operations, user actions, moderation, and system
   * configuration.
   *
   * The full audit log includes actor information, action category, event
   * descriptions, target object references, and, where available, contextual
   * event payloads for in-depth review. This endpoint supports compliance,
   * forensic audit, and tracking of critical business rules or incident
   * analysis, in alignment with platform and external regulatory expectations.
   *
   * Related listing/search APIs enable large-scale investigation, while this
   * endpoint focuses on deep dive for individual audit log items.
   *
   * @param connection
   * @param auditLogId Unique identifier for the global audit log event to
   *   retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":auditLogId")
  public async at(
    @AdministratorAuth()
    administrator: AdministratorPayload,
    @TypedParam("auditLogId")
    auditLogId: string & tags.Format<"uuid">,
  ): Promise<IDiscussBoardGlobalAuditLog> {
    try {
      return await get__discussBoard_administrator_auditLogs_$auditLogId({
        administrator,
        auditLogId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
