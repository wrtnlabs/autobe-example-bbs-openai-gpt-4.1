import { Controller } from "@nestjs/common";
import { TypedRoute, TypedBody, TypedParam } from "@nestia/core";
import typia, { tags } from "typia";
import { patch__discussBoard_posts } from "../../../providers/patch__discussBoard_posts";
import { get__discussBoard_posts_$postId } from "../../../providers/get__discussBoard_posts_$postId";

import { IPageIDiscussBoardPost } from "../../../api/structures/IPageIDiscussBoardPost";
import { IDiscussBoardPost } from "../../../api/structures/IDiscussBoardPost";

@Controller("/discussBoard/posts")
export class DiscussboardPostsController {
  /**
   * Search, filter, and paginate discuss_board_posts for browsing and
   * discovery.
   *
   * Any platform user or guest can use this endpoint to browse, filter, and
   * search for posts. The discuss_board_posts table stores all discussion board
   * topics, linking author, title, body, status, and full moderation workflow
   * fields.
   *
   * Supported filters include authorId, status (e.g., public, limited, locked),
   * tagId, keyword search in title and body, creation/update date ranges, and
   * sorting by recency or popularity. The operation returns a paginated result
   * set of post summaries for efficient navigation.
   *
   * Access control is open: all roles can browse public posts, while
   * limited/locked/private content appears only for users with sufficient
   * permissions (filtered by business logic). This endpoint supplies feed and
   * search UI, audit dashboards, and developer integrations with consistent
   * metadata.
   *
   * An expressive request body supports multi-filter queries, pagination
   * limits/page numbers, and sort order. Error responses are triggered for
   * illegal filter values, overly broad queries, or backend/database issues.
   * Other endpoints are available to retrieve single post details, create new
   * posts, or edit/delete existing posts.
   *
   * @param connection
   * @param body Search/filter, sort, and pagination parameters for posts feed.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @TypedBody()
    body: IDiscussBoardPost.IRequest,
  ): Promise<IPageIDiscussBoardPost.ISummary> {
    try {
      return await patch__discussBoard_posts({
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve a single discuss_board_posts entry by postId.
   *
   * All users can request a single post by its postId using this endpoint. The
   * discuss_board_posts table links each post to an author, contains title and
   * body, status for visibility, and supports full workflow/browsing logic.
   *
   * The endpoint validates the input postId, ensures the referenced post is not
   * soft-deleted unless caller privileges allow access, and returns the full
   * entity. Additional control logic ensures limited/private/locked posts are
   * only displayed as per business rules and user role permissions.
   *
   * On success, the full post record (detailed DTO) is returned with all
   * available metadata for display or additional queries (e.g., comments,
   * reactions). 404 errors are returned if postId is invalid or inaccessible
   * given user role.
   *
   * This endpoint is intended for primary UI content views, audit, and
   * onboarding flows.
   *
   * @param connection
   * @param postId Unique identifier for the desired post (UUID).
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":postId")
  public async at(
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
  ): Promise<IDiscussBoardPost> {
    try {
      return await get__discussBoard_posts_$postId({
        postId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
