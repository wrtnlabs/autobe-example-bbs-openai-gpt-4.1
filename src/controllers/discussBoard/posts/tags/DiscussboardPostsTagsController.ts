import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patch__discussBoard_posts_$postId_tags } from "../../../../providers/patch__discussBoard_posts_$postId_tags";
import { get__discussBoard_posts_$postId_tags_$tagId } from "../../../../providers/get__discussBoard_posts_$postId_tags_$tagId";

import { IPageIDiscussBoardPostTag } from "../../../../api/structures/IPageIDiscussBoardPostTag";
import { IDiscussBoardPostTag } from "../../../../api/structures/IDiscussBoardPostTag";

@Controller("/discussBoard/posts/:postId/tags")
export class DiscussboardPostsTagsController {
  /**
   * List tags assigned to a specific discussBoard post, with search and
   * pagination.
   *
   * This endpoint allows a client to search the tags attached to a single post,
   * enabling filtering by tag attributes (such as name, ID, date assigned) and
   * paginating through large sets of tags. Available to all users, including
   * guests, this operation provides search flexibility for presentation in post
   * detail or tag management screens.
   *
   * The operation is linked by the postId path parameter. Search, sort, and
   * filter options should be encapsulated in the request body, such as
   * filtering by tag name or assignment date. Business logic includes
   * guest/member role parity for viewing assigned tags but editing requires
   * authentication.
   *
   * Pagination and result summary are included in the response body,
   * encapsulated in the DTO type for tag summaries.
   *
   * @param connection
   * @param postId The unique identifier of the post whose tags are being
   *   listed.
   * @param body Search/filter and pagination parameters for post's assigned
   *   tags.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IDiscussBoardPostTag.IRequest,
  ): Promise<IPageIDiscussBoardPostTag.ISummary> {
    try {
      return await patch__discussBoard_posts_$postId_tags({
        postId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get a specific tag assignment detail for a given discussBoard post.
   *
   * By specifying both the postId and tagId path parameters, this endpoint
   * returns the details of a single tag assignment for a post. This includes
   * the tag's unique identifier, the association (post-tag pair), assigned
   * date, and metadata. Guests can freely query tag details for public posts
   * and tags, while editing/removal requires proper authorization.
   *
   * Business logic ensures that if the tag is not actually associated with the
   * given post, a not-found/error response is returned. The operation ties
   * directly to the discuss_board_post_tags table, and only exposes
   * non-sensitive tag information to public queries.
   *
   * @param connection
   * @param postId The unique identifier of the post whose tag is being
   *   retrieved.
   * @param tagId The unique identifier of the tag on the given post.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":tagId")
  public async at(
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedParam("tagId")
    tagId: string & tags.Format<"uuid">,
  ): Promise<IDiscussBoardPostTag> {
    try {
      return await get__discussBoard_posts_$postId_tags_$tagId({
        postId,
        tagId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
