import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patch__discussBoard_posts_$postId_comments } from "../../../../providers/patch__discussBoard_posts_$postId_comments";
import { get__discussBoard_posts_$postId_comments_$commentId } from "../../../../providers/get__discussBoard_posts_$postId_comments_$commentId";

import { IPageIDiscussBoardComment } from "../../../../api/structures/IPageIDiscussBoardComment";
import { IDiscussBoardComment } from "../../../../api/structures/IDiscussBoardComment";

@Controller("/discussBoard/posts/:postId/comments")
export class DiscussboardPostsCommentsController {
  /**
   * Search and paginate comments for a given post (discuss_board_comments).
   *
   * This operation retrieves a filtered, paginated collection of comments for a
   * specific post identified by its UUID. It is built on the
   * discuss_board_comments schema, enabling comprehensive filtering by author,
   * content, creation date, depth, and comment status. The operation is
   * optimized for scenarios where posts have extensive comments and nested
   * replies, supporting deep-dive discussion threads typical of political or
   * economic debate platforms.
   *
   * The API respects soft-deleted comments, locking flags, and depth limits to
   * prevent over-nesting. Security checks ensure users can only view comments
   * visible according to their role and the business status of the associated
   * post and comment. Moderators and administrators may filter on additional
   * fields (e.g., including deleted, under_review) when performing audits or
   * content reviews. Pagination parameters and search filters are specified in
   * the request body object, with robust full-text and status-based search for
   * moderation and UI needs.
   *
   * Related endpoints include comment detail retrieval, comment creation, and
   * comment/thread moderation in ways that prioritize data integrity and
   * compliance with platform discussion policy.
   *
   * @param connection
   * @param postId Unique identifier for the post whose comments are being
   *   listed (UUID format).
   * @param body Filter/search parameters and pagination instructions for
   *   comment listing.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IDiscussBoardComment.IRequest,
  ): Promise<IPageIDiscussBoardComment> {
    try {
      return await patch__discussBoard_posts_$postId_comments({
        postId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Retrieve detailed information for a specific comment
   * (discuss_board_comments).
   *
   * This operation fetches the full details of a single comment under a
   * specific post. It leverages the discuss_board_comments Prisma DB schema to
   * provide content, author, business status, nesting depth, timestamps, and
   * lock/moderation status. Uses both postId and commentId (UUIDs) for precise
   * identification, matching only comments belonging to the specified post.
   *
   * Access is controlled based on comment status and user role. Soft-deleted,
   * locked, or under-review comments are handled per policy: guests may only
   * see public, active comments, while members, moderators, and administrators
   * may access additional statuses as their roles permit. The operation is
   * critical for displaying comment contents, contextual details in discussion
   * threads, or preparing UI for edit/delete requests.
   *
   * This endpoint is best used in conjunction with comment list, edit, delete,
   * or reply actions.
   *
   * @param connection
   * @param postId UUID of the post containing the comment.
   * @param commentId UUID of the comment to retrieve.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":commentId")
  public async at(
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedParam("commentId")
    commentId: string & tags.Format<"uuid">,
  ): Promise<IDiscussBoardComment> {
    try {
      return await get__discussBoard_posts_$postId_comments_$commentId({
        postId,
        commentId,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
