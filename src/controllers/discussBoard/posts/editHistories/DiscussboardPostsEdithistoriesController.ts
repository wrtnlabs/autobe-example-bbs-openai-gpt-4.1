import { Controller } from "@nestjs/common";
import { TypedRoute, TypedParam, TypedBody } from "@nestia/core";
import typia, { tags } from "typia";
import { patch__discussBoard_posts_$postId_editHistories } from "../../../../providers/patch__discussBoard_posts_$postId_editHistories";
import { get__discussBoard_posts_$postId_editHistories_$editHistoryId } from "../../../../providers/get__discussBoard_posts_$postId_editHistories_$editHistoryId";

import { IPageIDiscussBoardPostEditHistory } from "../../../../api/structures/IPageIDiscussBoardPostEditHistory";
import { IDiscussBoardPostEditHistory } from "../../../../api/structures/IDiscussBoardPostEditHistory";

@Controller("/discussBoard/posts/:postId/editHistories")
export class DiscussboardPostsEdithistoriesController {
  /**
   * List edit history entries for a given discussBoard post (with
   * search/pagination).
   *
   * Clients can fetch the full audit trail of edits made to a post, including
   * previous versions of the title and body, edit timestamps, and optional edit
   * reasons. This is useful for transparency, UI display of edit logs, and
   * compliance.
   *
   * The query supports pagination, advanced filtering (e.g., by editor, edit
   * timestamp), and allows the frontend to present edit histories in a
   * user-friendly way. Business logic ensures no confidential data is exposed
   * and result format is suitable for both members and guests.
   *
   * @param connection
   * @param postId The unique identifier of the post for which edit histories
   *   are listed.
   * @param body Search, filtering, and pagination options for post edit history
   *   entries.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Patch()
  public async index(
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedBody()
    body: IDiscussBoardPostEditHistory.IRequest,
  ): Promise<IPageIDiscussBoardPostEditHistory.ISummary> {
    try {
      return await patch__discussBoard_posts_$postId_editHistories({
        postId,
        body,
      });
    } catch (error) {
      console.log(error);
      throw error;
    }
  }

  /**
   * Get details for a single edit history entry by postId and editHistoryId.
   *
   * This endpoint allows retrieval of a single edit history record for a post,
   * as identified by the postId and editHistoryId path parameters. The result
   * includes prior title/body, editor information, edit timestamp, and optional
   * edit reason/note. The edit history is critical for both user UI (change
   * diffing) and compliance.
   *
   * If the edit history entry is missing or not actually associated with the
   * given post, the operation returns an error/not found. Data returned is safe
   * for public viewingâ€”access to rollback or undo is not provided here.
   *
   * @param connection
   * @param postId The unique identifier of the post whose edit history is being
   *   queried.
   * @param editHistoryId The unique identifier of the edit history entry.
   * @nestia Generated by Nestia - https://github.com/samchon/nestia
   */
  @TypedRoute.Get(":editHistoryId")
  public async at(
    @TypedParam("postId")
    postId: string & tags.Format<"uuid">,
    @TypedParam("editHistoryId")
    editHistoryId: string & tags.Format<"uuid">,
  ): Promise<IDiscussBoardPostEditHistory> {
    try {
      return await get__discussBoard_posts_$postId_editHistories_$editHistoryId(
        {
          postId,
          editHistoryId,
        },
      );
    } catch (error) {
      console.log(error);
      throw error;
    }
  }
}
