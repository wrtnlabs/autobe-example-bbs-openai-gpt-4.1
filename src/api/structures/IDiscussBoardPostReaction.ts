import { tags } from "typia";

/**
 * Represents a single like/dislike reaction on a post, including who submitted
 * it, to which post, when, and status. Primary record for reaction analytics,
 * moderation, audit, and forensic review. Supports toggling, soft-deletion, and
 * full lifecycle tracking.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussBoardPostReaction = {
  /**
   * Primary key for the post reaction record. Uniquely identifies this
   * reaction entry in the audit system.
   */
  id: string & tags.Format<"uuid">;

  /**
   * UUID of the member who performed the reaction. Foreign key to
   * discuss_board_members.id.
   */
  discuss_board_member_id: string & tags.Format<"uuid">;

  /**
   * UUID of the post the reaction is tied to. Foreign key to
   * discuss_board_posts.id.
   */
  discuss_board_post_id: string & tags.Format<"uuid">;

  /** Type of reaction. Either 'like' or 'dislike'. */
  reaction_type: "like" | "dislike";

  /** UTC timestamp of when the reaction was created. RFC3339 format. */
  created_at: string & tags.Format<"date-time">;

  /**
   * UTC timestamp of when the reaction was last updated (toggled, restored,
   * or aggregated).
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * When the reaction was soft-deleted, if applicable. Used for audit and
   * compliance. Nullable.
   */
  deleted_at?: (string & tags.Format<"date-time">) | undefined;
};
export namespace IDiscussBoardPostReaction {
  /**
   * Request payload for paginated and filtered listing of post reaction
   * events (likes/dislikes) tied to posts. Supports typical analytics and
   * moderation audit use cases.
   */
  export type IRequest = {
    /** Page number for paginated results. Optional; defaults to first page. */
    page?: (number & tags.Type<"int32">) | undefined;

    /** Number of records per page (pagination limit). Optional. */
    limit?: (number & tags.Type<"int32">) | undefined;

    /** Filter: UUID of the reacting member. */
    discuss_board_member_id?: (string & tags.Format<"uuid">) | undefined;

    /** Filter: UUID of the target post which received the reaction. */
    discuss_board_post_id?: (string & tags.Format<"uuid">) | undefined;

    /** Type of reaction. Must be either 'like' or 'dislike'. */
    reaction_type?: "like" | "dislike" | undefined;

    /**
     * Filtering window: only reactions created after this RFC3339
     * timestamp.
     */
    created_at_from?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Filtering window: only reactions created before this RFC3339
     * timestamp.
     */
    created_at_to?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Filtering window: only reactions updated after this RFC3339
     * timestamp.
     */
    updated_at_from?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Filtering window: only reactions updated before this RFC3339
     * timestamp.
     */
    updated_at_to?: (string & tags.Format<"date-time">) | undefined;
  };

  /**
   * Request body for creating a new post reaction (like/dislike) by a member.
   * Business rules restrict to one reaction per post per member.
   */
  export type ICreate = {
    /**
     * UUID of the post the member is reacting to. Foreign key:
     * discuss_board_posts.id.
     */
    discuss_board_post_id: string & tags.Format<"uuid">;

    /**
     * Type of reaction: must be 'like' or 'dislike'. Only one reaction per
     * member/post pair allowed.
     */
    reaction_type: "like" | "dislike";
  };

  /**
   * Data for updating an existing post reaction (like/dislike type). Only the
   * 'reaction_type' property is mandatory. Follows the
   * discuss_board_post_reactions schema for reaction modifications.
   */
  export type IUpdate = {
    /** Type of reaction for a post. Only 'like' or 'dislike' allowed. */
    reaction_type: "like" | "dislike";

    /** New updated time for the post reaction, if provided (ISO8601). */
    updated_at?: (string & tags.Format<"date-time">) | undefined;
  };

  /**
   * Summary view for a reaction to a post. Includes member, post, type, and
   * timestamps for reporting and display.
   */
  export type ISummary = {
    /**
     * Unique ID for the post reaction event, primary key of
     * discuss_board_post_reactions. Used for audit and business logic.
     */
    id: string & tags.Format<"uuid">;

    /**
     * ID of the member who created this reaction. Links to
     * discuss_board_members.id.
     */
    discuss_board_member_id: string & tags.Format<"uuid">;

    /**
     * ID of the post to which this reaction was applied. Corresponds to
     * discuss_board_posts.id.
     */
    discuss_board_post_id: string & tags.Format<"uuid">;

    /**
     * Type of reaction: either 'like' or 'dislike' according to the
     * platform policy. Value must match application constraint.
     */
    reaction_type: string;

    /** Timestamp (UTC, ISO 8601) of initial reaction creation. */
    created_at: string & tags.Format<"date-time">;

    /**
     * Timestamp (UTC, ISO 8601) when this reaction event was last updated
     * (toggled or metadata updated).
     */
    updated_at: string & tags.Format<"date-time">;
  };
}
