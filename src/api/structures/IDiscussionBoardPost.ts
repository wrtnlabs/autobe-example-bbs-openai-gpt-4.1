import { tags } from "typia";

/**
 * A full post, which is a primary content unit in a thread.
 *
 * Direct mapping to discussion_board_posts in Prisma, all business/audit fields
 * included.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussionBoardPost = {
  /**
   * Primary key for the post (UUID).
   *
   * Maps to discussion_board_posts.id.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Thread ID (UUID) this post belongs to.
   *
   * References discussion_board_threads.id (Prisma FK).
   */
  thread_id: string & tags.Format<"uuid">;

  /**
   * User ID of the post's author (UUID).
   *
   * References discussion_board_users.id.
   */
  created_by_id: string & tags.Format<"uuid">;

  /**
   * Title of the post, used for reference and search.
   *
   * See discussion_board_posts.title (Prisma).
   */
  title: string;

  /**
   * Rich text content body of the post.
   *
   * Maps to discussion_board_posts.body (Prisma).
   */
  body: string;

  /**
   * Whether the post is locked from further edits/comments.
   *
   * From discussion_board_posts.is_locked (Prisma).
   */
  is_locked: boolean;

  /**
   * Creation timestamp of the post (ISO 8601).
   *
   * From discussion_board_posts.created_at.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Last updated timestamp (ISO 8601).
   *
   * From discussion_board_posts.updated_at.
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft delete timestamp (ISO 8601, nullable): If present, this post is
   * soft-deleted and not visible in normal queries.
   *
   * From discussion_board_posts.deleted_at (Prisma).
   */
  deleted_at?: (string & tags.Format<"date-time">) | null;
};
export namespace IDiscussionBoardPost {
  /**
   * Filtering/searching/query metadata for looking up posts within a thread
   * or across all threads.
   */
  export type IRequest = {
    /** Pagination page number for posts. */
    page?: number &
      tags.Type<"int32"> &
      tags.JsonSchemaPlugin<{
        format: "int32";
      }>;

    /** Number of posts per result page. */
    limit?: number &
      tags.Type<"int32"> &
      tags.JsonSchemaPlugin<{
        format: "int32";
      }>;

    /** Keyword search to apply to post title/body. */
    search?: string;

    /** Sort field for post search results. */
    orderBy?: "created_at" | "updated_at" | "title";

    /** Direction for sorting: ascending/descending. */
    orderDirection?: "asc" | "desc";

    /** Restrict results to posts within given thread. */
    thread_id?: string & tags.Format<"uuid">;

    /** Filter posts authored by a specific user (UUID). */
    created_by_id?: string & tags.Format<"uuid">;

    /** Filter for only locked/unlocked posts. */
    is_locked?: boolean;

    /** Earliest creation date to include results from (inclusive). */
    created_from?: string & tags.Format<"date-time">;

    /** Latest creation date to include results up to (inclusive). */
    created_to?: string & tags.Format<"date-time">;
  };

  /**
   * Summary for a post record, present in listing/search results. Omitted
   * fields include full post body and deleted_at.
   */
  export type ISummary = {
    /** Post ID (UUID). */
    id: string & tags.Format<"uuid">;

    /** Parent thread ID (UUID). */
    thread_id: string & tags.Format<"uuid">;

    /** Title of the post. */
    title: string;

    /** User ID of the post author. */
    created_by_id: string & tags.Format<"uuid">;

    /** Post creation time (ISO 8601). */
    created_at: string & tags.Format<"date-time">;

    /** Locked status for post (read-only if true). */
    is_locked: boolean;
  };

  /**
   * Request body for creating a post. Includes parent thread ID, required
   * title, and post body.
   */
  export type ICreate = {
    /** UUID of the parent discussion thread this post will belong to. */
    thread_id: string & tags.Format<"uuid">;

    /**
     * The title of the post. Must be unique within the thread and not
     * empty.
     */
    title: string;

    /** Rich text body content of the post. */
    body: string;
  };

  /**
   * Request body for updating a post. All fields optional; at least one must
   * be provided.
   */
  export type IUpdate = {
    /**
     * The updated title of the post. Must be unique within the parent
     * thread.
     */
    title?: string;

    /** Updated body content of the post. */
    body?: string;

    /** Flag to lock/unlock this post for further editing or commenting. */
    is_locked?: boolean;
  };
}
