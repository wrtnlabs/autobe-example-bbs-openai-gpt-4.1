import { tags } from "typia";

/**
 * Session refresh token record as defined in the
 * discussion_board_refresh_tokens schema. Provides full metadata for session
 * management, compliance, and auditing.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussionBoardRefreshToken = {
  /** Unique identifier for the refresh token record. (UUIDv4) */
  id: string & tags.Format<"uuid">;

  /** User ID to whom the refresh token was issued. Foreign key. */
  discussion_board_user_id: string & tags.Format<"uuid">;

  /**
   * Opaque (non-JWT) refresh token string used for session renewal. Secure
   * random value. Sensitivity: should not be returned unless necessary.
   */
  refresh_token: string;

  /** Timestamp when the refresh token was issued (ISO 8601). */
  issued_at: string & tags.Format<"date-time">;

  /** Timestamp when the refresh token expires. */
  expires_at: string & tags.Format<"date-time">;

  /**
   * Date/time when this refresh token was revoked and is no longer valid.
   * Null if token is still valid.
   */
  revoked_at?: (string & tags.Format<"date-time">) | null;

  /** Device or session metadata for context and audit. Optional. */
  device_info?: string | null;

  /** Timestamp when the record was first created. */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp when the record was last updated/modified. */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft deletion marker; timestamp when token was deleted from audit
   * collection. Null if still active.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null;
};
export namespace IDiscussionBoardRefreshToken {
  /**
   * Request schema for filtering, searching, and paginating refresh token
   * records.
   */
  export type IRequest = {
    /** User ID owning the refresh token (optional search filter). */
    discussion_board_user_id?: string & tags.Format<"uuid">;

    /**
     * Revocation timestamp (optional filter - only include revoked/active
     * tokens).
     */
    revoked_at?: (string & tags.Format<"date-time">) | null;

    /** Device/session metadata filter. */
    device_info?: string | null;

    /** Pagination - page number. */
    page?: number & tags.Type<"int32">;

    /** Pagination - records per page. */
    limit?: number & tags.Type<"int32">;

    /** Filter - only include tokens that expire on or after this datetime. */
    expires_at_gte?: (string & tags.Format<"date-time">) | null;

    /** Filter - only include tokens that expire on or before this datetime. */
    expires_at_lte?: (string & tags.Format<"date-time">) | null;

    /** Custom ordering parameter for result list. */
    orderBy?: string;
  };

  /**
   * Update model for refresh token session audit/status update (only mutable
   * fields explicitly allowed: revoked_at, device_info).
   */
  export type IUpdate = {
    /**
     * Timestamp to mark this token as revoked (single-session
     * logout/invalidated). Null if not revoked.
     */
    revoked_at?: (string & tags.Format<"date-time">) | null;

    /** Device/session metadata update for the refresh token. Optional field. */
    device_info?: string | null;
  };
}
