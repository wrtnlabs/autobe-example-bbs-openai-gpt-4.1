import { tags } from "typia";

/**
 * Represents a single comment under a post in discussBoard. Contains primary
 * identifiers, parentage for nested replies, author metadata, workflow controls
 * (locked, deleted, status), and audit timestamps. Follows strict data
 * integrity and audit patterns as required by moderation and compliance
 * requirements.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussBoardComment = {
  /**
   * The unique identifier (UUID) for this comment, referencing the primary
   * key in the discuss_board_comments table. Used for all comment-level
   * operations and foreign key relations.
   */
  id: string & tags.Format<"uuid">;

  /**
   * The UUID of the post that this comment is associated with. Points to the
   * parent post via discuss_board_posts.
   */
  discuss_board_post_id: string & tags.Format<"uuid">;

  /**
   * If this comment is a reply, this is the UUID of the parent comment.
   * Nullable, and null for top-level comments.
   */
  parent_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * The UUID of the member who authored this comment. References
   * discuss_board_members.id.
   */
  author_member_id: string & tags.Format<"uuid">;

  /**
   * The body/content of the comment. Must conform to business rules (e.g.,
   * min 2, max 2,000 chars, subject to forbidden words filtering).
   */
  content: string;

  /**
   * Indicates the nesting level for this comment. 0 for top-level, 1+ for
   * replies, as managed by business logic.
   */
  depth: number & tags.Type<"int32">;

  /**
   * A flag indicating whether the comment is locked (cannot be edited or
   * deleted). Set by business logic due to moderation, expiration, or other
   * reasons.
   */
  is_locked: boolean;

  /**
   * The workflow/business status of the comment (e.g., 'active',
   * 'under_review', 'deleted'). Used in moderation and UI display.
   */
  status: string;

  /** Timestamp (UTC, ISO8601) of when this comment was created. */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp (UTC, ISO8601) of when this comment was last updated. */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Timestamp (UTC, ISO8601, nullable) when this comment was soft-deleted for
   * compliance/audit. Null if comment is active.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IDiscussBoardComment {
  /**
   * Request payload for searching and paginating comment objects. Enables
   * filtering by author, parent, content, status, date, and moderation
   * state.
   */
  export type IRequest = {
    /**
     * Page number for pagination. 1-based index. Used to specify the result
     * window for large comment collections.
     */
    page?: (number & tags.Type<"int32">) | undefined;

    /**
     * Number of comments per page in paginated responses. Helps manage UI
     * loads and response size.
     */
    limit?: (number & tags.Type<"int32">) | undefined;

    /**
     * UUID of the member who authored the comment. Used to filter comments
     * to a specific user's contributions.
     */
    author_member_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * UUID of the parent comment (for replies). If provided, restricts
     * results to threaded/nested replies of a parent.
     */
    parent_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Optional full-text search term to filter comments containing specific
     * keywords or phrases.
     */
    content_q?: string | undefined;

    /**
     * Optional UTC date/time filter to include only comments created after
     * the specified timestamp.
     */
    created_at_from?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Optional UTC date/time filter to include only comments created up to
     * the specified timestamp.
     */
    created_at_to?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Business status of the comment (such as 'active', 'deleted', or
     * 'under_review'). Used for searching comment workflow or moderation
     * status.
     */
    status?: string | undefined;

    /**
     * Depth of the comment in thread hierarchy (0 for top-level comments).
     * Used to filter comments by nesting level.
     */
    depth?: (number & tags.Type<"int32">) | undefined;

    /** If true, restricts results to locked or moderation-locked comments. */
    is_locked?: boolean | undefined;

    /**
     * If true, includes only soft-deleted comments; if false, includes only
     * active comments; if not supplied, includes all.
     */
    deleted?: boolean | undefined;
  };

  /**
   * Payload required to create a new comment under a post. Only the content
   * and (optional) parent reference are accepted. The post association is
   * implied by the containing endpoint.
   */
  export type ICreate = {
    /**
     * Required body content for the new comment (2â€“2,000 characters
     * enforced by business rules and forbidden words filtering).
     */
    content: string;

    /**
     * Optional UUID for the parent comment if this is a reply; null for
     * top-level comments.
     */
    parent_id?: (string & tags.Format<"uuid">) | null | undefined;
  };

  /**
   * Fields permitted for updating a comment. Only body/content is editable;
   * other fields are managed by server logic due to workflow or moderation.
   */
  export type IUpdate = {
    /**
     * The new body/content for the comment; business logic enforces
     * forbidden word filtering, min/max lengths, and edit window
     * constraints.
     */
    content?: string | undefined;
  };
}
