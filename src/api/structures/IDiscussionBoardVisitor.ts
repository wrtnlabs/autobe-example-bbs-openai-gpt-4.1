import { tags } from "typia";

import { IAuthorizationToken } from "./IAuthorizationToken";

/**
 * Represents an anonymous/unauthenticated visitor tracked for
 * session/anti-fraud analytics and privacy compliance. Maps directly to
 * discussion_board_visitors table. Never includes PII or links to user/member
 * unless escalated.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussionBoardVisitor = {
  /**
   * Unique UUID identifier for the visitor entity
   * (discussion_board_visitors.id)
   */
  id: string & tags.Format<"uuid">;

  /**
   * Opaque, non-reversible unique token identifying a visitor.
   * Session/fraud/audit basis. (discussion_board_visitors.visitor_token)
   */
  visitor_token: string;

  /**
   * Optional IP address for security/fraud/audit
   * (discussion_board_visitors.ip_address)
   */
  ip_address?: string | null;

  /**
   * Optional user agent/device fingerprint for audit & analytics
   * (discussion_board_visitors.user_agent)
   */
  user_agent?: string | null;

  /** Datetime when visitor record was created (ISO8601) */
  created_at: string & tags.Format<"date-time">;

  /** Datetime when visitor record was last updated (ISO8601) */
  updated_at: string & tags.Format<"date-time">;

  /** Soft-deletion timestamp, null if not deleted (audit/compliance) */
  deleted_at?: (string & tags.Format<"date-time">) | null;
};
export namespace IDiscussionBoardVisitor {
  /**
   * Payload for visitor registration, allowing guests to start a session.
   * Includes optional user_agent and ip_address fields. These are not
   * required but are recommended for audit/compliance.
   */
  export type IJoin = {
    /**
     * The User-Agent string of the visitor's device, used for analytics and
     * security auditing. Typically captured from the HTTP header.
     *
     * Optional property. Storing this information can help with fraud
     * detection and audit, but is not PII per business description.
     */
    user_agent?: string;

    /**
     * Optional IP address of the visitor as seen by the server. Used only
     * for audit, analytics, and abuse prevention. Nullable and not required
     * for visitor creation.
     */
    ip_address?: string;
  };

  /**
   * Authorized session/visitor token for a guest session. Contains all
   * metadata needed for future refresh and audit, and always grants 'visitor'
   * role only.
   */
  export type IAuthorized = {
    /**
     * The unique visitor token issued by the system for this guest session.
     * Used by the client for future authentication or session refreshes.
     * Always a new opaque token.
     */
    visitor_token: string;

    /** Constant role assignment 'visitor' indicating guest access level. */
    role: "visitor";

    /**
     * ISO 8601 date-time string indicating when the guest token/session was
     * issued.
     */
    issued_at: string & tags.Format<"date-time">;

    /**
     * ISO 8601 date-time string when this visitor session expires and a
     * refresh will be needed.
     */
    expires_at: string & tags.Format<"date-time">;

    /** JWT token information for authentication */
    token: IAuthorizationToken;
  };

  /**
   * Request payload for refreshing a guest (visitor) session token. Only the
   * visitor_token is required.
   */
  export type IRefresh = {
    /**
     * Existing visitor access token issued by system. Sent by the client
     * for session refresh operations.
     */
    visitor_token: string;
  };

  /**
   * Request/query payload for searching, filtering, and paginating
   * discussion_board_visitor records. Includes typical analytics, security,
   * and audit filters.
   */
  export type IRequest = {
    /** Optional filter for IP address in visitor search. */
    ip_address?: string | null;

    /** Optional filter for user agent in analytics/audit search. */
    user_agent?: string | null;

    /** Page number for pagination (1-based). */
    page?: (number & tags.Type<"int32">) | null;

    /** Max results per page. */
    limit?: (number & tags.Type<"int32">) | null;

    /** Sort key/column (e.g., 'created_at', 'updated_at'). */
    sort_by?: string;

    /** Sort direction, ascending or descending. */
    sort_dir?: "asc" | "desc";

    /** Start of created_at date range filter. */
    from?: (string & tags.Format<"date-time">) | null;

    /** End of created_at date range filter. */
    to?: (string & tags.Format<"date-time">) | null;
  };
}
