import { tags } from "typia";

/**
 * Notification detail record for in-app, email or push delivery; outputs
 * metadata, recipient, actor, message and status.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussionBoardNotification = {
  /** Notification unique identifier (UUID). */
  id: string & tags.Format<"uuid">;

  /** ID of the user to whom this notification was delivered. */
  recipient_user_id: string & tags.Format<"uuid">;

  /**
   * (Nullable) ID of the actor/user who triggered the notification, if any
   * (e.g., replier, moderator); null for system events.
   */
  actor_user_id?: (string & tags.Format<"uuid">) | null;

  /** (Nullable) Associated post ID, for notifications linked to a post. */
  post_id?: (string & tags.Format<"uuid">) | null;

  /** (Nullable) Associated comment ID, for notifications linked to a comment. */
  comment_id?: (string & tags.Format<"uuid">) | null;

  /** Type/category of notification—see business enum docs for valid types. */
  type: string;

  /**
   * Notification delivery status/state—e.g.,
   * 'unread','read','archived','delivered','failed'.
   */
  status: string;

  /** Short notification title or heading; nullable. */
  title?: string | null;

  /** Notification message body or summary; nullable. */
  body?: string | null;

  /**
   * (Nullable) URI/link for user action associated with notification, if
   * present.
   */
  action_url?: string | null;

  /**
   * (Nullable) Delivery failure explanation if status is 'failed', or omitted
   * if delivered.
   */
  failure_reason?: string | null;

  /** Timestamp when notification was created/generated. */
  created_at: string & tags.Format<"date-time">;

  /**
   * (Nullable) Timestamp when delivered, if delivered (optional for
   * undelivered or failed).
   */
  delivered_at?: (string & tags.Format<"date-time">) | null;

  /**
   * (Nullable) Timestamp of recipient reading the notification (optional if
   * unread).
   */
  read_at?: (string & tags.Format<"date-time">) | null;

  /** (Nullable) Timestamp when soft-deleted, else null if active. */
  deleted_at?: (string & tags.Format<"date-time">) | null;
};
export namespace IDiscussionBoardNotification {
  /**
   * Search/filter/pagination options for querying notifications for the
   * authenticated user.
   */
  export type IRequest = {
    /**
     * Notification type to filter by (e.g.,
     * 'reply','mention','flag','mod_action','system_alert','poll_close').
     * Optional.
     */
    type?: string;

    /**
     * Notification status to filter on (e.g.,
     * 'unread','read','archived','delivered','failed'). Optional.
     */
    status?: string;

    /**
     * Filter for notifications created/delivered at or after this time.
     * Optional.
     */
    from_date?: string & tags.Format<"date-time">;

    /**
     * Filter for notifications created/delivered at or before this time.
     * Optional.
     */
    to_date?: string & tags.Format<"date-time">;

    /** Filter notifications associated with a specific post id. Optional. */
    post_id?: string & tags.Format<"uuid">;

    /** Filter notifications associated with a specific comment id. Optional. */
    comment_id?: string & tags.Format<"uuid">;

    /** Page number for paginated results. Optional. */
    page?: number;

    /** Number of items per page. Optional. */
    limit?: number;

    /**
     * Sort key or rule for ordering (e.g., '-created_at','type','status').
     * Optional.
     */
    sort?: string;

    /** Free-text search/filter for notification title/body. Optional. */
    q?: string;
  };

  /**
   * Request body to update notification (status transitions, mark read,
   * archive, etc).
   */
  export type IUpdate = {
    /**
     * Updated notification status
     * ('read','archived','unread','delivered',etc) to set for the
     * notification.
     */
    status: string;

    /** (Optional) If status is or becomes 'read', set the read_at timestamp. */
    read_at?: string & tags.Format<"date-time">;
  };
}
