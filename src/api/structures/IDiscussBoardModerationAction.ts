import { tags } from "typia";

/**
 * Represents a record of a specific moderation action performed by a moderator
 * or administrator as part of policy enforcement on the discussBoard platform.
 * Each record documents the actor, target(s), action details, rationale,
 * business workflow state, timestamps, and optional appeal linkage.
 *
 * This schema is foundational for audit, compliance review, workflow tracking,
 * and user notification across all moderation interventions, supporting
 * transparency and accountability under the business rules defined for the
 * platform.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussBoardModerationAction = {
  /**
   * Unique moderation action record identifier (UUID; primary key in
   * discuss_board_moderation_actions).
   *
   * This uniquely identifies this moderation action and is used system-wide
   * for referencing moderation workflow history, appeals, and audit logs.
   */
  id: string & tags.Format<"uuid">;

  /**
   * UUID of the moderator (or administrator) who performed this action.
   * References discuss_board_moderators.id or discuss_board_administrators.id
   * as applicable.
   *
   * This field is crucial for audit, compliance, and history. It links the
   * action back to a privileged actor having appropriate role at the time of
   * action.
   */
  moderator_id: string & tags.Format<"uuid">;

  /**
   * UUID of the member who is the direct target of this action (e.g., user
   * being warned, suspended, or banned). Optional for post/comment moderation
   * actions.
   *
   * Null if the moderation was not performed directly on a user account or if
   * the specific target was a content item only.
   */
  target_member_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * UUID of the post affected. References discuss_board_posts.id. Nullable
   * for non-post moderation actions.
   */
  target_post_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * UUID of the comment affected. References discuss_board_comments.id.
   * Nullable for non-comment moderation actions.
   */
  target_comment_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Optional UUID of the related appeal if this action is a response to or is
   * linked with a user appeal. References discuss_board_appeals.id.
   */
  appeal_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Type of moderation action performed, e.g., 'remove_content', 'warn',
   * 'suspend_user', 'ban_user', 'escalate'.
   *
   * This field defines business logic/rules for the specific remediation or
   * outcome enforced by the action.
   */
  action_type: string;

  /**
   * Rationale or justification for the moderation action, provided by the
   * moderator. This field is shown to the affected user (where appropriate)
   * and is part of the audit log for legal/compliance review.
   */
  action_reason: string;

  /**
   * Optional detailed narrative composed by the moderator, providing context,
   * situational analysis, or additional business notes for the moderation
   * action. May be used for later review, appeals, or transparency.
   */
  decision_narrative?: string | null | undefined;

  /**
   * Workflow status of this moderation action. E.g., 'active', 'reversed',
   * 'escalated', 'completed', 'pending_applied'.
   *
   * Controls business progression and is validated against allowed set of
   * statuses.
   */
  status: string;

  /**
   * UTC ISO 8601 timestamp when this moderation action was first recorded in
   * the system. Used for audit ordering, time-window queries, and compliance
   * reviews.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * UTC ISO 8601 timestamp when this moderation action was last updated.
   * Distinguishes edits or workflow/progression in moderation business
   * logic.
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft-delete timestamp for compliance/audit. If null, moderation action is
   * active; else, it is logically removed from normal searches.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IDiscussBoardModerationAction {
  /**
   * Search, filter, and pagination criteria for moderation actions. Used for
   * moderation, audit, and compliance analytics.
   */
  export type IRequest = {
    /**
     * Filter: Unique identifier (UUID) of the moderator who performed the
     * action.
     */
    moderator_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Filter: Target member UUID who was the subject of the moderation
     * action.
     */
    target_member_id?: (string & tags.Format<"uuid">) | undefined;

    /** Filter: UUID of the post targeted by the action (if any). */
    target_post_id?: (string & tags.Format<"uuid">) | undefined;

    /** Filter: UUID of the comment targeted by the action (if any). */
    target_comment_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Filter: Type of moderation action (remove_content, suspend_user,
     * warn, escalate, etc.).
     */
    action_type?: string | undefined;

    /**
     * Filter: Workflow state of the action (completed, pending, escalated,
     * in_review, etc.).
     */
    status?: string | undefined;

    /** Lower-bound timestamp for moderation actions created after this date. */
    created_at_from?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Upper-bound timestamp for moderation actions created before this
     * date.
     */
    created_at_to?: (string & tags.Format<"date-time">) | undefined;

    /** Pagination: the result page to retrieve. */
    page?: (number & tags.Type<"int32">) | undefined;

    /** Pagination: number of records per page. */
    limit?: (number & tags.Type<"int32">) | undefined;

    /** Sorting order for results, e.g., 'created_at:desc'. */
    sort?: string | undefined;
  };

  /**
   * Request schema for creating a new moderation action as part of content or
   * user policy enforcement. Used primarily by moderators and administrators
   * to record official intervention in response to content reports or user
   * violations.
   *
   * All references must exist in the platformâ€™s tables, and the status and
   * action_type fields must conform to supported business workflow.
   */
  export type ICreate = {
    /**
     * UUID of the moderator (or administrator) performing the action. Must
     * reference an active privileged user in discuss_board_moderators or
     * discuss_board_administrators.
     */
    moderator_id: string & tags.Format<"uuid">;

    /**
     * (Optional) UUID of the member being targeted by this moderation
     * action (e.g., for user-focused intervention such as warnings,
     * suspensions). Nullable if the action is taken on content only.
     */
    target_member_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * (Optional) UUID of the affected post, if this action is taken on a
     * post. Nullable when not applicable.
     */
    target_post_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * (Optional) UUID of the affected comment, if this action is focused on
     * a comment. Nullable when not applicable.
     */
    target_comment_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * (Optional) UUID of the related appeal if this moderation action is in
     * response to an appeal workflow. Nullable when not linked to appeal
     * process.
     */
    appeal_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Type of moderation action performed, e.g., 'remove_content', 'warn',
     * 'suspend_user', 'ban_user', 'escalate'. Must be supported by
     * discussBoard's moderation policy/business rules.
     */
    action_type: string;

    /**
     * Short justification for the action, usually shown to the affected
     * party and used for compliance review. Must fulfill audit/logging
     * policies.
     */
    action_reason: string;

    /**
     * Optional extended reasoning, analysis, or explanation by the
     * moderator to provide further context for the audit/history.
     */
    decision_narrative?: string | null | undefined;

    /**
     * Initial or current business workflow status assigned to this
     * moderation action ('active', 'pending_applied', 'escalated', etc.).
     */
    status: string;
  };

  /**
   * Request schema for updating/modifying details of a moderation action,
   * typically as part of workflow transitions, escalations, reversals, or to
   * add further reasoning. All updated fields are subject to full audit.
   */
  export type IUpdate = {
    /**
     * (Optional) New moderation action type. Used for changing the type of
     * policy being enforced or transitioning to another business workflow
     * state. Changes are subject to business rule validation.
     */
    action_type?: string | undefined;

    /**
     * (Optional) New rationale for the moderation action or status change.
     * Goes into the compliance log for audit tracking.
     */
    action_reason?: string | undefined;

    /**
     * (Optional) Updated or additional business explanation for the
     * decision or workflow transition.
     */
    decision_narrative?: string | null | undefined;

    /**
     * (Optional) New workflow status for the moderation action (such as
     * when being escalated, completed, or reversed). Supported statuses are
     * validated by business logic.
     */
    status?: string | undefined;

    /**
     * (Optional) UUID of the linked appeal if workflow permits updating the
     * connected appeal record.
     */
    appeal_id?: (string & tags.Format<"uuid">) | null | undefined;
  };

  /**
   * Summary (list/search view) of a moderation action event, for dashboard or
   * aggregation use. Contains actor, affected user/content, action type,
   * workflow status, and creation timestamp.
   */
  export type ISummary = {
    /**
     * Unique identifier for the moderation action (primary key in
     * discuss_board_moderation_actions).
     */
    id: string & tags.Format<"uuid">;

    /**
     * UUID of the moderator who performed the action. References
     * discuss_board_moderators.
     */
    moderator_id: string & tags.Format<"uuid">;

    /**
     * Target member affected by this action, if applicable. Nullable,
     * linked to 'target_member_id'.
     */
    target_member_id: (string & tags.Format<"uuid">) | null;

    /**
     * Target post affected by this action, if any. Nullable, linked to
     * 'target_post_id'.
     */
    target_post_id: (string & tags.Format<"uuid">) | null;

    /**
     * Target comment affected, if any. Nullable, corresponds to
     * 'target_comment_id'.
     */
    target_comment_id: (string & tags.Format<"uuid">) | null;

    /**
     * Type of moderation action taken (e.g., 'remove_content', 'warn',
     * 'suspend_user', 'ban_user', 'escalate').
     */
    action_type: string;

    /**
     * Status of moderation action (e.g., 'active', 'reversed', 'escalated',
     * 'completed', 'pending_applied').
     */
    status: string;

    /** Timestamp when action was created (ISO8601 UTC). */
    created_at: string & tags.Format<"date-time">;
  };
}
