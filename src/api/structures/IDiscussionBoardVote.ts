import { tags } from "typia";

/**
 * A user engagement record representing an upvote or downvote action on a post
 * or comment. All fields reference the corresponding discussion_board_votes
 * columns. USER ID is omitted for boundary security; only admins may see
 * complete linkage. Timestamps provide audit and lifecycle traceability.
 *
 * This model serves public voting APIs and analytics as well as
 * compliance/audit endpoints (with further filtering).
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussionBoardVote = {
  id: string & tags.Format<"uuid">;
  discussion_board_post_id?: (string & tags.Format<"uuid">) | null;
  discussion_board_comment_id?: (string & tags.Format<"uuid">) | null;
  vote_type: "up" | "down";
  created_at: string & tags.Format<"date-time">;
  updated_at: string & tags.Format<"date-time">;
  deleted_at?: (string & tags.Format<"date-time">) | null;
};
export namespace IDiscussionBoardVote {
  /**
   * Request filter object for paginated vote search or aggregation. Allows
   * filtering by target, type, date, and controlling pagination parameters
   * for retrieval.
   */
  export type IRequest = {
    vote_type?: "up" | "down";
    discussion_board_post_id?: (string & tags.Format<"uuid">) | null;
    discussion_board_comment_id?: (string & tags.Format<"uuid">) | null;
    created_from?: string & tags.Format<"date-time">;
    created_to?: string & tags.Format<"date-time">;
    sort_by?: "created_at";
    sort_order?: "asc" | "desc";
    page?: number & tags.Type<"int32">;
    limit?: number & tags.Type<"int32">;
  };

  /**
   * A minimal summary record for aggregating simple vote statistics, used in
   * lists or post/comment analytics. Contains only safe, public-facing vote
   * details with no actor or private IDs.
   */
  export type ISummary = {
    id: string & tags.Format<"uuid">;
    vote_type: "up" | "down";
    created_at: string & tags.Format<"date-time">;
  };

  /**
   * Payload for casting a new vote on a post or comment. Actor/user ID is
   * always taken from authentication context, not from this request. Exactly
   * one of discussion_board_post_id or discussion_board_comment_id must be
   * non-null. The vote_type must be explicitly 'up' or 'down'. Aligned with
   * business rule for single vote per user per content.
   */
  export type ICreate = {
    discussion_board_post_id?: (string & tags.Format<"uuid">) | null;
    discussion_board_comment_id?: (string & tags.Format<"uuid">) | null;
    vote_type: "up" | "down";
  };

  /**
   * Allows a user to update a previous vote (e.g., change upvote to down).
   * Only the vote_type may be supplied in update. All state transitions and
   * audit logic handled by business layer.
   */
  export type IUpdate = {
    vote_type: "up" | "down";
  };
}
