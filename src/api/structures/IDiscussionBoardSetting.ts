import { tags } from "typia";

/**
 * Represents a global or business configuration value in the discussion board
 * platform.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussionBoardSetting = {
  /** Primary Key. Unique identifier for the setting. */
  id: string & tags.Format<"uuid">;

  /**
   * Unique identifier for this setting (e.g., 'max_post_length',
   * 'flag_threshold').
   */
  key: string;

  /** Serialized config value for use by application logic. */
  value: string;

  /**
   * Human-readable description explaining the purpose of this setting.
   * Nullable.
   */
  description?: string | null;

  /**
   * Indicates whether the setting is system-level (technical) or
   * business-level.
   */
  is_system: boolean;

  /** ISO timestamp when the setting was created. */
  created_at: string & tags.Format<"date-time">;

  /** ISO timestamp of last modification. */
  updated_at: string & tags.Format<"date-time">;

  /** ISO timestamp of soft deletion, or null if active. */
  deleted_at?: (string & tags.Format<"date-time">) | null;
};
export namespace IDiscussionBoardSetting {
  /**
   * Request schema for searching/paginating discussion board settings. All
   * fields optional.
   */
  export type IRequest = {
    /**
     * Page number for results pagination. Optional; defaults to 1 if
     * omitted.
     */
    page?:
      | (number &
          tags.Type<"int32"> &
          tags.JsonSchemaPlugin<{
            format: "int32";
          }>)
      | null;

    /**
     * Maximum records to return per page. Optional; defaults to system
     * standard (e.g., 100).
     */
    limit?:
      | (number &
          tags.Type<"int32"> &
          tags.JsonSchemaPlugin<{
            format: "int32";
          }>)
      | null;

    /** Keyword for searching settings by key or description. Optional. */
    keyword?: string;

    /** If true, restricts query to only system-level settings. Optional. */
    is_system?: boolean;

    /** Query for exact match on setting key. Optional. */
    key?: string;
  };

  /** Schema for the payload to create a new configuration setting. */
  export type ICreate = {
    /** Unique key for the new setting. */
    key: string;

    /** Serialized config value. */
    value: string;

    /** Brief description of this setting. Nullable. */
    description?: string | null;

    /** Is this a system-level setting? */
    is_system: boolean;
  };

  /**
   * Schema for payload to update a configuration setting. All fields
   * optional.
   */
  export type IUpdate = {
    /**
     * New serialized config value for the setting. Optional; only supply to
     * update value.
     */
    value?: string;

    /** Human-readable description of the setting (nullable). */
    description?: string | null;

    /**
     * Set true if the setting is a technical/system setting; false if
     * business logic.
     */
    is_system?: boolean;
  };
}
