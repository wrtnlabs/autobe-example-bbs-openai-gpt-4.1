import { tags } from "typia";

/**
 * A single content report record. Members report inappropriate post or comment;
 * admins/moderators resolve, escalated, or dismiss.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussBoardContentReport = {
  /** Unique identifier for this content report record. */
  id: string & tags.Format<"uuid">;

  /** Member UUID who submitted this content report. */
  reporter_member_id: string & tags.Format<"uuid">;

  /**
   * If the report targets a post, this is the referenced post's UUID. Exactly
   * one of content_post_id/content_comment_id is present.
   */
  content_post_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * If the report targets a comment, this is the referenced comment's UUID.
   * Exactly one of content_post_id/content_comment_id is present.
   */
  content_comment_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Type of content being reported ('post' or 'comment'). Drives resolution
   * workflow.
   */
  content_type: "post" | "comment";

  /**
   * Reporter-provided explanation, freeform text, or reason code for the
   * content report. Policy requires max 200 chars.
   */
  reason: string;

  /** Moderation workflow state. (pending, under_review, resolved, escalated). */
  status: string;

  /**
   * UUID of the moderation action resolving this report, if any. Nullable if
   * not yet resolved or linked.
   */
  moderation_action_id?: (string & tags.Format<"uuid">) | null | undefined;

  /** When the report was created (ISO 8601 UTC). */
  created_at: string & tags.Format<"date-time">;

  /** When the report was last updated. */
  updated_at: string & tags.Format<"date-time">;

  /** Soft deletion timestamp for the report, if removed for audit/compliance. */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IDiscussBoardContentReport {
  /**
   * Search, filter, sort, and pagination parameters for platform content
   * reports. Used in moderation/triage UIs and compliance analytics.
   */
  export type IRequest = {
    /**
     * Filter: The unique identifier of the member who created the report.
     * Use to search by reporter for audit, review, or self-service list.
     */
    reporter_member_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Filter: The type of content being reported ('post' or 'comment').
     * Enables focused moderation queue management.
     */
    content_type?: "post" | "comment" | undefined;

    /**
     * Filter: Workflow status for moderation triage (pending, under_review,
     * resolved, escalated, etc.).
     */
    status?: string | undefined;

    /**
     * Filter: Category keyword, free-text, or policy reason associated with
     * the report.
     */
    reason?: string | undefined;

    /**
     * Lower-bound ISO 8601 timestamp for filtering content reports by
     * creation date.
     */
    created_at_from?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Upper-bound ISO 8601 timestamp for filtering content reports by
     * creation date.
     */
    created_at_to?: (string & tags.Format<"date-time">) | undefined;

    /** Pagination: The result page (starts at 1). */
    page?: (number & tags.Type<"int32">) | undefined;

    /** Pagination: The maximum number of results per page. */
    limit?: (number & tags.Type<"int32">) | undefined;

    /** Sorting order (e.g., 'created_at:desc', 'status:asc'). */
    sort?: string | undefined;
  };

  /**
   * Member payload for creating a new content report. Must provide
   * content_type, target, and reason. Business logic enforces mutually
   * exclusive content_post_id/content_comment_id.
   */
  export type ICreate = {
    /**
     * Type of content being reported ('post' or 'comment'). Exactly one of
     * content_post_id/content_comment_id must be present.
     */
    content_type: "post" | "comment";

    /**
     * UUID of the post being reported. Required if content_type is 'post'.
     * Must be omitted/null if reporting a comment.
     */
    content_post_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * UUID of the comment being reported. Required if content_type is
     * 'comment'. Must be omitted/null if reporting a post.
     */
    content_comment_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Reporter-provided justification for report. Policy: max 200 chars,
     * must cite violation or rationale.
     */
    reason: string & tags.MaxLength<200>;
  };

  /**
   * Fields for updating a content report, typically in the moderation
   * workflow. Used for status changes, workflow notes, or resolution
   * linkage.
   */
  export type IUpdate = {
    /**
     * New workflow status. (pending, under_review, resolved, dismissed,
     * escalated, etc.).
     */
    status?: string | undefined;

    /**
     * Optional additional moderator/admin notes, rationale, or status
     * annotation. (Not reporter's reason.)
     */
    reason?: string | undefined;

    /**
     * UUID linking to the moderation action resolving the report, if status
     * indicates resolution.
     */
    moderation_action_id?: (string & tags.Format<"uuid">) | undefined;
  };

  /**
   * Summary (list-view) of a content report for moderation or review
   * aggregation. Contains identifying fields, report status, reporter info,
   * target content references, and moderation workflow links. Used for
   * dashboard and search result presentation; omits large or detailed context
   * fields.
   */
  export type ISummary = {
    /**
     * Unique identifier for the content report. Corresponds to the 'id'
     * column in discuss_board_content_reports.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Type of content being reported, referenced in the schema as
     * 'content_type'. Typical values: 'post', 'comment'.
     */
    content_type: string;

    /**
     * Current workflow status for this report (e.g., 'pending',
     * 'under_review', 'resolved', 'dismissed', 'escalated'). Sourced from
     * 'status' in discuss_board_content_reports.
     */
    status: string;

    /**
     * UTC timestamp when report was created. Maps to 'created_at' in
     * discuss_board_content_reports.
     */
    created_at: string & tags.Format<"date-time">;

    /**
     * Reporter member id (UUID) who submitted this report. Sourced from
     * 'reporter_member_id'.
     */
    reporter_member_id: string & tags.Format<"uuid">;

    /**
     * UUID of the reported post if this report targets a post. Nullable,
     * matched to 'content_post_id'.
     */
    content_post_id: (string & tags.Format<"uuid">) | null;

    /**
     * UUID of the reported comment if this report targets a comment.
     * Nullable, matched to 'content_comment_id'.
     */
    content_comment_id: (string & tags.Format<"uuid">) | null;

    /**
     * Reason for the report, from user-supplied 'reason' in the schema, up
     * to 200 characters.
     */
    reason: string;

    /**
     * ID of the linked moderation action (if assigned/resolved). Nullable,
     * from 'moderation_action_id'.
     */
    moderation_action_id: (string & tags.Format<"uuid">) | null;
  };
}
