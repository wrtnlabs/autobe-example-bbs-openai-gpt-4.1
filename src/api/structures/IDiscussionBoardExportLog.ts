import { tags } from "typia";

/**
 * An export log tracks every export/download of compliance, audit, or user
 * privacy data generated by the system for regulatory evidence. Each log
 * records metadata about the export, its requester, file location/type, status,
 * and audit trace fields.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussionBoardExportLog = {
  /** Unique identifier for the export log record. */
  id: string & tags.Format<"uuid">;

  /**
   * User (or staff) who requested the export file; may be null for automated
   * or external export.
   */
  requested_by_user_id?: (string & tags.Format<"uuid">) | null;

  /**
   * Export target: user, regulator, admin, legal, etc. Used for audit
   * segmentation.
   */
  target_type: string;

  /** Download URI for the exported data/logs file. */
  file_uri: string;

  /**
   * MIME type or format of the export (e.g., application/json,
   * application/pdf, csv, xml).
   */
  file_type: string;

  /** When export was generated. */
  exported_at: string & tags.Format<"date-time">;

  /** Export status (pending, available, expired, failed). */
  status: string;

  /** Timestamp when the export log was created. */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp when this export log record was last updated. */
  updated_at: string & tags.Format<"date-time">;

  /** Soft-deleted timestamp for retention/audit; null for active/log-retained. */
  deleted_at?: (string & tags.Format<"date-time">) | null;
};
export namespace IDiscussionBoardExportLog {
  /**
   * Request parameters for advanced search and pagination of export log
   * records. Supports filtering, date ranges, requester, and file type to
   * enable targeted query of export/audit history.
   */
  export type IRequest = {
    /** Page number for result paging; optional. */
    page?: number | null;

    /** Number of records per page; optional. */
    limit?: number | null;

    /** Filter by export target type. */
    target_type?: string;

    /** Filter by status. */
    status?: string;

    /** Filter by MIME/file type. */
    file_type?: string;

    /** Filter by export requester. */
    requested_by_user_id?: string;

    /** Filter for exported_at greater than or equal to this date. */
    exported_at_from?: string & tags.Format<"date-time">;

    /** Filter for exported_at less than or equal to this date. */
    exported_at_to?: string & tags.Format<"date-time">;
  };

  /**
   * A lightweight export log summary for use in paginated lists, omitting
   * detailed audit fields for performance and UX; includes all
   * business-critical data.
   */
  export type ISummary = {
    /** Export log record unique identifier. */
    id: string & tags.Format<"uuid">;

    /** Export target type. */
    target_type: string;

    /** Exported file's URI. */
    file_uri: string;

    /** Exported file MIME/type. */
    file_type: string;

    /** Export timestamp. */
    exported_at: string & tags.Format<"date-time">;

    /** Export status (pending, available, expired, failed). */
    status: string;

    /** Requesting user/staff id, if any. */
    requested_by_user_id?: (string & tags.Format<"uuid">) | null;
  };

  /**
   * Request structure to create a new export log entity; all audit and
   * regulatory fields are included for compliance and business correctness.
   */
  export type ICreate = {
    /** Export target: user, regulator, admin, legal, etc. */
    target_type: string;

    /** Download URI for the exported file. */
    file_uri: string;

    /** Export file MIME or format. */
    file_type: string;

    /** Export date/time. */
    exported_at: string & tags.Format<"date-time">;

    /**
     * State/status of the export log (pending, available, expired, failed,
     * etc.).
     */
    status: string;

    /** Optional user/staff UUID for audit/request context. */
    requested_by_user_id?: (string & tags.Format<"uuid">) | null;
  };

  /**
   * Fields that may be updated in an existing export log record; all fields
   * are optional and only updatable by administrators for compliance
   * correction or file status tracking.
   */
  export type IUpdate = {
    /** Updated export status. */
    status?: string;

    /** Updated download file URI. */
    file_uri?: string;

    /** Updated export timestamp. */
    exported_at?: string & tags.Format<"date-time">;

    /** Updated export format/MIME type. */
    file_type?: string;
  };
}
