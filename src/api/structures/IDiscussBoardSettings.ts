import { tags } from "typia";

/**
 * Global system configuration for the discussBoard platform.
 *
 * Represents a singleton record that drives platform-wide settings for business
 * logic, such as maintenance mode, posting rules, and configurable feature
 * toggles. Managed only by administrators and referenced in platform-wide
 * audits, this schema is foundational for all enforcement and operational
 * flows.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussBoardSettings = {
  /**
   * Unique identifier for the global settings record.
   *
   * This UUID is the primary key for tracking the single canonical instance
   * of global system configuration for the discussBoard platform, as managed
   * in the discuss_board_settings Prisma table. It distinguishes this
   * configuration record in audit, rollback, and update operations.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Serialized JSON string of system-wide configurable parameters, including
   * feature toggles, global policy thresholds, and business flags.
   *
   * This field holds all aggregated scalable and non-relational settings as a
   * raw JSON string. Examples may include max post/comment lengths,
   * maintenance mode flags, and custom feature rollouts. The string format
   * allows flexible evolution of business settings without database
   * migrations.
   */
  config_json: string;

  /**
   * Timestamp of settings record creation, in ISO 8601 UTC. Used for audit
   * and platform change tracking.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp of last update to these settings, in ISO 8601 UTC. Tracks the
   * most recent modification, for platform auditing and compliance.
   */
  updated_at: string & tags.Format<"date-time">;
};
export namespace IDiscussBoardSettings {
  /**
   * Update payload for discussBoard global system configuration.
   *
   * Allows administrators to overwrite and update the settings record with a
   * new complete configuration. Used by backend services for compliance and
   * platform management interfaces.
   */
  export type IUpdate = {
    /**
     * Full replacement for the system configuration JSON blob.
     *
     * On update, the entire config_json string is replaced, allowing
     * setting, addition, or removal of arbitrary keys or business flags
     * relevant to platform operations. Consumers must ensure all required
     * keys and business logic requirements are met within the input blob.
     */
    config_json: string;
  };

  /**
   * Filtering, search, and pagination options for querying system settings
   * records in discuss_board_settings. All fields are optional and correspond
   * to filtering capabilities supported in administrator UI and reporting. No
   * properties outside of those documented here are permitted.
   */
  export type IRequest = {
    /** Page number for pagination (starting from 1). Optional. */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | null | undefined;

    /** Number of results per page for pagination. Optional. */
    limit?: (number & tags.Type<"int32"> & tags.Minimum<1>) | null | undefined;

    /**
     * Field name to order results by (e.g., created_at, updated_at).
     * Optional.
     */
    orderBy?: string | undefined;

    /**
     * Sort direction for ordered field: 'asc' for ascending or 'desc' for
     * descending. Optional.
     */
    sortDirection?: "asc" | "desc" | undefined;

    /**
     * Filters settings created after this ISO8601 datetime (UTC) value.
     * Optional.
     */
    created_after?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Filters settings created before this ISO8601 datetime (UTC) value.
     * Optional.
     */
    created_before?: (string & tags.Format<"date-time">) | null | undefined;

    /** Search filter to match against settings fields. Optional. */
    search?: string | undefined;
  };
}
