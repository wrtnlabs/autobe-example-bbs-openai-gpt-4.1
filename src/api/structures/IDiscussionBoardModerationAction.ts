import { tags } from "typia";

/**
 * Represents a detailed moderation action record as stored in the database and
 * exposed through the API. Each moderation action documents a decision or
 * enforcement taken by a moderator or admin against a user, post, or comment in
 * the discussion board. This type is derived from the
 * discussion_board_moderation_actions model in the Prisma schema, reflecting
 * all audit-critical fields such as responsible moderators, targets, action
 * details, timing, and lifecycle information.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussionBoardModerationAction = {
  /**
   * Globally unique identifier for this moderation action. Matches the
   * primary key in the discussion_board_moderation_actions table.
   */
  id: string & tags.Format<"uuid">;

  /**
   * ID of the moderator (from discussion_board_moderators.id) who performed
   * this action.
   */
  moderator_id: string & tags.Format<"uuid">;

  /**
   * ID of the user (discussion_board_users.id) who was affected by this
   * moderation action, if applicable. Nullable if action targets a post or
   * comment only.
   */
  user_id?: (string & tags.Format<"uuid">) | null;

  /**
   * ID of the moderated post (discussion_board_posts.id) if the action is
   * post-specific. Nullable when action is purely user-focused or on a
   * comment.
   */
  post_id?: (string & tags.Format<"uuid">) | null;

  /**
   * ID of the moderated comment (discussion_board_comments.id) if the action
   * is comment-specific. Nullable.
   */
  comment_id?: (string & tags.Format<"uuid">) | null;

  /**
   * Enumerated kind of moderation action performed. One of: 'warn', 'mute',
   * 'remove', 'edit', 'restrict', 'restore', 'escalate'. Matches action_type
   * in the schema.
   */
  action_type:
    | "warn"
    | "mute"
    | "remove"
    | "edit"
    | "restrict"
    | "restore"
    | "escalate";

  /**
   * Short string explaining the primary reason for the moderation action.
   * Used for compliance and reporting.
   */
  action_reason: string;

  /**
   * Optional extended justification or context for moderation action. Can
   * include moderator notes, investigation findings, or references to
   * community guideline sections.
   */
  details?: string | null;

  /**
   * ISO8601 timestamp indicating when the moderation action takes effect (may
   * be immediate or future).
   */
  effective_from: string & tags.Format<"date-time">;

  /**
   * For time-limited actions (e.g. suspensions), when the restriction ends.
   * Null for permanent or indefinite actions.
   */
  effective_until?: (string & tags.Format<"date-time">) | null;

  /**
   * Timestamp when the moderation action was created (recorded in the
   * system).
   */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp of the last update to this moderation action record. */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft delete marker; indicates the moderation action is retired but
   * audit-traceable.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null;
};
export namespace IDiscussionBoardModerationAction {
  /**
   * Request body schema for querying moderation actions by page, filter, and
   * advanced search, as required for admin/moderator compliance review and
   * triage.
   */
  export type IRequest = {
    /** Page number for pagination (1-based index); optional, defaults to 1. */
    page?: (number & tags.Type<"int32">) | null;

    /** Number of records per page, default set by business logic. */
    limit?: (number & tags.Type<"int32">) | null;

    /**
     * Restriction to moderation actions matching this type (e.g., 'warn',
     * 'mute', 'remove', 'edit', etc.).
     */
    actionType?: string;

    /**
     * Filter by moderator actor. Only returns actions by this moderator
     * UUID.
     */
    moderatorId?: string & tags.Format<"uuid">;

    /** Restrict actions impacting this user (targeted user UUID). */
    userId?: string & tags.Format<"uuid">;

    /** Filter actions performed against this post (UUID of post). */
    postId?: string & tags.Format<"uuid">;

    /** Filter actions performed on this comment (UUID for target comment). */
    commentId?: string & tags.Format<"uuid">;

    /** Lower bound filter for effective_from timestamps. */
    effectiveFrom?: string & tags.Format<"date-time">;

    /** Upper bound for effective_until filtering. */
    effectiveUntil?: string & tags.Format<"date-time">;

    /** Lower-bound creation time filter for action records. */
    createdFrom?: string & tags.Format<"date-time">;

    /** Upper-bound for creation time. */
    createdTo?: string & tags.Format<"date-time">;

    /** Sort field (e.g., 'created_at', 'action_type'). */
    sortBy?: string;

    /** Sort direction, ascending or descending. */
    sortDirection?: "asc" | "desc";

    /** Free-text search for action reason or moderation context. */
    search?: string;
  };

  /**
   * Request body schema for creating a new moderation action. Follows the
   * discussion_board_moderation_actions model, omitting system-generated
   * fields. Used by moderator/admin-only endpoints to enact new moderation
   * actions for compliance and governance. Submission must include all
   * required business fields; system fields like id or created_at are not
   * client-provided.
   */
  export type ICreate = {
    /**
     * ID of the moderator creating this action (as assigned in the
     * session/auth context).
     */
    moderator_id: string & tags.Format<"uuid">;

    /**
     * User ID of the affected party, if this action is user-targeted.
     * Optional if action is for a post or comment only.
     */
    user_id?: (string & tags.Format<"uuid">) | null;

    /** Target post ID for post-specific moderation actions. Null otherwise. */
    post_id?: (string & tags.Format<"uuid">) | null;

    /**
     * Target comment ID for comment-specific moderation actions. Null
     * otherwise.
     */
    comment_id?: (string & tags.Format<"uuid">) | null;

    /**
     * Action type, one of the defined enums, determining moderation
     * enforcement category.
     */
    action_type:
      | "warn"
      | "mute"
      | "remove"
      | "edit"
      | "restrict"
      | "restore"
      | "escalate";

    /** Mandatory brief justification for audit and workflow tracking. */
    action_reason: string;

    /** Optional longer explanation or internal field for moderator notes. */
    details?: string | null;

    /**
     * When the action should become effective (usually now, but can be
     * scheduled for future enforcement).
     */
    effective_from: string & tags.Format<"date-time">;

    /**
     * When a time-limited moderation action expires (leave null for
     * indefinite actions).
     */
    effective_until?: (string & tags.Format<"date-time">) | null;
  };

  /**
   * Request body type for updating an existing moderation action record. Only
   * business-updatable fields are accepted. Includes support for updating
   * action type, reasons, and timing (not system fields like id). Used in
   * admin/moderator-level update and correction endpoints.
   */
  export type IUpdate = {
    /** Optional update to the definitive moderation action type. */
    action_type?:
      | "warn"
      | "mute"
      | "remove"
      | "edit"
      | "restrict"
      | "restore"
      | "escalate";

    /** Override or correction to the primary justification string. */
    action_reason?: string;

    /** Update or set moderator note/context field. */
    details?: string | null;

    /** Update start of enforcement window. */
    effective_from?: string & tags.Format<"date-time">;

    /** Update end time of temporary actions (null for indefinite/perm). */
    effective_until?: (string & tags.Format<"date-time">) | null;

    /** For system use: allows marking the action as retired/soft-deleted. */
    deleted_at?: (string & tags.Format<"date-time">) | null;
  };

  /**
   * Summary type for listing/searching moderation actions. Lightweight fields
   * for tabular display, dashboards, or audit workflow queues. Omits full
   * internal details and long-form context for efficiency.
   */
  export type ISummary = {
    /** Moderation action unique identifier. */
    id: string & tags.Format<"uuid">;

    /** Moderator who issued the action. */
    moderator_id: string & tags.Format<"uuid">;

    /** Affected user for user-specific moderation. Nullable. */
    user_id?: (string & tags.Format<"uuid">) | null;

    /** Affected post for post-specific moderation. */
    post_id?: (string & tags.Format<"uuid">) | null;

    /** Affected comment for comment-specific moderation. */
    comment_id?: (string & tags.Format<"uuid">) | null;

    /** Type/category of moderation action taken. */
    action_type:
      | "warn"
      | "mute"
      | "remove"
      | "edit"
      | "restrict"
      | "restore"
      | "escalate";

    /** Primary justification for enforcement, suitable for moderation logs. */
    action_reason: string;

    /** Timestamp when the action was recorded. */
    created_at: string & tags.Format<"date-time">;

    /** Marker for soft deletion of retired moderation action, if applicable. */
    deleted_at?: (string & tags.Format<"date-time">) | null;
  };
}
