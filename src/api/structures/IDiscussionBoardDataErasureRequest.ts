import { tags } from "typia";

/**
 * Full details for a data erasure request record in the platform, reflecting
 * user/compliance requests for data deletion per privacy regulations. Contains
 * identifiers, reasoning, workflow status, and audit fields.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussionBoardDataErasureRequest = {
  /** Unique erasure request id, primary key in erasure request record. */
  id: string & tags.Format<"uuid">;

  /** Requestor user id (uuid) for the data erasure request. */
  discussion_board_user_id: string & tags.Format<"uuid">;

  /**
   * Type of erasure being requested: values such as 'full_account',
   * 'post_only', etc. Used for compliance traceability.
   */
  request_type: string;

  /**
   * Current status of the erasure workflow (e.g., 'pending', 'processing',
   * 'completed', 'rejected').
   */
  status: string;

  /** Datetime when the request was submitted. */
  submitted_at: string & tags.Format<"date-time">;

  /** When this request completed/closed/processed. Null if ongoing. */
  processed_at?: (string & tags.Format<"date-time">) | null;

  /**
   * User or regulatory-provided justification for erasure request. May be
   * empty/null.
   */
  justification?: string | null;

  /** Optional external regulator/case reference. May be empty/null. */
  regulator_reference?: string | null;

  /** Compliance staff member who verified the request, if applicable. */
  verifier?: string | null;

  /** When the request was verified for eligibility. May be null. */
  verified_at?: (string & tags.Format<"date-time">) | null;

  /**
   * Structured business or compliance response (e.g., JSON, status
   * explanation, etc). May be null.
   */
  response_payload?: string | null;

  /** Entity creation timestamp. */
  created_at: string & tags.Format<"date-time">;

  /** When record updated. */
  updated_at: string & tags.Format<"date-time">;

  /** Soft delete timestamp. Null when active. */
  deleted_at?: (string & tags.Format<"date-time">) | null;
};
export namespace IDiscussionBoardDataErasureRequest {
  /**
   * Request body for advanced filtering/searching of data erasure requests
   * for compliance and privacy workflow management.
   */
  export type IRequest = {
    /** Filter by the user who submitted the request (uuid). */
    discussion_board_user_id?: string & tags.Format<"uuid">;

    /**
     * Filter by the status of the erasure request ('pending', 'processing',
     * 'completed', 'rejected').
     */
    status?: string;

    /**
     * Filter by the type of erasure request (e.g., 'full_account',
     * 'post_only', 'comment_only', etc).
     */
    request_type?: string;

    /** Datetime (inclusive) to filter requests submitted on/after this time. */
    submitted_at_from?: string & tags.Format<"date-time">;

    /**
     * Datetime (inclusive) to filter requests submitted on/before this
     * time.
     */
    submitted_at_to?: string & tags.Format<"date-time">;

    /** Which page to start from for paginated results (1-based). */
    page?: number & tags.Type<"int32">;

    /** Maximum number of results per page. */
    limit?: number & tags.Type<"int32">;
  };

  /**
   * Summary type for data erasure request records, providing high-level
   * fields for display in list/search export.
   */
  export type ISummary = {
    /**
     * Unique erasure request id. Primary key for the data erasure request
     * record.
     */
    id: string & tags.Format<"uuid">;

    /** Requesting user id (UUID). */
    discussion_board_user_id: string & tags.Format<"uuid">;

    /**
     * Type of erasure request, e.g., 'full_account', 'post_only',
     * 'comment_only', custom regulatory reference.
     */
    request_type: string;

    /**
     * Status string for workflow: 'pending', 'processing', 'completed',
     * 'rejected'.
     */
    status: string;

    /** Datetime of submission. */
    submitted_at: string & tags.Format<"date-time">;

    /**
     * Datetime when the request was processed/closed, or null if still
     * pending.
     */
    processed_at?: (string & tags.Format<"date-time">) | null;
  };

  /**
   * Payload to create a new data erasure request for regulatory compliance
   * (e.g., GDPR/CCPA). Includes type, traceable user, and optional
   * justification or regulator reference. Maps directly to
   * discussion_board_data_erasure_requests.
   */
  export type ICreate = {
    /**
     * ID of the user requesting erasure, referencing
     * discussion_board_users.id. Records traceable data subject for
     * compliance.
     */
    discussion_board_user_id: string & tags.Format<"uuid">;

    /**
     * Type of erasure requested (e.g., full account, post-only, etc.). Used
     * for regulatory tracking.
     */
    request_type: string;

    /**
     * Optional reason provided by user or required by regulator for erasure
     * justification.
     */
    justification?: string | null;

    /**
     * Optional external agency reference or legal tracking number for data
     * erasure requests.
     */
    regulator_reference?: string | null;
  };

  /**
   * Updatable fields for an existing data erasure request. Enables compliance
   * staff or system to escalate, resolve, annotate, or close the request
   * record.
   */
  export type IUpdate = {
    /**
     * Status of erasure request (e.g., pending, processing, completed,
     * rejected). Settable by compliance or via workflow.
     */
    status?: string;

    /** Datetime when the erasure request was processed, if applicable. */
    processed_at?: (string & tags.Format<"date-time">) | null;

    /** Staff or system verifying the request. Used in compliance/audit logs. */
    verifier?: string | null;

    /**
     * Datetime when the request was verified for eligibility or legal
     * criteria, if done.
     */
    verified_at?: (string & tags.Format<"date-time">) | null;

    /**
     * Structured or free-text response sent to the requester, regulator, or
     * for documentation.
     */
    response_payload?: string | null;

    /** Reference to external agency for erasure compliance, if needed. */
    regulator_reference?: string | null;
  };
}
