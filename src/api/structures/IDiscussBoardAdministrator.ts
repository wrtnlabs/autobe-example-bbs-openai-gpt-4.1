import { tags } from "typia";

import { IAuthorizationToken } from "./IAuthorizationToken";

/**
 * Full schema for discuss_board_administrators table—describing each
 * administrator assignment, with privilege chain, escalation/revocation, and
 * all required audit fields. Schema aligns with platform governance policies,
 * escalation workflows, and auditability. See ERD and requirements for business
 * rules/detail.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussBoardAdministrator = {
  /**
   * Unique identifier for the administrator assignment.
   *
   * Primary key in the discuss_board_administrators Prisma table.
   */
  id: string & tags.Format<"uuid">;

  /**
   * UUID of the member promoted to administrator.
   *
   * Foreign key to discuss_board_members table. Each admin must be associated
   * with a specific member.
   */
  member_id: string & tags.Format<"uuid">;

  /**
   * UUID of the administrator responsible for this admin's role escalation.
   *
   * References discuss_board_administrators.id. Sets up privilege chains for
   * organizational traceability/audit.
   */
  escalated_by_administrator_id: string & tags.Format<"uuid">;

  /**
   * Timestamp (UTC) when administrator privileges were granted.
   *
   * Populated at admin role creation—matches escalated_at in the schema.
   */
  escalated_at: string & tags.Format<"date-time">;

  /**
   * Timestamp when admin privileges were revoked, if applicable.
   *
   * Nullable—set when privileges are rescinded or assignment terminated. See
   * Prisma schema for role status.
   */
  revoked_at?: (string & tags.Format<"date-time">) | null | undefined;

  /**
   * Business status of the administrator privileges (e.g., 'active',
   * 'resigned', 'suspended').
   *
   * Describes current state of privilege per business logic and enum values.
   */
  status: string;

  /**
   * Admin record creation timestamp (UTC).
   *
   * Correlates with created_at in the Prisma schema, required for audits.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp of last modification to admin record (UTC time).
   *
   * Updated whenever the record is changed. Audited per business compliance.
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * If present, the timestamp when the administrator record was soft-deleted
   * for compliance.
   *
   * Nullable per Prisma schema. Do not supply for active assignments.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IDiscussBoardAdministrator {
  /**
   * Payload for administrator account registration (join) on the discussBoard
   * platform. All fields required: unique email (login & contact), plain
   * password (for hashing), and auto-generated or user-provided nickname.
   * Adheres to security, uniqueness, and complexity constraints. Consent
   * logging and audit fields handled separately.
   */
  export type IJoin = {
    /**
     * Administrator account's email, must be unique across all user
     * accounts. Used for login and primary contact. Must follow RFC 5322.
     */
    email: string & tags.Format<"email">;

    /**
     * Raw password for new administrator, which will be securely hashed.
     * Must meet backend policy for length and complexity.
     */
    password: string;

    /**
     * Display nickname for the administrator. Usually set during
     * registration and shown in admin UIs. Must be unique among all
     * nicknames.
     */
    nickname: string;
  };

  /**
   * Administrator authorization payload. Returned after registration, login,
   * or token refresh. Contains JWT tokens, admin UUID, and full administrator
   * entity object.
   */
  export type IAuthorized = {
    /** Unique identifier (UUID) of the administrator account. */
    id: string & tags.Format<"uuid">;

    /**
     * UUID of the member promoted to administrator.
     *
     * Foreign key to discuss_board_members table. Each admin must be
     * associated with a specific member.
     */
    member_id: string & tags.Format<"uuid">;

    /**
     * UUID of the administrator responsible for this admin's role
     * escalation.
     *
     * References discuss_board_administrators.id. Sets up privilege chains
     * for organizational traceability/audit.
     */
    escalated_by_administrator_id: string & tags.Format<"uuid">;

    /**
     * Timestamp (UTC) when administrator privileges were granted.
     *
     * Populated at admin role creation—matches escalated_at in the schema.
     */
    escalated_at: string & tags.Format<"date-time">;

    /**
     * Timestamp when admin privileges were revoked, if applicable.
     *
     * Nullable—set when privileges are rescinded or assignment terminated.
     * See Prisma schema for role status.
     */
    revoked_at?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Business status of the administrator privileges (e.g., 'active',
     * 'resigned', 'suspended').
     *
     * Describes current state of privilege per business logic and enum
     * values.
     */
    status: string;

    /**
     * Admin record creation timestamp (UTC).
     *
     * Correlates with created_at in the Prisma schema, required for audits.
     */
    created_at: string & tags.Format<"date-time">;

    /**
     * Timestamp of last modification to admin record (UTC time).
     *
     * Updated whenever the record is changed. Audited per business
     * compliance.
     */
    updated_at: string & tags.Format<"date-time">;

    /**
     * If present, the timestamp when the administrator record was
     * soft-deleted for compliance.
     *
     * Nullable per Prisma schema. Do not supply for active assignments.
     */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** JWT token information for authentication */
    token: IAuthorizationToken;

    /** Detailed administrator account object per schema. */
    administrator?: IDiscussBoardAdministrator | undefined;
  };

  /**
   * Request schema for administrator login operation. Email and password must
   * match a registered admin user, both required.
   */
  export type ILogin = {
    /**
     * Administrator login email credential. Must match unique registered
     * administrator, per platform business policy.
     */
    email: string & tags.Format<"email">;

    /**
     * Administrator password credential submitted for authentication and
     * verification. Plain password is never stored.
     */
    password: string;
  };

  /**
   * Request schema to refresh administrator authentication session. Requires
   * the issued admin refresh token; yields new JWT pair if valid.
   */
  export type IRefresh = {
    /**
     * Refresh token previously issued for administrator session. Used to
     * obtain new access/refresh JWTs. Required.
     */
    refresh_token: string;
  };

  /**
   * Request schema for searching/filtering discuss_board_administrators. All
   * fields are optional and act as filters, sort keys, or pagination
   * controls. Follows business logic for search.
   */
  export type IRequest = {
    /**
     * Search filter by administrator status (e.g., 'active', 'resigned',
     * 'suspended').
     *
     * Useful for narrowing search results to specific role states, per
     * business enum definitions.
     */
    status?: string | undefined;

    /**
     * Filter for administrators whose escalation date (escalated_at) is on
     * or after this timestamp (UTC).
     *
     * Enables searching for recent or specific-date escalations.
     */
    escalation_date_from?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Filter for administrators whose escalation date (escalated_at) is on
     * or before this timestamp (UTC).
     *
     * Supports upper-bound date filtering for role assignment timing.
     */
    escalation_date_to?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Lower date bound for searching admin records by creation time
     * (created_at).
     *
     * Limits search to records created after the specified UTC date/time.
     */
    created_from?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Upper date bound for searching admin records by creation time
     * (created_at).
     *
     * Limits search to records created before the specified UTC date/time.
     */
    created_to?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Sorting key for admin search results (e.g., 'escalated_at', 'status',
     * etc.).
     *
     * Valid options determined by backend logic; matches field names as
     * appropriate.
     */
    sort_by?: string | undefined;

    /**
     * Direction to sort results (ascending or descending order).
     *
     * Accepts only 'asc' or 'desc' per OpenAPI/REST convention.
     */
    sort_direction?: "asc" | "desc" | undefined;

    /**
     * The page number for paginated queries.
     *
     * Defaults to 1 if not specified. Used in coordination with limit.
     */
    page?: (number & tags.Type<"int32">) | undefined;

    /**
     * Maximum number of records to return per page.
     *
     * Required for pagination, default defined by backend.
     */
    limit?: (number & tags.Type<"int32">) | undefined;
  };

  /**
   * Partial update schema for discuss_board_administrators—controls
   * administrative status, soft-deletion, privilege removal, and update
   * tracking. Used in administrative role-management UIs. Immutable fields
   * (id, member_id, escalated_by_administrator_id) are not included.
   */
  export type IUpdate = {
    /**
     * Field to set or clear the date/time when this admin was
     * revoked/deactivated.
     *
     * Null to clear, date/time to set privilege removal timestamp.
     */
    revoked_at?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Update business status for administrator privileges.
     *
     * Permits changing among business enums like 'active', 'resigned', or
     * 'suspended'; only those present in admin logic.
     */
    status?: string | undefined;

    /**
     * Timestamp for modification of admin record (UTC).
     *
     * Set to current time if updating any field. May be omitted to use
     * default/update-now logic.
     */
    updated_at?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Timestamps soft-deletion of administrator access/record.
     *
     * Omit for active admins, set to DateTime for revocation, or null for
     * clearing.
     */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };

  /**
   * Administrator summary DTO for paginated search/listing. Contains critical
   * status/audit fields for business/role management without full privilege,
   * consent, or assignment links.
   *
   * Use full IDiscussBoardAdministrator for complete detail. This summary is
   * for listing queries, membership dashboards, and audit surface overview.
   */
  export type ISummary = {
    /**
     * Unique identifier for this administrator role record in the
     * discuss_board_administrators table.
     */
    id: string & tags.Format<"uuid">;

    /**
     * UUID of the member assigned admin privilege (one to one mapping).
     *
     * Anchor for further member lookup.
     */
    member_id: string & tags.Format<"uuid">;

    /** Admin privilege/status metadata (active, resigned, suspended, etc.). */
    status: string;

    /** Timestamp at which admin role was first assigned. */
    escalated_at: string & tags.Format<"date-time">;

    /**
     * Nullable timestamp when admin privilege was revoked, suspended, or
     * removed.
     */
    revoked_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** Record created timestamp (ISO8601, UTC). */
    created_at: string & tags.Format<"date-time">;

    /** Record last updated timestamp. */
    updated_at: string & tags.Format<"date-time">;
  };
}
