import { tags } from "typia";

/**
 * Full poll option entity with all attributes as stored in backend. Each
 * represents a selectable answer for a given poll. Linked to parent poll and
 * may be deleted (soft delete) for audit/compliance.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussionBoardPollOption = {
  /** System-assigned unique identifier for this poll option. */
  id: string & tags.Format<"uuid">;

  /**
   * The unique identifier of the parent poll for this option. FK to
   * discussion_board_polls.id.
   */
  discussion_board_poll_id: string & tags.Format<"uuid">;

  /**
   * Displayed text of the option (answer choice). Unique per poll. E.g.,
   * 'Approve', 'Against', 'Abstain'.
   */
  option_text: string;

  /**
   * Display order of poll options in UI (low=first). Must be unique within
   * parent poll. 1-based.
   */
  sequence: number & tags.Type<"int32">;

  /** ISO date-time when option was created. Set by system. */
  created_at: string & tags.Format<"date-time">;

  /** ISO date-time when option was last updated. */
  updated_at: string & tags.Format<"date-time">;

  /** Soft-deletion marker (timestamp). Null if not deleted. */
  deleted_at?: (string & tags.Format<"date-time">) | null;
};
export namespace IDiscussionBoardPollOption {
  /**
   * Request structure for searching/filtering poll options attached to a
   * poll. Allows filtering by poll, text, sequence, soft-deletion status, and
   * pagination. Use for advanced UI search and admin/moderator reviews.
   */
  export type IRequest = {
    /**
     * (Optional) Filter by parent poll's unique identifier. If provided,
     * returns only options for this poll.
     */
    poll_id?: string & tags.Format<"uuid">;

    /** (Optional) Filter by poll option label (partial or full match). */
    option_text?: string;

    /** (Optional) Filter by display sequence/order (1-based integer). */
    sequence?: number & tags.Type<"int32">;

    /**
     * Should soft-deleted (deleted_at is not null) options be included in
     * result set?
     */
    include_deleted?: boolean;

    /** Page number for pagination. Defaults to 1. */
    page?: number & tags.Type<"int32">;

    /** Number of records per page, for pagination. */
    limit?: number & tags.Type<"int32">;

    /** Field for sorting results. */
    sort_by?: "created_at" | "updated_at" | "sequence";

    /** Sorting order, ascending or descending. */
    order?: "asc" | "desc";
  };

  /**
   * Request payload for creating a new poll option for a poll. Used in
   * admin/moderator and post-author workflows. Option text must be unique per
   * poll.
   */
  export type ICreate = {
    /**
     * Required. Poll to which this option will be added. FK to
     * discussion_board_polls.id.
     */
    discussion_board_poll_id: string & tags.Format<"uuid">;

    /**
     * Required. Label shown to users for this choice, must be unique within
     * poll.
     */
    option_text: string;

    /** Required. Display order (1-based) to control UI position of option. */
    sequence: number & tags.Type<"int32">;
  };

  /**
   * Update any combination of fields on an existing poll option. Used for
   * admin/post-author editing. Cannot change parent poll.
   */
  export type IUpdate = {
    /**
     * (Optional) Updated label for the poll option. Must remain unique
     * within poll.
     */
    option_text?: string;

    /** (Optional) New display sequence ordering for this poll option. */
    sequence?: number & tags.Type<"int32">;
  };

  /**
   * Summarized information about a poll option for list or search results.
   * Used in paginated index of options for a poll.
   */
  export type ISummary = {
    /** Unique identifier for this poll option, assigned by system. */
    id: string & tags.Format<"uuid">;

    /**
     * Primary key for parent poll. Foreign key linking to
     * discussion_board_polls.id.
     */
    poll_id: string & tags.Format<"uuid">;

    /**
     * Option label as it appears to users. E.g., 'Yes', 'No', 'Abstain'.
     * Must be unique per poll.
     */
    option_text: string;

    /**
     * Display order for this option within its poll. 1-based integer, low
     * numbers shown first.
     */
    sequence: number & tags.Type<"int32">;

    /**
     * Timestamp of soft deletion; null if not deleted. Used for
     * audit/compliance.
     */
    deleted_at?: (string & tags.Format<"date-time">) | null;
  };
}
