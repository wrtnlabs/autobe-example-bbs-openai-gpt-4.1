import { tags } from "typia";

/**
 * Represents a join relationship assigning a tag to a specific post in the
 * discussion board system. Used for topic categorization, search filtering, and
 * analytics. Follows the business logic requirement that each post can have up
 * to 5 unique tags, and each tag can be assigned to multiple posts.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussBoardPostTag = {
  /**
   * Primary Key. Unique identifier for this post-tag association. This field
   * is auto-generated by the database and references the assignment record.
   */
  id: string & tags.Format<"uuid">;

  /**
   * Reference to the post to which this tag is assigned. Corresponds to
   * discuss_board_posts.id. This property establishes the post context of the
   * tag assignment.
   */
  post_id: string & tags.Format<"uuid">;

  /**
   * Reference to the tag entity (by UUID). Indicates which tag is attached to
   * the referenced post. Must be unique (see unique constraint [post_id,
   * tag_id]).
   */
  tag_id: string & tags.Format<"uuid">;

  /**
   * The timestamp when the tag assignment was created. Represents the
   * creation date and is recorded in UTC.
   */
  created_at: string & tags.Format<"date-time">;
};
export namespace IDiscussBoardPostTag {
  /**
   * Request type for searching/filtering/paginating tags assigned to
   * discussBoard posts. All properties are optional, supporting advanced UI
   * queries and audit/admin usage. Refer to business/ERD documentation for
   * valid usage scenarios.
   */
  export type IRequest = {
    /** Page number for pagination. */
    page?: (number & tags.Type<"int32">) | null | undefined;

    /** Page size for pagination. */
    limit?: (number & tags.Type<"int32">) | null | undefined;

    /** Filter: tag UUID to search for in post-tag assignments. */
    tag_id?: (string & tags.Format<"uuid">) | undefined;

    /** Start date (ISO 8601) for filtering tags by assignment time. */
    assigned_from?: (string & tags.Format<"date-time">) | undefined;

    /** End date (ISO 8601) for filtering tags by assignment time. */
    assigned_to?: (string & tags.Format<"date-time">) | undefined;

    /** Field to sort by (e.g., created_at). */
    sort_by?: string | undefined;

    /** Sort direction (ascending/descending). */
    sort_order?: "asc" | "desc" | undefined;
  };

  /**
   * Request body schema for assigning a new tag to a post. Contains only the
   * tag_id, as post_id is inferred from the REST API route/path. The same tag
   * may not be assigned multiple times to the same post.
   */
  export type ICreate = {
    /**
     * UUID of the tag to assign to a post. In create requests, the post_id
     * is derived from the path parameter. This value must reference a valid
     * tag as defined in platform configuration.
     */
    tag_id: string & tags.Format<"uuid">;
  };

  /**
   * Summary of tag assignment for a post. Does not include tag name/metadata;
   * this is a simple pairing reference.
   */
  export type ISummary = {
    /**
     * Unique identifier for the post-tag relationship. Primary key of
     * discuss_board_post_tags.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Tag's unique identifier. References the tag applied to the post. See
     * 'tag_id' in discuss_board_post_tags.
     */
    tag_id: string & tags.Format<"uuid">;

    /**
     * Timestamp (UTC, ISO 8601 format) of when this tag was assigned to the
     * post.
     */
    created_at: string & tags.Format<"date-time">;
  };
}
