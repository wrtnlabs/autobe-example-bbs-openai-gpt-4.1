import { tags } from "typia";

import { IAuthorizationToken } from "./IAuthorizationToken";

/**
 * Member entity describing users who participate as registered members.
 * Contains basic identity, account linkage, nickname, status, and audit
 * timestamps. Used in all core business/response logic.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussBoardMember = {
  /** Globally unique identifier for the member (UUID). */
  id: string;

  /** Identifier for the associated discuss_board_user_accounts record. */
  user_account_id: string;

  /**
   * Display nickname chosen by the member. Must be unique and shown in
   * posts/comments.
   */
  nickname: string;

  /**
   * Current member account status (active, banned, suspended, etc.). Used for
   * business logic and audit.
   */
  status: string;

  /** UTC timestamp when the member record was created. */
  created_at: string & tags.Format<"date-time">;

  /** UTC timestamp when the member record was last updated. */
  updated_at: string & tags.Format<"date-time">;

  /** Soft deletion timestamp for the member account, or null if not deleted. */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IDiscussBoardMember {
  /**
   * Registration payload for creating a new discussBoard member, covering
   * account (email/password), public nickname, and all required
   * legal/business policy consents at account creation. All fields are
   * required for success, and uniqueness/consent policies are enforced.
   */
  export type IJoin = {
    /**
     * The unique email address for the new member registration.
     *
     * Required. Must pass RFC-5322 validation and not collide with any
     * existing discuss_board_user_accounts record. Used for login,
     * communication, and verification. Privacy-sensitive.
     */
    email: string & tags.Format<"email">;

    /**
     * Password string for the new member account. Must be securely handled;
     * only sent in plaintext for registration/login, never stored as-is.
     *
     * Will be securely hashed and salted before storage. Must meet
     * complexity requirements: at least 10 chars with uppercase, lowercase,
     * number, and special character. Not exposed or persisted in
     * responses.
     */
    password: string & tags.MinLength<10>;

    /**
     * Initial nickname for the member, displayed in posts/comments and used
     * as a public identifier.
     *
     * Must be unique in system, required for all new member registrations.
     * Exposed in all member-related responses and visible to other users.
     * Length, allowed characters, and uniqueness policies enforced at
     * application layer.
     */
    nickname: string;

    /**
     * List of explicit policy consents granted at registration (privacy
     * policy, terms of service, marketing opt-in/out, etc.).
     *
     * Required: must include all policies required for account creation.
     * Each entry must specify the policy type, version, and action. Used
     * for compliance and legal audit.
     */
    consent: IDiscussBoardMember.IConsent[];
  };

  /**
   * Record of one explicit policy consent (privacy, TOS, or marketing) given
   * by a registering user. Required at account creation for legal
   * compliance.
   */
  export type IConsent = {
    /**
     * Type of policy requiring consent (e.g., 'privacy_policy',
     * 'terms_of_service', 'marketing_opt_in').
     *
     * Must match a recognized business policy type. Used as reference
     * during compliance checks.
     */
    policy_type: string;

    /**
     * Version identifier for the policy being agreed to. Enables audit of
     * the terms in effect at time of registration.
     */
    policy_version: string;

    /**
     * The action taken by the user for this policy (e.g., 'granted',
     * 'revoked', 'updated'). Generally 'granted' for registration consent.
     */
    consent_action: string;
  };

  /**
   * Represents the result of login/join/refresh: authorized JWT token and all
   * required identifying/account metadata for the member, including member
   * status, nickname, and token information.
   */
  export type IAuthorized = {
    /**
     * Globally unique identifier for the user_account, required for token
     * issuance and ongoing session management.
     *
     * References the discuss_board_user_accounts record for the member.
     * Exposed in every post-auth response and is used as the core login
     * identity.
     */
    id: string;

    /** Identifier for the associated discuss_board_user_accounts record. */
    user_account_id: string;

    /**
     * Display nickname chosen by the member. Must be unique and shown in
     * posts/comments.
     */
    nickname: string;

    /**
     * Current member account status (active, banned, suspended, etc.). Used
     * for business logic and audit.
     */
    status: string;

    /** UTC timestamp when the member record was created. */
    created_at: string & tags.Format<"date-time">;

    /** UTC timestamp when the member record was last updated. */
    updated_at: string & tags.Format<"date-time">;

    /**
     * Soft deletion timestamp for the member account, or null if not
     * deleted.
     */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** JWT token information for authentication */
    token: IAuthorizationToken;

    /**
     * Member entity information, including nickname, member id, account
     * linkage, and status. Used for UI personalization and member-level
     * business logic.
     */
    member?: IDiscussBoardMember | undefined;
  };

  /**
   * Credential payload for member login to the discussBoard platform.
   * Requires email and password fields as defined in authentication business
   * requirements. Used for authentication and JWT issuance.
   */
  export type ILogin = {
    /**
     * Email address registered with the member account. This must be a
     * unique, verified email as defined in the member authentication
     * schema.
     */
    email: string & tags.Format<"email">;

    /**
     * Account password (in plain text for input), which will be compared to
     * the stored password_hash via secure authentication logic.
     */
    password: string;
  };

  /**
   * Payload for member session token refresh. Contains the refresh_token used
   * to validate session continuation and rotate JWTs. Aligns with secure
   * session management and member authentication lifecycles.
   */
  export type IRefresh = {
    /**
     * Refresh token previously issued in prior authentication, required to
     * renew access/refresh JWTs for ongoing member sessions. Must be a
     * secure, opaque string per JWT/refresh token business rules.
     */
    refresh_token: string;
  };

  /**
   * Summary record for a platform member, suitable for secure
   * display/contextualization in session responses and role escalation. Never
   * includes sensitive or authentication fields.
   */
  export type ISummary = {
    /**
     * UUID of the member referenced by this summary. Used to identify and
     * correlate member records with session and role information.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Member's nickname or display name as registered. Used in all business
     * and UI contexts.
     */
    nickname: string;

    /**
     * Business status of the member (e.g., active, suspended, banned).
     * Reflects current eligibility for actions or session renewal.
     */
    status: string;
  };
}
