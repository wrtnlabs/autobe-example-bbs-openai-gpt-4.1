import { tags } from "typia";

/**
 * Discussion board platform/system audit log record.
 *
 * Captures key audit events for security, compliance, moderation, or
 * administrative reviews. Logs the actor, their role, type of action, target
 * object, description, and timestamp. Used for audit log searches, detail
 * views, or compliance audits. Mirrors discussion_board_audit_logs table.
 *
 * Info-only: May include nullable fields for system-initiated actions.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussionBoardAuditLog = {
  /** Unique identifier of the audit log entry. */
  id: string & tags.Format<"uuid">;

  /**
   * Actor (user) id for this action, if applicable (nullable for system
   * events).
   */
  actor_id?: (string & tags.Format<"uuid">) | null;

  /**
   * Role of the actor at time of action
   * (visitor/user/moderator/admin/system).
   */
  actor_role: string;

  /** Category/type of audit event (e.g., 'login', 'moderation', etc). */
  action_type: string;

  /** ID or name of the object affected by this action (nullable). */
  target_object?: string | null;

  /** Human-readable description of action, for compliance. */
  description?: string | null;

  /** Timestamp of when the audit event occurred. */
  created_at: string & tags.Format<"date-time">;
};
export namespace IDiscussionBoardAuditLog {
  /** Request schema for querying audit logs. All fields optional. */
  export type IRequest = {
    /** Page number for results pagination. Optional. */
    page?:
      | (number &
          tags.Type<"int32"> &
          tags.JsonSchemaPlugin<{
            format: "int32";
          }>)
      | null;

    /**
     * Number of records to return per page. Optional; system default
     * applies if omitted.
     */
    limit?:
      | (number &
          tags.Type<"int32"> &
          tags.JsonSchemaPlugin<{
            format: "int32";
          }>)
      | null;

    /**
     * Unique identifier of the actor whose audit logs are being queried.
     * Optional.
     */
    actor_id?: string;

    /**
     * Role of actor (e.g. 'user', 'moderator', 'admin') for filtering.
     * Optional.
     */
    actor_role?: string;

    /**
     * Filter logs by action type (e.g. 'config_update', 'moderation').
     * Optional.
     */
    action_type?: string;

    /** Restrict search to logs affecting a specific object/entity. Optional. */
    target_object?: string;

    /**
     * Filter logs to those created at or after this ISO date/time.
     * Optional.
     */
    start_at?: string & tags.Format<"date-time">;

    /** Filter logs to those created before this ISO date/time. Optional. */
    end_at?: string & tags.Format<"date-time">;

    /** Keyword search over description field. Optional. */
    keyword?: string;
  };
}
