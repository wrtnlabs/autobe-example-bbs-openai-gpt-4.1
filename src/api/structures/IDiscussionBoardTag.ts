import { tags } from "typia";

/**
 * A tag entity used for classifying categories and posts for faceted search,
 * topic suggestions, and moderation logic. Direct mapping to
 * discussion_board_tags. Includes label, description, and administrative
 * state.
 *
 * - Fields:
 *
 *   - Id: Unique identifier (UUID, PK).
 *   - Label: Unique user-/admin-facing tag (e.g., 'policy', 'event').
 *   - Description: Optional, provides extra context for moderators or UI tooltips.
 *   - Is_active: True if assignable to categories/posts currently.
 *   - Created_at/updated_at: Administrative and display metadata.
 *   - Deleted_at: Logical soft deletion for deactivation or retention.
 *
 * Administers platform taxonomy and content discoverability with
 * compliance/audit tracking.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussionBoardTag = {
  /** Unique identifier for this tag (UUID, primary key). */
  id: string & tags.Format<"uuid">;

  /**
   * Unique tag label seen by users/admins. Used for tag search, navigation,
   * and display.
   */
  label: string;

  /**
   * Optional description to provide extra context in admin UI, tooltips, or
   * moderation workflows.
   */
  description?: string | null;

  /**
   * If true, this tag may be actively assigned to posts/categories. Tags are
   * not available for selection if inactive.
   */
  is_active: boolean;

  /** Timestamp denoting tag creation (UTC ISO 8601 format). */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp for the last modification of this tag (UTC ISO 8601 format). */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft deletion timestamp. Tags with deleted_at are unavailable for normal
   * assignment but retained for audit/compliance.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null;
};
export namespace IDiscussionBoardTag {
  /**
   * Payload for creating a new tag to be used for categorization and faceted
   * search. label must be unique platform-wide.
   */
  export type ICreate = {
    /** Unique, user-/admin-facing tag label (case-insensitive) to create. */
    label: string;

    /** Optional detail/context for the tag. */
    description?: string | null;

    /** If true, tag can be assigned immediately after creation. */
    is_active: boolean;
  };

  /**
   * Specification for searching, filtering, and paginating tags for list
   * endpoints.
   */
  export type IRequest = {
    /** Page number for paginated listing (1-based). */
    page?: number & tags.Type<"int32">;

    /** Number of tags to return per page. */
    limit?: number & tags.Type<"int32">;

    /** Free-text search for tag label or description. */
    search?: string;

    /** Optional filter to restrict results to active/inactive tags only. */
    is_active?: boolean;

    /** Field for sorting tag records. */
    sort_by?: "label" | "created_at";

    /** Sorting direction (ascending/descending). */
    sort_dir?: "asc" | "desc";
  };

  /**
   * Minimal tag information suitable for list or summary views (not including
   * soft deletion/description/admin details).
   */
  export type ISummary = {
    /** The tag's unique identifier (UUID). */
    id: string & tags.Format<"uuid">;

    /** Tag label used in UI and search suggestions. */
    label: string;

    /** Active status, determines assignability and display. */
    is_active: boolean;

    /** Timestamp of tag creation. */
    created_at: string & tags.Format<"date-time">;
  };

  /**
   * Request body schema for updating a tag in the discussion board taxonomy.
   * All fields are optional.
   */
  export type IUpdate = {
    /**
     * Tag label as seen by users. Unique and user-facing. Changing this
     * updates how tags are referenced and displayed.
     */
    label?: string;

    /**
     * Optional human-readable description for users and moderators. Can be
     * set to null to remove description.
     */
    description?: string | null;

    /** Whether the tag is currently assignable and visible to users. */
    is_active?: boolean;
  };
}
