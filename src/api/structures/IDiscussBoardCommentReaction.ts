import { tags } from "typia";

/**
 * Comment reaction entity as stored in discuss_board_comment_reactions. Links a
 * member/user to a like/dislike on a comment. Supports audit and soft-delete.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussBoardCommentReaction = {
  /** Unique identifier (UUID) of the comment reaction. */
  id: string & tags.Format<"uuid">;

  /** UUID of member who reacted to the comment. */
  discuss_board_member_id: string & tags.Format<"uuid">;

  /** UUID of comment receiving the reaction. */
  discuss_board_comment_id: string & tags.Format<"uuid">;

  /**
   * Type of reaction: always either 'like' or 'dislike'. Only these two
   * values allowed.
   */
  reaction_type: "like" | "dislike";

  /** ISO8601 timestamp when the reaction was created. */
  created_at: string & tags.Format<"date-time">;

  /** ISO8601 timestamp of most recent update. */
  updated_at: string & tags.Format<"date-time">;

  /** Soft delete timestamp for this reaction; null if never deleted. */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IDiscussBoardCommentReaction {
  /**
   * Request parameters for searching/filtering comment reactions
   * (discuss_board_comment_reactions). Supports filtering by target comment,
   * member, reaction type, date range, and paging.
   */
  export type IRequest = {
    /** If specified, only reactions to this comment will be returned. */
    discuss_board_comment_id?: (string & tags.Format<"uuid">) | undefined;

    /** If specified, only reactions by this member will be returned. */
    discuss_board_member_id?: (string & tags.Format<"uuid">) | undefined;

    /** Optional reaction type filter: 'like' or 'dislike'. */
    reaction_type?: "like" | "dislike" | undefined;

    /** Return reactions created at or after this ISO8601 timestamp. */
    created_after?: (string & tags.Format<"date-time">) | undefined;

    /** Return reactions created at or before this ISO8601 timestamp. */
    created_before?: (string & tags.Format<"date-time">) | undefined;

    /** Page number for pagination (default 1). */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /** Number of records per page (default 20, max 100). */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<100>)
      | undefined;
  };

  /**
   * Payload for creating a new reaction on a comment. Requires target comment
   * UUID and 'like' or 'dislike' type.
   */
  export type ICreate = {
    /** UUID of the comment to be reacted to. */
    discuss_board_comment_id: string & tags.Format<"uuid">;

    /** The reaction type (must be 'like' or 'dislike'). */
    reaction_type: "like" | "dislike";
  };

  /** Payload for updating an existing comment reaction's type (like/dislike). */
  export type IUpdate = {
    /** Update the reaction type to 'like' or 'dislike'. */
    reaction_type: "like" | "dislike";
  };

  /**
   * Summary representation for a comment reaction, including reaction type
   * and referencing both actor and target.
   */
  export type ISummary = {
    /**
     * Unique identifier for the comment reaction. Primary key of
     * discuss_board_comment_reactions.
     */
    id: string & tags.Format<"uuid">;

    /** UUID of the member who performed this reaction (like/dislike). */
    discuss_board_member_id: string & tags.Format<"uuid">;

    /** Target comment UUID for the reaction. */
    discuss_board_comment_id: string & tags.Format<"uuid">;

    /** Reaction type (must be 'like' or 'dislike', per business rule). */
    reaction_type: string;

    /** Timestamp (UTC, ISO 8601). */
    created_at: string & tags.Format<"date-time">;

    /** Timestamp (UTC, ISO 8601). */
    updated_at: string & tags.Format<"date-time">;
  };
}
