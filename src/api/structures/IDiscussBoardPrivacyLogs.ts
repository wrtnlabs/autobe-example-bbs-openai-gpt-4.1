import { tags } from "typia";

/**
 * Represents a single audit log entry for privacy-relevant actions related to
 * user data (such as exports, deletions, or policy changes) in the discussBoard
 * platform. This record references the acting user (actor_user_account_id), the
 * subject of the data action (data_subject_user_account_id), the type of action
 * performed (action_type), the result of the operation (result_status),
 * optionally a business-justified description, and the time at which the action
 * was created. All properties adhere to underlying business requirements for
 * privacy traceability and are compliant with regulatory mandates. For each
 * entry, actor and subject account IDs are UUIDs, nullable for system or
 * unauthenticated actions. The result_status conveys whether the action was
 * successful or had special circumstances requiring compliance review.
 *
 * This schema is strictly aligned with the corresponding Prisma model, ensuring
 * system integrity for audit-trail, compliance, and incident response. The id
 * property is the primary key (UUID).
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussBoardPrivacyLogs = {
  /** The unique identifier for this privacy log entry, as a UUID. */
  id: string & tags.Format<"uuid">;

  /**
   * The UUID of the user account that performed the privacy-affecting action.
   * Nullable for automated/system/integration actions.
   */
  actor_user_account_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * The UUID of the user account whose data was acted upon (the data
   * subject). May be null for system/global actions.
   */
  data_subject_user_account_id?:
    | (string & tags.Format<"uuid">)
    | null
    | undefined;

  /**
   * The category of privacy operation performed. Typical values include
   * 'access', 'export', 'delete', 'policy_update', etc.
   */
  action_type: string;

  /**
   * Optional narrative providing business or compliance context for this
   * privacy action (e.g., regulatory mandate, user request).
   */
  description?: string | null | undefined;

  /**
   * The result/outcome of this privacy actionâ€”typical values: 'success',
   * 'failure', or explanation for partial outcomes.
   */
  result_status: string;

  /**
   * The UTC timestamp when this privacy operation was performed (in RFC 3339
   * format).
   */
  created_at: string & tags.Format<"date-time">;
};
export namespace IDiscussBoardPrivacyLogs {
  /**
   * Parameters for searching, filtering, and paginating privacy log records
   * (discuss_board_privacy_logs). All options are optional. Only properties
   * present in the schema are permitted, additional fields should not be
   * introduced.
   */
  export type IRequest = {
    /**
     * Filter by ID of the user account that performed the privacy action.
     * Nullable; if omitted or null, filter is not applied. Maps to
     * discuss_board_privacy_logs.actor_user_account_id.
     */
    actor_user_account_id?: string | undefined;

    /**
     * Filter by data subject user account affected by the privacy action.
     * Nullable; omitting means filter is not applied. Matches
     * discuss_board_privacy_logs.data_subject_user_account_id.
     */
    data_subject_user_account_id?: string | undefined;

    /**
     * Filter log entries by action type (e.g., access, export, delete,
     * policy_update). See discuss_board_privacy_logs.action_type.
     */
    action_type?: string | undefined;

    /**
     * Restrict returned logs by action result: success, failure, etc.
     * Corresponds to discuss_board_privacy_logs.result_status column.
     */
    result_status?: string | undefined;

    /**
     * Include logs created after this ISO8601 datetime (UTC). Optional;
     * nullable. Maps to created_at.
     */
    created_after?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Include logs created before this ISO8601 datetime (UTC). Optional.
     * Maps to created_at.
     */
    created_before?: (string & tags.Format<"date-time">) | null | undefined;

    /** Page number for pagination, starting from 1. Optional. */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | null | undefined;

    /** Results per page for pagination. Optional. */
    limit?: (number & tags.Type<"int32"> & tags.Minimum<1>) | null | undefined;

    /** Field to order the results by (e.g., created_at). Optional. */
    orderBy?: string | undefined;

    /** Sort direction: 'asc' or 'desc'. Optional. */
    sortDirection?: "asc" | "desc" | undefined;

    /** Free-text search filter for description field. Optional. */
    search?: string | undefined;
  };
}
