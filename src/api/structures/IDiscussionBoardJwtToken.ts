import { tags } from "typia";

/**
 * Complete JWT token session record for security/session management and audit.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussionBoardJwtToken = {
  /** JWT token session unique ID. */
  id: string & tags.Format<"uuid">;

  /** User ID owning the session (UUID). */
  discussion_board_user_id: string & tags.Format<"uuid">;

  /** JWT access token string (unique, opaque, and signed). */
  token: string;

  /** Datetime when token was created (session start, ISO8601). */
  issued_at: string & tags.Format<"date-time">;

  /** Datetime when token expires (ISO8601, UTC). */
  expires_at: string & tags.Format<"date-time">;

  /** Datetime token/session was revoked (logout), or null. */
  revoked_at?: (string & tags.Format<"date-time">) | null;

  /** Optional device/session info string (e.g., user-agent). */
  device_info?: string | null;

  /** Datetime when this record was created. */
  created_at: string & tags.Format<"date-time">;

  /** Datetime this record was last updated. */
  updated_at: string & tags.Format<"date-time">;

  /** Datetime JWT token was soft-deleted (user deleted, audit), or null. */
  deleted_at?: (string & tags.Format<"date-time">) | null;
};
export namespace IDiscussionBoardJwtToken {
  /**
   * Request filter model for searching JWT session tokens. Includes paging,
   * status, and device/session filters.
   */
  export type IRequest = {
    /** Pagination: page number (1-based, optional). */
    page?: number & tags.Type<"int32">;

    /** Pagination: number of results per page (optional). */
    limit?: number & tags.Type<"int32">;

    /**
     * Session token status filter: 'active', 'expired', 'revoked'.
     * Optional.
     */
    status?: string;

    /** Datetime from which to include tokens issued (inclusive), ISO8601. */
    issued_at_from?: string & tags.Format<"date-time">;

    /** Datetime up to which to include tokens issued (inclusive), ISO8601. */
    issued_at_to?: string & tags.Format<"date-time">;

    /** Datetime from which tokens expired (inclusive), ISO8601. */
    expired_at_from?: string & tags.Format<"date-time">;

    /** Datetime up to which tokens expired (inclusive), ISO8601. */
    expired_at_to?: string & tags.Format<"date-time">;

    /** Optional device/session info filter. */
    device_info?: string;
  };

  /**
   * Summary view of an individual JWT token session for session and device
   * audit.
   */
  export type ISummary = {
    /** Unique id for this JWT session token. */
    id: string & tags.Format<"uuid">;

    /** UUID of the user to whom this token belongs. */
    discussion_board_user_id: string & tags.Format<"uuid">;

    /** JWT access token string, unique per session. Opaque and signed. */
    token: string;

    /** Datetime when this token was issued. */
    issued_at: string & tags.Format<"date-time">;

    /** When this token expires (ISO8601). */
    expires_at: string & tags.Format<"date-time">;

    /** Datetime this token was revoked (logout), or null if still valid. */
    revoked_at?: (string & tags.Format<"date-time">) | null;

    /** Device/user-agent/OS/session info for this JWT token. */
    device_info?: string | null;

    /** Datetime this record was created. */
    created_at: string & tags.Format<"date-time">;

    /** Datetime of last JWT token record update. */
    updated_at: string & tags.Format<"date-time">;

    /** Datetime token was soft-deleted (hidden from user), null if active. */
    deleted_at?: (string & tags.Format<"date-time">) | null;
  };

  /**
   * Model for updating JWT token session metadata. Only mutable fields
   * permitted: revocation timestamp and device info.
   */
  export type IUpdate = {
    /**
     * Sets/revokes the session token's (JWT) revocation timestamp.
     *
     * This property, if set, will reflect the date/time the session token
     * was revoked. If left null, the token remains active unless expired.
     * ISO 8601 date-time.
     */
    revoked_at?: (string & tags.Format<"date-time">) | null;

    /**
     * Optional device or session metadata for tracking session context. Set
     * to identify the device type or user agent that owns this token.
     */
    device_info?: string | null;
  };
}
