import { tags } from "typia";

/**
 * Schema for a single moderation log entry (discuss_board_moderation_logs),
 * containing workflow, escalation, and audit data for every event during
 * moderation review or appeals. Returned as part of moderation action audit
 * history, compliance reviews, or detail views.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussBoardModerationLogs = {
  /** The unique identifier for the moderation log event. */
  id: string & tags.Format<"uuid">;

  /**
   * The user (member/moderator/admin) who performed/logged this moderation
   * action.
   *
   * Null/undefined when the action was performed by the system/automation or
   * mapping to legacy data.
   */
  actor_member_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Reference to the related moderation action or event (UUID).
   *
   * Null when no related moderation action or the log is a child of a
   * different object type.
   */
  related_action_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Reference to a related appeal that this action is part of.
   *
   * Null when the event is unrelated to an appeal.
   */
  related_appeal_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Reference to an underlying content report ID that triggered this event.
   *
   * Null for direct action logs.
   */
  related_report_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Event type code: e.g. report_received, action_taken, appeal_created,
   * status_update, escalation, etc.
   *
   * Controls downstream workflow, filtering, and compliance audit behavior.
   * Must be a valid system/business event value.
   */
  event_type: string;

  /**
   * Free-form narrative or metadata about this event (description, rationale,
   * context, escalation reason, or business payload).
   *
   * Intended for auditing, investigation, workflow replays, and compliance
   * defense. Can include user/system explanation or investigation notes.
   */
  event_details?: string | null | undefined;

  /**
   * Timestamp (ISO 8601 UTC) when this moderation log event was recorded.
   *
   * Important for audit trail, compliance records, and event ordering.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Soft-deletion timestamp for this moderation event, if applicable.
   *
   * Null if still active; otherwise indicates record is hidden for compliance
   * without removal from backend database. Required for GDPR-style legal
   * requirements or error recovery.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IDiscussBoardModerationLogs {
  /**
   * Payload to search, filter, or page through moderation log audit entries
   * related to a specific moderation action or workflow.
   *
   * Supports filtering by event type, full-text search within event_details,
   * and date-window bounding, as well as pagination controls for large action
   * histories. Defined to enable compliance, deep-dive forensic, and
   * operational workflow scenarios.
   */
  export type IRequest = {
    /**
     * Type of moderation log event to filter by: event types include
     * report_received, action_taken, appeal_created, status_update,
     * escalation, etc.
     *
     * Permits result reduction by event category for audit, review, and
     * forensic investigation.
     */
    event_type?: string | undefined;

    /**
     * Free text full-text search within the event_details field of
     * moderation log entries.
     *
     * Supports discovery and filtering of logs with matching narrative,
     * escalation keywords, or identifiers.
     */
    event_details?: string | undefined;

    /**
     * Filter logs by entries created at or after this specific ISO 8601
     * timestamp (UTC).
     *
     * Useful for bounding audit reviews or discovering changes within a
     * compliance window.
     */
    created_after?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Filter logs by entries created at or before this ISO 8601 timestamp
     * (UTC).
     *
     * Used together with created_after to define a time window for temporal
     * analysis.
     */
    created_before?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Pagination: results page number (1-based).
     *
     * Supports frontend/UI pagination; default and max-values enforced in
     * business logic.
     */
    page?: (number & tags.Type<"int32">) | undefined;

    /**
     * Pagination: number of results per page (default, min, max as per
     * business constraints).
     *
     * Smaller limits improve response time and reduce server load. Used in
     * conjunction with page for result batching.
     */
    limit?: (number & tags.Type<"int32">) | undefined;
  };

  /**
   * Creation payload for a new moderation log record in the discussBoard
   * moderation workflow.
   *
   * References key moderation workflow objects (actions, appeals, reports)
   * and describes the business event. May be used by moderators or
   * administrators in compliance with platform policies. All fields clarified
   * by Prisma schema.
   */
  export type ICreate = {
    /**
     * Optional. The UUID of the actor (member/moderator/admin) responsible
     * for this moderation log event. May be null for system events or
     * escalations.
     */
    actor_member_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Optional. The UUID of the moderation action related to this event
     * log. Required for anchoring logs in workflow investigations.
     */
    related_action_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Optional. The UUID of the appeal associated with this log event, if
     * part of an appeal workflow.
     */
    related_appeal_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Optional. The UUID of the content report associated with this
     * moderation log, if traceable to a user-submitted report.
     */
    related_report_id?: (string & tags.Format<"uuid">) | null | undefined;

    /**
     * Type of moderation event (e.g., 'report_received', 'action_taken',
     * 'status_update', 'escalation', 'appeal_created'). This is a business
     * context field describing log purpose.
     */
    event_type: string;

    /**
     * More detailed context or narrative description of this moderation log
     * business event. Useful for audit, evidentiary, or compliance trails.
     */
    event_details?: string | null | undefined;
  };

  /**
   * Update payload for an existing discussBoard moderation log. Allows
   * addition or modification of event details/narrative to enhance
   * audit/compliance record. Only event_details is mutable after creation;
   * other references are immutable for strict audit integrity.
   */
  export type IUpdate = {
    /**
     * Optional narrative modification for this log event. Used for
     * clarifying or expanding business context, compliance, or status
     * explanations.
     */
    event_details?: string | null | undefined;
  };

  /**
   * Summary of a moderation log record (discuss_board_moderation_logs), with
   * event type, actor, relationships, and timing for dashboard/search use.
   */
  export type ISummary = {
    /** Unique identifier for the moderation log event (primary key). */
    id: string & tags.Format<"uuid">;

    /**
     * Actor (member, moderator) ID responsible for this log entry.
     * Nullable; may be null for automation/system workflow or consensus
     * actions.
     */
    actor_member_id: (string & tags.Format<"uuid">) | null;

    /** Moderation action that this log is attached to (nullable). */
    related_action_id: (string & tags.Format<"uuid">) | null;

    /** Appeal entity related to this log entry, if relevant (nullable). */
    related_appeal_id: (string & tags.Format<"uuid">) | null;

    /** Content report related to this log entry, for context (nullable). */
    related_report_id: (string & tags.Format<"uuid">) | null;

    /**
     * Type of moderation event (e.g., 'report_received', 'action_taken',
     * 'appeal_created', 'status_update', 'escalation', etc.).
     */
    event_type: string;

    /** UTC timestamp for event occurrence (immutable). */
    created_at: string & tags.Format<"date-time">;
  };
}
