import { tags } from "typia";

/**
 * A complete user consent record, mapping directly to a single row in
 * discuss_board_consent_records. Used for retrieval, audit, API response, and
 * legal compliance. Only fields present in the schema/database may be
 * represented in the object.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussBoardConsentRecords = {
  /**
   * Primary key; unique UUID for the consent record. Maps to
   * discuss_board_consent_records.id.
   */
  id: string;

  /**
   * ID of user account giving/revoking/updating consent. UUID. Corresponds to
   * discuss_board_consent_records.user_account_id.
   */
  user_account_id: string;

  /**
   * Type of policy consent applies to, such as 'privacy_policy',
   * 'terms_of_service', or 'marketing_opt_in'. Downstream mapping and audit
   * depend on this value. Corresponds to
   * discuss_board_consent_records.policy_type.
   */
  policy_type: string;

  /**
   * Version or unique identifier of the applicable policy/legal document.
   * Example: 'v1.0', '2025.01'. Corresponds to
   * discuss_board_consent_records.policy_version.
   */
  policy_version: string;

  /**
   * What event the consent record represents: granted, revoked, updated, etc.
   * Used for legal defensibility. Corresponds to
   * discuss_board_consent_records.consent_action.
   */
  consent_action: string;

  /**
   * Optional business/administrative notes about the consent event, including
   * rationale or evidence (e.g., IP address, device). Matches 'description'
   * column, nullable.
   */
  description?: string | null | undefined;

  /**
   * Timestamp (ISO8601 UTC) when this consent record was created in the
   * system. Must match discuss_board_consent_records.created_at.
   */
  created_at: string & tags.Format<"date-time">;
};
export namespace IDiscussBoardConsentRecords {
  /**
   * Search and filter payload for querying user consent records. All
   * properties are optional and map directly to discuss_board_consent_records
   * table columns or search capabilities.
   */
  export type IRequest = {
    /**
     * Filter for consent records by user account ID (UUID).
     *
     * References discuss_board_consent_records.user_account_id.
     */
    user_account_id?: string | undefined;

    /**
     * Filter records by policy type (e.g., privacy_policy,
     * terms_of_service, marketing_opt_in). Maps to
     * discuss_board_consent_records.policy_type.
     */
    policy_type?: string | undefined;

    /**
     * Restrict to records for a given policy version (e.g., v1.0,
     * v2025.01). Matches discuss_board_consent_records.policy_version.
     */
    policy_version?: string | undefined;

    /**
     * Filter by type of consent event (e.g., granted, revoked, updated).
     * Maps to discuss_board_consent_records.consent_action.
     */
    consent_action?: string | undefined;

    /**
     * Include only records created after this ISO8601 datetime (UTC).
     * Corresponds to created_at column. Optional.
     */
    created_after?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Include only records created before this ISO8601 datetime (UTC).
     * Corresponds to created_at column. Optional.
     */
    created_before?: (string & tags.Format<"date-time">) | null | undefined;

    /** Page number for pagination (1-based). Optional. */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | null | undefined;

    /** Maximum records to return per page. Optional. */
    limit?: (number & tags.Type<"int32"> & tags.Minimum<1>) | null | undefined;

    /** Field name to order results by (e.g., created_at). Optional. */
    orderBy?: string | undefined;

    /** Order direction: 'asc' or 'desc'. Optional. */
    sortDirection?: "asc" | "desc" | undefined;

    /**
     * Search term for free-text or keyword search in description field.
     * Optional.
     */
    search?: string | undefined;
  };
}
