import { tags } from "typia";

/**
 * A discussion board category entity, as defined in the Prisma schema
 * discussion_board_categories. This entity is used for organizing posts and
 * threads into topical groups and includes all primary fields with
 * comprehensive metadata.
 *
 * - The 'id' is a UUID primary key.
 * - The 'name' is a unique, user-facing label like 'Politics'.
 * - 'description' is optional and visible to users and moderators.
 * - 'is_active' determines if this category is visible in the UI.
 * - 'sort_order' affects manual display order.
 * - 'created_at', 'updated_at', and 'deleted_at' provide audit/compliance traces.
 *
 * Each property is mapped directly from the Prisma schema, which supports CRUD
 * and independent administration. Soft deletion is supported via 'deleted_at'.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussionBoardCategory = {
  /**
   * Unique identifier for this discussion board category. Primary key as
   * defined in the Prisma schema (UUID format).
   */
  id: string & tags.Format<"uuid">;

  /**
   * Display name for the category. This value must be unique and is
   * user-facing (e.g., 'Politics', 'Economics').
   */
  name: string;

  /**
   * Optional, human-readable category description for users and moderators.
   * Used for additional context or guidance within UI forms and admin tools.
   */
  description?: string | null;

  /**
   * Whether this category is currently active and available for content
   * posting, listing, or search. Used for managing visible/archived
   * categories.
   */
  is_active: boolean;

  /**
   * Manual sort order (integer) for custom display or prioritization. Lower
   * values may be listed first in associated UI components.
   */
  sort_order: number & tags.Type<"int32">;

  /** Timestamp for when the category was created (ISO8601 UTC format). */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp for when the category was last updated (ISO8601 UTC format). */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft delete timestamp. If non-null, this category is logically considered
   * deleted and excluded from standard listing queries, but preserved for
   * compliance.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null;
};
export namespace IDiscussionBoardCategory {
  /**
   * Filtering, searching, and pagination criteria for category listing
   * endpoints.
   */
  export type IRequest = {
    /** Page number for pagination (1-based). */
    page?: number & tags.Type<"int32">;

    /** Maximum number of records per page. */
    limit?: number & tags.Type<"int32">;

    /** Free-text search term for category name or description. */
    search?: string;

    /** Optional filter to retrieve only active/inactive categories. */
    is_active?: boolean;

    /** Field by which to sort the results. */
    sort_by?: "name" | "sort_order" | "created_at";

    /** Direction for sorting (ascending or descending). */
    sort_dir?: "asc" | "desc";
  };

  /**
   * Payload for creating a new discussion board category. Excludes id,
   * created_at, and updated_at fields, which are system-assigned. 'name' must
   * be unique system-wide.
   */
  export type ICreate = {
    /** Unique, user-facing label for the category (e.g., 'Politics'). */
    name: string;

    /** Optional, user-/admin-facing extra context for the category. */
    description?: string | null;

    /**
     * If true, category is usable for posting or browsing immediately upon
     * creation.
     */
    is_active: boolean;

    /**
     * Determines manual display order among categories (lower = higher
     * priority).
     */
    sort_order: number & tags.Type<"int32">;
  };

  /**
   * Payload for updating mutable properties of a category. All fields are
   * optional (PATCH/PUT semantics).
   */
  export type IUpdate = {
    /**
     * User-provided label to change the name of a category. Must remain
     * unique.
     */
    name?: string;

    /**
     * Optional, extra context for the category. May be set to null to
     * clear.
     */
    description?: string | null;

    /** If provided, updates the activation state of the category. */
    is_active?: boolean;

    /** Allows reordering categories for display or hierarchy control. */
    sort_order?: number & tags.Type<"int32">;
  };

  /**
   * Condensed summary of a category for paginated/index views. Used in IPage
   * listing responses.
   */
  export type ISummary = {
    /** The UUID identifier for the category (primary key). */
    id: string & tags.Format<"uuid">;

    /** Unique display label for user navigation and selection. */
    name: string;

    /** Whether the category is available for posting/listing. */
    is_active: boolean;

    /** Ordering for display or priority in category listings. */
    sort_order: number & tags.Type<"int32">;
  };
}
