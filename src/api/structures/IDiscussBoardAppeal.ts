import { tags } from "typia";

/**
 * Represents a user's appeal submitted against a specific moderation action
 * performed on the discussBoard platform. Links to the moderation action (by
 * ID), contains the appellant's rationale, tracks business workflow status, and
 * provides resolution notes for transparency.
 *
 * This schema documents the entire appeal lifecycle for both business audit and
 * regulatory compliance, supporting workflow review, timeline tracing, and
 * end-user notification.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussBoardAppeal = {
  /**
   * Unique identifier (UUID) for this appeal record. Primary key, references
   * discuss_board_appeals.id.
   */
  id: string & tags.Format<"uuid">;

  /**
   * The moderation action (by ID) being appealed. Required for workflow
   * association and compliance narratives.
   */
  moderation_action_id: string & tags.Format<"uuid">;

  /**
   * UUID of the member submitting the appeal. Distinct from original
   * moderator/admin.
   */
  appellant_member_id: string & tags.Format<"uuid">;

  /**
   * Freeform explanation/rationale provided by the appellant for the appeal.
   * Used by moderators/admins during review. Max length as enforced by
   * business rule.
   */
  appeal_rationale: string;

  /**
   * Appeal workflow status. E.g., 'pending', 'in_review', 'accepted',
   * 'denied', 'escalated', 'closed'.
   *
   * Only valid statuses per business logic are allowed.
   */
  status: string;

  /**
   * Optional administrative notes entered on appeal resolution. Documents the
   * outcome for compliance and user transparency.
   */
  resolution_notes?: string | null | undefined;

  /**
   * UTC ISO 8601 timestamp when this appeal was created. Used in
   * audit/history and sorting workflows.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * UTC ISO 8601 timestamp when this appeal was last updated (e.g., review,
   * status transition, or evidence submission).
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft-deletion timestamp, null if active, otherwise record is considered
   * logically removed (for compliance/data retention).
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IDiscussBoardAppeal {
  /**
   * Request schema for searching/filtering appeals against moderation
   * actions. Used by moderators, administrators, or the appellant to locate
   * and review appeals submitted for workflow review, audit, or compliance
   * purposes.
   *
   * Supports searching by moderation action, appellant, status, created at
   * date range, and full paging/sorting controls.
   */
  export type IRequest = {
    /**
     * Filter by the specific moderation action this appeal
     * targets/explains. Used to find appeals for a workflow history or
     * compliance investigation.
     */
    moderation_action_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Filter for appeals by a specific member (the appellant). Enables
     * searching appeals submitted by a particular user.
     */
    appellant_member_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Filter by appeal workflow status (such as 'pending', 'in_review',
     * 'accepted', 'denied', 'closed').
     */
    status?: string | undefined;

    /**
     * Lower bound for search by creation time of appeal (inclusive, ISO
     * 8601). Used for date-range filtering.
     */
    created_at_from?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Upper bound for search by creation time of appeal (inclusive, ISO
     * 8601).
     */
    created_at_to?: (string & tags.Format<"date-time">) | undefined;

    /** Results page number. Used for pagination (1-based). */
    page?: (number & tags.Type<"int32">) | undefined;

    /**
     * Maximum number of results to return per page. Used for pagination
     * control.
     */
    limit?: (number & tags.Type<"int32">) | undefined;

    /**
     * Sort direction/key for results (e.g., 'created_at_desc',
     * 'status_asc').
     */
    sort?: string | undefined;
  };

  /**
   * Payload for submitting a new appeal by a member against a specific
   * moderation action.
   *
   * References a moderation action via UUID and provides a business rationale
   * for the appeal. This payload enables users to initiate a review/appeals
   * process according to the discussBoard platform's compliance and fairness
   * requirements.
   *
   * Submission of appeals is closely regulated per moderation/appeals
   * workflow and audit process.
   */
  export type ICreate = {
    /**
     * The unique identifier for the moderation action being appealed.
     *
     * This must reference an existing moderation action record as required
     * by the business context.
     *
     * Required for linking the appeal to the correct moderation workflow
     * for review and audit purposes.
     */
    moderation_action_id: string & tags.Format<"uuid">;

    /**
     * The rationale or argument for the appeal provided by the member.
     *
     * This should articulate in detail why the moderation action should be
     * reconsidered, and may include references to platform policies,
     * evidence, or additional context not previously considered during
     * initial moderation.
     *
     * Helps administrators or reviewers to process the appeal fairly and
     * transparently.
     */
    appeal_rationale: string;
  };

  /**
   * Summary (list/search view) of a moderation appeals entity. Contains
   * minimal fields for referenced action, appellant, status, and creation
   * time. Used for table and dashboard views of appeals without detail
   * context.
   */
  export type ISummary = {
    /** Unique ID for an appeal (primary key in discuss_board_appeals). */
    id: string & tags.Format<"uuid">;

    /** ID of the moderation action being appealed. */
    moderation_action_id: string & tags.Format<"uuid">;

    /** Member ID of the appellant (user submitting the appeal). */
    appellant_member_id: string & tags.Format<"uuid">;

    /**
     * Workflow status for the appeal (e.g., 'pending', 'in_review',
     * 'accepted', 'denied', 'escalated', 'closed').
     */
    status: string;

    /** Appeal creation timestamp (ISO8601 UTC). */
    created_at: string & tags.Format<"date-time">;
  };
}
