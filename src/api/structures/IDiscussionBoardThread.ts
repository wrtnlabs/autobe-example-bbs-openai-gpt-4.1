import { tags } from "typia";

/**
 * A discussion board thread, representing a top-level topic of structured
 * discussion. Each thread aggregates posts and associated commentary.
 *
 * Corresponds to discussion_board_threads (Prisma). Covers all schema fields
 * with full traceability for audit, moderation, and discovery.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussionBoardThread = {
  /**
   * Primary key for the thread (UUID). Uniquely identifies this discussion
   * thread in the system.
   *
   * Corresponds to discussion_board_threads.id (Prisma).
   */
  id: string & tags.Format<"uuid">;

  /**
   * ID of the user who created this thread. Refers to
   * discussion_board_users.id. Used for attribution and thread ownership.
   *
   * See relation in discussion_board_threads.created_by_id (Prisma).
   */
  created_by_id: string & tags.Format<"uuid">;

  /**
   * Title of the discussion thread. Used for identification, search, and
   * display in thread listings.
   *
   * Unique within the table (Prisma @unique). Must meet platform length and
   * format requirements.
   */
  title: string;

  /**
   * Indicates whether this thread is locked. Locked threads cannot receive
   * new posts/comments.
   *
   * Mapped from discussion_board_threads.is_locked (Prisma).
   */
  is_locked: boolean;

  /**
   * Whether this thread is archived (read-only and not open for
   * participation).
   *
   * From discussion_board_threads.is_archived (Prisma).
   */
  is_archived: boolean;

  /**
   * Timestamp for when this thread was created (ISO 8601).
   *
   * From discussion_board_threads.created_at (Prisma, @db.Timestamptz).
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp for the latest update to this thread (ISO 8601).
   *
   * From discussion_board_threads.updated_at (Prisma, @db.Timestamptz).
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft delete timestamp (ISO 8601). If set, the thread has been logically
   * deleted and is hidden from standard display/search endpoints.
   *
   * Mapped from discussion_board_threads.deleted_at (Prisma). May be null.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null;
};
export namespace IDiscussionBoardThread {
  /**
   * Filtering and pagination fields when listing/searching threads. Supports
   * searching by title, filtering by status/owner/date, sorting, and paging.
   * Used in patch /threads API endpoint.
   */
  export type IRequest = {
    /** Page number for pagination. Used in list/search API endpoints. */
    page?: number &
      tags.Type<"int32"> &
      tags.JsonSchemaPlugin<{
        format: "int32";
      }>;

    /** Maximum number of records to return per page. */
    limit?: number &
      tags.Type<"int32"> &
      tags.JsonSchemaPlugin<{
        format: "int32";
      }>;

    /** Search text for thread titles. */
    search?: string;

    /** Field by which to sort thread results. */
    orderBy?: "created_at" | "updated_at" | "title";

    /** Sort direction for ordering. */
    orderDirection?: "asc" | "desc";

    /** Filter threads by lock status. */
    is_locked?: boolean;

    /** Filter threads by archived/read-only state. */
    is_archived?: boolean;

    /** Filter for threads created by a specific user (UUID). */
    created_by_id?: string & tags.Format<"uuid">;

    /** Start date filter for thread creation (inclusive, ISO 8601). */
    created_from?: string & tags.Format<"date-time">;

    /** End date filter for thread creation (inclusive, ISO 8601). */
    created_to?: string & tags.Format<"date-time">;
  };

  /**
   * Request body for creating a new thread. Only includes business writable
   * fields. created_by_id is set via authentication context.
   *
   * From discussion_board_threads Prisma schema.
   */
  export type ICreate = {
    /** Thread title (required). Must be unique. */
    title: string;
  };

  /**
   * Fields that may be updated for a discussion thread. Used in PUT/PATCH
   * operations on thread resource.
   *
   * Includes optional title/is_locked/is_archived.
   */
  export type IUpdate = {
    /** New title for the thread (optional update). */
    title?: string;

    /** Update thread lock status (if true, locks thread). */
    is_locked?: boolean;

    /** Update archive (read-only) status for the thread. */
    is_archived?: boolean;
  };

  /**
   * Summary version of a thread, for listings and search. Omits details that
   * are unnecessary for list view.
   */
  export type ISummary = {
    /** Thread's unique identifier. */
    id: string & tags.Format<"uuid">;

    /** Thread title. */
    title: string;

    /** Lock status of the thread. */
    is_locked: boolean;

    /** Archive (read-only) status. */
    is_archived: boolean;

    /** User ID of thread owner. */
    created_by_id: string & tags.Format<"uuid">;

    /** Creation timestamp (ISO 8601). */
    created_at: string & tags.Format<"date-time">;
  };
}
