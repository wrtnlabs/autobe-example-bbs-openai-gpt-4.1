import { tags } from "typia";

/**
 * A single vote on a poll option by a user. Each user may only vote once per
 * poll option. Soft deletion possible for audit.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussionBoardPollVote = {
  /** Unique identifier for poll vote (primary key in DB). */
  id: string & tags.Format<"uuid">;

  /** Poll id to which this vote belongs (FK to discussion_board_polls.id). */
  discussion_board_poll_id: string & tags.Format<"uuid">;

  /** Option selected by the user (FK to discussion_board_poll_options.id). */
  discussion_board_poll_option_id: string & tags.Format<"uuid">;

  /** User who voted (FK to discussion_board_users.id). */
  discussion_board_user_id: string & tags.Format<"uuid">;

  /** Vote creation timestamp (ISO 8601 date-time). */
  created_at: string & tags.Format<"date-time">;

  /** Soft-deleted votes will have this timestamp set for audit/compliance. */
  deleted_at?: (string & tags.Format<"date-time">) | null;
};
export namespace IDiscussionBoardPollVote {
  /**
   * Filtering/search input for retrieving votes (per poll, user, option,
   * etc.). Used in admin, moderator, and analytics flows.
   */
  export type IRequest = {
    /** (Optional) Filter results to votes associated with this poll. */
    poll_id?: string & tags.Format<"uuid">;

    /** (Optional) Filter by selected poll option id. */
    poll_option_id?: string & tags.Format<"uuid">;

    /** (Optional) Filter for only votes cast by this user. */
    user_id?: string & tags.Format<"uuid">;

    /** Should soft-deleted votes be included (where deleted_at is not null)? */
    include_deleted?: boolean;

    /** Paginated result set page number (default: 1). */
    page?: number & tags.Type<"int32">;

    /** Results per page for pagination. */
    limit?: number & tags.Type<"int32">;

    /** Field for sorting result list (created_at only). */
    sort_by?: "created_at";

    /** Sorting order, ascending or descending. */
    order?: "asc" | "desc";
  };

  /**
   * Request body schema for creating a new poll vote. Used for voting actions
   * within the discussion board. Enforces user eligibility, poll status, and
   * business rules for unique vote per poll/option.
   */
  export type ICreate = {
    /**
     * UUID of the poll being voted on. This must reference a valid, open
     * poll entity. Used to ensure the vote is recorded for the correct
     * survey in the discussion board polling module.
     */
    pollId: string & tags.Format<"uuid">;

    /**
     * Array of UUIDs representing the poll options selected by the voting
     * user. For single-choice polls, only one ID is included; for
     * multiple-choice, several may appear. Options submitted must exist for
     * the target poll and must not be soft-deleted or closed.
     */
    optionIds: (string & tags.Format<"uuid">)[];
  };

  /**
   * Request body schema for updating an existing poll vote on a post. Used
   * only by privileged roles or in special override scenarios. Normal users
   * should re-vote through the regular vote endpoint (not this update).
   */
  export type IUpdate = {
    /**
     * UUID of the specific poll vote record to be updated. Must point to an
     * existing vote and be owned by the updating user, or the operation
     * must be performed by a privileged moderator or admin.
     */
    pollVoteId: string & tags.Format<"uuid">;

    /**
     * New array of UUIDs representing the userâ€™s selected poll options for
     * the update. This may be a single or multiple value array, according
     * to the poll's multi_choice flag.
     */
    newOptionIds: (string & tags.Format<"uuid">)[];
  };
}
