import { tags } from "typia";

/**
 * Full schema for a single flag report record, matching the
 * discussion_board_flag_reports entity. Includes all business, audit, and
 * workflow fields as outlined in the schema.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussionBoardFlagReport = {
  /**
   * Unique identifier for the flag report. Primary key from the
   * discussion_board_flag_reports schema.
   */
  id: string & tags.Format<"uuid">;

  /**
   * UUID of the reporting user. Used in audit logs, profile lookups, and
   * moderation workflows.
   */
  reporterId: string & tags.Format<"uuid">;

  /**
   * UUID of the flagged post, if the report pertains to a post. Optional if
   * commentId is present.
   */
  postId?: string & tags.Format<"uuid">;

  /**
   * UUID of the flagged comment, if the report pertains to a comment.
   * Optional if postId is present.
   */
  commentId?: string & tags.Format<"uuid">;

  /**
   * Short string indicating the reason for the report (e.g., 'spam', 'abuse',
   * 'misinformation', etc.).
   */
  reason: string;

  /**
   * Extended narrative provided by reporter, giving extra context for the
   * flag. Optional, for moderation analysis.
   */
  details?: string;

  /**
   * Current review status of the report. Values: 'pending', 'triaged',
   * 'dismissed', 'accepted', 'escalated'.
   */
  status: string;

  /**
   * Datetime when the flag was reviewed or acted on by a moderator. Null if
   * not yet reviewed.
   */
  reviewedAt?: string & tags.Format<"date-time">;

  /** Datetime (ISO string) for when the report was initially created. */
  createdAt: string & tags.Format<"date-time">;

  /** Datetime (ISO string) for the most recent update to the record. */
  updatedAt: string & tags.Format<"date-time">;
};
export namespace IDiscussionBoardFlagReport {
  /**
   * Request body schema for listing or searching flag reports in
   * moderation/admin queues. Supports advanced searching and paginated
   * results.
   */
  export type IRequest = {
    /** Page number for pagination (1-based). Optional, default 1. */
    page?: (number & tags.Type<"int32">) | null;

    /**
     * Maximum number of records per page. Optional, default value as per
     * system config.
     */
    limit?: (number & tags.Type<"int32">) | null;

    /**
     * Filter reports by status: 'pending', 'triaged', 'dismissed',
     * 'accepted', 'escalated'.
     */
    status?: string;

    /** Restrict search to only post or comment flag reports. */
    contentType?: "post" | "comment";

    /**
     * Filter reports by the reason string/category (e.g., 'spam', 'abuse',
     * etc.).
     */
    reason?: string;

    /**
     * Restrict reports to those submitted by the specified reporter (user
     * UUID).
     */
    reporterId?: string & tags.Format<"uuid">;

    /**
     * ISO date-time lower bound; only reports created after or at this
     * timestamp are included.
     */
    createdFrom?: string & tags.Format<"date-time">;

    /**
     * ISO date-time upper bound; only reports created before or at this
     * timestamp are included.
     */
    createdTo?: string & tags.Format<"date-time">;

    /** Sort key, e.g., 'created_at', 'status', etc. */
    sortBy?: string;

    /** Sort direction, ascending or descending. */
    sortDirection?: "asc" | "desc";

    /** Free-text search for flag reason, details, or related content fields. */
    search?: string;
  };

  /**
   * Summary schema of a flag report for paginated list modes. Exposes
   * essential metadata for moderation triage and review.
   */
  export type ISummary = {
    /**
     * Unique identifier for the flag report. Maps to the primary key of the
     * discussion_board_flag_reports entity.
     */
    id: string & tags.Format<"uuid">;

    /**
     * UUID of the user who submitted the report. Supports audit, permission
     * checks, and UI summary displays.
     */
    reporterId: string & tags.Format<"uuid">;

    /**
     * UUID for the flagged post, if applicable. This field is present only
     * for post reports.
     */
    postId?: string & tags.Format<"uuid">;

    /**
     * UUID for the flagged comment, if applicable. Present for
     * comment-specific reports only.
     */
    commentId?: string & tags.Format<"uuid">;

    /**
     * Short reason code or category for the reported issue, e.g., 'spam',
     * 'abuse', 'misinformation'.
     */
    reason: string;

    /**
     * Current review status: 'pending', 'triaged', 'dismissed', 'accepted',
     * 'escalated'.
     */
    status: string;

    /** When the report was created (ISO timestamp, UTC). */
    createdAt: string & tags.Format<"date-time">;

    /**
     * When the report was reviewed by a moderator, if applicable (ISO
     * timestamp, UTC).
     */
    reviewedAt?: string & tags.Format<"date-time">;
  };

  /**
   * Request body schema for creating a new content flag report. Requires a
   * clear reason/category and one of the content references; optional
   * contextual details support moderation understanding.
   */
  export type ICreate = {
    /**
     * UUID of the flagged post, if applicable. Include either postId or
     * commentId, never both (mutually exclusive); determines the target
     * content for this flag report.
     */
    postId?: string & tags.Format<"uuid">;

    /**
     * UUID of the flagged comment, if applicable. Mutually exclusive with
     * postId.
     */
    commentId?: string & tags.Format<"uuid">;

    /**
     * Short string code or category for the report. E.g., 'spam', 'abuse',
     * 'misinformation', etc.
     */
    reason: string;

    /**
     * Optional extended reporter narrative or justification for the flag;
     * used by moderators for deeper context.
     */
    details?: string;
  };

  /**
   * Request body schema for updating flag reports in moderation workflow.
   * Used primarily by moderators/admins to mark status changes or add review
   * details.
   */
  export type IUpdate = {
    /**
     * Sets the new review/moderation status of the report: e.g., 'triaged',
     * 'accepted', 'dismissed', or 'escalated'. Only valid status options
     * are permitted according to business policy at the time of
     * transition.
     */
    status?: string;

    /**
     * Timestamp for when moderation was performed. Omission means the
     * review did not yet occur.
     */
    reviewedAt?: string & tags.Format<"date-time">;

    /**
     * Additional details or notes from moderation, or correction to the
     * initial submission.
     */
    details?: string;
  };
}
