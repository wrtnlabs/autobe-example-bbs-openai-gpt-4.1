import { tags } from "typia";

/**
 * Represents a file, document, or media attachment uploaded to a post or
 * comment in the discussion board. This schema is mapped from the
 * discussion_board_attachments table in the database. Satisfies upload,
 * download, and attachment management within the discussion platform. Sensitive
 * to privacy (must avoid exposing internal storage URIs if not public) and
 * tracks all relevant metadata for audit, access control, and regulatory
 * compliance. Used for both viewing and backend management of uploaded files.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussionBoardAttachment = {
  /**
   * Unique identifier for the attachment. Must be a UUID as generated by the
   * system. This value is the primary key for referencing any file or media
   * uploaded to a post or comment.
   */
  id: string & tags.Format<"uuid">;

  /**
   * UUID referencing the post to which the attachment belongs, or null if not
   * a post attachment. This field establishes the relationship with the
   * parent post from the discussion_board_posts table.
   */
  post_id?: (string & tags.Format<"uuid">) | null;

  /**
   * UUID referencing the comment to which the attachment belongs, or null if
   * not a comment attachment. Used to associate attachments with a specific
   * comment.
   */
  comment_id?: (string & tags.Format<"uuid">) | null;

  /**
   * ID of the user who uploaded this attachment. References
   * discussion_board_users.id for audit, permissions, and compliance
   * logging.
   */
  uploaded_by_id: string & tags.Format<"uuid">;

  /**
   * Original name of the uploaded file. This is the name provided by the user
   * during upload and used for display purposes in UI and download flows. Not
   * necessarily unique.
   */
  file_name: string;

  /**
   * Permanent access URI or URL for the file or media on the system. Supports
   * both direct HTTP(S) links and internal media handlers. Used for all
   * download/view flows.
   */
  file_url: string;

  /**
   * The MIME type of the file, such as 'image/png', 'application/pdf', etc.
   * Used for validating file format and appropriate rendering in clients.
   */
  content_type: string;

  /**
   * The size of the file or media in bytes (integer). Used for quota
   * management, download progress, and client-side checks against allowed
   * maximum file size.
   */
  size_bytes: number & tags.Type<"int32">;

  /**
   * ISO 8601 timestamp when the attachment was first created/uploaded. Used
   * for audit and display in upload/attachment lists.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Soft delete timestamp (or null if not deleted). When set, this file is
   * hidden from user-facing APIs but remains in the database for regulatory
   * and compliance audits.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null;
};
export namespace IDiscussionBoardAttachment {
  /**
   * Search/filter and pagination parameters for finding file/media
   * attachments.
   */
  export type IRequest = {
    /** Optional post ID to restrict search to attachments for one post. */
    post_id?: (string & tags.Format<"uuid">) | null;

    /**
     * Optional comment ID to restrict search to attachments for one
     * comment.
     */
    comment_id?: (string & tags.Format<"uuid">) | null;

    /** Optional search by original file name (fuzzy match). */
    file_name?: string;

    /** Filter by uploader user id. */
    uploaded_by_id?: string & tags.Format<"uuid">;

    /** Filter by file MIME type. */
    content_type?: string;

    /** Sort order for search results (e.g., 'created_at desc'). */
    sort?: string;

    /** Page number for pagination. */
    page?: number & tags.Type<"int32">;

    /** Number of results per page. */
    limit?: number & tags.Type<"int32">;
  };

  /**
   * Request type for creating a new attachment for a post or comment. Accepts
   * either a post_id OR comment_id (but not both), along with required file
   * metadata. Used as the body type for attachment upload API endpoints.
   * Sensitive fields must be validated by server prior to file acceptance.
   * Created attachments are always linked to a parent post or comment for
   * access control.
   */
  export type ICreate = {
    /**
     * (Optional) Parent post identifier for the attachment (UUID). Specify
     * this when the attachment is to be linked to a post. One of post_id or
     * comment_id must be present.
     */
    post_id?: (string & tags.Format<"uuid">) | null;

    /**
     * (Optional) Parent comment identifier for the attachment (UUID).
     * Attachments to comments only require this field set. Must be null
     * when linking to a post.
     */
    comment_id?: (string & tags.Format<"uuid">) | null;

    /**
     * Original file name as submitted by the user during upload. Used for
     * display and download purposes. Must be a valid UTF-8 string.
     */
    file_name: string;

    /**
     * Permanent download URI or system storage URL for the file, as
     * resolved during the upload process. Must be accessible according to
     * system access rules.
     */
    file_url: string;

    /**
     * MIME content type for the uploaded file (e.g., image/png,
     * application/pdf). Used to validate allowed file formats at upload and
     * for security in download flows.
     */
    content_type: string;

    /**
     * The size of the uploaded file in bytes. Used to enforce per-file and
     * user quota policies, displayed in UI download listings.
     */
    size_bytes: number & tags.Type<"int32">;
  };

  /**
   * Request type for updating the metadata/fields of an attachment. Only
   * permits editing file name and content typeâ€”cannot change file_url,
   * parent, or size_bytes (those are immutable). Used for renaming files,
   * updating incorrectly assigned content types, or restoring original file
   * names for user experience. Audit trail is strongly recommended for
   * updates to track abuse or compliance issues.
   */
  export type IUpdate = {
    /**
     * The updated file name for the attachment, as desired in UI or
     * download. Used for correcting file naming errors or friendly name
     * updates.
     */
    file_name?: string;

    /**
     * (Optional) The new MIME content type if the client wishes to correct
     * or update it. Changing content_type should be validated by the server
     * to avoid conflict with file data.
     */
    content_type?: string;
  };

  /**
   * Summary presentation of an attachment in a paginated or inline list.
   * Designed for use in IPageIDiscussionBoardAttachment.ISummary (attachment
   * list API) and for UI display where full detail is not needed. Contains
   * only essential metadata for performant listing. Full attachment details
   * require fetching IDiscussionBoardAttachment by id.
   */
  export type ISummary = {
    /**
     * Unique identifier of the attachment (UUID). Used for linking and
     * displaying attachments.
     */
    id: string & tags.Format<"uuid">;

    /**
     * User-facing file name of the attachment. Used in download and UI
     * display.
     */
    file_name: string;

    /** Permanent URI for accessing the file. Used by clients for download. */
    file_url: string;

    /**
     * MIME type string for the file (e.g. image/jpeg). Determines
     * icon/preview.
     */
    content_type: string;

    /** File size in bytes. Used in attachment listing and download quotas. */
    size_bytes: number & tags.Type<"int32">;

    /** Timestamp when attachment was added. Displayed in UI. */
    created_at: string & tags.Format<"date-time">;

    /** Soft deletion indicator for audit/compliance. Null if active. */
    deleted_at?: (string & tags.Format<"date-time">) | null;
  };
}
