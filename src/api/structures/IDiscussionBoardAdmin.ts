import { tags } from "typia";

import { IAuthorizationToken } from "./IAuthorizationToken";

/**
 * Admin record representing a user with highest-level platform permissions.
 * Based on discussion_board_admins model, with audit, active/revoked status,
 * and suspension. Enables advanced admin-only features.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussionBoardAdmin = {
  /**
   * Primary Key UUID for the admin entity, unique per record. Sourced from
   * discussion_board_admins.id.
   */
  id: string & tags.Format<"uuid">;

  /**
   * ID of the associated user granted admin privileges. References
   * discussion_board_users.id.
   */
  user_id: string & tags.Format<"uuid">;

  /** ISO8601 datetime when admin status/role was granted. */
  assigned_at: string & tags.Format<"date-time">;

  /**
   * If set, ISO8601 datetime when admin privileges were revoked; null if
   * currently active.
   */
  revoked_at?: (string & tags.Format<"date-time">) | null;

  /**
   * Whether this admin record is currently active. True if not revoked or
   * suspended.
   */
  is_active: boolean;

  /** Datetime until which the admin is suspended. Null if not suspended. */
  suspended_until?: (string & tags.Format<"date-time">) | null;

  /** Datetime when admin record was created (ISO8601). */
  created_at: string & tags.Format<"date-time">;

  /** Datetime when admin record was last updated (ISO8601). */
  updated_at: string & tags.Format<"date-time">;

  /** Soft-deletion timestamp for compliance; null if not deleted. */
  deleted_at?: (string & tags.Format<"date-time">) | null;
};
export namespace IDiscussionBoardAdmin {
  /**
   * Admin registration payload for assigning admin role to a given verified
   * user. Used by platform superusers or compliance staff to grant
   * high-privilege admin access. Only user_id is required for association.
   */
  export type ICreate = {
    /**
     * ID of the verified user account to be elevated to admin role and
     * associated with the admin privilege record.
     */
    user_id: string & tags.Format<"uuid">;
  };

  /**
   * Admin authorization response sent upon join/login for privileged admin
   * users. Contains both session tokens and full admin record for subsequent
   * context-based access.
   */
  export type IAuthorized = {
    /** JWT token information for authentication */
    token: IAuthorizationToken;

    /** Admin profile data associated with the authenticated token/session. */
    admin: IDiscussionBoardAdmin;
  };

  /**
   * Admin login request body, used to authenticate email/username and
   * password for established system-level administrator accounts.
   */
  export type ILogin = {
    /**
     * Email address for admin authentication during login, as per admin
     * assignment.
     */
    email: string & tags.Format<"email">;

    /**
     * Plaintext password for admin login verification, never stored in raw
     * form.
     */
    password: string & tags.Format<"password">;
  };

  /**
   * Admin session renewal request, expects the refresh token for valid
   * session continuation and assigns new session tokens on successful
   * validation.
   */
  export type IRefresh = {
    /**
     * Refresh token for admin user session, used to obtain new access token
     * within session lifecycle.
     */
    refresh_token: string;
  };

  /**
   * Payload for updating mutable admin record fields (activation, revocation,
   * suspension). Only permitted fields may be updated, all others
   * system-managed.
   */
  export type IUpdate = {
    /**
     * Set admin record active/inactive (for status toggling, not for
     * permanent removal).
     */
    is_active?: boolean;

    /** Datetime admin role revoked; null for activation/reset. */
    revoked_at?: (string & tags.Format<"date-time">) | null;

    /**
     * Datetime until which the admin is suspended (future flexibility, null
     * for none).
     */
    suspended_until?: (string & tags.Format<"date-time">) | null;
  };
}
