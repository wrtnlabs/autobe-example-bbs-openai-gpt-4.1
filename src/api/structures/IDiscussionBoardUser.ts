import { tags } from "typia";

import { IDiscussionBoardUserSummary } from "./IDiscussionBoardUserSummary";
import { IAuthorizationToken } from "./IAuthorizationToken";

/**
 * Discussion board user account entity.
 *
 * Includes core account fields: unique id (UUID), email, unique username,
 * display name (optional), verification and suspension states, last login,
 * creation/update timestamps, and optional deleted_at for soft deletion.
 *
 * Closely mirrors the 'discussion_board_users' table in the schema. Password
 * hashes are omitted for security. This entity represents user metadata
 * displayed and managed in both profile and administrative UIs. All date/time
 * fields are ISO8601 strings.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussionBoardUser = {
  /**
   * Unique identifier for the user (UUID).
   *
   * Corresponds to 'id' in discussion_board_users.
   */
  id: string & tags.Format<"uuid">;

  /**
   * User's email address, unique and used for login.
   *
   * Corresponds to 'email' in discussion_board_users.
   */
  email: string;

  /**
   * Globally-unique username selected by the user, used in handles and
   * @-mentions.
   *
   * Corresponds to 'username' in discussion_board_users.
   */
  username: string;

  /**
   * Publicly displayed name or nickname. Optional.
   *
   * Corresponds to 'display_name' in discussion_board_users.
   */
  display_name?: string | null;

  /**
   * If true, the user's email has been verified and account is fully enabled.
   *
   * Corresponds to 'is_verified' in discussion_board_users.
   */
  is_verified: boolean;

  /**
   * True if the user is currently suspended (restricted from activities).
   *
   * Corresponds to 'is_suspended' in discussion_board_users.
   */
  is_suspended: boolean;

  /**
   * If suspended, indicates date/time until which user cannot interact. Null
   * if not suspended.
   *
   * Corresponds to 'suspended_until' in discussion_board_users.
   */
  suspended_until?: (string & tags.Format<"date-time">) | null;

  /**
   * Timestamp of last successful login. Null if user has never logged in.
   *
   * Corresponds to 'last_login_at' in discussion_board_users.
   */
  last_login_at?: (string & tags.Format<"date-time">) | null;

  /**
   * Timestamp when the user was created.
   *
   * Corresponds to 'created_at' in discussion_board_users.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp of last user record update.
   *
   * Corresponds to 'updated_at' in discussion_board_users.
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Timestamp if the user is soft-deleted (deactivated); null if active.
   *
   * Corresponds to 'deleted_at' in discussion_board_users.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null;
};
export namespace IDiscussionBoardUser {
  /**
   * Payload for user account creation (standard member). Requires unique
   * email, username, valid password, and consent. Optional display_name.
   */
  export type ICreate = {
    /**
     * Registration email (login identifier). Must be unique in the system
     * and a valid email address. Required for notification and password
     * recovery.
     */
    email: string & tags.Format<"email">;

    /**
     * Unique site display username. Used as a handle/reference by other
     * users. Must be unique. Required.
     */
    username: string;

    /**
     * User's plain text password (will be hashed on the server). Must meet
     * password policy (minimum 10 chars, at least 1 uppercase, number,
     * special character). Required.
     */
    password: string;

    /**
     * Optional display name/nickname for use in the UI. May be set to
     * personalize the profile. Not required.
     */
    display_name?: string;

    /**
     * Indicates that the user has given explicit consent to the terms of
     * service and privacy policy. Required per compliance.
     */
    consent: boolean;
  };

  /**
   * Authorized response to user login/register/refresh. Contains user summary
   * and issued tokens.
   */
  export type IAuthorized = {
    /**
     * Summary info about the authenticated user account (non-sensitive,
     * non-auth fields only).
     */
    user: IDiscussionBoardUserSummary;

    /** JWT token information for authentication */
    token: IAuthorizationToken;
  };

  /**
   * Payload for user login attempts. Must provide password and either email
   * or username (or both).
   */
  export type ILogin = {
    /**
     * User's email address for login. Either this or username must be
     * provided.
     */
    email?: string & tags.Format<"email">;

    /**
     * User's site username for login. Either this or email must be
     * provided.
     */
    username?: string;

    /**
     * Plain text password. Required for login. Will be checked against
     * password_hash.
     */
    password: string;
  };

  /**
   * Request payload for user access token refresh. Requires the
   * refresh_token.
   */
  export type IRefresh = {
    /**
     * Valid refresh token string as issued during authentication. Used to
     * obtain a new access token. Required.
     */
    refresh_token: string;
  };

  /**
   * Fields that can be updated in a user account profile.
   *
   * Supports partial updates to display_name, username, verification, and
   * suspension attributes. Used in user profile edit endpoints and
   * admin/moderator update workflows. All properties are optional to support
   * PATCH/PUT operations.
   */
  export type IUpdate = {
    /** (Optional) Public display name or nickname to update. */
    display_name?: string | null;

    /** (Optional) New username to update, must be unique. */
    username?: string;

    /** (Optional) Set verification state; only admins/moderators may modify. */
    is_verified?: boolean;

    /** (Optional) Suspend/unsuspend user account; privilege-restricted. */
    is_suspended?: boolean;

    /**
     * (Optional) If suspending, set until-when timestamp. Null removes
     * scheduled suspension.
     */
    suspended_until?: (string & tags.Format<"date-time">) | null;
  };

  /**
   * Criteria for searching, filtering, or paginating users.
   *
   * Used when listing users in admin/moderation panels or public search.
   * Allows filter by page, limit, email, username, verification/suspension
   * status, date windows, free search, and sort order.
   */
  export type IRequest = {
    /** Requested page number for pagination (1-based). */
    page?: number & tags.Type<"int32">;

    /** Maximum number of records per page. */
    limit?: number & tags.Type<"int32">;

    /** Filter by exact user email. */
    email?: string;

    /** Filter by username (exact, partial, or search). */
    username?: string;

    /** Filter by verification state. */
    is_verified?: boolean;

    /** Filter by suspended/not-suspended users. */
    is_suspended?: boolean;

    /** Filter: created after this date. */
    created_at_from?: string & tags.Format<"date-time">;

    /** Filter: created before this date. */
    created_at_to?: string & tags.Format<"date-time">;

    /** Free-text search across usernames, emails, and display names. */
    search?: string;

    /** Sort field (e.g. 'created_at', 'username', etc). */
    sort_by?: string;

    /** Sort direction: 'asc' for ascending, 'desc' for descending. */
    sort_order?: "asc" | "desc";
  };
}
