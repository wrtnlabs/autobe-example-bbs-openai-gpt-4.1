import { tags } from "typia";

import { IAuthorizationToken } from "./IAuthorizationToken";
import { IDiscussBoardMember } from "./IDiscussBoardMember";

/**
 * Full schema for discuss_board_moderators table—each record represents an
 * active or former moderator, with assignment/role escalation and status
 * fields. The schema follows the Prisma table structure and enforces audit,
 * role management, and system compliance as described in business
 * documentation. See ERD and requirements for detailed relationships and
 * rationale.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussBoardModerator = {
  /**
   * Unique identifier for the moderator role.
   *
   * References the primary key of the discuss_board_moderators table as
   * specified in the Prisma schema. Each moderator is assigned a UUID at
   * creation, which is immutable.
   */
  id: string & tags.Format<"uuid">;

  /**
   * UUID referencing the associated member promoted to moderator status.
   *
   * Links to the discuss_board_members.id field. Each moderator must have an
   * associated member record as per the Prisma schema definition.
   */
  member_id: string & tags.Format<"uuid">;

  /**
   * UUID of the administrator who assigned the moderator role.
   *
   * References discuss_board_administrators.id, indicating the escalator for
   * audit.
   */
  assigned_by_administrator_id: string & tags.Format<"uuid">;

  /**
   * Timestamp (UTC) when the moderator role was assigned.
   *
   * Captured at creation, this field is required for escalation tracking and
   * audit compliance. Stored as a DateTime in the database.
   */
  assigned_at: string & tags.Format<"date-time">;

  /**
   * Timestamp (UTC) when moderator role was revoked, if applicable.
   *
   * Nullable field per Prisma schema; if present, denotes when this member's
   * moderator privileges were rescinded.
   */
  revoked_at?: (string & tags.Format<"date-time">) | null | undefined;

  /**
   * Status of the moderator role assignment (e.g., 'active', 'suspended',
   * 'revoked').
   *
   * Required string field in the Prisma schema. Describes the current
   * business state of the role.
   */
  status: string;

  /**
   * Creation timestamp (UTC) of moderator assignment record.
   *
   * Matches the created_at column in the discuss_board_moderators table.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * Last update timestamp (UTC) of this moderator assignment record.
   *
   * Reflects operational changes and is updated on every modification.
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Timestamp if moderator role was soft-deleted (role removed).
   *
   * Nullable; used to soft delete moderator contracts for compliance. See
   * Prisma schema for semantics.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IDiscussBoardModerator {
  /**
   * Payload for administrator-driven creation of a moderator account. Both
   * the target member (to escalate) and the administrator (assigning) must be
   * referenced by UUID, with full auditability. Only available via
   * administrator workflow.
   */
  export type ICreate = {
    /**
     * UUID of the member being granted moderator rights. Must reference an
     * active member eligible for moderation escalation according to
     * business rules.
     */
    member_id: string & tags.Format<"uuid">;

    /**
     * UUID for the administrator authorizing moderator assignment. Used for
     * audit, escalation tracking, and compliance purposes.
     */
    assigned_by_administrator_id: string & tags.Format<"uuid">;
  };

  /**
   * Response type representing an authorized moderator in the discussBoard
   * platform. Includes moderator UUID, token payload, and summarized
   * associated member fields. Used after join, login, and session refresh to
   * inform frontend security and business context.
   */
  export type IAuthorized = {
    /**
     * UUID of the moderator account (discuss_board_moderators.id) that has
     * been authorized in this session.
     */
    id: string & tags.Format<"uuid">;

    /**
     * UUID referencing the associated member promoted to moderator status.
     *
     * Links to the discuss_board_members.id field. Each moderator must have
     * an associated member record as per the Prisma schema definition.
     */
    member_id: string & tags.Format<"uuid">;

    /**
     * UUID of the administrator who assigned the moderator role.
     *
     * References discuss_board_administrators.id, indicating the escalator
     * for audit.
     */
    assigned_by_administrator_id: string & tags.Format<"uuid">;

    /**
     * Timestamp (UTC) when the moderator role was assigned.
     *
     * Captured at creation, this field is required for escalation tracking
     * and audit compliance. Stored as a DateTime in the database.
     */
    assigned_at: string & tags.Format<"date-time">;

    /**
     * Timestamp (UTC) when moderator role was revoked, if applicable.
     *
     * Nullable field per Prisma schema; if present, denotes when this
     * member's moderator privileges were rescinded.
     */
    revoked_at?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Status of the moderator role assignment (e.g., 'active', 'suspended',
     * 'revoked').
     *
     * Required string field in the Prisma schema. Describes the current
     * business state of the role.
     */
    status: string;

    /**
     * Creation timestamp (UTC) of moderator assignment record.
     *
     * Matches the created_at column in the discuss_board_moderators table.
     */
    created_at: string & tags.Format<"date-time">;

    /**
     * Last update timestamp (UTC) of this moderator assignment record.
     *
     * Reflects operational changes and is updated on every modification.
     */
    updated_at: string & tags.Format<"date-time">;

    /**
     * Timestamp if moderator role was soft-deleted (role removed).
     *
     * Nullable; used to soft delete moderator contracts for compliance. See
     * Prisma schema for semantics.
     */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** JWT token information for authentication */
    token: IAuthorizationToken;

    /**
     * Summary record of the member data associated with this moderator.
     * Exposes public/moderator role fields for session handling.
     */
    member?: IDiscussBoardMember.ISummary | undefined;
  };

  /**
   * Credential set for moderator login/authentication, joining business logic
   * of email/password validation with role-level checks ensuring moderator
   * privilege is active. Used in secure mod login endpoint.
   */
  export type ILogin = {
    /**
     * Email associated with the moderator's linked member account. Used for
     * authentication lookup.
     */
    email: string & tags.Format<"email">;

    /**
     * Moderator's password—plaintext on input, handled securely and
     * validated against linked member's user_account record.
     */
    password: string;
  };

  /**
   * Request schema for moderator token refresh operations. Requires the
   * previous refresh_token. Follows business logic for JWT validation and
   * session prolongation.
   */
  export type IRefresh = {
    /**
     * The refresh token previously issued for a moderator session. Required
     * to obtain a new access token. Must be a non-empty JWT format string.
     */
    refresh_token: string;
  };

  /** Search, filter, and paging for discussBoard moderator accounts. */
  export type IRequest = {
    /** Page number to fetch (1-based); leave null or omit for first page. */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | null | undefined;

    /** Page size/limit; null/omitted for platform default. */
    limit?: (number & tags.Type<"int32"> & tags.Minimum<1>) | null | undefined;

    /**
     * Filter by moderator status (e.g., active, revoked, suspended).
     * Optional.
     */
    status?: string | undefined;

    /** Filter by the moderator's underlying member's nickname. */
    member_nickname?: string | undefined;

    /**
     * Return moderators assigned from this time onward (ISO 8601 UTC).
     * Optional.
     */
    assigned_from?: (string & tags.Format<"date-time">) | undefined;

    /** Return moderators assigned up to this time (ISO 8601 UTC). Optional. */
    assigned_to?: (string & tags.Format<"date-time">) | undefined;

    /** Sort by field: (assigned_at or status etc). */
    sort_by?: string | undefined;

    /** Sort direction to use: 'asc' or 'desc'. */
    sort_direction?: "asc" | "desc" | undefined;
  };

  /**
   * Partial update (PATCH) schema for discuss_board_moderators table—allows
   * updating mutable fields of a moderator role (revocation, status,
   * timestamps). Used for role management operations in admin UIs. Properties
   * exactly match Prisma schema with type constraints and audit requirements.
   * Do not supply immutable fields like id or assigned_by_administrator_id.
   */
  export type IUpdate = {
    /**
     * Timestamp when moderator role was revoked.
     *
     * Can be supplied to rescind a moderator's privileges. Must be omitted
     * or set null to indicate active.
     */
    revoked_at?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Status update for moderator role (e.g., 'active', 'suspended',
     * 'revoked').
     *
     * Enables corrective action, suspension, or escalation as necessary for
     * compliance and enforcement. Refer to business enums if present.
     */
    status?: string | undefined;

    /**
     * Optional field for last update timestamp (UTC).
     *
     * May be used to enforce update time correctness or for audit purpose.
     * If omitted, will be set automatically.
     */
    updated_at?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Soft-deletion request. Supply null to clear, or a DateTime string to
     * mark record as deleted (for audit and compliance workflows).
     */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };

  /**
   * Moderator summary DTO for paginated collection listing in platform
   * backoffice, management, or audit views.
   *
   * Includes only metadata and status fields required for management and
   * accountability business logic. Excludes member or admin details for
   * performance/normalization. Use main IDiscussBoardModerator for full
   * relation.
   */
  export type ISummary = {
    /**
     * Unique moderator account record ID (UUID).
     *
     * Identity anchor for this moderator assignment in the
     * discuss_board_moderators table.
     */
    id: string & tags.Format<"uuid">;

    /**
     * The member UUID associated with this moderator role assignment.
     *
     * Allowed to refer to associated member summary record.
     */
    member_id: string & tags.Format<"uuid">;

    /**
     * Active/revoked/suspended/role status. Drives RBAC and listing
     * filters.
     */
    status: string;

    /**
     * Timestamp (UTC, ISO8601) when the moderator role was
     * granted/assigned.
     */
    assigned_at: string & tags.Format<"date-time">;

    /**
     * Nullable timestamp of role revocation.
     *
     * Non-null means this moderator role is no longer active.
     */
    revoked_at?: (string & tags.Format<"date-time">) | null | undefined;

    /** Record creation timestamp. */
    created_at: string & tags.Format<"date-time">;

    /**
     * Last updated timestamp for audit/accountability. May equal
     * assigned_at or later if further edits occurred.
     */
    updated_at: string & tags.Format<"date-time">;
  };
}
