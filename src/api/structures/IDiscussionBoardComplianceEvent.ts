import { tags } from "typia";

/**
 * A compliance event represents a system action, regulatory issue, or business
 * process that is required by policy or law to be tracked for audit and
 * compliance purposes. This includes data subject requests, policy updates,
 * regulatory inquiries, and security incidents. The entity includes status
 * tracking, administrative assignment, and full audit trail fields for
 * compliance review and potential investigation.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussionBoardComplianceEvent = {
  /** Unique identifier for this compliance event. */
  id: string & tags.Format<"uuid">;

  /** Optional identifier for the user who initiated the event, if applicable. */
  initiated_by_user_id?: (string & tags.Format<"uuid">) | null;

  /**
   * Nature of the compliance event (e.g. regulatory_inquiry,
   * data_breach_report, DPIA_completed, erasure_executed, legal_hold).
   */
  event_type: string;

  /**
   * Current status of the compliance event (open, closed, in_review,
   * escalated, resolved).
   */
  event_status: string;

  /** Detailed event content, investigation summary, or protocol steps. */
  event_details?: string | null;

  /** When the compliance event started or was detected/received. */
  detected_at: string & tags.Format<"date-time">;

  /** When the compliance event was closed or resolved, if finalized. */
  resolved_at?: (string & tags.Format<"date-time">) | null;

  /**
   * Regulator's case/ticket number or external ID, if available, for
   * traceability.
   */
  regulatory_ticket?: string | null;

  /** Compliance staff member or system process handling the event. */
  assigned_staff?: string | null;

  /** Timestamp when this event record was created. */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp when this record was last updated. */
  updated_at: string & tags.Format<"date-time">;

  /** Soft-deleted timestamp (null when active). */
  deleted_at?: (string & tags.Format<"date-time">) | null;
};
export namespace IDiscussionBoardComplianceEvent {
  /**
   * Filtering/sorting criteria for compliance event listing. Used for
   * compliance/audit dashboards, may restrict to key events or subtypes.
   */
  export type IRequest = {
    /**
     * Optional filter restricting compliance event search by event_type
     * (e.g. regulator_inquiry/data_breach, etc.).
     */
    event_type?: string;

    /**
     * Optional filter for specific compliance event status (open, closed,
     * in_review, etc.).
     */
    event_status?: string;

    /** Lower bound for compliance event detection (inclusive). */
    detected_at_from?: string & tags.Format<"date-time">;

    /** Upper bound for compliance event detection (inclusive). */
    detected_at_to?: string & tags.Format<"date-time">;

    /** Results page to fetch. */
    page?: number & tags.Type<"int32"> & tags.Default<1> & tags.Minimum<1>;

    /** Page size (# records per page, max subject to system constraint). */
    limit?: number & tags.Type<"int32"> & tags.Default<50> & tags.Minimum<1>;
  };
}
