import { tags } from "typia";

/**
 * Represents a registered member entity within the discussBoard platform, as
 * defined precisely in the underlying Prisma model. The object includes
 * references to the associated user account (user_account_id, UUID), the
 * member's nickname, status (such as 'active', 'suspended', etc.), and account
 * lifecycle timestamps. deleted_at is nullable for active members and set on
 * soft deletion or anonymization. This schema is the canonical response type
 * for member detail retrieval and is the foundational type for user profile
 * management, moderation, and audit functionality.
 *
 * Strict schema and business logic alignment is maintained to prevent
 * unauthorized property access: only fields mapped in Prisma are present here.
 * No password or sensitive authentication fields are included. id is the unique
 * identifier (UUID) and serves as the table primary key. Status is a
 * system-managed enumerated string.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussBoardMembers = {
  /** Unique identifier for this member (primary key UUID). */
  id: string & tags.Format<"uuid">;

  /**
   * UUID that references the user account providing this member's
   * authentication context.
   */
  user_account_id: string & tags.Format<"uuid">;

  /** The public display nickname for this member (unique system-wide). */
  nickname: string;

  /**
   * Current status of the member, e.g. 'active', 'suspended', 'banned', as
   * managed by platform logic.
   */
  status: string;

  /** Timestamp at which this member record was created (RFC 3339 UTC format). */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp for latest modification to this member record (RFC 3339 UTC
   * format).
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * If present, the timestamp when this member was soft-deleted/anonymized
   * for privacy reasons; null if currently active.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IDiscussBoardMembers {
  /**
   * Request object for searching, filtering, and paginating discussBoard
   * member accounts. Used to formulate complex membership queries according
   * to status, nickname, and date ranges, and to control pagination of
   * response data. All properties reflect the search filter capabilities
   * supported by the platform's member administration UI. Pagination is
   * driven by 'page' and 'limit'; status and nickname enable targeted
   * filtering. Date ranges (created_at_from/to) filter by member account
   * creation dates for audit or compliance review.
   */
  export type IRequest = {
    /** Page number for paginated queries (optional; null/1 for first page). */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | null | undefined;

    /**
     * Maximum number of items per page for pagination (optional; system
     * default applies if omitted/null).
     */
    limit?: (number & tags.Type<"int32"> & tags.Minimum<1>) | null | undefined;

    /**
     * (Optional) Filter for specific member account status (e.g., 'active',
     * 'suspended', 'banned').
     */
    status?: string | undefined;

    /**
     * (Optional) Search or filter by member's nickname (supports match or
     * partial search according to business logic).
     */
    nickname?: string | undefined;

    /**
     * (Optional) Filter lower bound: member creation date (inclusive). RFC
     * 3339 date-time string.
     */
    created_at_from?: (string & tags.Format<"date-time">) | undefined;

    /**
     * (Optional) Filter upper bound: member creation date (inclusive/up
     * to). RFC 3339 date-time string.
     */
    created_at_to?: (string & tags.Format<"date-time">) | undefined;
  };

  /**
   * Payload for administrators to create a new discussBoard member record.
   * This schema contains the required account linkage (user_account_id,
   * UUID), member nickname (must be unique system-wide), and initial account
   * status (in range of platform-defined values such as 'active',
   * 'suspended', etc.). All properties are strictly aligned to the Prisma
   * schema. Only fields that exist in the actual schema may be set—no
   * sensitive authentication or profile data are exposed. Business logic
   * enforces uniqueness and value constraints outside this schema. Use for
   * POST member creation endpoints by administrators or authorized systems.
   */
  export type ICreate = {
    /** Reference to an existing user account ID (UUID) for this member. */
    user_account_id: string & tags.Format<"uuid">;

    /** Member's public display nickname to assign (must be unique). */
    nickname: string;

    /**
     * Initial member status to assign, e.g. 'active', 'suspended',
     * 'pending', according to system enumeration.
     */
    status: string;
  };

  /**
   * Payload for updating a discussBoard member's account properties in-place.
   * Supports PATCH/PUT semantics depending on API endpoint. Only allows
   * adjustment of nickname, status, or recording of deleted_at (for soft
   * delete). All changes must comply with business rules for valid values,
   * uniqueness, and status transitions. This object strictly maps to
   * updatable fields of the corresponding Prisma model, with no additional or
   * sensitive properties present. Mutation is tracked via updated_at in the
   * main entity and full audit is maintained by system logic.
   */
  export type IUpdate = {
    /** (Optional) New nickname for this member. Must remain unique if set. */
    nickname?: string | undefined;

    /**
     * (Optional) New platform status for the member, such as 'active',
     * 'suspended', 'banned'. Must match system enumeration.
     */
    status?: string | undefined;

    /**
     * (Optional) Soft deletion/anonymization timestamp—set by system or
     * admin as needed for privacy or account lifecycle changes.
     */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };
}
