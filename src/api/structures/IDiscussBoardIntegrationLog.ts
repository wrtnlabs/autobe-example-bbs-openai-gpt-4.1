import { tags } from "typia";

/**
 * Integration log record reporting a specific interaction with an external
 * partner API/platform or service.
 *
 * Fields include all primary metadata, status, and audit fields needed for
 * troubleshooting, analytics, and business compliance. Only those fields
 * present in discuss_board_integration_logs table are included. Sensitive
 * payloads may be redacted at UI or business layer as required.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussBoardIntegrationLog = {
  /**
   * Unique integration log entry ID.
   *
   * This value is a UUID that uniquely identifies the integration event
   * within the system for search, retrieval, and audit purposes. Referenced
   * by external compliance and troubleshooting infrastructure.
   */
  id: string & tags.Format<"uuid">;

  /**
   * If the integration event is tied to a user action or initiated on behalf
   * of a user, this field contains the UUID of the account. Null if
   * system-level.
   */
  user_account_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Type or category of the integration event (e.g., notification_delivery,
   * analytics, partner_api, abuse_detection).
   *
   * Critical for filtering, audit, and compliance reporting.
   */
  integration_type: string;

  /**
   * The external service or platform integrated (e.g., SendGrid, Twilio,
   * GoogleAnalytics, etc.).
   */
  integration_partner: string;

  /**
   * Serialized business/request/response or context (e.g., JSON) documenting
   * the full event payload for audit and troubleshooting.
   *
   * May be redacted if sensitive. Generally JSON or structured text.
   */
  payload: string;

  /**
   * Current status of the integration operation (pending, success, failed,
   * retried, quarantined, etc.).
   */
  integration_status: string;

  /**
   * External provider-issued reference or job/message/transaction ID. Used to
   * troubleshoot across systems.
   */
  external_reference_id?: string | null | undefined;

  /**
   * Business event triggering the integration (e.g., post_created,
   * moderation_action, account_export, etc.).
   */
  triggered_event: string;

  /** Optional error details (string, log message, or JSON) if failed. */
  error_message?: string | null | undefined;

  /** UTC timestamp for when this integration log was created. */
  created_at: string & tags.Format<"date-time">;

  /** UTC last modification timestamp. */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft delete timestamp: non-null if the log is logically deleted for
   * compliance/history.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IDiscussBoardIntegrationLog {
  /**
   * Paginated/filterable search request for discussBoard external integration
   * logs. All search parameters map to corresponding Prisma schema fields and
   * business workflow context for flexible audit or compliance review.
   */
  export type IRequest = {
    /**
     * Optional. Search filter for integration logs related to a particular
     * user account (discuss_board_user_accounts.id).
     */
    user_account_id?: (string & tags.Format<"uuid">) | undefined;

    /**
     * Optional. Filter events by integration type (e.g.,
     * 'notification_delivery', 'analytics', 'abuse_detection',
     * 'partner_api', etc.).
     */
    integration_type?: string | undefined;

    /**
     * Optional. Filter integration log entries by external partner/service
     * name (e.g., 'SendGrid').
     */
    integration_partner?: string | undefined;

    /**
     * Optional. Filter logs by integration status (e.g., 'pending',
     * 'success', 'failed', 'retried', 'quarantined').
     */
    integration_status?: string | undefined;

    /**
     * Optional. Filter by triggered event (e.g., 'post_created',
     * 'comment_reported', etc.).
     */
    triggered_event?: string | undefined;

    /**
     * Optional. Begin window for integration event timestamp (ISO 8601
     * UTC). Narrows query window for audit or search.
     */
    created_at_from?: (string & tags.Format<"date-time">) | undefined;

    /** Optional. End window for integration event timestamp (ISO 8601 UTC). */
    created_at_to?: (string & tags.Format<"date-time">) | undefined;

    /** Optional pagination—page number (1-indexed). */
    page?: (number & tags.Type<"int32"> & tags.Minimum<1>) | undefined;

    /**
     * Optional pagination—results per page (max 1000 to limit resource
     * use).
     */
    limit?:
      | (number & tags.Type<"int32"> & tags.Minimum<1> & tags.Maximum<1000>)
      | undefined;

    /**
     * Optional. Field to sort integration log results by (e.g.,
     * 'created_at', 'integration_type').
     */
    sort_by?: string | undefined;

    /** Optional. Sort order: 'asc' for ascending, 'desc' for descending. */
    sort_direction?: "asc" | "desc" | undefined;
  };
}
