import { tags } from "typia";

/**
 * Moderation policy rule for platform forbidden words/phrases.
 *
 * Defines a unique word, phrase, or pattern banned under the discussBoard
 * content policy. This record is enforced in post/comment creation, and changes
 * or deletions are tracked for audit, appeal, and compliance purposes.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussBoardForbiddenWords = {
  /**
   * Unique identifier for the forbidden word entry (UUID).
   *
   * Primary key for moderation and audit workflows, assigned at rule
   * creation. Used for record update, deletion, or detailed review.
   */
  id: string & tags.Format<"uuid">;

  /**
   * The forbidden word, phrase, or regex pattern enforced in moderation.
   *
   * Case-insensitive match against user-generated content to enforce platform
   * policies for hate speech, profanity, or other prohibited language. Must
   * be unique in the system, and validated prior to insertion.
   */
  expression: string;

  /**
   * Administrative business rationale/context for this expression.
   *
   * Used by moderators and compliance staff to document why this word was
   * added to policy, for transparency and context in reviews. Field is
   * optional.
   */
  description?: string | null | undefined;

  /**
   * ISO 8601 UTC timestamp when entry was created. Used for moderator/audit
   * review and compliance traceability.
   */
  created_at: string & tags.Format<"date-time">;

  /**
   * ISO 8601 UTC timestamp of most recent update for this entry. Drives audit
   * and policy review.
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * ISO 8601 timestamp for soft deletion, if inactivated. Null if still
   * active in policy enforcement. Used for audit, rollback, and compliance
   * checks.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IDiscussBoardForbiddenWords {
  /**
   * Paging/search/filter criteria for forbidden words content moderation
   * rules.
   *
   * Enables administrators or moderators to locate, audit, and review
   * forbidden content expressions with comprehensive filtering, text search,
   * and window parameters for compliance, governance, and rapid UI
   * presentation.
   */
  export type IRequest = {
    /**
     * Optional search/filter string for expressions or description text.
     *
     * Supports full-text search of forbidden word patterns or rationale for
     * moderation or audit review.
     */
    search?: string | null | undefined;

    /**
     * Optional filter for forbidden word entry status (active, deleted).
     *
     * Returns only active records by default. To include soft-deleted
     * entries (with deleted_at set), clients must explicitly request
     * status=deleted.
     */
    status?: string | null | undefined;

    /**
     * Start of created_at filter window (ISO8601 UTC). Returns words
     * created after this timestamp.
     */
    created_after?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * End of created_at filter window (ISO8601 UTC). Returns words created
     * before this timestamp.
     */
    created_before?: (string & tags.Format<"date-time">) | null | undefined;

    /**
     * Optional page number for pagination; defaults to 1 if unspecified.
     * Standard page size is determined by backend.
     */
    page?: (number & tags.Type<"int32">) | null | undefined;

    /**
     * Optional results per page for pagination. Used to limit bulk audit
     * queries and reduce result set size.
     */
    limit?: (number & tags.Type<"int32">) | null | undefined;
  };

  /**
   * Payload for creating a new forbidden word content filter entry.
   *
   * Used by administrators to expand content enforcement rules, document
   * compliance requirements, and manage platform safety policies. Creation is
   * tracked for regulatory and audit history.
   */
  export type ICreate = {
    /**
     * Forbidden word, phrase, or regex for moderation filtering.
     *
     * Must be unique within the platform and validated by business logic
     * prior to insertion. Case-insensitive by default.
     */
    expression: string;

    /**
     * Optional rationale or moderation context for internal administrative
     * purposes. Used by moderators to document business reason or subset of
     * policies. Field is not required and may be set to null for batch
     * import or minimal entries.
     */
    description?: string | null | undefined;
  };

  /**
   * Update payload for discussing forbidden words rules. All fields are
   * optional to allow partial updates of forbidden expression, rationale, or
   * deletion status.
   *
   * Maps to discuss_board_forbidden_words table columns. Use only existing
   * field names; do not add properties not present in the database schema.
   *
   * All changes must be audit-logged for compliance.
   */
  export type IUpdate = {
    /**
     * Forbidden word, phrase, or regex pattern (case-insensitive).
     *
     * References the corresponding 'expression' column in
     * discuss_board_forbidden_words. Used to update the content filter for
     * posts/comments.
     */
    expression?: string | undefined;

    /**
     * Administrative description or policy rationale for this forbidden
     * word. Nullable.
     *
     * Corresponds to 'description' column in discuss_board_forbidden_words.
     */
    description?: string | null | undefined;

    /**
     * Soft delete flag: specifies when this entry was removed by
     * administrators, if applicable. ISO8601 date-time string or null for
     * active records.
     *
     * References 'deleted_at' column in discuss_board_forbidden_words.
     */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };
}
