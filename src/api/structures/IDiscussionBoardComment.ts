import { tags } from "typia";

/**
 * Detailed structure for a single discussion comment including all key fields
 * and metadata.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussionBoardComment = {
  /** Unique identifier of the comment. */
  id: string & tags.Format<"uuid">;

  /** UUID of the parent post to which this comment belongs. */
  post_id: string & tags.Format<"uuid">;

  /**
   * Optional UUID of the parent comment if this comment is a reply (null for
   * top-level comments).
   */
  parent_id?: (string & tags.Format<"uuid">) | null;

  /** User id of the comment's author. */
  created_by_id: string & tags.Format<"uuid">;

  /** Textual content of the comment. */
  body: string;

  /** The level (depth) of the comment in thread hierarchy (0 = top-level). */
  nesting_level: number & tags.Type<"int32">;

  /** ISO8601 timestamp when comment was created. */
  created_at: string & tags.Format<"date-time">;

  /** ISO8601 timestamp when comment was last updated. */
  updated_at: string & tags.Format<"date-time">;

  /** Timestamp for soft deletion; null if not deleted. */
  deleted_at?: (string & tags.Format<"date-time">) | null;
};
export namespace IDiscussionBoardComment {
  /**
   * Request parameters for listing/filtering comments under a post or a
   * particular parent comment.
   */
  export type IRequest = {
    /** UUID of the parent post for which comments are being queried. */
    post_id: string & tags.Format<"uuid">;

    /**
     * Optional parent comment UUID for fetching only replies to a specific
     * comment.
     */
    parent_id?: (string & tags.Format<"uuid">) | null;

    /** Optional filter for the nesting level (depth) of the comment. */
    nesting_level?: number & tags.Type<"int32">;

    /**
     * Optional filter to restrict results to comments made by the given
     * user.
     */
    author_id?: string & tags.Format<"uuid">;

    /** Search keyword for filtering comment bodies. */
    search?: string;

    /** Sort mode, e.g. 'created_at desc', 'nesting_level asc', etc. */
    sort?: string;

    /** Page number for pagination (1-based). */
    page?: number & tags.Type<"int32">;

    /** Limit of results per page. */
    limit?: number & tags.Type<"int32">;
  };

  /** Body for creating a new comment. parent_id is required only for replies. */
  export type ICreate = {
    /** UUID of the post to which the comment belongs. */
    post_id: string & tags.Format<"uuid">;

    /** Optional parent comment id; null for top-level. */
    parent_id?: (string & tags.Format<"uuid">) | null;

    /**
     * Text of the comment (cannot be empty, subject to character/length
     * constraints).
     */
    body: string;
  };

  /**
   * Body for updating an existing comment. Only the content/body is
   * updatable.
   */
  export type IUpdate = {
    /** Updated text for the comment. */
    body?: string;
  };

  /**
   * Presents key summary data for a comment in thread or comment-page
   * listings. Includes truncated body (up to 1000 chars), author id, nesting,
   * and minimal context for parent lookup or display logic. Recommended for
   * all summary comment output and as the item type in paginated comment
   * lists.
   */
  export type ISummary = {
    /** UUID for the comment record. Used to link to detail view or replies. */
    id: string & tags.Format<"uuid">;

    /** Content of the comment. May be truncated for summary in UI/list mode. */
    body: string;

    /**
     * Timestamp when the comment was created. Display in thread or timeline
     * view.
     */
    created_at: string & tags.Format<"date-time">;

    /**
     * Soft deletion state; null if active, timestamp if deleted for
     * compliance review.
     */
    deleted_at?: (string & tags.Format<"date-time">) | null;

    /**
     * ID of the user who authored the comment. Used for linking to user
     * profile or moderation.
     */
    created_by_id: string & tags.Format<"uuid">;

    /**
     * Hierarchy level of the comment for threading (0 = top-level, up to 5
     * maximum). Important for UI indentation and discussion tree building.
     */
    nesting_level: number & tags.Type<"int32">;

    /**
     * Reference to parent comment (for replies) or null for top-level
     * comments. Used for threading and recursive display.
     */
    parent_id?: (string & tags.Format<"uuid">) | null;
  };
}
