import { tags } from "typia";

import { IAuthorizationToken } from "./IAuthorizationToken";

/**
 * Moderator record reflects a user with moderation privileges in the forum.
 * Based on Prisma's discussion_board_moderators model: tracks moderator
 * assignment, audit/certification, active state, and suspension windows,
 * supporting independent moderator management for audit/compliance.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussionBoardModerator = {
  /**
   * Primary Key UUID for the moderator entity, unique per record. Sourced
   * from discussion_board_moderators.id.
   */
  id: string & tags.Format<"uuid">;

  /**
   * ID of the associated user who holds this moderator status. Duplicates the
   * user id for audit separation, tied to discussion_board_users.id.
   */
  user_id: string & tags.Format<"uuid">;

  /**
   * Timestamp (ISO8601) when this moderator role was assigned. Used for audit
   * and lifecycle tracking.
   */
  assigned_at: string & tags.Format<"date-time">;

  /**
   * If present, timestamp (ISO8601) when moderator privileges were revoked.
   * Null if currently active.
   */
  revoked_at?: (string & tags.Format<"date-time">) | null;

  /**
   * Whether the moderator assignment is active. Used for access control,
   * status checks, and privilege enforcement.
   */
  is_active: boolean;

  /**
   * Optional suspension window datetime. Null if not suspended or restriction
   * expired.
   */
  suspended_until?: (string & tags.Format<"date-time">) | null;

  /** Timestamp (ISO8601) when this moderator record was created. */
  created_at: string & tags.Format<"date-time">;

  /** Timestamp (ISO8601) when moderator record was last updated. */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft-deletion timestamp (ISO8601) for audit/tombstone; null if not
   * deleted.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null;
};
export namespace IDiscussionBoardModerator {
  /**
   * Payload for new moderator registration. Contains unique email, username,
   * password, optional display_name, and required consent.
   */
  export type IJoin = {
    /**
     * Email for registering a moderator. Must be unique and valid. Required
     * for credential delivery.
     */
    email: string & tags.Format<"email">;

    /** Unique display username for moderator identification. Required. */
    username: string;

    /**
     * Plain text password for moderator's account. Subject to password
     * policy. Required.
     */
    password: string;

    /**
     * Optional display name for the moderator. Personalized identification.
     * Not required.
     */
    display_name?: string;

    /**
     * Indicates moderator has consented to all terms of service and
     * privacy. Required for compliance.
     */
    consent: boolean;
  };

  /**
   * Authorization response upon moderator join or login. Contains JWT session
   * token payload and full moderator profile for secure session initiation
   * and subsequent authorization verification. Follows JWT lifecycle and
   * system authentication standards.
   */
  export type IAuthorized = {
    /** JWT token information for authentication */
    token: IAuthorizationToken;

    /**
     * Moderator profile and credential information, linked to the current
     * authenticated session.
     */
    moderator: IDiscussionBoardModerator;
  };

  /**
   * Request body for moderator login operation. Expects email/username and
   * password. Used for credential verification in login flow, returning
   * IAuthorized payload on success.
   */
  export type ILogin = {
    /**
     * Moderator's unique email address used for authentication and identity
     * verification.
     */
    email: string & tags.Format<"email">;

    /**
     * Raw password for authentication. Only used for login and never
     * persisted beyond secure hash storage.
     */
    password: string & tags.Format<"password">;
  };

  /**
   * Request body for refreshing moderator session. Supplies a valid refresh
   * token for lifecycle management, obtaining a renewed access/refresh token
   * pair upon successful verification.
   */
  export type IRefresh = {
    /**
     * Refresh token returned during login or previous session refresh,
     * required to issue a new session access token. Must be currently valid
     * and non-revoked.
     */
    refresh_token: string;
  };

  /**
   * Request for moderator status/record queries (future use, extendable for
   * filtering, auditing, or triage). No required properties.
   */
  export type IRequest = {};

  /**
   * Payload for assigning a moderator role to a user; only 'user_id' is
   * needed, other fields defaulted or system-assigned.
   */
  export type ICreate = {
    /** ID of the existing user to be assigned moderator privileges. */
    user_id: string & tags.Format<"uuid">;
  };
}
