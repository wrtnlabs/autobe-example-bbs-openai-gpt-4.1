import { tags } from "typia";

/**
 * Full audit log record for global system or user event/action
 * (discuss_board_global_audit_logs).
 *
 * Captures all required metadata for system-wide audit, compliance, and
 * forensic review scenarios. Strictly follows table and business logic
 * definitions. Sensitive or non-standard fields are handled at business/app
 * layer.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussBoardGlobalAuditLog = {
  /**
   * Unique audit log entry ID.
   *
   * Globally unique event identifier (UUID). Referenced by other audits,
   * compliance, and search infrastructure.
   */
  id: string & tags.Format<"uuid">;

  /**
   * The unique identifier of the actor responsible for the audit event. May
   * be null for system-initiated or anonymous events.
   */
  actor_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Type/class of actor (member, moderator, admin, guest, service/automation,
   * etc.).
   */
  actor_type: string;

  /**
   * Main action/event type (e.g., post_edit, user_login, moderation_action,
   * consent_update).
   *
   * Used for classification and event-type filtering in queries.
   */
  action_category: string;

  /**
   * Target table/entity name for this event (e.g., discuss_board_posts,
   * discuss_board_comments).
   */
  target_table: string;

  /**
   * ID of the primary target entity/object for this event (UUID, nullable for
   * system/meta events).
   */
  target_id?: (string & tags.Format<"uuid">) | null | undefined;

  /**
   * Serialized pre/post state or rationale/context information for the event
   * (JSON or text, or null if not applicable).
   */
  event_payload?: string | null | undefined;

  /**
   * Summary human-readable description documenting the event for
   * display/search purposes.
   */
  event_description: string;

  /** ISO8601 timestamp for the event's creation (system time, immutable). */
  created_at: string & tags.Format<"date-time">;

  /**
   * Deletion timestamp for the log event; present if soft-deleted due to
   * record retention rules.
   */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IDiscussBoardGlobalAuditLog {
  /**
   * Filter, sorting, and pagination structure for searching platform global
   * audit logs (discuss_board_global_audit_logs).
   *
   * Contains only those filters supported directly by schema.
   */
  export type IRequest = {
    /**
     * Type of actor (e.g., 'member', 'moderator', 'admin', 'guest',
     * 'service') for event search filtering.
     */
    actor_type?: string | undefined;

    /** UUID of the actor for audit filtering (nullable for system events). */
    actor_id?: string | undefined;

    /**
     * Event/action category search (e.g., 'post_edit',
     * 'moderation_action').
     */
    action_category?: string | undefined;

    /**
     * Target table/entity name for event search (e.g.,
     * 'discuss_board_posts').
     */
    target_table?: string | undefined;

    /** ID of the target entity in the audit log (UUID, optional). */
    target_id?: string | undefined;

    /**
     * ISO8601 timestamp for minimum creation (inclusive for range
     * filtering).
     */
    created_from?: (string & tags.Format<"date-time">) | undefined;

    /**
     * ISO8601 timestamp for maximum creation (inclusive for range
     * filtering).
     */
    created_to?: (string & tags.Format<"date-time">) | undefined;

    /** Full-text search string for audit log event_description field. */
    event_description_search?: string | undefined;

    /** Page number of results for pagination. */
    page?: (number & tags.Type<"int32">) | undefined;

    /** Page size for result pagination. */
    limit?: (number & tags.Type<"int32">) | undefined;

    /** Field and order for sorting (e.g., 'created_at desc'). */
    sort?: string | undefined;
  };
}
