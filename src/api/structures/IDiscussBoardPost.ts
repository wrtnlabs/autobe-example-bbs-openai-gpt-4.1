import { tags } from "typia";

/**
 * Full entity record for a discussBoard post as per discuss_board_posts.
 * Includes all columns for storage, display, audit, and business logic
 * alignment. Does not include aggregated reaction/comment counts (handle
 * elsewhere).
 *
 * Sensitive fields (none in this entity) are excluded. Audit/ownership fields
 * are read-only.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussBoardPost = {
  /** Unique identifier for the post (UUID). */
  id: string & tags.Format<"uuid">;

  /** Author's member UUID, references discuss_board_members.id. */
  author_id: string & tags.Format<"uuid">;

  /**
   * Title of the post, 5-150 characters, required. Enforced in the
   * application, maps to discuss_board_posts.title.
   */
  title: string;

  /**
   * Main text content of the post, 10-10,000 characters as per business/app
   * logic.
   */
  body: string;

  /**
   * Post visibility/workflow status (public, private, limited, locked,
   * under_review, etc.) from discuss_board_posts.business_status.
   */
  business_status: string;

  /** UTC time the post was created, ISO 8601 format. */
  created_at: string & tags.Format<"date-time">;

  /** Last update timestamp, ISO 8601. */
  updated_at: string & tags.Format<"date-time">;

  /** Soft-delete timestamp (null if not deleted). */
  deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
};
export namespace IDiscussBoardPost {
  /**
   * Request criteria for searching/filtering/paginating discussBoard posts.
   * Includes pagination, search, and various field filters, aligned with the
   * business requirements and Prisma schema.
   *
   * Every property represents query input for browsing, searching, or
   * analytics scenarios in the discussBoard platform.
   */
  export type IRequest = {
    /** Page number, optional. For pagination. */
    page?: (number & tags.Type<"int32">) | null | undefined;

    /** Limit of records per page, optional. */
    limit?: (number & tags.Type<"int32">) | null | undefined;

    /** Filter by author ID (UUID). */
    author_id?: (string & tags.Format<"uuid">) | undefined;

    /** Filter by post business status, such as 'public', 'locked', etc. */
    status?: string | undefined;

    /** Filter posts by a tag assigned (UUID). */
    tag_id?: (string & tags.Format<"uuid">) | undefined;

    /** Full-text search keyword (matches title or body). */
    keyword?: string | undefined;

    /** ISO8601 start of created_at date range. */
    created_from?: (string & tags.Format<"date-time">) | undefined;

    /** ISO8601 end of created_at date range. */
    created_to?: (string & tags.Format<"date-time">) | undefined;

    /**
     * Sort by one of the available fields, typical: created_at, updated_at,
     * title. Implementation may constrain.
     */
    sort_by?: string | undefined;

    /** Sort order: asc or desc. */
    sort_order?: "asc" | "desc" | undefined;
  };

  /**
   * Input type for creating a new discussBoard post. Contains
   * business-allowed, client-supplied fields only. Ownership and timestamps
   * are managed by the backend. Security policy excludes supply of author_id,
   * created_at, updated_at, etc.
   */
  export type ICreate = {
    /** Required. Title of the post (5-150 characters). */
    title: string;

    /** Required. Main content of the post (10-10,000 chars). */
    body: string;

    /**
     * Optional. Initial business status of the post (public, private,
     * etc.). Default is 'public' unless overridden by system. For
     * workflow/usecase: moderation, drafts, or privilege gating.
     */
    business_status?: string | undefined;

    /**
     * Optional. Array of tag UUIDs to assign to this post during creation.
     * Validated for maximum/tag uniqueness at service layer.
     */
    tag_ids?: (string & tags.Format<"uuid">)[] | undefined;
  };

  /**
   * Update input type for an existing discussBoard post. All fields are
   * optional; only provided properties will be updated. Ownership,
   * timestamps, and moderation fields are managed by the backend. Security:
   * author_id, created_at, and related fields CANNOT be updated via this
   * DTO.
   */
  export type IUpdate = {
    /** Optional. New value for the post title (5-150 chars each). */
    title?: string | undefined;

    /** Optional. Body of the post (10-10,000 chars). */
    body?: string | undefined;

    /**
     * Optional. New business status if permitted (e.g., locked,
     * under_review).
     */
    business_status?: string | undefined;

    /** Optional. New list of tag UUIDs to replace current assignments. */
    tag_ids?: (string & tags.Format<"uuid">)[] | undefined;
  };

  /**
   * Summary representation of a post, for list/search APIs. Contains key
   * reference fields and business metadata, but not the full text body.
   */
  export type ISummary = {
    /**
     * Unique identifier for the post as a UUID. This field is the primary
     * key for the post entity and is used across all references to the
     * post. Corresponds to the 'id' field in discuss_board_posts.
     */
    id: string & tags.Format<"uuid">;

    /**
     * Primary title of the post. Used for search, display, and indexing.
     * Restrictions on length enforced at application layer. Mirrors the
     * 'title' field in discuss_board_posts.
     */
    title: string;

    /**
     * Logical post visibility/workflow state (e.g. public, limited,
     * private, locked). Used by business/membership logic for filtering and
     * access enforcement. Mirrors 'business_status' in
     * discuss_board_posts.
     */
    business_status: string;

    /**
     * ID of the member who authored this post, foreign key to
     * discuss_board_members.id. Used for attribution, editing, and
     * permission checks.
     */
    author_id: string & tags.Format<"uuid">;

    /**
     * Timestamp (UTC, ISO 8601 format) of original post creation. Sets time
     * window for edits, deletions. Mirrors 'created_at' field in schema.
     */
    created_at: string & tags.Format<"date-time">;

    /**
     * Timestamp (UTC, ISO 8601 format) of most recent update to this post.
     * Useful for ordering and change reporting. Derived from
     * discuss_board_posts.updated_at.
     */
    updated_at: string & tags.Format<"date-time">;

    /**
     * Soft-delete timestamp or null if post is active. Derived from
     * discuss_board_posts.deleted_at.
     */
    deleted_at?: (string & tags.Format<"date-time">) | null | undefined;
  };
}
