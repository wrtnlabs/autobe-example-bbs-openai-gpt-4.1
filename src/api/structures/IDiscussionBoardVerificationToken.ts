import { tags } from "typia";

/**
 * Full detail structure for a verification token as recorded in the database,
 * including identifiers, status, timestamps, and relationships. No sensitive
 * token key is returned in plaintext except to privileged actors.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussionBoardVerificationToken = {
  /**
   * Unique primary key for the verification token record. From
   * discussion_board_verification_tokens table.
   */
  id: string & tags.Format<"uuid">;

  /** User id (uuid) the verification token is tied to. Foreign key for user. */
  discussion_board_user_id: string & tags.Format<"uuid">;

  /**
   * Opaque (hashed or securely random) verification token string used for
   * email, password reset, or multi-factor auth flows.
   */
  verification_token: string;

  /**
   * Purpose or intent of the token: e.g., 'email_verification',
   * 'password_reset', 'mfa', etc.
   */
  purpose: string;

  /** Datetime at which the token becomes invalid. */
  expires_at: string & tags.Format<"date-time">;

  /** Datetime when token was used by client, or null if not yet consumed. */
  used_at?: (string & tags.Format<"date-time">) | null;

  /** Datetime when token was created. */
  created_at: string & tags.Format<"date-time">;

  /** Datetime when token was last updated (rotated, used, or expired). */
  updated_at: string & tags.Format<"date-time">;

  /** Soft-deleted timestamp (if present, token is logically deleted). */
  deleted_at?: (string & tags.Format<"date-time">) | null;
};
export namespace IDiscussionBoardVerificationToken {
  /**
   * Request payload for filtering, searching, and paginating verification
   * tokens for audit, compliance, or support use.
   */
  export type IRequest = {
    /**
     * Filter by the purpose of the verification token (e.g.,
     * 'email_verification', 'password_reset', 'mfa').
     */
    purpose?: string;

    /** Optional filter by user id for tokens belonging to this user. */
    discussion_board_user_id?: string & tags.Format<"uuid">;

    /** Optional filter for tokens expiring after this timestamp. */
    expires_at_from?: string & tags.Format<"date-time">;

    /** Optional filter for tokens expiring before this timestamp. */
    expires_at_to?: string & tags.Format<"date-time">;

    /**
     * Filter tokens based on whether they have been used (true) or are
     * pending (false).
     */
    used?: boolean;

    /** Pagination: which page number to retrieve (1-based). */
    page?: number & tags.Type<"int32">;

    /** Pagination: maximum number of tokens per page. */
    limit?: number & tags.Type<"int32">;
  };

  /**
   * Summary structure for verification tokens, containing key identifiers and
   * lifecycle audit metadata. Used in admin/audit/search list views.
   */
  export type ISummary = {
    /**
     * Unique identifier for the verification token. Direct reference to
     * primary key in discussion_board_verification_tokens.
     */
    id: string & tags.Format<"uuid">;

    /** User ID (uuid) for whom the token was issued. */
    discussion_board_user_id: string & tags.Format<"uuid">;

    /**
     * Purpose of the token (e.g., 'email_verification', 'password_reset',
     * 'mfa').
     */
    purpose: string;

    /** Datetime when the token will expire. */
    expires_at: string & tags.Format<"date-time">;

    /** Datetime when token was used, or null if not used yet. */
    used_at?: (string & tags.Format<"date-time">) | null;

    /** Token creation timestamp. */
    created_at: string & tags.Format<"date-time">;
  };

  /**
   * Request body for updating a verification token's status or expiry.
   * Sensitive fields such as token string and user linkage are immutable.
   */
  export type IUpdate = {
    /** Update the expiry of the token to a new expiration ISO8601 datetime. */
    expires_at?: string & tags.Format<"date-time">;

    /** Set the token as used at this date/time (ISO8601 or null). */
    used_at?: (string & tags.Format<"date-time">) | null;
  };
}
