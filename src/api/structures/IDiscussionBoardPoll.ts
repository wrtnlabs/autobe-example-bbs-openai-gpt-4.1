import { tags } from "typia";

/**
 * A poll object as stored in the discussion_board_polls table. Represents
 * voting opportunities attached to posts. Tightly follows the schema fields for
 * poll lifecycle and eligibility. Contains full detail except for nested poll
 * options/votes, found in related endpoints/APIs.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussionBoardPoll = {
  /**
   * Unique identifier for this poll. See discussion_board_polls.id. Used as
   * primary key and in relationships.
   */
  id: string & tags.Format<"uuid">;

  /**
   * ID of the post this poll belongs to. Foreign key:
   * discussion_board_posts.id
   */
  discussion_board_post_id: string & tags.Format<"uuid">;

  /**
   * Poll question/title. Must be unique per discussion_board_post. Prisma:
   * discussion_board_polls.title
   */
  title: string;

  /**
   * Optional extra description or help text for the poll. User-facing
   * explanatory notes. Prisma: discussion_board_polls.description
   */
  description?: string | null;

  /**
   * Indicates if this is a multi-choice poll (true: user can vote for
   * multiple options; false: single choice only). Prisma:
   * discussion_board_polls.multi_choice
   */
  multi_choice: boolean;

  /**
   * Datetime when this poll opens for voting. ISO 8601 UTC. Prisma:
   * discussion_board_polls.opened_at
   */
  opened_at: string & tags.Format<"date-time">;

  /**
   * Datetime when the poll closes. Null if poll is always open. Prisma:
   * discussion_board_polls.closed_at
   */
  closed_at?: (string & tags.Format<"date-time">) | null;

  /** Creation timestamp. Prisma: discussion_board_polls.created_at */
  created_at: string & tags.Format<"date-time">;

  /**
   * Last modification timestamp for the poll. Prisma:
   * discussion_board_polls.updated_at
   */
  updated_at: string & tags.Format<"date-time">;

  /**
   * Soft deletion marker timestamp. Null if available. Prisma:
   * discussion_board_polls.deleted_at
   */
  deleted_at?: (string & tags.Format<"date-time">) | null;
};
export namespace IDiscussionBoardPoll {
  /**
   * Query object for filtering, searching, and paginating poll listings. Used
   * in PATCH operations for poll index views. Optional fields control search,
   * filter, and sort for efficient moderation and management.
   */
  export type IRequest = {
    /** Page number (pagination). Default: 1. */
    page?: number & tags.Type<"int32"> & tags.Minimum<1>;

    /** Page size (number of items per page). Default: 20. */
    limit?: number & tags.Type<"int32"> & tags.Minimum<1>;

    /**
     * Optional filter for poll title substring search. Matches any title
     * containing this string.
     */
    title?: string;

    /** Filter for whether the poll is multi-choice. */
    multi_choice?: boolean;

    /**
     * Set true to filter only currently open polls (opened_at <= now and
     * (closed_at is null or closed_at > now)).
     */
    open_only?: boolean;

    /** Set true to filter only closed polls (closed_at <= now). */
    closed_only?: boolean;

    /** Filter to polls created after this ISO 8601 date (inclusive). */
    created_from?: string & tags.Format<"date-time">;

    /** Filter to polls created before this ISO 8601 date (inclusive). */
    created_to?: string & tags.Format<"date-time">;

    /**
     * Restrict polls to those attached to a particular post. Prisma:
     * discussion_board_polls.discussion_board_post_id
     */
    post_id?: string & tags.Format<"uuid">;

    /**
     * Sort field for poll listing. One of created_at, opened_at, closed_at,
     * title.
     */
    sort_by?: "created_at" | "opened_at" | "closed_at" | "title";

    /** Order for sorting: ascending or descending. */
    sort_order?: "asc" | "desc";
  };

  /**
   * Request body for creating a new poll attached to a post. All required
   * schema fields must be supplied. Tightly aligned with the
   * discussion_board_polls creation logic and business validation rules.
   * Optional description and closed_at supported.
   */
  export type ICreate = {
    /**
     * ID of the post to link the new poll to. Required for creation.
     * Prisma: discussion_board_polls.discussion_board_post_id
     */
    discussion_board_post_id: string & tags.Format<"uuid">;

    /**
     * Title/question for the poll to be displayed to users. Required for
     * creation. Prisma: discussion_board_polls.title
     */
    title: string;

    /**
     * Optional extended description or instructions for the poll. Null if
     * not provided. Prisma: discussion_board_polls.description
     */
    description?: string;

    /**
     * Must specify if poll allows multiple selections (true = multi-choice,
     * false = single choice). Required. Prisma:
     * discussion_board_polls.multi_choice
     */
    multi_choice: boolean;

    /**
     * Datetime (ISO 8601) when the poll becomes active. Required. Prisma:
     * discussion_board_polls.opened_at
     */
    opened_at: string & tags.Format<"date-time">;

    /**
     * Datetime poll closes; null for indefinite polls. Optional. Prisma:
     * discussion_board_polls.closed_at
     */
    closed_at?: (string & tags.Format<"date-time">) | null;
  };

  /**
   * Request for editing/updating an existing poll. Only mutable fields may be
   * set; all others remain as stored in the poll. Used for PATCH/PUT
   * requests. See update business rules and compliance in the schema.
   */
  export type IUpdate = {
    /**
     * Optionally update the poll's title/question. Prisma:
     * discussion_board_polls.title
     */
    title?: string;

    /**
     * Optionally update the poll's description/explanation. Prisma:
     * discussion_board_polls.description
     */
    description?: string;

    /**
     * Optionally set multi_choice flag. Allows switching between
     * single/multi choice before poll opens. Prisma:
     * discussion_board_polls.multi_choice
     */
    multi_choice?: boolean;

    /**
     * Optionally update the datetime for poll opening. Prisma:
     * discussion_board_polls.opened_at
     */
    opened_at?: string & tags.Format<"date-time">;

    /**
     * Optionally update poll closing time. Null clears close timer. Prisma:
     * discussion_board_polls.closed_at
     */
    closed_at?: (string & tags.Format<"date-time">) | null;
  };
}
