import { tags } from "typia";

/**
 * Represents a single appeal entity as tracked in the discussion_board_appeals
 * table and exposed for audit, user, moderator, and admin review. Tracks
 * appeals against moderation actions and flag reports, user narratives, status,
 * resolution, and review context.
 *
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export type IDiscussionBoardAppeal = {
  /** System-assigned unique identifier for the appeal (primary key). */
  id: string & tags.Format<"uuid">;

  /** ID of the user submitting the appeal (from discussion_board_users.id). */
  appellant_id: string & tags.Format<"uuid">;

  /** Reference to the related moderation action, if applicable. */
  moderation_action_id?: (string & tags.Format<"uuid">) | null;

  /** Reference to the content flag report this appeal addresses (if relevant). */
  flag_report_id?: (string & tags.Format<"uuid">) | null;

  /** User-supplied narrative or reason for the appeal. */
  appeal_reason: string;

  /**
   * Lifecycle stage of the appeal (e.g., 'pending', 'reviewed', 'resolved',
   * 'denied','escalated').
   */
  status: string;

  /** Moderator/admin comment or resolution details as provided. */
  resolution_comment?: string | null;

  /** Timestamp when the appeal was finalized/resolved. Null if pending. */
  resolved_at?: (string & tags.Format<"date-time">) | null;

  /** Timestamp of appeal creation. */
  created_at: string & tags.Format<"date-time">;

  /**
   * Timestamp of most recent update (modification, response, or comment on
   * the appeal).
   */
  updated_at: string & tags.Format<"date-time">;

  /** Soft delete marker for retirement of appeals on audit/compliance review. */
  deleted_at?: (string & tags.Format<"date-time">) | null;
};
export namespace IDiscussionBoardAppeal {
  /**
   * Request/query type for searching/filtering a paginated list of appeal
   * records. Allows administrators, moderators, or users to filter by source,
   * status, timing, or context. Can be used on listing endpoints to enable
   * complex search, triage, and audit workflows.
   */
  export type IRequest = {
    /**
     * If provided, filters appeals to those created by this specific user.
     * Used in self-service lists or admin queries.
     */
    appellant_id?: string & tags.Format<"uuid">;

    /**
     * If provided, filters by referenced moderation action (appeals
     * challenging the given enforcement/event).
     */
    moderation_action_id?: string & tags.Format<"uuid">;

    /**
     * If provided, filters appeals linked to a specific content report/flag
     * event.
     */
    flag_report_id?: string & tags.Format<"uuid">;

    /**
     * Limits appeals by status (e.g.
     * 'pending','resolved','escalated','denied','reviewed'). Value must
     * match business logic for allowed statuses.
     */
    status?: string;

    /** If set, lower bound on appeal creation time for time-based search. */
    created_from?: string & tags.Format<"date-time">;

    /** If set, upper bound on appeal creation time. */
    created_to?: string & tags.Format<"date-time">;

    /**
     * Page number for paginated listing results (>=1). Usually defaults to
     * 1.
     */
    page?: number & tags.Type<"int32">;

    /**
     * Maximum number of appeals to return in a single page (standard
     * pagination).
     */
    limit?: number & tags.Type<"int32">;
  };

  /**
   * Request schema for creating a new appeal. Used by users to submit
   * narrative and references for an appeal; references moderation or flag
   * event; triggers compliance/audit workflows; omits system-generated or
   * downstream status fields.
   */
  export type ICreate = {
    /** User ID submitting the appeal (authenticated session value). */
    appellant_id: string & tags.Format<"uuid">;

    /** Related moderation action ID this appeal targets, if present. */
    moderation_action_id?: (string & tags.Format<"uuid">) | null;

    /** Related flag report ID this appeal addresses, if present. */
    flag_report_id?: (string & tags.Format<"uuid">) | null;

    /**
     * Narrative text from user explaining the grounds or context for the
     * appeal.
     */
    appeal_reason: string;
  };

  /**
   * Payload for updating an appeal (status, reason, resolution or linkage).
   * All fields are optional; supports partial updates.
   */
  export type IUpdate = {
    /**
     * The revised narrative or justification for the appeal. Optional for
     * edits; textual field describing new or corrected appeal reason.
     */
    appeal_reason?: string;

    /**
     * Status of the appeal after moderator/admin update (e.g.,
     * 'pending','reviewed','resolved','denied','escalated'). Optional.
     */
    status?: string;

    /**
     * Moderator/admin comment about the resolution or review (e.g.
     * rationale for approval/denial). Optional.
     */
    resolution_comment?: string;

    /**
     * Timestamp of resolution decision; nullable or omitted unless status
     * becomes resolved/denied.
     */
    resolved_at?: string & tags.Format<"date-time">;

    /**
     * Reference to a moderation action being appealed (if adjusting appeal
     * linkage).
     */
    moderation_action_id?: string & tags.Format<"uuid">;

    /**
     * Reference to a flag report being appealed (if adjusting appeal
     * linkage).
     */
    flag_report_id?: string & tags.Format<"uuid">;
  };
}
