import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussBoardPostTag } from "../../../../structures/IDiscussBoardPostTag";
import { IPageIDiscussBoardPostTag } from "../../../../structures/IPageIDiscussBoardPostTag";

/**
 * List tags assigned to a specific discussBoard post, with search and
 * pagination.
 *
 * This endpoint allows a client to search the tags attached to a single post,
 * enabling filtering by tag attributes (such as name, ID, date assigned) and
 * paginating through large sets of tags. Available to all users, including
 * guests, this operation provides search flexibility for presentation in post
 * detail or tag management screens.
 *
 * The operation is linked by the postId path parameter. Search, sort, and
 * filter options should be encapsulated in the request body, such as filtering
 * by tag name or assignment date. Business logic includes guest/member role
 * parity for viewing assigned tags but editing requires authentication.
 *
 * Pagination and result summary are included in the response body, encapsulated
 * in the DTO type for tag summaries.
 *
 * @param props.connection
 * @param props.postId The unique identifier of the post whose tags are being
 *   listed.
 * @param props.body Search/filter and pagination parameters for post's assigned
 *   tags.
 * @path /discussBoard/posts/:postId/tags
 * @accessor api.functional.discussBoard.posts.tags.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** The unique identifier of the post whose tags are being listed. */
    postId: string & tags.Format<"uuid">;

    /** Search/filter and pagination parameters for post's assigned tags. */
    body: IDiscussBoardPostTag.IRequest;
  };
  export type Body = IDiscussBoardPostTag.IRequest;
  export type Response = IPageIDiscussBoardPostTag.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/discussBoard/posts/:postId/tags",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussBoard/posts/${encodeURIComponent(props.postId ?? "null")}/tags`;
  export const random = (): IPageIDiscussBoardPostTag.ISummary =>
    typia.random<IPageIDiscussBoardPostTag.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get a specific tag assignment detail for a given discussBoard post.
 *
 * By specifying both the postId and tagId path parameters, this endpoint
 * returns the details of a single tag assignment for a post. This includes the
 * tag's unique identifier, the association (post-tag pair), assigned date, and
 * metadata. Guests can freely query tag details for public posts and tags,
 * while editing/removal requires proper authorization.
 *
 * Business logic ensures that if the tag is not actually associated with the
 * given post, a not-found/error response is returned. The operation ties
 * directly to the discuss_board_post_tags table, and only exposes non-sensitive
 * tag information to public queries.
 *
 * @param props.connection
 * @param props.postId The unique identifier of the post whose tag is being
 *   retrieved.
 * @param props.tagId The unique identifier of the tag on the given post.
 * @path /discussBoard/posts/:postId/tags/:tagId
 * @accessor api.functional.discussBoard.posts.tags.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** The unique identifier of the post whose tag is being retrieved. */
    postId: string & tags.Format<"uuid">;

    /** The unique identifier of the tag on the given post. */
    tagId: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussBoardPostTag;

  export const METADATA = {
    method: "GET",
    path: "/discussBoard/posts/:postId/tags/:tagId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussBoard/posts/${encodeURIComponent(props.postId ?? "null")}/tags/${encodeURIComponent(props.tagId ?? "null")}`;
  export const random = (): IDiscussBoardPostTag =>
    typia.random<IDiscussBoardPostTag>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.param("tagId")(() => typia.assert(props.tagId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
