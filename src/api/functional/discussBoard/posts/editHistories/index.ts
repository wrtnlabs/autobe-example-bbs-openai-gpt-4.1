import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussBoardPostEditHistory } from "../../../../structures/IDiscussBoardPostEditHistory";
import { IPageIDiscussBoardPostEditHistory } from "../../../../structures/IPageIDiscussBoardPostEditHistory";

/**
 * List edit history entries for a given discussBoard post (with
 * search/pagination).
 *
 * Clients can fetch the full audit trail of edits made to a post, including
 * previous versions of the title and body, edit timestamps, and optional edit
 * reasons. This is useful for transparency, UI display of edit logs, and
 * compliance.
 *
 * The query supports pagination, advanced filtering (e.g., by editor, edit
 * timestamp), and allows the frontend to present edit histories in a
 * user-friendly way. Business logic ensures no confidential data is exposed and
 * result format is suitable for both members and guests.
 *
 * @param props.connection
 * @param props.postId The unique identifier of the post for which edit
 *   histories are listed.
 * @param props.body Search, filtering, and pagination options for post edit
 *   history entries.
 * @path /discussBoard/posts/:postId/editHistories
 * @accessor api.functional.discussBoard.posts.editHistories.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * The unique identifier of the post for which edit histories are
     * listed.
     */
    postId: string & tags.Format<"uuid">;

    /**
     * Search, filtering, and pagination options for post edit history
     * entries.
     */
    body: IDiscussBoardPostEditHistory.IRequest;
  };
  export type Body = IDiscussBoardPostEditHistory.IRequest;
  export type Response = IPageIDiscussBoardPostEditHistory.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/discussBoard/posts/:postId/editHistories",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussBoard/posts/${encodeURIComponent(props.postId ?? "null")}/editHistories`;
  export const random = (): IPageIDiscussBoardPostEditHistory.ISummary =>
    typia.random<IPageIDiscussBoardPostEditHistory.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get details for a single edit history entry by postId and editHistoryId.
 *
 * This endpoint allows retrieval of a single edit history record for a post, as
 * identified by the postId and editHistoryId path parameters. The result
 * includes prior title/body, editor information, edit timestamp, and optional
 * edit reason/note. The edit history is critical for both user UI (change
 * diffing) and compliance.
 *
 * If the edit history entry is missing or not actually associated with the
 * given post, the operation returns an error/not found. Data returned is safe
 * for public viewingâ€”access to rollback or undo is not provided here.
 *
 * @param props.connection
 * @param props.postId The unique identifier of the post whose edit history is
 *   being queried.
 * @param props.editHistoryId The unique identifier of the edit history entry.
 * @path /discussBoard/posts/:postId/editHistories/:editHistoryId
 * @accessor api.functional.discussBoard.posts.editHistories.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /**
     * The unique identifier of the post whose edit history is being
     * queried.
     */
    postId: string & tags.Format<"uuid">;

    /** The unique identifier of the edit history entry. */
    editHistoryId: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussBoardPostEditHistory;

  export const METADATA = {
    method: "GET",
    path: "/discussBoard/posts/:postId/editHistories/:editHistoryId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussBoard/posts/${encodeURIComponent(props.postId ?? "null")}/editHistories/${encodeURIComponent(props.editHistoryId ?? "null")}`;
  export const random = (): IDiscussBoardPostEditHistory =>
    typia.random<IDiscussBoardPostEditHistory>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.param("editHistoryId")(() => typia.assert(props.editHistoryId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
