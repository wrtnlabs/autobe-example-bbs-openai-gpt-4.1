import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussBoardPost } from "../../../structures/IDiscussBoardPost";
import { IPageIDiscussBoardPost } from "../../../structures/IPageIDiscussBoardPost";
export * as tags from "./tags/index";
export * as editHistories from "./editHistories/index";
export * as comments from "./comments/index";

/**
 * Search, filter, and paginate discuss_board_posts for browsing and discovery.
 *
 * Any platform user or guest can use this endpoint to browse, filter, and
 * search for posts. The discuss_board_posts table stores all discussion board
 * topics, linking author, title, body, status, and full moderation workflow
 * fields.
 *
 * Supported filters include authorId, status (e.g., public, limited, locked),
 * tagId, keyword search in title and body, creation/update date ranges, and
 * sorting by recency or popularity. The operation returns a paginated result
 * set of post summaries for efficient navigation.
 *
 * Access control is open: all roles can browse public posts, while
 * limited/locked/private content appears only for users with sufficient
 * permissions (filtered by business logic). This endpoint supplies feed and
 * search UI, audit dashboards, and developer integrations with consistent
 * metadata.
 *
 * An expressive request body supports multi-filter queries, pagination
 * limits/page numbers, and sort order. Error responses are triggered for
 * illegal filter values, overly broad queries, or backend/database issues.
 * Other endpoints are available to retrieve single post details, create new
 * posts, or edit/delete existing posts.
 *
 * @param props.connection
 * @param props.body Search/filter, sort, and pagination parameters for posts
 *   feed.
 * @path /discussBoard/posts
 * @accessor api.functional.discussBoard.posts.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search/filter, sort, and pagination parameters for posts feed. */
    body: IDiscussBoardPost.IRequest;
  };
  export type Body = IDiscussBoardPost.IRequest;
  export type Response = IPageIDiscussBoardPost.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/discussBoard/posts",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussBoard/posts";
  export const random = (): IPageIDiscussBoardPost.ISummary =>
    typia.random<IPageIDiscussBoardPost.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a single discuss_board_posts entry by postId.
 *
 * All users can request a single post by its postId using this endpoint. The
 * discuss_board_posts table links each post to an author, contains title and
 * body, status for visibility, and supports full workflow/browsing logic.
 *
 * The endpoint validates the input postId, ensures the referenced post is not
 * soft-deleted unless caller privileges allow access, and returns the full
 * entity. Additional control logic ensures limited/private/locked posts are
 * only displayed as per business rules and user role permissions.
 *
 * On success, the full post record (detailed DTO) is returned with all
 * available metadata for display or additional queries (e.g., comments,
 * reactions). 404 errors are returned if postId is invalid or inaccessible
 * given user role.
 *
 * This endpoint is intended for primary UI content views, audit, and onboarding
 * flows.
 *
 * @param props.connection
 * @param props.postId Unique identifier for the desired post (UUID).
 * @path /discussBoard/posts/:postId
 * @accessor api.functional.discussBoard.posts.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier for the desired post (UUID). */
    postId: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussBoardPost;

  export const METADATA = {
    method: "GET",
    path: "/discussBoard/posts/:postId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussBoard/posts/${encodeURIComponent(props.postId ?? "null")}`;
  export const random = (): IDiscussBoardPost =>
    typia.random<IDiscussBoardPost>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
