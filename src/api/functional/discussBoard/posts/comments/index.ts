import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussBoardComment } from "../../../../structures/IDiscussBoardComment";
import { IPageIDiscussBoardComment } from "../../../../structures/IPageIDiscussBoardComment";

/**
 * Search and paginate comments for a given post (discuss_board_comments).
 *
 * This operation retrieves a filtered, paginated collection of comments for a
 * specific post identified by its UUID. It is built on the
 * discuss_board_comments schema, enabling comprehensive filtering by author,
 * content, creation date, depth, and comment status. The operation is optimized
 * for scenarios where posts have extensive comments and nested replies,
 * supporting deep-dive discussion threads typical of political or economic
 * debate platforms.
 *
 * The API respects soft-deleted comments, locking flags, and depth limits to
 * prevent over-nesting. Security checks ensure users can only view comments
 * visible according to their role and the business status of the associated
 * post and comment. Moderators and administrators may filter on additional
 * fields (e.g., including deleted, under_review) when performing audits or
 * content reviews. Pagination parameters and search filters are specified in
 * the request body object, with robust full-text and status-based search for
 * moderation and UI needs.
 *
 * Related endpoints include comment detail retrieval, comment creation, and
 * comment/thread moderation in ways that prioritize data integrity and
 * compliance with platform discussion policy.
 *
 * @param props.connection
 * @param props.postId Unique identifier for the post whose comments are being
 *   listed (UUID format).
 * @param props.body Filter/search parameters and pagination instructions for
 *   comment listing.
 * @path /discussBoard/posts/:postId/comments
 * @accessor api.functional.discussBoard.posts.comments.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Unique identifier for the post whose comments are being listed (UUID
     * format).
     */
    postId: string & tags.Format<"uuid">;

    /**
     * Filter/search parameters and pagination instructions for comment
     * listing.
     */
    body: IDiscussBoardComment.IRequest;
  };
  export type Body = IDiscussBoardComment.IRequest;
  export type Response = IPageIDiscussBoardComment;

  export const METADATA = {
    method: "PATCH",
    path: "/discussBoard/posts/:postId/comments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussBoard/posts/${encodeURIComponent(props.postId ?? "null")}/comments`;
  export const random = (): IPageIDiscussBoardComment =>
    typia.random<IPageIDiscussBoardComment>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information for a specific comment
 * (discuss_board_comments).
 *
 * This operation fetches the full details of a single comment under a specific
 * post. It leverages the discuss_board_comments Prisma DB schema to provide
 * content, author, business status, nesting depth, timestamps, and
 * lock/moderation status. Uses both postId and commentId (UUIDs) for precise
 * identification, matching only comments belonging to the specified post.
 *
 * Access is controlled based on comment status and user role. Soft-deleted,
 * locked, or under-review comments are handled per policy: guests may only see
 * public, active comments, while members, moderators, and administrators may
 * access additional statuses as their roles permit. The operation is critical
 * for displaying comment contents, contextual details in discussion threads, or
 * preparing UI for edit/delete requests.
 *
 * This endpoint is best used in conjunction with comment list, edit, delete, or
 * reply actions.
 *
 * @param props.connection
 * @param props.postId UUID of the post containing the comment.
 * @param props.commentId UUID of the comment to retrieve.
 * @path /discussBoard/posts/:postId/comments/:commentId
 * @accessor api.functional.discussBoard.posts.comments.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** UUID of the post containing the comment. */
    postId: string & tags.Format<"uuid">;

    /** UUID of the comment to retrieve. */
    commentId: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussBoardComment;

  export const METADATA = {
    method: "GET",
    path: "/discussBoard/posts/:postId/comments/:commentId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussBoard/posts/${encodeURIComponent(props.postId ?? "null")}/comments/${encodeURIComponent(props.commentId ?? "null")}`;
  export const random = (): IDiscussBoardComment =>
    typia.random<IDiscussBoardComment>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.param("commentId")(() => typia.assert(props.commentId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
