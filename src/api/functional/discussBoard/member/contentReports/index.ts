import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussBoardContentReport } from "../../../../structures/IDiscussBoardContentReport";

/**
 * Create a new content report (discuss_board_content_reports table) for a post
 * or comment.
 *
 * Creates a new content report targeting a post or comment. The
 * discuss_board_content_reports schema requires reporter identity, target
 * content identification, content type, and reason (from a pre-approved set or
 * custom text capped to 200 chars). Only authenticated members may file
 * reports. The operation validates policy (single report per member/content),
 * report frequency, and rate limits to prevent abuse. Duplicate and spam
 * reports trigger error responses and can affect reporting privileges.
 *
 * Reports are routed to moderation workflows for triage. Once created, a report
 * can be tracked by the member and acted upon by moderators or administrators.
 * All creation and business rule checks are audited for compliance. Members may
 * view their own reports, but only moderators/administrators may search or view
 * all reports.
 *
 * @param props.connection
 * @param props.body Content report details (target content, reporter member,
 *   type, and reason).
 * @path /discussBoard/member/contentReports
 * @accessor api.functional.discussBoard.member.contentReports.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Content report details (target content, reporter member, type, and
     * reason).
     */
    body: IDiscussBoardContentReport.ICreate;
  };
  export type Body = IDiscussBoardContentReport.ICreate;
  export type Response = IDiscussBoardContentReport;

  export const METADATA = {
    method: "POST",
    path: "/discussBoard/member/contentReports",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussBoard/member/contentReports";
  export const random = (): IDiscussBoardContentReport =>
    typia.random<IDiscussBoardContentReport>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft-delete a content report (discuss_board_content_reports table) by ID.
 *
 * Deletes (soft deletes) an existing content report by marking deleted_at in
 * the discuss_board_content_reports schema. Only the reporting member may
 * perform this action before moderation review begins, or
 * moderators/administrators may remove test, abuse, or obviously invalid
 * reports. The content report remains in the system for audit, workflow, and
 * regulatory compliance.
 *
 * Business rules strictly enforce who may delete a report and under what
 * circumstances. Once moderation review has begun or a moderation action is
 * attached, deletion by the reporting member is no longer allowed. All deletion
 * actions are logged for review by compliance or platform investigators.
 *
 * @param props.connection
 * @param props.contentReportId ID of the content report to delete.
 * @path /discussBoard/member/contentReports/:contentReportId
 * @accessor api.functional.discussBoard.member.contentReports.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** ID of the content report to delete. */
    contentReportId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/discussBoard/member/contentReports/:contentReportId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussBoard/member/contentReports/${encodeURIComponent(props.contentReportId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("contentReportId")(() =>
        typia.assert(props.contentReportId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
