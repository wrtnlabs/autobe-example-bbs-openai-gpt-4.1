import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussBoardComment } from "../../../../../structures/IDiscussBoardComment";
export * as editHistories from "./editHistories/index";
export * as deletionLogs from "./deletionLogs/index";

/**
 * Create a new comment under a given post (discuss_board_comments).
 *
 * This operation allows an authenticated member to create a new comment on a
 * designated post. It acts on the discuss_board_comments table, utilizing
 * business logic and validations specified in platform requirements:
 * minimum/max content length, forbidden word filtering, comment status
 * initialization, and maximum allowed nesting depth for replies. If parentId is
 * provided, verifies parent exists, is part of the same post, and does not
 * exceed the platform nesting limit.
 *
 * The comment's author is inferred from the JWT session or user context; no
 * direct author/member id inclusion in the client request. The resulting
 * comment includes all persisted data: content, author, status, creation
 * timestamps, and business rules for initial lock and edit state. Moderation
 * workflows may flag or delay display based on policy if thresholds (e.g.,
 * forbidden language) are hit.
 *
 * This endpoint is used by posting UIs, threaded comment components, and reply
 * flows enforcing deep-tree limitation and content moderation policies.
 *
 * @param props.connection
 * @param props.postId UUID of the post under which the comment is being
 *   created.
 * @param props.body Comment creation payload including content, (optional)
 *   parent ID, and business logic context, following creation rules.
 * @path /discussBoard/member/posts/:postId/comments
 * @accessor api.functional.discussBoard.member.posts.comments.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** UUID of the post under which the comment is being created. */
    postId: string & tags.Format<"uuid">;

    /**
     * Comment creation payload including content, (optional) parent ID, and
     * business logic context, following creation rules.
     */
    body: IDiscussBoardComment.ICreate;
  };
  export type Body = IDiscussBoardComment.ICreate;
  export type Response = IDiscussBoardComment;

  export const METADATA = {
    method: "POST",
    path: "/discussBoard/member/posts/:postId/comments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussBoard/member/posts/${encodeURIComponent(props.postId ?? "null")}/comments`;
  export const random = (): IDiscussBoardComment =>
    typia.random<IDiscussBoardComment>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update content of an existing comment (discuss_board_comments).
 *
 * This operation updates the specified comment's content under a given post, as
 * described in the discuss_board_comments table and related business rules.
 * Enforces that only the comment author may edit their own comment within the
 * platform-defined window (e.g., 15 minutes), and that editing is disallowed if
 * the is_locked flag is true, except for elevated roles (moderator/admin).
 * Edits are captured as snapshots in the comment edit history
 * (discuss_board_comment_edit_histories).
 *
 * Business logic ensures content is checked for forbidden language and meets
 * length requirements. Moderators and administrators may edit any comment
 * regardless of the window or lock, always with a valid business rationale. All
 * edits update the updated_at timestamp and maintain the audit/compliance chain
 * for review or rollback.
 *
 * UI workflows often call this API in edit or reply-with-edit contexts. The
 * response delivers the full updated comment for UI refresh and possible user
 * notification.
 *
 * @param props.connection
 * @param props.postId UUID of the post containing the comment to update.
 * @param props.commentId UUID of the comment to update.
 * @param props.body Update payload specifying new content and optional edit
 *   context/business rationale.
 * @path /discussBoard/member/posts/:postId/comments/:commentId
 * @accessor api.functional.discussBoard.member.posts.comments.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** UUID of the post containing the comment to update. */
    postId: string & tags.Format<"uuid">;

    /** UUID of the comment to update. */
    commentId: string & tags.Format<"uuid">;

    /**
     * Update payload specifying new content and optional edit
     * context/business rationale.
     */
    body: IDiscussBoardComment.IUpdate;
  };
  export type Body = IDiscussBoardComment.IUpdate;
  export type Response = IDiscussBoardComment;

  export const METADATA = {
    method: "PUT",
    path: "/discussBoard/member/posts/:postId/comments/:commentId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussBoard/member/posts/${encodeURIComponent(props.postId ?? "null")}/comments/${encodeURIComponent(props.commentId ?? "null")}`;
  export const random = (): IDiscussBoardComment =>
    typia.random<IDiscussBoardComment>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.param("commentId")(() => typia.assert(props.commentId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft-delete a comment (discuss_board_comments) with audit logging.
 *
 * This operation performs a soft-delete on the specific comment under a post,
 * updating the deleted_at field and changing the comment business status per
 * compliance and moderation rules. Uses both postId and commentId for precise
 * targeting. Only the original author can self-delete their comment, and only
 * within the system-defined window (e.g., 15 minutes). Moderators and
 * administrators may delete any comment outside the user window, with full
 * audit-trail capture.
 *
 * Deleting a comment updates the discuss_board_comment_deletion_logs record,
 * referencing the deleting actor's user account, reason, and timestamp for
 * audit and compliance reviews. A soft-deleted comment remains in the database
 * for moderator/admin review and for regulatory requirements, but is no longer
 * shown in standard user or guest queries. Associated replies may be
 * recursively soft-deleted as defined by cascade settings or business process.
 *
 * This endpoint is critical for enforcing application policy, regulatory
 * compliance, and transparent audit of deletion events. Error responses clarify
 * whether the process failed due to permissions, timing, or already deleted
 * state.
 *
 * @param props.connection
 * @param props.postId UUID of the post connected to the comment to delete.
 * @param props.commentId UUID of the comment to delete.
 * @path /discussBoard/member/posts/:postId/comments/:commentId
 * @accessor api.functional.discussBoard.member.posts.comments.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** UUID of the post connected to the comment to delete. */
    postId: string & tags.Format<"uuid">;

    /** UUID of the comment to delete. */
    commentId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/discussBoard/member/posts/:postId/comments/:commentId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussBoard/member/posts/${encodeURIComponent(props.postId ?? "null")}/comments/${encodeURIComponent(props.commentId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.param("commentId")(() => typia.assert(props.commentId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
