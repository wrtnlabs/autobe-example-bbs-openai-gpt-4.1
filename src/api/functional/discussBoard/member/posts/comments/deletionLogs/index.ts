import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussBoardCommentDeletionLog } from "../../../../../../structures/IDiscussBoardCommentDeletionLog";

/**
 * Get details of a specific comment deletion log
 * (discuss_board_comment_deletion_logs).
 *
 * Retrieve a specific deletion log entry for a comment in a post. This endpoint
 * allows authorized users to obtain details such as the actor's user account
 * who deleted the comment, the deletion reason, any actor note, and the
 * timestamp of deletion.
 *
 * The operation is tightly linked to regulatory and dispute resolution
 * requirements, enabling users, especially moderators and administrators, to
 * audit the history of comment moderation and removal events.
 *
 * Security enforcement ensures that only the owner of the comment, the
 * responsible staff, or users with appropriate privilege can access sensitive
 * deletion log information. Unauthorized access attempts are logged and denied
 * with informative errors.
 *
 * @param props.connection
 * @param props.postId UUID of the post containing the comment.
 * @param props.commentId UUID of the comment for which the deletion log is
 *   queried.
 * @param props.deletionLogId UUID of the specific deletion log record.
 * @path /discussBoard/member/posts/:postId/comments/:commentId/deletionLogs/:deletionLogId
 * @accessor api.functional.discussBoard.member.posts.comments.deletionLogs.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** UUID of the post containing the comment. */
    postId: string & tags.Format<"uuid">;

    /** UUID of the comment for which the deletion log is queried. */
    commentId: string & tags.Format<"uuid">;

    /** UUID of the specific deletion log record. */
    deletionLogId: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussBoardCommentDeletionLog;

  export const METADATA = {
    method: "GET",
    path: "/discussBoard/member/posts/:postId/comments/:commentId/deletionLogs/:deletionLogId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussBoard/member/posts/${encodeURIComponent(props.postId ?? "null")}/comments/${encodeURIComponent(props.commentId ?? "null")}/deletionLogs/${encodeURIComponent(props.deletionLogId ?? "null")}`;
  export const random = (): IDiscussBoardCommentDeletionLog =>
    typia.random<IDiscussBoardCommentDeletionLog>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.param("commentId")(() => typia.assert(props.commentId));
      assert.param("deletionLogId")(() => typia.assert(props.deletionLogId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
