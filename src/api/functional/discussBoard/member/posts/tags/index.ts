import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussBoardPostTag } from "../../../../../structures/IDiscussBoardPostTag";

/**
 * Add a new tag to a discussBoard post by postId and tagId.
 *
 * This endpoint enables authenticated users to assign an additional tag to a
 * post by providing the tag's unique identifier and, optionally, metadata about
 * the tag assignment. The postId path parameter specifies the post being
 * updated.
 *
 * Upon successful assignment, the tag is associated with the post in the
 * discuss_board_post_tags table, and the updated association is returned.
 * Business rules prevent exceeding the maximum allowable tags per post and
 * block duplicate assignments. Authorization checks ensure only the post owner,
 * moderators, or administrators can add tags.
 *
 * @param props.connection
 * @param props.postId The unique identifier of the post to assign a tag to.
 * @param props.body Payload containing the tagId to be assigned and any
 *   metadata.
 * @path /discussBoard/member/posts/:postId/tags
 * @accessor api.functional.discussBoard.member.posts.tags.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** The unique identifier of the post to assign a tag to. */
    postId: string & tags.Format<"uuid">;

    /** Payload containing the tagId to be assigned and any metadata. */
    body: IDiscussBoardPostTag.ICreate;
  };
  export type Body = IDiscussBoardPostTag.ICreate;
  export type Response = IDiscussBoardPostTag;

  export const METADATA = {
    method: "POST",
    path: "/discussBoard/member/posts/:postId/tags",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussBoard/member/posts/${encodeURIComponent(props.postId ?? "null")}/tags`;
  export const random = (): IDiscussBoardPostTag =>
    typia.random<IDiscussBoardPostTag>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Remove a tag association from a discussBoard post by postId and tagId.
 *
 * By specifying the postId and tagId path parameters, authenticated users can
 * dissociate a tag from a post. This operation performs a direct deletion of
 * the post-tag association, updating the post's visible tags and supporting
 * user-driven tag management. If the specified tag is not assigned to the post,
 * a proper not-found or error response is returned.
 *
 * Business logic restricts this action to those with editing rights for the
 * post: post owners (if within edit window), moderators, or administrators. The
 * operation does not affect the tag entity itself, only its association with
 * the given post.
 *
 * @param props.connection
 * @param props.postId The unique identifier of the post from which the tag will
 *   be removed.
 * @param props.tagId The unique identifier of the tag to dissociate from the
 *   post.
 * @path /discussBoard/member/posts/:postId/tags/:tagId
 * @accessor api.functional.discussBoard.member.posts.tags.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** The unique identifier of the post from which the tag will be removed. */
    postId: string & tags.Format<"uuid">;

    /** The unique identifier of the tag to dissociate from the post. */
    tagId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/discussBoard/member/posts/:postId/tags/:tagId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussBoard/member/posts/${encodeURIComponent(props.postId ?? "null")}/tags/${encodeURIComponent(props.tagId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.param("tagId")(() => typia.assert(props.tagId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
