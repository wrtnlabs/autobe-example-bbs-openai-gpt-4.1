import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussBoardNotification } from "../../../../structures/IDiscussBoardNotification";

/**
 * Retrieve a specific notification event (discuss_board_notifications) by ID.
 *
 * This operation retrieves the details of a notification event sent by the
 * discussBoard platform to a specific user. The operation provides full
 * metadata from the discuss_board_notifications Prisma table, including the
 * event type (such as reply, moderation, system alert), delivery channel
 * (email, sms, push, in_app), subject and body, status indicators (delivered,
 * pending, failed), and any external partner IDs.
 *
 * Only authenticated members, moderators, or administrators are permitted to
 * access their own notification records, while administrators may view all.
 * Security considerations include strict filtering to ensure users cannot
 * access each other's notification metadata.
 *
 * The operation supports troubleshooting by exposing relevant error details on
 * failed notifications, links notifications to triggering posts (if relevant),
 * and includes all required timestamps and channel-specific fields. Related
 * operations include listing notifications, searching by criteria, or updating
 * delivery preferences (not included in this call). Attempting to access a
 * nonexistent or unauthorized notification will provide clear error scenarios
 * for auditing and support.
 *
 * @param props.connection
 * @param props.notificationId Unique identifier for the notification event to
 *   retrieve.
 * @path /discussBoard/member/notifications/:notificationId
 * @accessor api.functional.discussBoard.member.notifications.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier for the notification event to retrieve. */
    notificationId: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussBoardNotification;

  export const METADATA = {
    method: "GET",
    path: "/discussBoard/member/notifications/:notificationId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussBoard/member/notifications/${encodeURIComponent(props.notificationId ?? "null")}`;
  export const random = (): IDiscussBoardNotification =>
    typia.random<IDiscussBoardNotification>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("notificationId")(() => typia.assert(props.notificationId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
