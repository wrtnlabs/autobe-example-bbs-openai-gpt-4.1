import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussBoardAppeal } from "../../../../structures/IDiscussBoardAppeal";
import { IDiscussBoardAppeals } from "../../../../structures/IDiscussBoardAppeals";

/**
 * Create a new appeal of a moderation action (authenticated member only) in
 * discuss_board_appeals.
 *
 * Submit a new appeal citing a specific moderation action ID and providing a
 * detailed rationale/argument. The operation verifies that the member is
 * eligible to appeal (e.g., has standing as the affected party), that the
 * moderation action exists, and the business workflow permits new appeals (not
 * already resolved or duplicated).
 *
 * Upon creation, status is 'pending', and the record is accessible for
 * subsequent moderator/admin review. Only authenticated members (not guests)
 * may submit appeals.
 *
 * Validation handles duplicate appeals, missing or invalid moderation action
 * IDs, and rationale content compliance. Errors include 403 for unauthorized
 * user or non-appealable target.
 *
 * @param props.connection
 * @param props.body Rationale and target moderation action for appeal
 *   submission.
 * @path /discussBoard/member/appeals
 * @accessor api.functional.discussBoard.member.appeals.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Rationale and target moderation action for appeal submission. */
    body: IDiscussBoardAppeal.ICreate;
  };
  export type Body = IDiscussBoardAppeal.ICreate;
  export type Response = IDiscussBoardAppeal;

  export const METADATA = {
    method: "POST",
    path: "/discussBoard/member/appeals",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussBoard/member/appeals";
  export const random = (): IDiscussBoardAppeal =>
    typia.random<IDiscussBoardAppeal>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing appeal for a moderation action in the
 * discuss_board_appeals table.
 *
 * Update an existing appeal for a moderation action by specifying the appeal's
 * unique identifier. This operation is designed for the appellant (the user
 * submitting the appeal) or administrators to present updated rationale, submit
 * additional evidence, or correct prior submissions. The system verifies that
 * only authorized users are permitted to update appeal records: namely, the
 * original appetant or a system administrator.
 *
 * Each update is recorded with a timestamp, and any changes are appended to the
 * appeal’s resolution notes section for full visibility. The appeal’s status
 * may advance through the workflow from pending, to in_review, to resolved or
 * escalated, with all transitions requiring business logic enforcement and
 * audit logging.
 *
 * This endpoint does not allow altering the linkage to the original moderation
 * action, nor does it support creating new appeals. For new appeals, use the
 * proper POST operation. Error handling includes rejecting unauthorized changes
 * and validating that updates comply with current workflow status (e.g.,
 * appeals that are closed cannot be edited).
 *
 * @param props.connection
 * @param props.appealId Unique identifier of the appeal record to update.
 * @param props.body Fields for updating an appeal, such as updated rationale or
 *   status.
 * @path /discussBoard/member/appeals/:appealId
 * @accessor api.functional.discussBoard.member.appeals.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the appeal record to update. */
    appealId: string & tags.Format<"uuid">;

    /** Fields for updating an appeal, such as updated rationale or status. */
    body: IDiscussBoardAppeals.IUpdate;
  };
  export type Body = IDiscussBoardAppeals.IUpdate;
  export type Response = IDiscussBoardAppeals;

  export const METADATA = {
    method: "PUT",
    path: "/discussBoard/member/appeals/:appealId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussBoard/member/appeals/${encodeURIComponent(props.appealId ?? "null")}`;
  export const random = (): IDiscussBoardAppeals =>
    typia.random<IDiscussBoardAppeals>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("appealId")(() => typia.assert(props.appealId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
