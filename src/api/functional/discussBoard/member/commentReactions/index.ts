import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussBoardCommentReaction } from "../../../../structures/IDiscussBoardCommentReaction";
import { IPageIDiscussBoardCommentReaction } from "../../../../structures/IPageIDiscussBoardCommentReaction";

/**
 * Create a new reaction (like/dislike) for a comment
 * (discuss_board_comment_reactions table).
 *
 * Creates a new reaction (like/dislike) by a member for a specified comment.
 * Only authenticated members can perform this action, and only if they have not
 * already reacted to the comment. If a previous reaction by the user exists and
 * was soft-deleted, business logic SHOULD un-delete and update the reaction
 * instead of creating a duplicate.
 *
 * Reactions are constrained in the discuss_board_comment_reactions schema to a
 * single reaction per member/comment pair. This maintains data integrity and
 * accurate like/dislike counts, ensuring users cannot spam reactions. If the
 * same member attempts to react to a comment more than once, the API returns an
 * error and does not create a new record.
 *
 * The API enforces business rules such as preventing a comment author from
 * reacting to their own comment, rejecting invalid reaction types, and checking
 * that the comment is not locked or deleted. Audit and moderation requirements
 * apply to all modifications to comment reactions for compliance tracking.
 *
 * Related endpoints for reaction update and deletion should be used for
 * subsequent changes to existing reactions. Errors and business rule
 * enforcement are reported with descriptive messages and clear HTTP status
 * codes.
 *
 * @param props.connection
 * @param props.body Comment reaction creation details (comment, member, and
 *   reaction type).
 * @path /discussBoard/member/commentReactions
 * @accessor api.functional.discussBoard.member.commentReactions.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Comment reaction creation details (comment, member, and reaction
     * type).
     */
    body: IDiscussBoardCommentReaction.ICreate;
  };
  export type Body = IDiscussBoardCommentReaction.ICreate;
  export type Response = IDiscussBoardCommentReaction;

  export const METADATA = {
    method: "POST",
    path: "/discussBoard/member/commentReactions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussBoard/member/commentReactions";
  export const random = (): IDiscussBoardCommentReaction =>
    typia.random<IDiscussBoardCommentReaction>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List/filter all comment reactions (discuss_board_comment_reactions) with
 * pagination.
 *
 * List and search all comment reactions (like/dislike), supporting advanced
 * filters for member ID, comment ID, reaction type (like/dislike), and date
 * ranges. The summary response supports efficient delivery of aggregate
 * feedback to users, and enables moderation/administrator audits for abuse or
 * spam.
 *
 * This endpoint fulfills both user and analytics needs; for privacy, detailed
 * data is limited to the reactor and authorized roles. Unauthorized access or
 * use for scraping purposes is logged and rate limited as per platform policy.
 *
 * @param props.connection
 * @param props.body Filter, search, and pagination options for comment
 *   reactions.
 * @path /discussBoard/member/commentReactions
 * @accessor api.functional.discussBoard.member.commentReactions.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Filter, search, and pagination options for comment reactions. */
    body: IDiscussBoardCommentReaction.IRequest;
  };
  export type Body = IDiscussBoardCommentReaction.IRequest;
  export type Response = IPageIDiscussBoardCommentReaction.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/discussBoard/member/commentReactions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussBoard/member/commentReactions";
  export const random = (): IPageIDiscussBoardCommentReaction.ISummary =>
    typia.random<IPageIDiscussBoardCommentReaction.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get a specific comment reaction record (discuss_board_comment_reactions) by
 * ID.
 *
 * Get a single comment reaction record by its unique ID. Returns data such as
 * member reactor, associated comment, reaction type ('like' or 'dislike'),
 * status, and timestamps (created_at, updated_at, deleted_at for
 * audit/soft-deletion).
 *
 * Access control restricts detailed information to the reactor, the relevant
 * comment owner, or authorized moderation staff; attempts to access another
 * member's reaction are denied unless properly privileged.
 *
 * Enables fine-grained audit, personalized displays, and moderation review for
 * comment reactions on the discussBoard platform.
 *
 * @param props.connection
 * @param props.commentReactionId UUID of the comment reaction record to
 *   retrieve.
 * @path /discussBoard/member/commentReactions/:commentReactionId
 * @accessor api.functional.discussBoard.member.commentReactions.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** UUID of the comment reaction record to retrieve. */
    commentReactionId: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussBoardCommentReaction;

  export const METADATA = {
    method: "GET",
    path: "/discussBoard/member/commentReactions/:commentReactionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussBoard/member/commentReactions/${encodeURIComponent(props.commentReactionId ?? "null")}`;
  export const random = (): IDiscussBoardCommentReaction =>
    typia.random<IDiscussBoardCommentReaction>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("commentReactionId")(() =>
        typia.assert(props.commentReactionId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update (toggle/switch) an existing comment reaction
 * (discuss_board_comment_reactions table).
 *
 * Updates an existing comment reaction, allowing the member to toggle the type
 * (like <> dislike) or restore a previously soft-deleted reaction. Only the
 * member who created the reaction may perform this operation. Business rules
 * enforced include validating the member's identity, ensuring the target
 * reaction exists and is not deleted, and restricting reaction type values to
 * 'like' or 'dislike'.
 *
 * The operation references the discuss_board_comment_reactions schema, which
 * links each reaction to member, comment, and type. The API includes validation
 * for concurrent changes and returns errors as appropriate. Changes are audited
 * for compliance and to protect against abuse or misuse of the reaction
 * feature.
 *
 * @param props.connection
 * @param props.commentReactionId Unique identifier of the comment reaction to
 *   update.
 * @param props.body Updated reaction details (must reference valid reaction
 *   type and member).
 * @path /discussBoard/member/commentReactions/:commentReactionId
 * @accessor api.functional.discussBoard.member.commentReactions.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the comment reaction to update. */
    commentReactionId: string & tags.Format<"uuid">;

    /**
     * Updated reaction details (must reference valid reaction type and
     * member).
     */
    body: IDiscussBoardCommentReaction.IUpdate;
  };
  export type Body = IDiscussBoardCommentReaction.IUpdate;
  export type Response = IDiscussBoardCommentReaction;

  export const METADATA = {
    method: "PUT",
    path: "/discussBoard/member/commentReactions/:commentReactionId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussBoard/member/commentReactions/${encodeURIComponent(props.commentReactionId ?? "null")}`;
  export const random = (): IDiscussBoardCommentReaction =>
    typia.random<IDiscussBoardCommentReaction>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("commentReactionId")(() =>
        typia.assert(props.commentReactionId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft-delete a comment reaction (discuss_board_comment_reactions table) by ID.
 *
 * Deletes (soft-deletes) a member's reaction to a comment. Only the member who
 * reacted, or a moderator/administrator with proper permissions, may invoke
 * this operation. The record is not hard-deleted but is marked as deleted via
 * the deleted_at timestamp as defined in the discuss_board_comment_reactions
 * schema. The reaction will no longer contribute to like/dislike counts or user
 * notifications but remains available for compliance and audit purposes.
 *
 * Business logic ensures the operation is allowed only if the reaction exists,
 * is not already deleted, and the user is permitted to perform the action.
 * Changes are logged for auditability and can only be reversed by
 * moderator/administrator intervention if justified. All deletion actions are
 * captured in moderation and audit logs.
 *
 * @param props.connection
 * @param props.commentReactionId ID of the comment reaction to delete.
 * @path /discussBoard/member/commentReactions/:commentReactionId
 * @accessor api.functional.discussBoard.member.commentReactions.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** ID of the comment reaction to delete. */
    commentReactionId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/discussBoard/member/commentReactions/:commentReactionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussBoard/member/commentReactions/${encodeURIComponent(props.commentReactionId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("commentReactionId")(() =>
        typia.assert(props.commentReactionId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
