import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussBoardUserProfile } from "../../../../../structures/IDiscussBoardUserProfile";

/**
 * Update a user's public profile with new metadata (discuss_board_user_profiles
 * table).
 *
 * Allows a member or administrator to update the profile metadata for a user
 * account. Using the supplied memberId and validated request body
 * (IDiscussBoardUserProfile.IUpdate), the operation modifies fields such as
 * displayName, bio, avatarUri, location, and website.
 *
 * Business logic enforces permission checks: the member can edit their own
 * profile, while administrators can modify any member's profile as necessary.
 * Each profile update triggers a change in both the updated_at field and
 * platform audit logs, enabling inspection and rollback if needed.
 *
 * Relates to profile retrieval (GET), member detail (account) APIs, and
 * notification systems if profile changes warrant alerting followers or system
 * monitors.
 *
 * @param props.connection
 * @param props.memberId Unique identifier of the member whose profile is being
 *   updated.
 * @param props.body Updated profile data for the target member.
 * @path /discussBoard/member/members/:memberId/profile
 * @accessor api.functional.discussBoard.member.members.profile.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the member whose profile is being updated. */
    memberId: string & tags.Format<"uuid">;

    /** Updated profile data for the target member. */
    body: IDiscussBoardUserProfile.IUpdate;
  };
  export type Body = IDiscussBoardUserProfile.IUpdate;
  export type Response = IDiscussBoardUserProfile;

  export const METADATA = {
    method: "PUT",
    path: "/discussBoard/member/members/:memberId/profile",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussBoard/member/members/${encodeURIComponent(props.memberId ?? "null")}/profile`;
  export const random = (): IDiscussBoardUserProfile =>
    typia.random<IDiscussBoardUserProfile>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("memberId")(() => typia.assert(props.memberId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
