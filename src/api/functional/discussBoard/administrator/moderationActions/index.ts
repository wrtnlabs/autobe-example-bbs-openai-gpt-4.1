import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussBoardModerationAction } from "../../../../structures/IDiscussBoardModerationAction";
import { IPageIDiscussBoardModerationAction } from "../../../../structures/IPageIDiscussBoardModerationAction";
export * as moderationLogs from "./moderationLogs/index";

/**
 * Create a new moderation action record in discuss_board_moderation_actions.
 * Moderator/admin only.
 *
 * Create a new moderation action record, specifying moderator identity, target
 * member (if applicable), affected post or comment, action_type, action_reason,
 * status, and optional decision narrative for audit and appeals.
 *
 * Business logic includes validating moderator/admin identities, checking
 * target content/user existence, and linking with the appropriate report.
 * Schema-level and business constraints ensure only permitted action types and
 * status values. The created record is audit-trail critical and foundational
 * for further appeals or business review.
 *
 * Error handling covers invalid action types, missing references, and
 * non-permitted access.
 *
 * @param props.connection
 * @param props.body Data required to create a moderation action (actor, target,
 *   action_type, etc.).
 * @path /discussBoard/administrator/moderationActions
 * @accessor api.functional.discussBoard.administrator.moderationActions.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Data required to create a moderation action (actor, target,
     * action_type, etc.).
     */
    body: IDiscussBoardModerationAction.ICreate;
  };
  export type Body = IDiscussBoardModerationAction.ICreate;
  export type Response = IDiscussBoardModerationAction;

  export const METADATA = {
    method: "POST",
    path: "/discussBoard/administrator/moderationActions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussBoard/administrator/moderationActions";
  export const random = (): IDiscussBoardModerationAction =>
    typia.random<IDiscussBoardModerationAction>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a paginated, filterable list of moderation actions (moderator/admin
 * only) from discuss_board_moderation_actions.
 *
 * Retrieve a filtered and paginated list of moderation actions taken across the
 * platform. This operation is intended for moderator and administrator
 * oversight, as business rules require all such actions to be reviewable for
 * audit and policy compliance.
 *
 * The operation uses the discuss_board_moderation_actions table from the Prisma
 * schema, enabling filtering on moderator identity, target user, associated
 * content, action type (e.g., remove_content, suspend_user, warn), action
 * status, and time window. Pagination and sorting are supported for efficient
 * operational use.
 *
 * Security is paramount: Only authenticated users with moderator or
 * administrator roles may access this endpoint. Audit trails and business
 * reporting are facilitated by this list, which may be cross-referenced with
 * appeals, reports, or user actions.
 *
 * This operation is related to /moderationActions/{moderationActionId} (detail
 * fetch), and write actions for moderation interventions. Error handling
 * includes appropriate messaging for unauthorized access or invalid filter
 * parameters.
 *
 * @param props.connection
 * @param props.body Filter, search, and pagination criteria for moderation
 *   action retrieval.
 * @path /discussBoard/administrator/moderationActions
 * @accessor api.functional.discussBoard.administrator.moderationActions.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Filter, search, and pagination criteria for moderation action
     * retrieval.
     */
    body: IDiscussBoardModerationAction.IRequest;
  };
  export type Body = IDiscussBoardModerationAction.IRequest;
  export type Response = IPageIDiscussBoardModerationAction.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/discussBoard/administrator/moderationActions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussBoard/administrator/moderationActions";
  export const random = (): IPageIDiscussBoardModerationAction.ISummary =>
    typia.random<IPageIDiscussBoardModerationAction.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve details for a specific moderation action from
 * discuss_board_moderation_actions by moderationActionId.
 *
 * Retrieve all details for a specific moderation action, including moderator
 * identity, target member, affected post or comment, action type and reason,
 * status, associated appeal link (if any), and decision narrative.
 *
 * This endpoint provides granular access for privileged users to all recorded
 * audit details and is critical for transparency, compliance, and escalation
 * processes. Only moderators and administrators may use this endpoint, with
 * system-enforced access checks.
 *
 * Links other moderation, reporting, and appeals records for holistic
 * moderation review. Error handling includes 404 for non-existent IDs, and 403
 * for insufficient permissions.
 *
 * @param props.connection
 * @param props.moderationActionId The unique identifier of the target
 *   moderation action.
 * @path /discussBoard/administrator/moderationActions/:moderationActionId
 * @accessor api.functional.discussBoard.administrator.moderationActions.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** The unique identifier of the target moderation action. */
    moderationActionId: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussBoardModerationAction;

  export const METADATA = {
    method: "GET",
    path: "/discussBoard/administrator/moderationActions/:moderationActionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussBoard/administrator/moderationActions/${encodeURIComponent(props.moderationActionId ?? "null")}`;
  export const random = (): IDiscussBoardModerationAction =>
    typia.random<IDiscussBoardModerationAction>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("moderationActionId")(() =>
        typia.assert(props.moderationActionId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing moderation action in discuss_board_moderation_actions.
 * Moderator/admin only.
 *
 * Update select fields on a given moderation action: decision_narrative,
 * status, action_reason, and possible appeal linkage. This is restricted to
 * authenticated moderators and administrators and may only be used when the
 * business workflow permits changes (for example, status transitions from
 * pending to completed, narrative clarifications, or appeal resolution
 * linkage).
 *
 * The operation will validate modification rights, audit all changes, and
 * preserve a record of updates for business review. Parent operations include
 * read and list endpoints. Errors include attempts to edit restricted fields or
 * insufficient permissions.
 *
 * @param props.connection
 * @param props.moderationActionId The unique identifier of the moderation
 *   action to update.
 * @param props.body Update information for the moderation action (status,
 *   narrative, appeal link, etc.).
 * @path /discussBoard/administrator/moderationActions/:moderationActionId
 * @accessor api.functional.discussBoard.administrator.moderationActions.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** The unique identifier of the moderation action to update. */
    moderationActionId: string & tags.Format<"uuid">;

    /**
     * Update information for the moderation action (status, narrative,
     * appeal link, etc.).
     */
    body: IDiscussBoardModerationAction.IUpdate;
  };
  export type Body = IDiscussBoardModerationAction.IUpdate;
  export type Response = IDiscussBoardModerationAction;

  export const METADATA = {
    method: "PUT",
    path: "/discussBoard/administrator/moderationActions/:moderationActionId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussBoard/administrator/moderationActions/${encodeURIComponent(props.moderationActionId ?? "null")}`;
  export const random = (): IDiscussBoardModerationAction =>
    typia.random<IDiscussBoardModerationAction>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("moderationActionId")(() =>
        typia.assert(props.moderationActionId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Permanently delete a moderation action record by ID from
 * discuss_board_moderation_actions. Admin only.
 *
 * Permanently remove a specific moderation action from the database. This
 * action cannot be undone and should only be used under explicit compliance
 * requirements or legal orders (e.g., GDPR right to erasure, audit retention
 * policies reached). No business-level soft delete field is defined for this
 * entity, so all associated references (audit logs, appeals, moderation logs,
 * etc.) must be handled appropriately. Use is strictly limited to administrator
 * role.
 *
 * Attempted use by moderators should result in a 403 error; non-existent IDs
 * return 404. Only administrators may perform this operation.
 *
 * @param props.connection
 * @param props.moderationActionId The unique identifier of the moderation
 *   action to delete.
 * @path /discussBoard/administrator/moderationActions/:moderationActionId
 * @accessor api.functional.discussBoard.administrator.moderationActions.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** The unique identifier of the moderation action to delete. */
    moderationActionId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/discussBoard/administrator/moderationActions/:moderationActionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussBoard/administrator/moderationActions/${encodeURIComponent(props.moderationActionId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("moderationActionId")(() =>
        typia.assert(props.moderationActionId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
