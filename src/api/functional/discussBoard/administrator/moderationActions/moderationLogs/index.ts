import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussBoardModerationLogs } from "../../../../../structures/IDiscussBoardModerationLogs";
import { IPageIDiscussBoardModerationLogs } from "../../../../../structures/IPageIDiscussBoardModerationLogs";

/**
 * Create a new log record in the moderation workflow for a given moderation
 * action.
 *
 * Append a new event log to the workflow of a specific moderation action by
 * submitting structured event information. Moderation logs are critical for
 * workflow and compliance: they capture each event, status transition,
 * escalation, or rationale made during review and enforcement.
 *
 * Parameters are validated against business rules, including role
 * authorization—only users with moderation permissions (moderators and
 * administrators) are allowed to create logs via this endpoint. Every addition
 * is timestamped and captures reference pointers for audit or downstream
 * analytic processes.
 *
 * The response returns the full, newly created log entry with all supplied and
 * system-generated fields. Log creation is subject to policy review; invalid
 * workflows, missing fields, or unauthorized users are denied access with
 * explicit error codes.
 *
 * @param props.connection
 * @param props.moderationActionId ID of the moderation action to which the new
 *   log will be attached.
 * @param props.body Required fields for new moderation log: event_type,
 *   event_details, actor reference, and optional escalation meta.
 * @path /discussBoard/administrator/moderationActions/:moderationActionId/moderationLogs
 * @accessor api.functional.discussBoard.administrator.moderationActions.moderationLogs.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** ID of the moderation action to which the new log will be attached. */
    moderationActionId: string & tags.Format<"uuid">;

    /**
     * Required fields for new moderation log: event_type, event_details,
     * actor reference, and optional escalation meta.
     */
    body: IDiscussBoardModerationLogs.ICreate;
  };
  export type Body = IDiscussBoardModerationLogs.ICreate;
  export type Response = IDiscussBoardModerationLogs;

  export const METADATA = {
    method: "POST",
    path: "/discussBoard/administrator/moderationActions/:moderationActionId/moderationLogs",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussBoard/administrator/moderationActions/${encodeURIComponent(props.moderationActionId ?? "null")}/moderationLogs`;
  export const random = (): IDiscussBoardModerationLogs =>
    typia.random<IDiscussBoardModerationLogs>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("moderationActionId")(() =>
        typia.assert(props.moderationActionId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a paginated, filterable list of moderation logs for a specific
 * moderation action.
 *
 * Given a moderation action identifier (moderationActionId), return a paginated
 * and filterable list of moderation logs associated with that action.
 * Moderation logs are append-only records documenting business events, status
 * changes, escalation steps, workflow transitions, or decision notes,
 * referencing both the actor and the related action.
 *
 * This operation is primarily for administrators, compliance auditors, and
 * senior moderators to review the complete workflow history surrounding a
 * particular moderation outcome. The request body allows for advanced
 * filtering—such as event_type, event_details full-text, or created_at time
 * windows—and supports customizable pagination settings. The response returns
 * moderation log summaries with all relevant metadata to inform investigations
 * or support appeals processes.
 *
 * Sensitive log details are returned based on the requesting user's role
 * privileges. Unauthorized users are denied access with appropriate errors.
 *
 * @param props.connection
 * @param props.moderationActionId The unique identifier of the moderation
 *   action being queried.
 * @param props.body Advanced filter, search, and pagination criteria for
 *   retrieving moderation logs attached to a moderation action.
 * @path /discussBoard/administrator/moderationActions/:moderationActionId/moderationLogs
 * @accessor api.functional.discussBoard.administrator.moderationActions.moderationLogs.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** The unique identifier of the moderation action being queried. */
    moderationActionId: string & tags.Format<"uuid">;

    /**
     * Advanced filter, search, and pagination criteria for retrieving
     * moderation logs attached to a moderation action.
     */
    body: IDiscussBoardModerationLogs.IRequest;
  };
  export type Body = IDiscussBoardModerationLogs.IRequest;
  export type Response = IPageIDiscussBoardModerationLogs.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/discussBoard/administrator/moderationActions/:moderationActionId/moderationLogs",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussBoard/administrator/moderationActions/${encodeURIComponent(props.moderationActionId ?? "null")}/moderationLogs`;
  export const random = (): IPageIDiscussBoardModerationLogs.ISummary =>
    typia.random<IPageIDiscussBoardModerationLogs.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("moderationActionId")(() =>
        typia.assert(props.moderationActionId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve the details of a specific moderation log entry for a moderation
 * action.
 *
 * Retrieve full detail of a single moderation log by specifying both the parent
 * moderation action (moderationActionId) and the target moderation log record
 * (moderationLogId). This record contains all essential information documenting
 * an audit event, escalation step, or decision change during moderation of
 * content or user accounts.
 *
 * Access is restricted to users with appropriate moderation privileges.
 * Returned fields include actors, event_type, event_details, and timestamps.
 * This operation is critical for reconstructing histories and investigating
 * workflow correctness in disciplinary reviews or user appeals.
 *
 * @param props.connection
 * @param props.moderationActionId ID of the moderation action to which the log
 *   is attached.
 * @param props.moderationLogId ID of the moderation log record to retrieve.
 * @path /discussBoard/administrator/moderationActions/:moderationActionId/moderationLogs/:moderationLogId
 * @accessor api.functional.discussBoard.administrator.moderationActions.moderationLogs.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** ID of the moderation action to which the log is attached. */
    moderationActionId: string & tags.Format<"uuid">;

    /** ID of the moderation log record to retrieve. */
    moderationLogId: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussBoardModerationLogs;

  export const METADATA = {
    method: "GET",
    path: "/discussBoard/administrator/moderationActions/:moderationActionId/moderationLogs/:moderationLogId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussBoard/administrator/moderationActions/${encodeURIComponent(props.moderationActionId ?? "null")}/moderationLogs/${encodeURIComponent(props.moderationLogId ?? "null")}`;
  export const random = (): IDiscussBoardModerationLogs =>
    typia.random<IDiscussBoardModerationLogs>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("moderationActionId")(() =>
        typia.assert(props.moderationActionId),
      );
      assert.param("moderationLogId")(() =>
        typia.assert(props.moderationLogId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing moderation log record in the moderation workflow for an
 * action.
 *
 * Modify a point-in-time moderation log event record by specifying both the
 * unique moderation action and the target moderation log. Fields updatable
 * include event_details, escalation information, or status narrative—core to
 * providing more comprehensive workflow visibility and correcting prior
 * entries.
 *
 * Each update triggers a version increment and audit event to ensure business
 * controls are enforced and reviewers can retrace decisionmaking. The operation
 * is limited to privileged moderators and administrators. Invalid update
 * attempts (e.g., by non-authorized users or edits to logs outside the workflow
 * update window) are denied with detailed errors.
 *
 * @param props.connection
 * @param props.moderationActionId ID of the moderation action related to this
 *   log record.
 * @param props.moderationLogId ID of the moderation log record to update.
 * @param props.body Mutable fields for an update to a moderation log, such as
 *   event_details or escalation info.
 * @path /discussBoard/administrator/moderationActions/:moderationActionId/moderationLogs/:moderationLogId
 * @accessor api.functional.discussBoard.administrator.moderationActions.moderationLogs.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** ID of the moderation action related to this log record. */
    moderationActionId: string & tags.Format<"uuid">;

    /** ID of the moderation log record to update. */
    moderationLogId: string & tags.Format<"uuid">;

    /**
     * Mutable fields for an update to a moderation log, such as
     * event_details or escalation info.
     */
    body: IDiscussBoardModerationLogs.IUpdate;
  };
  export type Body = IDiscussBoardModerationLogs.IUpdate;
  export type Response = IDiscussBoardModerationLogs;

  export const METADATA = {
    method: "PUT",
    path: "/discussBoard/administrator/moderationActions/:moderationActionId/moderationLogs/:moderationLogId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussBoard/administrator/moderationActions/${encodeURIComponent(props.moderationActionId ?? "null")}/moderationLogs/${encodeURIComponent(props.moderationLogId ?? "null")}`;
  export const random = (): IDiscussBoardModerationLogs =>
    typia.random<IDiscussBoardModerationLogs>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("moderationActionId")(() =>
        typia.assert(props.moderationActionId),
      );
      assert.param("moderationLogId")(() =>
        typia.assert(props.moderationLogId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Permanently remove a moderation log record from a moderation action's
 * workflow by ID.
 *
 * Erase (delete) a single moderation log record from a moderation workflow by
 * specifying both moderationActionId and moderationLogId. Erasure may only be
 * performed by an administrator, and the system checks whether the target log
 * is eligible for deletion (such as not being referenced by open appeals or
 * under legal hold).
 *
 * If the deletion is valid, it is recorded in the system audit trail, and the
 * underlying log record is removed from primary query scope. Attempted
 * deletions that fail validation produce appropriate error codes, and no
 * records are lost or altered unless business and compliance rules are
 * satisfied.
 *
 * @param props.connection
 * @param props.moderationActionId ID of the moderation action related to this
 *   log record.
 * @param props.moderationLogId ID of the moderation log record being erased.
 * @path /discussBoard/administrator/moderationActions/:moderationActionId/moderationLogs/:moderationLogId
 * @accessor api.functional.discussBoard.administrator.moderationActions.moderationLogs.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** ID of the moderation action related to this log record. */
    moderationActionId: string & tags.Format<"uuid">;

    /** ID of the moderation log record being erased. */
    moderationLogId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/discussBoard/administrator/moderationActions/:moderationActionId/moderationLogs/:moderationLogId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussBoard/administrator/moderationActions/${encodeURIComponent(props.moderationActionId ?? "null")}/moderationLogs/${encodeURIComponent(props.moderationLogId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("moderationActionId")(() =>
        typia.assert(props.moderationActionId),
      );
      assert.param("moderationLogId")(() =>
        typia.assert(props.moderationLogId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
