import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussBoardModerator } from "../../../../structures/IDiscussBoardModerator";
import { IPageIDiscussBoardModerator } from "../../../../structures/IPageIDiscussBoardModerator";

/**
 * Retrieve a filtered, paginated list of registered moderators
 * (discuss_board_moderators table).
 *
 * Provides an indexed, searchable view of all moderator role accounts on the
 * platform. Supports retrieval of records filtered by moderator status,
 * timeframes, or linked member nickname for administrative and compliance use
 * cases. Utilizes the discuss_board_moderators table, which links to member
 * records by member_id.
 *
 * Returned results are paginated and summarized, omitting full audit histories
 * but including primary identifiers, statuses, assignment info, and supporting
 * efficient review. Administrators are authorized for unrestricted access, and
 * other roles may require additional system logic for limited listing views.
 *
 * Complimentary endpoints include detailed moderator retrieval, status updates,
 * or role assignment endpoints.
 *
 * @param props.connection
 * @param props.body Search criteria, filter options, pagination for moderator
 *   listing.
 * @path /discussBoard/administrator/moderators
 * @accessor api.functional.discussBoard.administrator.moderators.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search criteria, filter options, pagination for moderator listing. */
    body: IDiscussBoardModerator.IRequest;
  };
  export type Body = IDiscussBoardModerator.IRequest;
  export type Response = IPageIDiscussBoardModerator.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/discussBoard/administrator/moderators",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussBoard/administrator/moderators";
  export const random = (): IPageIDiscussBoardModerator.ISummary =>
    typia.random<IPageIDiscussBoardModerator.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Fetch complete details for a single moderator account
 * (discuss_board_moderators table).
 *
 * Fetches and returns a single moderator account's complete record, by
 * referencing the provided moderatorId. Gathers data from the
 * discuss_board_moderators table, including member_id, assigned_at, revoked_at,
 * assignment status, the administrator who assigned role, and current status.
 * Used for audits, status updates, contextual management, or history review.
 *
 * Access to this endpoint is strictly limited to administrator users, as
 * moderator account details are sensitive. Related endpoints include moderator
 * update, assignment, or revocation actions. Results returned are suitable for
 * detailed inspection, not general listing.
 *
 * @param props.connection
 * @param props.moderatorId Unique identifier of the moderator to be retrieved.
 * @path /discussBoard/administrator/moderators/:moderatorId
 * @accessor api.functional.discussBoard.administrator.moderators.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the moderator to be retrieved. */
    moderatorId: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussBoardModerator;

  export const METADATA = {
    method: "GET",
    path: "/discussBoard/administrator/moderators/:moderatorId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussBoard/administrator/moderators/${encodeURIComponent(props.moderatorId ?? "null")}`;
  export const random = (): IDiscussBoardModerator =>
    typia.random<IDiscussBoardModerator>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("moderatorId")(() => typia.assert(props.moderatorId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update moderator account fields including status and revocation
 * (discuss_board_moderators table).
 *
 * Enables administrators to alter an existing moderator account by updating
 * core fields including status, revocation timestamp, or other relevant
 * moderator metadata. Operation validates all changes, enforcing field
 * constraints and checking business policy compliance on role changes (e.g.,
 * only administrators can revoke role).
 *
 * Direct edits to the discuss_board_moderators table are recorded in system
 * audit logs and compliance history, ensuring full traceability for all
 * modifications. Related endpoints include moderator detail (GET), listing
 * (PATCH), and role assignment APIs.
 *
 * @param props.connection
 * @param props.moderatorId Unique identifier of the moderator to be updated.
 * @param props.body Updated data/fields for the moderator account.
 * @path /discussBoard/administrator/moderators/:moderatorId
 * @accessor api.functional.discussBoard.administrator.moderators.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the moderator to be updated. */
    moderatorId: string & tags.Format<"uuid">;

    /** Updated data/fields for the moderator account. */
    body: IDiscussBoardModerator.IUpdate;
  };
  export type Body = IDiscussBoardModerator.IUpdate;
  export type Response = IDiscussBoardModerator;

  export const METADATA = {
    method: "PUT",
    path: "/discussBoard/administrator/moderators/:moderatorId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussBoard/administrator/moderators/${encodeURIComponent(props.moderatorId ?? "null")}`;
  export const random = (): IDiscussBoardModerator =>
    typia.random<IDiscussBoardModerator>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("moderatorId")(() => typia.assert(props.moderatorId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft-delete (revoke) a moderator role by moderatorId in
 * discuss_board_moderators.
 *
 * This operation is designed for administrator-level users to revoke moderator
 * privileges from a member. The discuss_board_moderators table in the Prisma
 * schema represents elevated user roles with special enforcement, review, and
 * moderation privileges.
 *
 * Revoking moderator status does not delete the user; it updates the deleted_at
 * field to indicate the user no longer holds moderator rights, retaining a full
 * audit trail for future compliance. Only administrators may access this
 * endpoint and initiate the removal process. Security checks in
 * controller/provider ensure that moderatorId is valid, belongs to an active
 * moderator, and that the request is performed within appropriate escalation
 * bounds.
 *
 * Associated audit and moderation logs linked to this moderator are preserved,
 * supporting review of all enforcement actions taken prior to revocation.
 * Should a moderator's privileges be removed in error, reinstatement would
 * require administrator re-assignment rather than restoration from deletion.
 *
 * Error handling covers invalid moderatorId, attempts to delete currently
 * active administrators, or system/database issues during the operation. Hard
 * deletion is never performed—record retention aligns with regulatory
 * requirements for moderator actions and workflow history.
 *
 * @param props.connection
 * @param props.moderatorId Unique identifier of the moderator to be deleted
 *   (UUID).
 * @path /discussBoard/administrator/moderators/:moderatorId
 * @accessor api.functional.discussBoard.administrator.moderators.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the moderator to be deleted (UUID). */
    moderatorId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/discussBoard/administrator/moderators/:moderatorId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussBoard/administrator/moderators/${encodeURIComponent(props.moderatorId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("moderatorId")(() => typia.assert(props.moderatorId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
