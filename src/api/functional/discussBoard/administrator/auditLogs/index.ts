import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussBoardGlobalAuditLog } from "../../../../structures/IDiscussBoardGlobalAuditLog";
import { IPageIDiscussBoardGlobalAuditLog } from "../../../../structures/IPageIDiscussBoardGlobalAuditLog";

/**
 * Search and paginate global audit logs (discuss_board_global_audit_logs).
 *
 * This operation enables administrators to query, search, and page through
 * audit trail entries from the discuss_board_global_audit_logs table. Supported
 * filters in the request body cover actor type (e.g., member, moderator,
 * admin), actor ID, action category (such as post_edit, user_login,
 * moderation_action), date intervals, target table/entity types, target IDs,
 * and free-text descriptions.
 *
 * Audit logs document major system and business events in detail, recording
 * actor, target, event category, custom event payloads (where available), and
 * brief descriptions. This endpoint is critical for regulatory compliance,
 * forensic investigations, review of high-impact changes, and ongoing system
 * integrity checks.
 *
 * Pagination, sorting, and complex search criteria are supported via the
 * request body. Due to the sensitive nature of actions recorded, only
 * administrators can execute this operation. Other endpoints provide detail
 * retrieval for a specific audit log entry.
 *
 * @param props.connection
 * @param props.body Search and filtering criteria for global audit logs,
 *   supporting pagination, range, and free-text filtering.
 * @path /discussBoard/administrator/auditLogs
 * @accessor api.functional.discussBoard.administrator.auditLogs.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search and filtering criteria for global audit logs, supporting
     * pagination, range, and free-text filtering.
     */
    body: IDiscussBoardGlobalAuditLog.IRequest;
  };
  export type Body = IDiscussBoardGlobalAuditLog.IRequest;
  export type Response = IPageIDiscussBoardGlobalAuditLog;

  export const METADATA = {
    method: "PATCH",
    path: "/discussBoard/administrator/auditLogs",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussBoard/administrator/auditLogs";
  export const random = (): IPageIDiscussBoardGlobalAuditLog =>
    typia.random<IPageIDiscussBoardGlobalAuditLog>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a specific global audit log (discuss_board_global_audit_logs) by ID.
 *
 * This operation fetches a single global audit log entry from the
 * discuss_board_global_audit_logs table, identified by its unique ID. Only
 * administrators have access rights, as audit logs can contain sensitive and
 * PII data about platform operations, user actions, moderation, and system
 * configuration.
 *
 * The full audit log includes actor information, action category, event
 * descriptions, target object references, and, where available, contextual
 * event payloads for in-depth review. This endpoint supports compliance,
 * forensic audit, and tracking of critical business rules or incident analysis,
 * in alignment with platform and external regulatory expectations.
 *
 * Related listing/search APIs enable large-scale investigation, while this
 * endpoint focuses on deep dive for individual audit log items.
 *
 * @param props.connection
 * @param props.auditLogId Unique identifier for the global audit log event to
 *   retrieve.
 * @path /discussBoard/administrator/auditLogs/:auditLogId
 * @accessor api.functional.discussBoard.administrator.auditLogs.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier for the global audit log event to retrieve. */
    auditLogId: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussBoardGlobalAuditLog;

  export const METADATA = {
    method: "GET",
    path: "/discussBoard/administrator/auditLogs/:auditLogId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussBoard/administrator/auditLogs/${encodeURIComponent(props.auditLogId ?? "null")}`;
  export const random = (): IDiscussBoardGlobalAuditLog =>
    typia.random<IDiscussBoardGlobalAuditLog>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("auditLogId")(() => typia.assert(props.auditLogId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
