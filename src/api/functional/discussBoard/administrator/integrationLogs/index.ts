import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussBoardIntegrationLog } from "../../../../structures/IDiscussBoardIntegrationLog";
import { IPageIDiscussBoardIntegrationLog } from "../../../../structures/IPageIDiscussBoardIntegrationLog";

/**
 * Search and page through external integration events
 * (discuss_board_integration_logs).
 *
 * This operation enables administrators to query integration logs from the
 * discuss_board_integration_logs table using a variety of filters, supporting
 * investigative, compliance, and maintenance scenarios. The search request body
 * allows filtering by integration_type (e.g., notification_delivery, analytics,
 * abuse_detection, partner_api), partner names, event type/trigger, integration
 * status, time ranges, and optional user account.
 *
 * Results are paginated and may be sorted by creation or update timestamps. The
 * response includes essential audit fields such as integration status, error
 * messages, external reference IDs, and links to original business events.
 *
 * Access to this operation is restricted to administrators due to the sensitive
 * nature of payloads and potential PII in logs. Attempting access without
 * sufficient permission is rejected with an explicit error. Other related
 * endpoints include retrieving a single integration log by ID.
 *
 * @param props.connection
 * @param props.body Search and filtering criteria for integration logs,
 *   supporting advanced pagination and filtering.
 * @path /discussBoard/administrator/integrationLogs
 * @accessor api.functional.discussBoard.administrator.integrationLogs.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search and filtering criteria for integration logs, supporting
     * advanced pagination and filtering.
     */
    body: IDiscussBoardIntegrationLog.IRequest;
  };
  export type Body = IDiscussBoardIntegrationLog.IRequest;
  export type Response = IPageIDiscussBoardIntegrationLog;

  export const METADATA = {
    method: "PATCH",
    path: "/discussBoard/administrator/integrationLogs",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussBoard/administrator/integrationLogs";
  export const random = (): IPageIDiscussBoardIntegrationLog =>
    typia.random<IPageIDiscussBoardIntegrationLog>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a specific integration log event (discuss_board_integration_logs) by
 * ID.
 *
 * This operation provides full access to a single integration log entry from
 * the discuss_board_integration_logs Prisma table. Administrators can use this
 * endpoint to verify the details of external API calls, notification
 * deliveries, analytics updates, or abuse detection events involving
 * third-party platforms.
 *
 * The response includes all columns from the integration log, including
 * integration_type, partner, statuses, payload (JSON), status/error info, user
 * reference (when available), external tracking IDs, and creation/update
 * timestamps. This API is essential for troubleshooting failed notifications,
 * auditing partner interactions, and ensuring SLAs are met for business
 * integrations.
 *
 * The operation is tightly access-controlledâ€”regular users and moderators
 * cannot access integration logs due to potential PII/PHI or confidential
 * partner data. Related operations include paginated log search or
 * event-specific filtering endpoints.
 *
 * @param props.connection
 * @param props.integrationLogId Unique identifier for the integration log event
 *   to retrieve.
 * @path /discussBoard/administrator/integrationLogs/:integrationLogId
 * @accessor api.functional.discussBoard.administrator.integrationLogs.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier for the integration log event to retrieve. */
    integrationLogId: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussBoardIntegrationLog;

  export const METADATA = {
    method: "GET",
    path: "/discussBoard/administrator/integrationLogs/:integrationLogId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussBoard/administrator/integrationLogs/${encodeURIComponent(props.integrationLogId ?? "null")}`;
  export const random = (): IDiscussBoardIntegrationLog =>
    typia.random<IDiscussBoardIntegrationLog>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("integrationLogId")(() =>
        typia.assert(props.integrationLogId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
