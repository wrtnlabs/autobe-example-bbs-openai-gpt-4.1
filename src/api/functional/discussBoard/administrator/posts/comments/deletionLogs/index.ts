import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussBoardCommentDeletionLog } from "../../../../../../structures/IDiscussBoardCommentDeletionLog";
import { IPageIDiscussBoardCommentDeletionLog } from "../../../../../../structures/IPageIDiscussBoardCommentDeletionLog";

/**
 * Search paginated audit deletion logs for a comment
 * (discuss_board_comment_deletion_logs).
 *
 * This endpoint retrieves the paginated, filterable audit deletion log history
 * for a specific comment. Leverages the discuss_board_comment_deletion_logs
 * schema and its relation to comments, user accounts, and delete events. Keyed
 * by both post and comment UUID for scoping; returns all deletion events,
 * including those due to self-deletion, moderator action, or administrative
 * enforcement.
 *
 * The query supports searching/filtering by actor, deletion reason, date, and
 * auditable user notes. Only accessible by moderators or administrators for
 * compliance and investigative purposes. Returned records document who deleted,
 * the business/rationale for deletion, and exact UTC timestamp, supporting
 * transparency, appeals, and systemic compliance oversight. Integrates with
 * comment and post audit chains for forensic and legal use cases.
 *
 * @param props.connection
 * @param props.postId UUID of the post containing the target comment for the
 *   log query.
 * @param props.commentId UUID of the target comment being queried for deletion
 *   log.
 * @param props.body Deletion log search and pagination parameters for audit
 *   retrieval.
 * @path /discussBoard/administrator/posts/:postId/comments/:commentId/deletionLogs
 * @accessor api.functional.discussBoard.administrator.posts.comments.deletionLogs.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** UUID of the post containing the target comment for the log query. */
    postId: string & tags.Format<"uuid">;

    /** UUID of the target comment being queried for deletion log. */
    commentId: string & tags.Format<"uuid">;

    /** Deletion log search and pagination parameters for audit retrieval. */
    body: IDiscussBoardCommentDeletionLog.IRequest;
  };
  export type Body = IDiscussBoardCommentDeletionLog.IRequest;
  export type Response = IPageIDiscussBoardCommentDeletionLog;

  export const METADATA = {
    method: "PATCH",
    path: "/discussBoard/administrator/posts/:postId/comments/:commentId/deletionLogs",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussBoard/administrator/posts/${encodeURIComponent(props.postId ?? "null")}/comments/${encodeURIComponent(props.commentId ?? "null")}/deletionLogs`;
  export const random = (): IPageIDiscussBoardCommentDeletionLog =>
    typia.random<IPageIDiscussBoardCommentDeletionLog>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.param("commentId")(() => typia.assert(props.commentId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
