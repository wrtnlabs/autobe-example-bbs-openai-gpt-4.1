import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussBoardConsentRecords } from "../../../../structures/IDiscussBoardConsentRecords";
import { IPageIDiscussBoardConsentRecords } from "../../../../structures/IPageIDiscussBoardConsentRecords";

/**
 * Retrieve a paginated and filterable list of user consent records.
 *
 * Retrieve a paginated and filterable list of user consent records from the
 * system. Each record in the discuss_board_consent_records table represents a
 * specific consent event for a user, such as granting, revoking, or updating
 * their agreement to a given policy (privacy policy, terms of service, or
 * marketing opt-in). Administrators may use this API for regulatory compliance,
 * audit requests, and ensuring users' data rights are respected.
 *
 * The operation provides filtering by user_account_id, policy_type,
 * consent_action, and date range, helping administrators locate specific
 * records efficiently. Pagination ensures performance and usability when
 * reviewing a large number of records. Access to this endpoint is restricted to
 * administrators due to the sensitivity of consent data.
 *
 * Related endpoints include detailed retrieval of a single consent record and
 * operations for handling privacy logs associated with data rights requests.
 * Errors may be returned if filtering criteria are invalid or requested records
 * do not exist.
 *
 * @param props.connection
 * @param props.body Filtering and pagination options for searching user consent
 *   records.
 * @path /discussBoard/administrator/consentRecords
 * @accessor api.functional.discussBoard.administrator.consentRecords.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Filtering and pagination options for searching user consent records. */
    body: IDiscussBoardConsentRecords.IRequest;
  };
  export type Body = IDiscussBoardConsentRecords.IRequest;
  export type Response = IPageIDiscussBoardConsentRecords;

  export const METADATA = {
    method: "PATCH",
    path: "/discussBoard/administrator/consentRecords",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussBoard/administrator/consentRecords";
  export const random = (): IPageIDiscussBoardConsentRecords =>
    typia.random<IPageIDiscussBoardConsentRecords>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Fetch details of a specific user consent record by ID.
 *
 * Retrieve detailed information about a single consent record stored in the
 * discuss_board_consent_records table. This includes which policy the consent
 * is for, the type of event (granted, revoked, updated), the timestamp, and any
 * optional business notes.
 *
 * Access to this operation is restricted to administrators to maintain legal
 * and regulatory privacy standards. The returned record may be used for
 * compliance audits or investigation of specific user requests. If the
 * specified consentRecordId does not exist, an appropriate error response will
 * be provided.
 *
 * This endpoint complements the bulk search operation for consent records and
 * is related to other privacy and compliance APIs.
 *
 * @param props.connection
 * @param props.consentRecordId Unique identifier of the consent record to
 *   retrieve.
 * @path /discussBoard/administrator/consentRecords/:consentRecordId
 * @accessor api.functional.discussBoard.administrator.consentRecords.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the consent record to retrieve. */
    consentRecordId: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussBoardConsentRecords;

  export const METADATA = {
    method: "GET",
    path: "/discussBoard/administrator/consentRecords/:consentRecordId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussBoard/administrator/consentRecords/${encodeURIComponent(props.consentRecordId ?? "null")}`;
  export const random = (): IDiscussBoardConsentRecords =>
    typia.random<IDiscussBoardConsentRecords>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("consentRecordId")(() =>
        typia.assert(props.consentRecordId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
