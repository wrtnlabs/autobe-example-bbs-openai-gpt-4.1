import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussBoardSettings } from "../../../../structures/IDiscussBoardSettings";
import { IPageIDiscussBoardSettings } from "../../../../structures/IPageIDiscussBoardSettings";

/**
 * Get detail of a discussBoard platform setting (discuss_board_settings table).
 *
 * Retrieves full details for a specific discussBoard global system
 * configuration, identified by its unique UUID as the primary key in the
 * discuss_board_settings table.
 *
 * Administrators may use this endpoint for audit, system diagnosis, or review
 * of changes to platform-wide settings. As system settings are sensitive, this
 * operation must enforce strict access controls and auditing.
 *
 * Error scenarios include not-found for invalid ID or permission denied for
 * insufficient privileges. This is closely related to configuration update
 * endpoints and typically used in platform management interfaces.
 *
 * @param props.connection
 * @param props.id UUID of the discussBoard settings record to retrieve
 * @path /discussBoard/administrator/settings/:id
 * @accessor api.functional.discussBoard.administrator.settings.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** UUID of the discussBoard settings record to retrieve */
    id: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussBoardSettings;

  export const METADATA = {
    method: "GET",
    path: "/discussBoard/administrator/settings/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussBoard/administrator/settings/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IDiscussBoardSettings =>
    typia.random<IDiscussBoardSettings>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing discussBoard system settings record
 * (discuss_board_settings table).
 *
 * Overwrites and updates a discussBoard platform system settings record.
 * Requires passing the full edit payload—typically configuration JSON and
 * updated timestamps—targeting the row identified by its UUID key. Only
 * administrators may perform this operation and all updates should trigger
 * audit logs for compliance.
 *
 * The operation will validate update payloads for required fields and
 * semantics. Rollback or archival of previous configuration is handled by
 * business logic outside this endpoint. Error responses include not-found,
 * invalid payload, or permission denied.
 *
 * @param props.connection
 * @param props.id UUID of the system configuration record to update
 * @param props.body Updated configuration object for the settings record
 * @path /discussBoard/administrator/settings/:id
 * @accessor api.functional.discussBoard.administrator.settings.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** UUID of the system configuration record to update */
    id: string & tags.Format<"uuid">;

    /** Updated configuration object for the settings record */
    body: IDiscussBoardSettings.IUpdate;
  };
  export type Body = IDiscussBoardSettings.IUpdate;
  export type Response = IDiscussBoardSettings;

  export const METADATA = {
    method: "PUT",
    path: "/discussBoard/administrator/settings/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussBoard/administrator/settings/${encodeURIComponent(props.id ?? "null")}`;
  export const random = (): IDiscussBoardSettings =>
    typia.random<IDiscussBoardSettings>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("id")(() => typia.assert(props.id));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and paginate discussBoard system settings (discuss_board_settings
 * table).
 *
 * Returns a paginated, filterable, and sortable collection of discussBoard
 * system-wide settings from the discuss_board_settings Prisma table.
 *
 * This endpoint enables privileged users (administrators) to search for and
 * view historical or current platform configuration records. A single instance
 * typically exists for global settings, but this endpoint allows for
 * operational flexibility and audit scenarios where multiple records,
 * rollbacks, or migrations may be tracked.
 *
 * Security-sensitive: Only administrators can access this information. Supports
 * standard pagination and filtering by created_at and other fields, returning
 * JSON blobs of configuration data used by the backend. This endpoint may be
 * used in conjunction with configuration update or detail-retrieval endpoints.
 *
 * @param props.connection
 * @param props.body Filtering, search, and pagination options for system
 *   configuration records
 * @path /discussBoard/administrator/settings
 * @accessor api.functional.discussBoard.administrator.settings.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Filtering, search, and pagination options for system configuration
     * records
     */
    body: IDiscussBoardSettings.IRequest;
  };
  export type Body = IDiscussBoardSettings.IRequest;
  export type Response = IPageIDiscussBoardSettings;

  export const METADATA = {
    method: "PATCH",
    path: "/discussBoard/administrator/settings",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussBoard/administrator/settings";
  export const random = (): IPageIDiscussBoardSettings =>
    typia.random<IPageIDiscussBoardSettings>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
