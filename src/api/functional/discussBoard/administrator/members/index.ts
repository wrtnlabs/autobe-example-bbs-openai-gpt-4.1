import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussBoardMembers } from "../../../../structures/IDiscussBoardMembers";
import { IPageIDiscussBoardMembers } from "../../../../structures/IPageIDiscussBoardMembers";
export * as profile from "./profile/index";
export * as notificationPreferences from "./notificationPreferences/index";

/**
 * Create a new member by administrator action.
 *
 * Create a new member record in the discuss_board_members table by providing
 * necessary account and membership data, including a unique user_account_id,
 * nickname, and initial status (such as 'active'). On successful creation, the
 * details of the created member are returned. This API is used by
 * administrators for onboarding, migration, or manual intervention.
 *
 * Strict validation is performed on uniqueness of nickname/user account
 * linkages and business status. Only administrators may access this endpoint,
 * reflecting its privileged nature. Related APIs support member listing, detail
 * view, and profile updates.
 *
 * @param props.connection
 * @param props.body Member creation data, including user account and initial
 *   status.
 * @path /discussBoard/administrator/members
 * @accessor api.functional.discussBoard.administrator.members.create
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Member creation data, including user account and initial status. */
    body: IDiscussBoardMembers.ICreate;
  };
  export type Body = IDiscussBoardMembers.ICreate;
  export type Response = IDiscussBoardMembers;

  export const METADATA = {
    method: "POST",
    path: "/discussBoard/administrator/members",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussBoard/administrator/members";
  export const random = (): IDiscussBoardMembers =>
    typia.random<IDiscussBoardMembers>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * List and search discussion board members with filtering and pagination.
 *
 * Fetch a paginated list of member accounts from the discuss_board_members
 * table, allowing advanced search and filtering options. Administrators may
 * filter by account status (active, suspended, banned, etc.), nickname, or date
 * range. Pagination makes the endpoint performant when reviewing large
 * membership bases.
 *
 * The endpoint is designed to make it easy for administrators to locate
 * specific users, audit system membership, or support moderation actions.
 * Related APIs include member detail retrieval, creation, and updates. Only
 * administrator users may access this data, in alignment with audit and privacy
 * requirements.
 *
 * @param props.connection
 * @param props.body Search and pagination criteria for filtering member
 *   accounts.
 * @path /discussBoard/administrator/members
 * @accessor api.functional.discussBoard.administrator.members.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search and pagination criteria for filtering member accounts. */
    body: IDiscussBoardMembers.IRequest;
  };
  export type Body = IDiscussBoardMembers.IRequest;
  export type Response = IPageIDiscussBoardMembers;

  export const METADATA = {
    method: "PATCH",
    path: "/discussBoard/administrator/members",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussBoard/administrator/members";
  export const random = (): IPageIDiscussBoardMembers =>
    typia.random<IPageIDiscussBoardMembers>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve full details of a specific member account by ID.
 *
 * Fetch the detailed profile and account status for a specific member using
 * their memberId. Information includes the member's public nickname, associated
 * user account, current status, creation/update dates, and possible links to
 * moderator or administrator roles.
 *
 * This endpoint aids administrators in managing accounts, viewing user history,
 * and evaluating members for escalation or moderation. If the specified member
 * does not exist, a clear error is returned. Related APIs include member
 * search/listing, creation, and update endpoints.
 *
 * Access is restricted to users with administrator privileges due to account
 * data sensitivity.
 *
 * @param props.connection
 * @param props.memberId Unique identifier of the member to retrieve.
 * @path /discussBoard/administrator/members/:memberId
 * @accessor api.functional.discussBoard.administrator.members.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the member to retrieve. */
    memberId: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussBoardMembers;

  export const METADATA = {
    method: "GET",
    path: "/discussBoard/administrator/members/:memberId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussBoard/administrator/members/${encodeURIComponent(props.memberId ?? "null")}`;
  export const random = (): IDiscussBoardMembers =>
    typia.random<IDiscussBoardMembers>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("memberId")(() => typia.assert(props.memberId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update details of an existing member by administrator action.
 *
 * Update the specified member's account attributes, such as status or nickname,
 * using their memberId as the target. This operation enforces all business
 * rules, including validation of new nicknames, status updates (active,
 * suspended, banned), and links to user accounts as appropriate. On completion,
 * the entire updated member record is returned for confirmation.
 *
 * Only administrators may execute this operation due to potential impact on
 * account and system integrity. Related endpoints include member creation,
 * retrieval, and search. Errors may occur if the update yields duplicates or
 * violates rules enforced in the schema or business logic.
 *
 * @param props.connection
 * @param props.memberId Unique identifier of the member to update.
 * @param props.body Updatable fields for the target member, such as status or
 *   nickname.
 * @path /discussBoard/administrator/members/:memberId
 * @accessor api.functional.discussBoard.administrator.members.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the member to update. */
    memberId: string & tags.Format<"uuid">;

    /** Updatable fields for the target member, such as status or nickname. */
    body: IDiscussBoardMembers.IUpdate;
  };
  export type Body = IDiscussBoardMembers.IUpdate;
  export type Response = IDiscussBoardMembers;

  export const METADATA = {
    method: "PUT",
    path: "/discussBoard/administrator/members/:memberId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussBoard/administrator/members/${encodeURIComponent(props.memberId ?? "null")}`;
  export const random = (): IDiscussBoardMembers =>
    typia.random<IDiscussBoardMembers>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("memberId")(() => typia.assert(props.memberId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Permanently removes (soft-deletes) a member account from the system
 * (discuss_board_members table).
 *
 * This endpoint enables administrators to erase a specific member account by
 * its unique member ID from the discuss_board_members table.
 *
 * The operation enforces strict access control, allowing only administrators to
 * perform member deletions, to prevent abuse or accidental account removals. It
 * integrates with audit and compliance requirements set by platform policies:
 * member removal triggers logs and may cascade to associated content for
 * further workflow processing, such as soft-deletion of posts/comments or
 * anonymization.
 *
 * When executed, the deleted_at field of the corresponding member row is set,
 * which signals a soft deletion for compliance and retention purposes. This
 * operation cannot be recovered except via special administrative tools.
 *
 * Related APIs include member detail retrieval, profile history, and
 * audit/history review, which may be useful for post-deletion inspection or
 * dispute resolution.
 *
 * @param props.connection
 * @param props.memberId Unique identifier of the member to be deleted.
 * @path /discussBoard/administrator/members/:memberId
 * @accessor api.functional.discussBoard.administrator.members.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the member to be deleted. */
    memberId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/discussBoard/administrator/members/:memberId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussBoard/administrator/members/${encodeURIComponent(props.memberId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("memberId")(() => typia.assert(props.memberId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
