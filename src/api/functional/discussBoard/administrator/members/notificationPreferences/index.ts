import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussBoardUserNotificationPreference } from "../../../../../structures/IDiscussBoardUserNotificationPreference";

/**
 * Retrieve notification channel settings for a given member
 * (discuss_board_user_notification_preferences table).
 *
 * Fetches and returns all current notification channel preferences for the
 * given member, including email, sms, push, and newsletter options. Uses the
 * discuss_board_user_notification_preferences table with filtering via memberId
 * path parameter.
 *
 * Enforces strict access: only the member (profile owner) or administrators may
 * view/set preferences, with application logic checking that the requesting
 * user matches or possesses administrator privileges. This data is
 * privacy-sensitive but not generally exposed publically; it primarily supports
 * user management and notification delivery workflows.
 *
 * Modifying these preferences is performed by a related PUT endpoint.
 * Preference settings affect all subsequent notification workflows across the
 * system, including mailing and messaging backend integrations.
 *
 * @param props.connection
 * @param props.memberId Unique identifier of the target member whose
 *   preferences are being retrieved.
 * @path /discussBoard/administrator/members/:memberId/notificationPreferences
 * @accessor api.functional.discussBoard.administrator.members.notificationPreferences.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /**
     * Unique identifier of the target member whose preferences are being
     * retrieved.
     */
    memberId: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussBoardUserNotificationPreference;

  export const METADATA = {
    method: "GET",
    path: "/discussBoard/administrator/members/:memberId/notificationPreferences",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussBoard/administrator/members/${encodeURIComponent(props.memberId ?? "null")}/notificationPreferences`;
  export const random = (): IDiscussBoardUserNotificationPreference =>
    typia.random<IDiscussBoardUserNotificationPreference>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("memberId")(() => typia.assert(props.memberId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update notification settings for a member account
 * (discuss_board_user_notification_preferences table).
 *
 * Applies changes to a member's notification delivery preferences, taking new
 * configuration from the request body and applying them to the specified member
 * by memberId. Only the member themself or administrators may alter these
 * settings, and all inputs are validated for proper boolean semantics.
 *
 * This operation updates the discuss_board_user_notification_preferences table
 * using validated payloads (IDiscussBoardUserNotificationPreference.IUpdate),
 * changing whether email, sms, push notifications or newsletters are enabled
 * for the user. The updated_at timestamp is refreshed, and an audit log is
 * created for record-keeping.
 *
 * Tied to notification workflow and system compliance; frequent adjunct to
 * self-service account configuration UI.
 *
 * @param props.connection
 * @param props.memberId Unique identifier of the member whose notification
 *   preferences are being updated.
 * @param props.body Updated notification settings for the target member.
 * @path /discussBoard/administrator/members/:memberId/notificationPreferences
 * @accessor api.functional.discussBoard.administrator.members.notificationPreferences.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /**
     * Unique identifier of the member whose notification preferences are
     * being updated.
     */
    memberId: string & tags.Format<"uuid">;

    /** Updated notification settings for the target member. */
    body: IDiscussBoardUserNotificationPreference.IUpdate;
  };
  export type Body = IDiscussBoardUserNotificationPreference.IUpdate;
  export type Response = IDiscussBoardUserNotificationPreference;

  export const METADATA = {
    method: "PUT",
    path: "/discussBoard/administrator/members/:memberId/notificationPreferences",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussBoard/administrator/members/${encodeURIComponent(props.memberId ?? "null")}/notificationPreferences`;
  export const random = (): IDiscussBoardUserNotificationPreference =>
    typia.random<IDiscussBoardUserNotificationPreference>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("memberId")(() => typia.assert(props.memberId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
