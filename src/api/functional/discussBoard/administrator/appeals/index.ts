import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussBoardAppeal } from "../../../../structures/IDiscussBoardAppeal";
import { IPageIDiscussBoardAppeal } from "../../../../structures/IPageIDiscussBoardAppeal";
import { IDiscussBoardAppeals } from "../../../../structures/IDiscussBoardAppeals";

/**
 * Retrieve paginated list of all appeals submitted against moderation actions
 * (moderator/admin only) from discuss_board_appeals.
 *
 * Allows privileged users to search, filter, and paginate through all appeals
 * submitted by members against moderation decisions. Supports filtering by
 * status, appellant, moderation action, creation date, and rationale keywords.
 *
 * Result set is summarized for operational review and workflow management. Only
 * accessible to moderators and administrators due to the sensitive nature of
 * appeal review. Business logic ensures members may only view their own appeals
 * through other endpoints, not the full list.
 *
 * Related endpoints include /appeals/{appealId} (detail fetch), and POST for
 * submitting new appeals. Unauthorized access results in clear error
 * messaging.
 *
 * @param props.connection
 * @param props.body Filtering, searching, and pagination criteria for appeals
 *   listing.
 * @path /discussBoard/administrator/appeals
 * @accessor api.functional.discussBoard.administrator.appeals.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Filtering, searching, and pagination criteria for appeals listing. */
    body: IDiscussBoardAppeal.IRequest;
  };
  export type Body = IDiscussBoardAppeal.IRequest;
  export type Response = IPageIDiscussBoardAppeal.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/discussBoard/administrator/appeals",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussBoard/administrator/appeals";
  export const random = (): IPageIDiscussBoardAppeal.ISummary =>
    typia.random<IPageIDiscussBoardAppeal.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get details of a single appeal for a moderation action (moderator/admin only)
 * from discuss_board_appeals.
 *
 * Fetch a complete record for a particular appeal, including appeal rationale,
 * status, outcome notes, workflow timestamps, and linked moderation action and
 * appellant member. The endpoint is required for moderation scenario reviews,
 * transparency, and audit requirements as part of fair appeals handling.
 *
 * Only moderators and administrators may use this endpoint; members may access
 * only their own appeals through distinct endpoints. Cross-references appeal
 * details with related moderation decisions and logs. Business logic enforces
 * strict role checks and notifies users when access is unauthorized or the
 * appeal does not exist.
 *
 * @param props.connection
 * @param props.appealId The unique identifier of the appeal to retrieve.
 * @path /discussBoard/administrator/appeals/:appealId
 * @accessor api.functional.discussBoard.administrator.appeals.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** The unique identifier of the appeal to retrieve. */
    appealId: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussBoardAppeal;

  export const METADATA = {
    method: "GET",
    path: "/discussBoard/administrator/appeals/:appealId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussBoard/administrator/appeals/${encodeURIComponent(props.appealId ?? "null")}`;
  export const random = (): IDiscussBoardAppeal =>
    typia.random<IDiscussBoardAppeal>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("appealId")(() => typia.assert(props.appealId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing appeal for a moderation action in the
 * discuss_board_appeals table.
 *
 * Update an existing appeal for a moderation action by specifying the appeal's
 * unique identifier. This operation is designed for the appellant (the user
 * submitting the appeal) or administrators to present updated rationale, submit
 * additional evidence, or correct prior submissions. The system verifies that
 * only authorized users are permitted to update appeal records: namely, the
 * original appetant or a system administrator.
 *
 * Each update is recorded with a timestamp, and any changes are appended to the
 * appeal’s resolution notes section for full visibility. The appeal’s status
 * may advance through the workflow from pending, to in_review, to resolved or
 * escalated, with all transitions requiring business logic enforcement and
 * audit logging.
 *
 * This endpoint does not allow altering the linkage to the original moderation
 * action, nor does it support creating new appeals. For new appeals, use the
 * proper POST operation. Error handling includes rejecting unauthorized changes
 * and validating that updates comply with current workflow status (e.g.,
 * appeals that are closed cannot be edited).
 *
 * @param props.connection
 * @param props.appealId Unique identifier of the appeal record to update.
 * @param props.body Fields for updating an appeal, such as updated rationale or
 *   status.
 * @path /discussBoard/administrator/appeals/:appealId
 * @accessor api.functional.discussBoard.administrator.appeals.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the appeal record to update. */
    appealId: string & tags.Format<"uuid">;

    /** Fields for updating an appeal, such as updated rationale or status. */
    body: IDiscussBoardAppeals.IUpdate;
  };
  export type Body = IDiscussBoardAppeals.IUpdate;
  export type Response = IDiscussBoardAppeals;

  export const METADATA = {
    method: "PUT",
    path: "/discussBoard/administrator/appeals/:appealId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussBoard/administrator/appeals/${encodeURIComponent(props.appealId ?? "null")}`;
  export const random = (): IDiscussBoardAppeals =>
    typia.random<IDiscussBoardAppeals>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("appealId")(() => typia.assert(props.appealId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Erase (permanently delete) an appeal record from the discuss_board_appeals
 * table by ID.
 *
 * Erase an appeal record from the system by providing the unique appealId.
 * Appeals can only be erased by users with administrative privilege or the
 * original appellant if the appeal is still pending and has not been acted on.
 * The system checks that the target appeal is not currently in an escalated or
 * in_review state, and that deleting the record does not affect ongoing
 * moderation or compliance processes.
 *
 * Upon successful removal, the operation triggers audit log creation
 * referencing the actor, target, and action. If the attempt violates workflow
 * or status rules (such as attempting to delete an active or escalated appeal),
 * the system returns an appropriate error response and preserves the record.
 * This is a hard delete operation unless an explicit soft-delete timestamp is
 * maintained per requirements.
 *
 * @param props.connection
 * @param props.appealId Unique identifier of the appeal record to erase.
 * @path /discussBoard/administrator/appeals/:appealId
 * @accessor api.functional.discussBoard.administrator.appeals.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the appeal record to erase. */
    appealId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/discussBoard/administrator/appeals/:appealId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussBoard/administrator/appeals/${encodeURIComponent(props.appealId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("appealId")(() => typia.assert(props.appealId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
