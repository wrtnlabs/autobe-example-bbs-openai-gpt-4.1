import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussBoardUserProfile } from "../../../../structures/IDiscussBoardUserProfile";

/**
 * Retrieve public user profile for a given member by memberId
 * (discuss_board_user_profiles table).
 *
 * Fetches and exposes the profile information for a member, drawing data from
 * the discuss_board_user_profiles table by referencing the supplied memberId.
 * Includes fields such as displayName, bio, avatarUri, location, and website,
 * as well as created_at and updated_at timestamps plus soft-deletion metadata.
 * Public visibility is enforced at application logic, while private profiles or
 * suspended/banned accounts are constrained by corresponding status or business
 * rules.
 *
 * This endpoint is accessible to all, including guests, for publicly available
 * profiles. Privacy controls for the member, such as profile visibility
 * preferences, are implemented via business logic. Related endpoints include
 * member public index listing and account detail retrieval.
 *
 * @param props.connection
 * @param props.memberId Unique identifier of the target member whose profile is
 *   being retrieved.
 * @path /discussBoard/members/:memberId/profile
 * @accessor api.functional.discussBoard.members.profile.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /**
     * Unique identifier of the target member whose profile is being
     * retrieved.
     */
    memberId: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussBoardUserProfile;

  export const METADATA = {
    method: "GET",
    path: "/discussBoard/members/:memberId/profile",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussBoard/members/${encodeURIComponent(props.memberId ?? "null")}/profile`;
  export const random = (): IDiscussBoardUserProfile =>
    typia.random<IDiscussBoardUserProfile>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("memberId")(() => typia.assert(props.memberId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
