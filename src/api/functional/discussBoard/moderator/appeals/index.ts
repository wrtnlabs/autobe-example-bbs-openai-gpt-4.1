import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussBoardAppeal } from "../../../../structures/IDiscussBoardAppeal";
import { IPageIDiscussBoardAppeal } from "../../../../structures/IPageIDiscussBoardAppeal";

/**
 * Retrieve paginated list of all appeals submitted against moderation actions
 * (moderator/admin only) from discuss_board_appeals.
 *
 * Allows privileged users to search, filter, and paginate through all appeals
 * submitted by members against moderation decisions. Supports filtering by
 * status, appellant, moderation action, creation date, and rationale keywords.
 *
 * Result set is summarized for operational review and workflow management. Only
 * accessible to moderators and administrators due to the sensitive nature of
 * appeal review. Business logic ensures members may only view their own appeals
 * through other endpoints, not the full list.
 *
 * Related endpoints include /appeals/{appealId} (detail fetch), and POST for
 * submitting new appeals. Unauthorized access results in clear error
 * messaging.
 *
 * @param props.connection
 * @param props.body Filtering, searching, and pagination criteria for appeals
 *   listing.
 * @path /discussBoard/moderator/appeals
 * @accessor api.functional.discussBoard.moderator.appeals.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Filtering, searching, and pagination criteria for appeals listing. */
    body: IDiscussBoardAppeal.IRequest;
  };
  export type Body = IDiscussBoardAppeal.IRequest;
  export type Response = IPageIDiscussBoardAppeal.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/discussBoard/moderator/appeals",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussBoard/moderator/appeals";
  export const random = (): IPageIDiscussBoardAppeal.ISummary =>
    typia.random<IPageIDiscussBoardAppeal.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get details of a single appeal for a moderation action (moderator/admin only)
 * from discuss_board_appeals.
 *
 * Fetch a complete record for a particular appeal, including appeal rationale,
 * status, outcome notes, workflow timestamps, and linked moderation action and
 * appellant member. The endpoint is required for moderation scenario reviews,
 * transparency, and audit requirements as part of fair appeals handling.
 *
 * Only moderators and administrators may use this endpoint; members may access
 * only their own appeals through distinct endpoints. Cross-references appeal
 * details with related moderation decisions and logs. Business logic enforces
 * strict role checks and notifies users when access is unauthorized or the
 * appeal does not exist.
 *
 * @param props.connection
 * @param props.appealId The unique identifier of the appeal to retrieve.
 * @path /discussBoard/moderator/appeals/:appealId
 * @accessor api.functional.discussBoard.moderator.appeals.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** The unique identifier of the appeal to retrieve. */
    appealId: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussBoardAppeal;

  export const METADATA = {
    method: "GET",
    path: "/discussBoard/moderator/appeals/:appealId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussBoard/moderator/appeals/${encodeURIComponent(props.appealId ?? "null")}`;
  export const random = (): IDiscussBoardAppeal =>
    typia.random<IDiscussBoardAppeal>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("appealId")(() => typia.assert(props.appealId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
