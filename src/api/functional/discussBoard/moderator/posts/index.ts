import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussBoardPost } from "../../../../structures/IDiscussBoardPost";
export * as tags from "./tags/index";
export * as comments from "./comments/index";

/**
 * Update an existing discussBoard post by ID.
 *
 * This endpoint enables a member to update their post by providing new values
 * for editable post fields such as title, body, and status. If the editing
 * window (30 minutes after creation) has expired, members are forbidden from
 * updating their own posts, while moderators or administrators retain full
 * update access at any time.
 *
 * Security enforcement restricts post modification to the author during the
 * allowed period, or to moderators/administrators after that window. The system
 * checks for forbidden words through policy-maintained expressions and applies
 * business validations on title/body length and duplicate detection.
 *
 * When successful, the operation returns the full updated post. Edit histories
 * should be appended in the discuss_board_post_edit_histories table but are not
 * managed directly by this endpoint. Error cases include expired edit window,
 * content/policy violations, and insufficient authorization.
 *
 * @param props.connection
 * @param props.postId The unique identifier of the post to update.
 * @param props.body Fields for updating the post (title, body, business status,
 *   etc).
 * @path /discussBoard/moderator/posts/:postId
 * @accessor api.functional.discussBoard.moderator.posts.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** The unique identifier of the post to update. */
    postId: string & tags.Format<"uuid">;

    /** Fields for updating the post (title, body, business status, etc). */
    body: IDiscussBoardPost.IUpdate;
  };
  export type Body = IDiscussBoardPost.IUpdate;
  export type Response = IDiscussBoardPost;

  export const METADATA = {
    method: "PUT",
    path: "/discussBoard/moderator/posts/:postId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussBoard/moderator/posts/${encodeURIComponent(props.postId ?? "null")}`;
  export const random = (): IDiscussBoardPost =>
    typia.random<IDiscussBoardPost>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete (soft-delete) a discussBoard post by ID.
 *
 * This endpoint allows a user to delete a post by specifying its unique ID. For
 * members, deletion is allowed only within 30 minutes of post creation; after
 * this window expires, only moderators or administrators may delete posts. The
 * deletion is a soft-delete: the post's deleted_at field is set to the current
 * timestamp, removing the post from normal queries but preserving data for
 * compliance.
 *
 * Related comments and reply threads associated with the post are also
 * soft-deleted as required by regulatory business logic. Each delete action is
 * recorded in the discuss_board_post_deletion_logs table for auditability.
 * Abuse, policy violations, or expired delete windows will result in proper
 * error responses.
 *
 * Authorization checks ensure users cannot delete content they do not own
 * unless they have moderator or administrator privileges.
 *
 * @param props.connection
 * @param props.postId The unique identifier of the post to soft-delete.
 * @path /discussBoard/moderator/posts/:postId
 * @accessor api.functional.discussBoard.moderator.posts.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** The unique identifier of the post to soft-delete. */
    postId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/discussBoard/moderator/posts/:postId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussBoard/moderator/posts/${encodeURIComponent(props.postId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
