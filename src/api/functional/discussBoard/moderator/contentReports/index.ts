import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussBoardContentReport } from "../../../../structures/IDiscussBoardContentReport";
import { IPageIDiscussBoardContentReport } from "../../../../structures/IPageIDiscussBoardContentReport";

/**
 * Search and retrieve a list of content reports (discuss_board_content_reports
 * table).
 *
 * Retrieves a paginated collection of content reports submitted by members for
 * moderation purposes. The discuss_board_content_reports table captures each
 * report's details including reporter, target post or comment, type, reason,
 * current status, and timestamps. Moderators and administrators use this
 * endpoint to triage reports, view trends, and manage outstanding moderation
 * actions.
 *
 * The request body supports search filters such as content_type (post/comment),
 * reporter_member_id, moderation status, time window, and full-text reason
 * search. Sorting may be performed by status, creation/update time, or reason
 * relevance.
 *
 * Security is enforced to allow only moderators and administrators to access
 * all reports. Members may only query their own submitted reports for
 * transparency. Data returned are summaries suitable for moderation dashboard
 * display. Errors and constraints are clearly described, and the operation is
 * logged for compliance.
 *
 * @param props.connection
 * @param props.body Search and filter parameters for content report listing
 *   (pagination and search).
 * @path /discussBoard/moderator/contentReports
 * @accessor api.functional.discussBoard.moderator.contentReports.index
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search and filter parameters for content report listing (pagination
     * and search).
     */
    body: IDiscussBoardContentReport.IRequest;
  };
  export type Body = IDiscussBoardContentReport.IRequest;
  export type Response = IPageIDiscussBoardContentReport.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/discussBoard/moderator/contentReports",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussBoard/moderator/contentReports";
  export const random = (): IPageIDiscussBoardContentReport.ISummary =>
    typia.random<IPageIDiscussBoardContentReport.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a specific content report by ID (discuss_board_content_reports
 * table).
 *
 * Fetches full content report details, including reporter, reported content
 * (post or comment), reason, workflow status, and any moderation/appeal
 * linkage. The discuss_board_content_reports schema ensures each report
 * references exactly one post or comment, and tracks resolution status.
 *
 * Authorization restricts access to the reporting member, moderators, or
 * administrators, ensuring privacy and integrity of moderation investigations.
 * This endpoint is used to support review, audit, and decision-making for each
 * report through moderation workflows. All access is logged for transparency
 * and regulatory purposes.
 *
 * Relates to report listing and moderation decision/action endpoints for full
 * workflow coverage.
 *
 * @param props.connection
 * @param props.contentReportId Unique identifier for the content report to
 *   retrieve.
 * @path /discussBoard/moderator/contentReports/:contentReportId
 * @accessor api.functional.discussBoard.moderator.contentReports.at
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier for the content report to retrieve. */
    contentReportId: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussBoardContentReport;

  export const METADATA = {
    method: "GET",
    path: "/discussBoard/moderator/contentReports/:contentReportId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussBoard/moderator/contentReports/${encodeURIComponent(props.contentReportId ?? "null")}`;
  export const random = (): IDiscussBoardContentReport =>
    typia.random<IDiscussBoardContentReport>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("contentReportId")(() =>
        typia.assert(props.contentReportId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a content report (discuss_board_content_reports table) by ID.
 *
 * Updates a content report record, typically during the moderation workflow.
 * Moderators or administrators may set status (under_review, resolved,
 * escalated, dismissed), attach moderation action ID, or add resolution notes
 * per business logic. Members who submitted the report may withdraw or annotate
 * their pending (untriaged) reports only if review has not started.
 *
 * Data changes are validated for business workflow (e.g., only one status
 * update per step, appropriate progression of states). The update is audited in
 * detail and triggers notification or workflow handoff as described in
 * moderation policy. Invalid state transitions or unauthorized changes are
 * rejected with clear errors. Changes are designed for full traceability in
 * audit and compliance scenarios.
 *
 * @param props.connection
 * @param props.contentReportId ID of the content report to update.
 * @param props.body Changes to report status, moderator linkage, or resolution
 *   note. Revisit schema for allowed fields.
 * @path /discussBoard/moderator/contentReports/:contentReportId
 * @accessor api.functional.discussBoard.moderator.contentReports.update
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** ID of the content report to update. */
    contentReportId: string & tags.Format<"uuid">;

    /**
     * Changes to report status, moderator linkage, or resolution note.
     * Revisit schema for allowed fields.
     */
    body: IDiscussBoardContentReport.IUpdate;
  };
  export type Body = IDiscussBoardContentReport.IUpdate;
  export type Response = IDiscussBoardContentReport;

  export const METADATA = {
    method: "PUT",
    path: "/discussBoard/moderator/contentReports/:contentReportId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussBoard/moderator/contentReports/${encodeURIComponent(props.contentReportId ?? "null")}`;
  export const random = (): IDiscussBoardContentReport =>
    typia.random<IDiscussBoardContentReport>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("contentReportId")(() =>
        typia.assert(props.contentReportId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft-delete a content report (discuss_board_content_reports table) by ID.
 *
 * Deletes (soft deletes) an existing content report by marking deleted_at in
 * the discuss_board_content_reports schema. Only the reporting member may
 * perform this action before moderation review begins, or
 * moderators/administrators may remove test, abuse, or obviously invalid
 * reports. The content report remains in the system for audit, workflow, and
 * regulatory compliance.
 *
 * Business rules strictly enforce who may delete a report and under what
 * circumstances. Once moderation review has begun or a moderation action is
 * attached, deletion by the reporting member is no longer allowed. All deletion
 * actions are logged for review by compliance or platform investigators.
 *
 * @param props.connection
 * @param props.contentReportId ID of the content report to delete.
 * @path /discussBoard/moderator/contentReports/:contentReportId
 * @accessor api.functional.discussBoard.moderator.contentReports.erase
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** ID of the content report to delete. */
    contentReportId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/discussBoard/moderator/contentReports/:contentReportId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussBoard/moderator/contentReports/${encodeURIComponent(props.contentReportId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("contentReportId")(() =>
        typia.assert(props.contentReportId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
