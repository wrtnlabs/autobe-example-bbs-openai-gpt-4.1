import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussionBoardUser } from "../../../../structures/IDiscussionBoardUser";
import { IPageIDiscussionBoardUser } from "../../../../structures/IPageIDiscussionBoardUser";
export * as moderator from "./moderator";
export * as admin from "./admin";

/**
 * Paginated, advanced search of users (moderator/admin access).
 *
 * Search and list registered users of the discussion board with advanced
 * filtering by role-based access, sorting by registration, last login, and
 * other profile attributes. The operation supports pagination for large user
 * sets, and optionally restricts results to the caller's visibility according
 * to their role (admin can view all, moderators can view most, standard users
 * cannot access this endpoint).
 *
 * User details may include email, username, account status
 * (verified/suspended), and important timestamps. Sensitive data (like password
 * hashes) is never exposed in responses. This endpoint helps moderators and
 * admins enforce compliance, monitor growth, or intervene during incidents.
 *
 * Refer to the discussion_board_users Prisma schema for the full set of
 * accessible/returnable fields and use appropriate request and response types
 * to support scalable management workflows.
 *
 * @param props.connection
 * @param props.body User search criteria, including pagination and filters
 * @path /discussionBoard/admin/users
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** User search criteria, including pagination and filters */
    body: IDiscussionBoardUser.IRequest;
  };
  export type Body = IDiscussionBoardUser.IRequest;
  export type Response = IPageIDiscussionBoardUser;

  export const METADATA = {
    method: "PATCH",
    path: "/discussionBoard/admin/users",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/admin/users";
  export const random = (): IPageIDiscussionBoardUser =>
    typia.random<IPageIDiscussionBoardUser>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get a user's detailed profile/info by userId.
 *
 * Get detailed, role-appropriate information about a specific user by their
 * unique ID. Typically used by moderators and admins to review a user's account
 * health, status, last login, verification, and profile information.
 *
 * Standard users may not access this endpoint for others. Only authorized roles
 * see sensitive administrative information (such as suspension, status, or
 * timestamps), but password hashes and any confidential fields are never
 * returned.
 *
 * Response structure strictly reflects the schema for discussion_board_users
 * and includes all compliance-required metadata for auditing purposes.
 *
 * @param props.connection
 * @param props.userId Unique identifier of the user to retrieve
 * @path /discussionBoard/admin/users/:userId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the user to retrieve */
    userId: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussionBoardUser;

  export const METADATA = {
    method: "GET",
    path: "/discussionBoard/admin/users/:userId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/admin/users/${encodeURIComponent(props.userId ?? "null")}`;
  export const random = (): IDiscussionBoardUser =>
    typia.random<IDiscussionBoardUser>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userId")(() => typia.assert(props.userId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Admin/moderator update to user account by userId.
 *
 * Update the profile and status of a user by userId. Allowed fields are set by
 * business rules mapped closely to the discussion_board_users schema, such as
 * display name, verification, suspension, and admin-controlled attributes.
 * Password resets and other security updates must be performed using dedicated
 * endpoints for audit and compliance.
 *
 * Authorization is limited to moderator or admin roles. The update operation
 * enforces all required validation and auditing, appending to the compliance
 * log as needed.
 *
 * @param props.connection
 * @param props.userId Unique identifier for the user being edited
 * @param props.body Attributes to update in the user account
 * @path /discussionBoard/admin/users/:userId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier for the user being edited */
    userId: string & tags.Format<"uuid">;

    /** Attributes to update in the user account */
    body: IDiscussionBoardUser.IUpdate;
  };
  export type Body = IDiscussionBoardUser.IUpdate;
  export type Response = IDiscussionBoardUser;

  export const METADATA = {
    method: "PUT",
    path: "/discussionBoard/admin/users/:userId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussionBoard/admin/users/${encodeURIComponent(props.userId ?? "null")}`;
  export const random = (): IDiscussionBoardUser =>
    typia.random<IDiscussionBoardUser>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userId")(() => typia.assert(props.userId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft-delete (deactivate) user by userId (mod/admin only).
 *
 * Soft-delete (hide) an existing user by setting deleted_at, so they no longer
 * appear in active API results or can authenticate, but are preserved for audit
 * and regulatory compliance. Access is limited to moderators and admins. The
 * operation ensures all references and compliance records are preserved.
 * Additional recovery or erasure flows are managed via separate endpoints and
 * workflows.
 *
 * If a user is already soft-deleted, the operation is idempotent. Attempts to
 * delete non-existent users return an error message. All actions are logged for
 * audit and incident response purposes.
 *
 * @param props.connection
 * @param props.userId Unique identifier of the user to soft-delete
 * @path /discussionBoard/admin/users/:userId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the user to soft-delete */
    userId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/discussionBoard/admin/users/:userId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/admin/users/${encodeURIComponent(props.userId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userId")(() => typia.assert(props.userId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
