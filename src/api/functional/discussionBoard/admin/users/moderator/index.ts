import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussionBoardModerator } from "../../../../../structures/IDiscussionBoardModerator";

/**
 * Assign moderator role to a user (discussion_board_users,
 * discussion_board_moderators).
 *
 * This operation assigns moderator privileges to a user with the specified
 * userId. Upon execution, the user is given elevated permissions as defined by
 * the discussion_board_moderators model, which supports audit and suspension
 * fields. Moderator assignment is managed exclusively by admins, and the system
 * will log the assignment event for auditing.
 *
 * Security is critical: Only admins can call this endpoint. The system checks
 * user role and may require justification for the assignment. If the user is
 * already a moderator, the call will have no effect.
 *
 * The operation references the discussion_board_moderators table; it checks for
 * existing active assignments, ensures no duplicates, and creates a new
 * assignment record. Related actions include revoking moderator status and
 * listing all moderators for admin management. The business rules follow the
 * platform's escalation and role management guidelines.
 *
 * @param props.connection
 * @param props.userId Target user ID to assign moderator role.
 * @param props.body Assignment details (if extra info is needed; generally
 *   empty for assignment)
 * @path /discussionBoard/admin/users/:userId/moderator
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function assignModerator(
  connection: IConnection,
  props: assignModerator.Props,
): Promise<assignModerator.Response> {
  return true === connection.simulate
    ? assignModerator.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...assignModerator.METADATA,
          path: assignModerator.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace assignModerator {
  export type Props = {
    /** Target user ID to assign moderator role. */
    userId: string & tags.Format<"uuid">;

    /**
     * Assignment details (if extra info is needed; generally empty for
     * assignment)
     */
    body: IDiscussionBoardModerator.ICreate;
  };
  export type Body = IDiscussionBoardModerator.ICreate;
  export type Response = IDiscussionBoardModerator;

  export const METADATA = {
    method: "PUT",
    path: "/discussionBoard/admin/users/:userId/moderator",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussionBoard/admin/users/${encodeURIComponent(props.userId ?? "null")}/moderator`;
  export const random = (): IDiscussionBoardModerator =>
    typia.random<IDiscussionBoardModerator>();
  export const simulate = (
    connection: IConnection,
    props: assignModerator.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: assignModerator.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userId")(() => typia.assert(props.userId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get moderator role status/assignment by userId.
 *
 * Fetch a user's moderator status and assignment record, including active
 * status, suspension history, assignment, and revocation timestamps, as managed
 * in the discussion_board_moderators table. The endpoint is intended for admins
 * and moderators to verify or audit a user's moderation privileges and
 * compliance with assignment or revocation workflows.
 *
 * Response provides only the moderator-specific record for the userId, not the
 * base user account details. Use the /users/{userId} endpoint for general
 * profile information; this endpoint provides moderation context only. Typical
 * use cases include privileges checks, compliance audits, and evaluating
 * eligibility for moderation actions.
 *
 * @param props.connection
 * @param props.userId Unique identifier of the user whose moderator record is
 *   to be fetched
 * @param props.body Moderator record query parameters (future use)
 * @path /discussionBoard/admin/users/:userId/moderator
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function moderatorStatus(
  connection: IConnection,
  props: moderatorStatus.Props,
): Promise<moderatorStatus.Response> {
  return true === connection.simulate
    ? moderatorStatus.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...moderatorStatus.METADATA,
          path: moderatorStatus.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace moderatorStatus {
  export type Props = {
    /** Unique identifier of the user whose moderator record is to be fetched */
    userId: string & tags.Format<"uuid">;

    /** Moderator record query parameters (future use) */
    body: IDiscussionBoardModerator.IRequest;
  };
  export type Body = IDiscussionBoardModerator.IRequest;
  export type Response = IDiscussionBoardModerator;

  export const METADATA = {
    method: "PATCH",
    path: "/discussionBoard/admin/users/:userId/moderator",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussionBoard/admin/users/${encodeURIComponent(props.userId ?? "null")}/moderator`;
  export const random = (): IDiscussionBoardModerator =>
    typia.random<IDiscussionBoardModerator>();
  export const simulate = (
    connection: IConnection,
    props: moderatorStatus.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: moderatorStatus.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userId")(() => typia.assert(props.userId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Revoke moderator role from a user (discussion_board_moderators).
 *
 * Revoke moderator privileges for the specified userId. This operation marks
 * the moderator's record as deleted (soft delete) and records the revocation
 * with a deleted_at timestamp.
 *
 * Admins use this endpoint to remove moderator status and associated rights
 * from users. The operation adds a compliance-auditable record and prevents
 * this user from moderating until possibly re-assigned in the future. Security
 * audit is maintained for all privilege changes.
 *
 * The endpoint validates the user is currently a moderator and marks the
 * assigned record deleted. Related endpoints manage assignment (PUT), listing
 * moderators, or user detail inspection. All business rules and audit
 * compliance are observed.
 *
 * @param props.connection
 * @param props.userId ID of the user whose moderator privileges are being
 *   revoked.
 * @path /discussionBoard/admin/users/:userId/moderator
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function revokeModerator(
  connection: IConnection,
  props: revokeModerator.Props,
): Promise<revokeModerator.Response> {
  return true === connection.simulate
    ? revokeModerator.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...revokeModerator.METADATA,
          path: revokeModerator.path(props),
          status: null,
        },
      );
}
export namespace revokeModerator {
  export type Props = {
    /** ID of the user whose moderator privileges are being revoked. */
    userId: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussionBoardModerator;

  export const METADATA = {
    method: "DELETE",
    path: "/discussionBoard/admin/users/:userId/moderator",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/admin/users/${encodeURIComponent(props.userId ?? "null")}/moderator`;
  export const random = (): IDiscussionBoardModerator =>
    typia.random<IDiscussionBoardModerator>();
  export const simulate = (
    connection: IConnection,
    props: revokeModerator.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: revokeModerator.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("userId")(() => typia.assert(props.userId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
