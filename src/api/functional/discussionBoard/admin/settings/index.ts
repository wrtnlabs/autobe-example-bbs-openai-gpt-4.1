import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussionBoardSetting } from "../../../../structures/IDiscussionBoardSetting";
import { IPageIDiscussionBoardSetting } from "../../../../structures/IPageIDiscussionBoardSetting";

/**
 * Create a new system/business setting (discussion_board_settings table).
 *
 * This API endpoint allows platform admins to register new configuration
 * settings (e.g., feature flags, operational limits, system parameters) into
 * the board configuration. Uniqueness is enforced for the key field, and the
 * API returns full metadata for audit. Business logic may validate the key and
 * value pattern, with errors returned for collisions or invalid settings. This
 * enables fast, code-free reconfiguration of board/platform features as
 * business requirements evolve. Related endpoints support update or delete.
 * Audit logs are recorded automatically.
 *
 * @param props.connection
 * @param props.body Fields for the new system or business setting entry.
 * @path /discussionBoard/admin/settings
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Fields for the new system or business setting entry. */
    body: IDiscussionBoardSetting.ICreate;
  };
  export type Body = IDiscussionBoardSetting.ICreate;
  export type Response = IDiscussionBoardSetting;

  export const METADATA = {
    method: "POST",
    path: "/discussionBoard/admin/settings",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/admin/settings";
  export const random = (): IDiscussionBoardSetting =>
    typia.random<IDiscussionBoardSetting>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and paginate discussion_board_settings (system configuration/audit).
 *
 * This API endpoint delivers advanced search and pagination across discussion
 * board system settings, enabling filtering by key, value, or description.
 * Admins use this operation to quickly locate, review, or audit settings and
 * their changes, especially for system configuration and compliance
 * requirements. Pagination, sorting, and filter capabilities support efficient
 * UI and backend management for growing systems. Returning results includes all
 * metadata without exposing sensitive values to unauthorized users. Related
 * endpoints include individual setting CRUD.
 *
 * @param props.connection
 * @param props.body Criteria and pagination options for filtering global
 *   settings.
 * @path /discussionBoard/admin/settings
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Criteria and pagination options for filtering global settings. */
    body: IDiscussionBoardSetting.IRequest;
  };
  export type Body = IDiscussionBoardSetting.IRequest;
  export type Response = IPageIDiscussionBoardSetting;

  export const METADATA = {
    method: "PATCH",
    path: "/discussionBoard/admin/settings",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/admin/settings";
  export const random = (): IPageIDiscussionBoardSetting =>
    typia.random<IPageIDiscussionBoardSetting>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get details of a discussion_board_settings row by id (setting detail).
 *
 * This endpoint retrieves complete information for a single configuration
 * setting entry, supporting admin UI, direct API access, or automated audit
 * reviews. The returned object includes key, value, whether the setting is
 * system-level, and all metadata. Used to display or validate live or
 * historical settings for the platform. Only accessible to admins. Not found or
 * permission errors apply.
 *
 * @param props.connection
 * @param props.settingId Unique identifier for the specific system setting to
 *   retrieve.
 * @path /discussionBoard/admin/settings/:settingId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier for the specific system setting to retrieve. */
    settingId: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussionBoardSetting;

  export const METADATA = {
    method: "GET",
    path: "/discussionBoard/admin/settings/:settingId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/admin/settings/${encodeURIComponent(props.settingId ?? "null")}`;
  export const random = (): IDiscussionBoardSetting =>
    typia.random<IDiscussionBoardSetting>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("settingId")(() => typia.assert(props.settingId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing system/business setting (discussion_board_settings row).
 *
 * This API updates the value, description, or metadata of a specific
 * configuration setting by id. Only admins may call this endpoint, and changes
 * are reflected in the returned setting object. Business logic applies
 * validation on updated values, system-flag rules, and audit logging. Primary
 * key id is immutable. Use related endpoints for listing or deleting settings.
 * Error scenarios include duplicate keys, missing ids, or validation rule
 * breaches.
 *
 * @param props.connection
 * @param props.settingId Unique identifier of the system setting to update.
 * @param props.body Fields and new values to update for the setting row.
 * @path /discussionBoard/admin/settings/:settingId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the system setting to update. */
    settingId: string & tags.Format<"uuid">;

    /** Fields and new values to update for the setting row. */
    body: IDiscussionBoardSetting.IUpdate;
  };
  export type Body = IDiscussionBoardSetting.IUpdate;
  export type Response = IDiscussionBoardSetting;

  export const METADATA = {
    method: "PUT",
    path: "/discussionBoard/admin/settings/:settingId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussionBoard/admin/settings/${encodeURIComponent(props.settingId ?? "null")}`;
  export const random = (): IDiscussionBoardSetting =>
    typia.random<IDiscussionBoardSetting>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("settingId")(() => typia.assert(props.settingId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft delete a system/business setting (compliance/audit,
 * discussion_board_settings).
 *
 * This endpoint marks a system configuration setting as deleted (soft
 * deletion), hiding it from normal system usage but retaining the row for audit
 * and compliance. The deleted_at field is updated. Only admins may call this
 * endpoint. It is used as part of configuration lifecycle management and
 * ensures traceability. Not found and permission errors are handled, with
 * related endpoints for listing and undelete. Deletion affects active system
 * configuration upon propagation or cache invalidation.
 *
 * @param props.connection
 * @param props.settingId Unique identifier of the setting to soft delete.
 * @path /discussionBoard/admin/settings/:settingId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the setting to soft delete. */
    settingId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/discussionBoard/admin/settings/:settingId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/admin/settings/${encodeURIComponent(props.settingId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("settingId")(() => typia.assert(props.settingId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
