import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussionBoardComplianceEvent } from "../../../../structures/IDiscussionBoardComplianceEvent";
import { IPageIDiscussionBoardComplianceEvent } from "../../../../structures/IPageIDiscussionBoardComplianceEvent";

/**
 * Search and retrieve paginated compliance events for audit/regulatory review.
 *
 * This endpoint allows compliance and admin users to search, page, and filter
 * through all compliance event records on the platform. Each compliance event
 * entry may represent a regulatory request, data erasure, policy update, or any
 * other compliance activity tracked in the table. Advanced queries by initiated
 * user, event type, date, assignment, or status are supported.
 *
 * The endpoint returns a paginated list of matching events suitable for review,
 * reporting, or regulatory inquiry responses. Only admin users may perform this
 * operation, and all searches and accesses must be logged for audit. This is a
 * read-only operation; no modification or deletion of compliance events is
 * supported here.
 *
 * @param props.connection
 * @param props.body Filtering, sorting, and paging parameters for compliance
 *   event search/index
 * @path /discussionBoard/admin/complianceEvents
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Filtering, sorting, and paging parameters for compliance event
     * search/index
     */
    body: IDiscussionBoardComplianceEvent.IRequest;
  };
  export type Body = IDiscussionBoardComplianceEvent.IRequest;
  export type Response = IPageIDiscussionBoardComplianceEvent;

  export const METADATA = {
    method: "PATCH",
    path: "/discussionBoard/admin/complianceEvents",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/admin/complianceEvents";
  export const random = (): IPageIDiscussionBoardComplianceEvent =>
    typia.random<IPageIDiscussionBoardComplianceEvent>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get details for a single compliance event record by ID.
 *
 * Returns full compliance/audit-level details of an individual compliance event
 * as tracked in the system. Typical use cases include regulatory reporting,
 * internal admin review, or compliance workflow management. Only administrative
 * or compliance users can access this endpoint.
 *
 * The record contains type, status, assignment, timestamps, regulator reference
 * if present, and all event-specific details. Any access to this endpoint
 * should be logged to preserve the audit trail. Deletion or modification of
 * event records is not provided by this API operation.
 *
 * @param props.connection
 * @param props.complianceEventId Unique ID of the compliance event to retrieve
 * @path /discussionBoard/admin/complianceEvents/:complianceEventId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique ID of the compliance event to retrieve */
    complianceEventId: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussionBoardComplianceEvent;

  export const METADATA = {
    method: "GET",
    path: "/discussionBoard/admin/complianceEvents/:complianceEventId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/admin/complianceEvents/${encodeURIComponent(props.complianceEventId ?? "null")}`;
  export const random = (): IDiscussionBoardComplianceEvent =>
    typia.random<IDiscussionBoardComplianceEvent>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("complianceEventId")(() =>
        typia.assert(props.complianceEventId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
