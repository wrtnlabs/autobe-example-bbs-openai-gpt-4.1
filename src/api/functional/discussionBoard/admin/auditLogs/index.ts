import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussionBoardAuditLog } from "../../../../structures/IDiscussionBoardAuditLog";
import { IPageIDiscussionBoardAuditLog } from "../../../../structures/IPageIDiscussionBoardAuditLog";

/**
 * Search and retrieve paginated audit logs for platform/system events.
 *
 * This API allows platform administrators to search and retrieve detailed audit
 * logs of critical system activities, supporting multi-dimensional queries
 * (filter by actor, time, event type, or description). The endpoint assists in
 * compliance, breach investigation, or operational review for system
 * administrators. Returned data respects privacy and access controls, ensuring
 * that only authorized admins can view sensitive action details. The API is
 * intended for backend audit panels and API-based compliance automation.
 * Pagination and complex query filters are supported for large event volumes.
 *
 * @param props.connection
 * @param props.body Advanced query, filter, and pagination parameters for audit
 *   log search.
 * @path /discussionBoard/admin/auditLogs
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Advanced query, filter, and pagination parameters for audit log
     * search.
     */
    body: IDiscussionBoardAuditLog.IRequest;
  };
  export type Body = IDiscussionBoardAuditLog.IRequest;
  export type Response = IPageIDiscussionBoardAuditLog;

  export const METADATA = {
    method: "PATCH",
    path: "/discussionBoard/admin/auditLogs",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/admin/auditLogs";
  export const random = (): IPageIDiscussionBoardAuditLog =>
    typia.random<IPageIDiscussionBoardAuditLog>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get a single audit log entry by ID (admin-only).
 *
 * Retrieve a detailed audit log record by its unique identifier, exposing all
 * major fields such as actor details, action type, target object, description,
 * and timestamps. Typical use cases include compliance audit, review of
 * administrative actions, and root-cause analysis during incident review.
 *
 * Only administrators may access this endpoint, ensuring it is used strictly
 * for legal, operational, or high-stake support purposes. The returned
 * structure maps directly to the audit log schema and includes all available
 * contextual and relationship data. Associated action logs (lower-level traces)
 * can be separately queried using the actionLogs endpoints for advanced
 * investigations.
 *
 * Appropriate error messages will be returned if the entry does not exist or if
 * the requesting user's role is insufficient to view the information.
 *
 * @param props.connection
 * @param props.auditLogId Unique identifier for the target audit log entry
 * @path /discussionBoard/admin/auditLogs/:auditLogId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier for the target audit log entry */
    auditLogId: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussionBoardAuditLog;

  export const METADATA = {
    method: "GET",
    path: "/discussionBoard/admin/auditLogs/:auditLogId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/admin/auditLogs/${encodeURIComponent(props.auditLogId ?? "null")}`;
  export const random = (): IDiscussionBoardAuditLog =>
    typia.random<IDiscussionBoardAuditLog>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("auditLogId")(() => typia.assert(props.auditLogId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
