import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussionBoardTag } from "../../../../structures/IDiscussionBoardTag";
import { IPageIDiscussionBoardTag } from "../../../../structures/IPageIDiscussionBoardTag";

/**
 * Create a new tag for organizing content.
 *
 * Create a new tag instance for use within categories and as a tool for
 * discussion board organization. Requires a unique label and optional
 * description, with is_active controlling immediate usability in tagging
 * flows.
 *
 * Strict controls prevent tag duplication and allow for moderation review where
 * needed. Useful for evolving forum taxonomy, supporting user engagement, and
 * enabling advanced content filtering. All actions are logged for audit.
 *
 * @param props.connection
 * @param props.body Information required to create a new tag.
 * @path /discussionBoard/admin/tags
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Information required to create a new tag. */
    body: IDiscussionBoardTag.ICreate;
  };
  export type Body = IDiscussionBoardTag.ICreate;
  export type Response = IDiscussionBoardTag;

  export const METADATA = {
    method: "POST",
    path: "/discussionBoard/admin/tags",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/admin/tags";
  export const random = (): IDiscussionBoardTag =>
    typia.random<IDiscussionBoardTag>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Paginated, filterable list of discussion board tags.
 *
 * Fetch a paginated, searchable, and filterable list of tags for use in
 * category and post management. Tags power faceted search, user suggestions,
 * and advanced moderation workflows. The API enables filtering on tag label and
 * is_active status, with ordering for user-facing or moderation needs.
 *
 * Used both by admin users for backend tag management and by end-users for tag
 * browsing or selection. Soft-deleted tags are excluded unless explicitly
 * included by business logic. Supports growth and evolution of tag taxonomy.
 *
 * @param props.connection
 * @param props.body Filtering, search, and pagination options for retrieving
 *   tags.
 * @path /discussionBoard/admin/tags
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Filtering, search, and pagination options for retrieving tags. */
    body: IDiscussionBoardTag.IRequest;
  };
  export type Body = IDiscussionBoardTag.IRequest;
  export type Response = IPageIDiscussionBoardTag.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/discussionBoard/admin/tags",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/admin/tags";
  export const random = (): IPageIDiscussionBoardTag.ISummary =>
    typia.random<IPageIDiscussionBoardTag.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get details about a specific discussion board tag.
 *
 * Fetch a complete detail record for a single tag specified by its unique
 * tagId. The response includes label, description, activation status, audit
 * timestamps, and any admin-level details relevant to management or
 * moderation.
 *
 * Access is controlled for sensitive or inactive tags, but public tags may be
 * visible depending on system configuration. Enables UI workflows such as tag
 * editing, merging, or detail popovers in tag suggestion lists.
 *
 * @param props.connection
 * @param props.tagId Unique identifier of the target tag.
 * @path /discussionBoard/admin/tags/:tagId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target tag. */
    tagId: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussionBoardTag;

  export const METADATA = {
    method: "GET",
    path: "/discussionBoard/admin/tags/:tagId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/admin/tags/${encodeURIComponent(props.tagId ?? "null")}`;
  export const random = (): IDiscussionBoardTag =>
    typia.random<IDiscussionBoardTag>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("tagId")(() => typia.assert(props.tagId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing tag (label/description/status) in the discussion board
 * (discussion_board_tags).
 *
 * This API allows an admin to update the label, description, or active status
 * of a tag used throughout the discussion board. Tag modifications may include
 * correcting spelling, updating descriptions to reflect community standards, or
 * toggling active status for moderation. The system enforces tag label
 * uniqueness and updates affected relationships across categories. Only admin
 * users have access to this endpoint to prevent unauthorized modifications to
 * the platform's taxonomy. Related endpoints include tag creation (POST /tags),
 * tag retrieval, and tag list endpoints for categorization management. In case
 * of validation failure (e.g., duplicate tag label), a descriptive error
 * message is returned.
 *
 * @param props.connection
 * @param props.tagId Unique identifier of the tag to update.
 * @param props.body Fields and new values for the tag update.
 * @path /discussionBoard/admin/tags/:tagId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the tag to update. */
    tagId: string & tags.Format<"uuid">;

    /** Fields and new values for the tag update. */
    body: IDiscussionBoardTag.IUpdate;
  };
  export type Body = IDiscussionBoardTag.IUpdate;
  export type Response = IDiscussionBoardTag;

  export const METADATA = {
    method: "PUT",
    path: "/discussionBoard/admin/tags/:tagId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussionBoard/admin/tags/${encodeURIComponent(props.tagId ?? "null")}`;
  export const random = (): IDiscussionBoardTag =>
    typia.random<IDiscussionBoardTag>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("tagId")(() => typia.assert(props.tagId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft delete a tag in the discussion_board_tags table (taxonomy/tag
 * management).
 *
 * This endpoint allows administrators to disable or remove a tag from the
 * taxonomy by performing a soft delete operation. The deleted_at field marks
 * the tag as unavailable for new categorization, but the tag remains in the
 * database for audit and compliance reasons. Existing category or post
 * relationships referencing the tag remain unchanged, supporting historical
 * analysis. Only admin users may access this endpoint to prevent loss of
 * platform structure. Operation errors include not found and permission denial.
 * To restore a tag, use a separate (not provided here) undelete/recover
 * endpoint.
 *
 * @param props.connection
 * @param props.tagId Unique identifier of the tag to soft delete.
 * @path /discussionBoard/admin/tags/:tagId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the tag to soft delete. */
    tagId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/discussionBoard/admin/tags/:tagId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/admin/tags/${encodeURIComponent(props.tagId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("tagId")(() => typia.assert(props.tagId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
