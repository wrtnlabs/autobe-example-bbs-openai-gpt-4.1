import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussionBoardRefreshToken } from "../../../../structures/IDiscussionBoardRefreshToken";
import { IPageIDiscussionBoardRefreshToken } from "../../../../structures/IPageIDiscussionBoardRefreshToken";

/**
 * Retrieve a paginated and filterable list of refresh tokens for session and
 * security audit.
 *
 * This operation allows retrieval of a filtered and paginated list of refresh
 * token entities in the discussion board system. It enables clients (such as
 * admins or system users) to audit, search, and review refresh tokens that have
 * been issued to users for maintaining session continuity. The operation
 * supports filtering by user, token status, issuance/expiration time, and
 * device metadata. Security is paramount as this operation exposes sensitive
 * session dataâ€”access should be limited to users with proper authority, such as
 * 'admin' or the user themselves viewing their own token list. Sensitive data
 * such as raw token values should be masked as appropriate within business
 * logic. Error handling includes returning clear messages for access denied,
 * validation errors in filter parameters, and pagination out-of-range. This
 * endpoint is crucial for users wishing to audit their own active sessions or
 * for administrators conducting security and compliance reviews. Related
 * endpoints include single token retrieval, revocation, and management of
 * password and session policies.
 *
 * @param props.connection
 * @param props.body Filter and pagination criteria for retrieving refresh
 *   tokens.
 * @path /discussionBoard/admin/refreshTokens
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Filter and pagination criteria for retrieving refresh tokens. */
    body: IDiscussionBoardRefreshToken.IRequest;
  };
  export type Body = IDiscussionBoardRefreshToken.IRequest;
  export type Response = IPageIDiscussionBoardRefreshToken;

  export const METADATA = {
    method: "PATCH",
    path: "/discussionBoard/admin/refreshTokens",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/admin/refreshTokens";
  export const random = (): IPageIDiscussionBoardRefreshToken =>
    typia.random<IPageIDiscussionBoardRefreshToken>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get detailed information for a specific refresh token by ID.
 *
 * Allows retrieval of a single refresh token entity and its metadata by
 * specifying its unique identifier in the path parameter. This endpoint
 * provides details necessary for advanced session management, including audits,
 * debugging user session issues, and detecting anomalous activity. The
 * operation ensures sensitive information such as the actual token value is
 * appropriately masked or excluded unless safely readable by a high-privilege
 * actor (such as an admin). Authorization is enforced: only the user to whom
 * the token belongs or an admin may use this endpoint. Handling includes
 * not-found and access-denied error scenarios. Related endpoints: token list
 * retrieval, token revocation or update, password reset flows.
 *
 * @param props.connection
 * @param props.refreshTokenId The unique identifier (UUID) of the refresh token
 *   to retrieve.
 * @path /discussionBoard/admin/refreshTokens/:refreshTokenId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** The unique identifier (UUID) of the refresh token to retrieve. */
    refreshTokenId: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussionBoardRefreshToken;

  export const METADATA = {
    method: "GET",
    path: "/discussionBoard/admin/refreshTokens/:refreshTokenId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/admin/refreshTokens/${encodeURIComponent(props.refreshTokenId ?? "null")}`;
  export const random = (): IDiscussionBoardRefreshToken =>
    typia.random<IDiscussionBoardRefreshToken>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("refreshTokenId")(() => typia.assert(props.refreshTokenId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update (e.g., revoke) a refresh token to invalidate a session by ID.
 *
 * Updates a specific refresh token record's metadata, generally to revoke a
 * session (set revoked_at) or update device/session information, for audit and
 * compliance purposes. This action supports user-initiated single-device logout
 * or administrative forced logout scenarios. Only mutable fields (revoked_at,
 * device_info) are updatable; all other fields remain immutable for security
 * and traceability. Endpoint enforces strict access control so that users may
 * only update their own sessions and admins can act on all. Error conditions
 * include invalid payload, forbidden field update attempts, and access denied.
 * Related APIs include list, retrieve, and delete token operations.
 *
 * @param props.connection
 * @param props.refreshTokenId The unique identifier (UUID) of the refresh token
 *   to update.
 * @param props.body Fields that may be updated for a refresh token, such as
 *   revoked_at and device_info.
 * @path /discussionBoard/admin/refreshTokens/:refreshTokenId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** The unique identifier (UUID) of the refresh token to update. */
    refreshTokenId: string & tags.Format<"uuid">;

    /**
     * Fields that may be updated for a refresh token, such as revoked_at
     * and device_info.
     */
    body: IDiscussionBoardRefreshToken.IUpdate;
  };
  export type Body = IDiscussionBoardRefreshToken.IUpdate;
  export type Response = IDiscussionBoardRefreshToken;

  export const METADATA = {
    method: "PUT",
    path: "/discussionBoard/admin/refreshTokens/:refreshTokenId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussionBoard/admin/refreshTokens/${encodeURIComponent(props.refreshTokenId ?? "null")}`;
  export const random = (): IDiscussionBoardRefreshToken =>
    typia.random<IDiscussionBoardRefreshToken>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("refreshTokenId")(() => typia.assert(props.refreshTokenId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft delete a refresh token to disable a session (logout from device).
 *
 * Deletes a refresh token entry by its unique identifier by performing a soft
 * delete (sets the deleted_at timestamp) for regulatory compliance and audit
 * retention. This enables users or administrators to invalidate active sessions
 * safely without irreversibly losing the audit trail. The endpoint applies
 * strict authorization: only the owner user of the token or an admin may
 * delete. Error conditions include access denied, resource not found, or token
 * already invalidated. Associated operations include logout from all devices
 * (mass-revocation), listing all tokens for a user, and session/token
 * restoration under defined business flows.
 *
 * @param props.connection
 * @param props.refreshTokenId The unique identifier (UUID) of the refresh token
 *   to remove.
 * @path /discussionBoard/admin/refreshTokens/:refreshTokenId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** The unique identifier (UUID) of the refresh token to remove. */
    refreshTokenId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/discussionBoard/admin/refreshTokens/:refreshTokenId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/admin/refreshTokens/${encodeURIComponent(props.refreshTokenId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("refreshTokenId")(() => typia.assert(props.refreshTokenId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
