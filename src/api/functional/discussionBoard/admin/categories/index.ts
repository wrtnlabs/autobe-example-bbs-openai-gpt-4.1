import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussionBoardCategory } from "../../../../structures/IDiscussionBoardCategory";
import { IPageIDiscussionBoardCategory } from "../../../../structures/IPageIDiscussionBoardCategory";

/**
 * Create a new category for the discussion board.
 *
 * Create a new category for classifying discussion posts and threads. Requires
 * a unique name and may include a description, is_active flag, and sort_order.
 * The operation integrates validation on uniqueness of the category name and
 * adheres to schema constraints on field types and attributes.
 *
 * Created categories become available for use by users (if is_active), or can
 * be staged for moderation/admin review. Audit trails log creator and status.
 * Only authorized staff (e.g., admins) are permitted to create categories,
 * enforcing strict access control.
 *
 * @param props.connection
 * @param props.body Data needed to create a new discussion board category.
 * @path /discussionBoard/admin/categories
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Data needed to create a new discussion board category. */
    body: IDiscussionBoardCategory.ICreate;
  };
  export type Body = IDiscussionBoardCategory.ICreate;
  export type Response = IDiscussionBoardCategory;

  export const METADATA = {
    method: "POST",
    path: "/discussionBoard/admin/categories",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/admin/categories";
  export const random = (): IDiscussionBoardCategory =>
    typia.random<IDiscussionBoardCategory>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a paginated and filterable list of discussion board categories.
 *
 * Retrieve a paginated, searchable, and sortable list of all discussion board
 * categories. This API is crucial for both general users to browse available
 * categories as well as for moderators/admins to manage category status and
 * details.
 *
 * Filtering can be applied on fields such as name, is_active, and sort_order.
 * Supports complex search scenarios for backend moderation dashboards as well
 * as public listings. The response supports efficient pagination for
 * performance and user experience.
 *
 * Access is typically restricted to authenticated users for management, but may
 * also allow public listing with is_active=true. The list integrates with
 * category-tag relations, and can be extended to support tag-based filtering in
 * the future.
 *
 * @param props.connection
 * @param props.body Search, filter, and pagination options for querying
 *   categories.
 * @path /discussionBoard/admin/categories
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search, filter, and pagination options for querying categories. */
    body: IDiscussionBoardCategory.IRequest;
  };
  export type Body = IDiscussionBoardCategory.IRequest;
  export type Response = IPageIDiscussionBoardCategory.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/discussionBoard/admin/categories",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/admin/categories";
  export const random = (): IPageIDiscussionBoardCategory.ISummary =>
    typia.random<IPageIDiscussionBoardCategory.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get details for a single discussion board category by ID.
 *
 * Get all details about a single category based on its unique identifier.
 * Returns all fields including name, description, active state, ordering, and
 * timestamps. Used for admin and moderator workflows, as well as public
 * category detail if is_active.
 *
 * Authorization ensures that only users with sufficient permissions may view
 * inactive categories or full details. The response allows UI to present rich
 * category information, and supports further management operations.
 *
 * @param props.connection
 * @param props.categoryId Unique identifier of the target category.
 * @path /discussionBoard/admin/categories/:categoryId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the target category. */
    categoryId: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussionBoardCategory;

  export const METADATA = {
    method: "GET",
    path: "/discussionBoard/admin/categories/:categoryId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/admin/categories/${encodeURIComponent(props.categoryId ?? "null")}`;
  export const random = (): IDiscussionBoardCategory =>
    typia.random<IDiscussionBoardCategory>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("categoryId")(() => typia.assert(props.categoryId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a discussion board category by ID.
 *
 * Update the attributes of an existing discussion board category. Can change
 * name (must remain unique), description, is_active status, and sort_order. The
 * API validates all updates against schema and business requirementsâ€”incorrect
 * or duplicate parameters (such as non-unique name) result in errors.
 *
 * Only admin users have access, and all changes are auditable. Updates may
 * alter how categories appear in both public listings and admin panels, as well
 * as their activation for post submission.
 *
 * @param props.connection
 * @param props.categoryId Unique identifier of the category to update.
 * @param props.body Fields and values to update for the target category.
 * @path /discussionBoard/admin/categories/:categoryId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the category to update. */
    categoryId: string & tags.Format<"uuid">;

    /** Fields and values to update for the target category. */
    body: IDiscussionBoardCategory.IUpdate;
  };
  export type Body = IDiscussionBoardCategory.IUpdate;
  export type Response = IDiscussionBoardCategory;

  export const METADATA = {
    method: "PUT",
    path: "/discussionBoard/admin/categories/:categoryId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussionBoard/admin/categories/${encodeURIComponent(props.categoryId ?? "null")}`;
  export const random = (): IDiscussionBoardCategory =>
    typia.random<IDiscussionBoardCategory>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("categoryId")(() => typia.assert(props.categoryId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft delete a discussion board category by ID.
 *
 * Soft-deletes the target category by setting deleted_at to the current
 * timestamp, preserving the record for compliance and potential recovery.
 * Deleted categories are excluded from future listings and cannot be used for
 * new post classification, though audit and system logs retain their
 * information.
 *
 * The operation is available solely to admin users due to its impact on forum
 * structure. Attempts to delete already-deleted or non-existent categories
 * return appropriate errors. Soft deletion preserves data integrity for audit
 * trails and system history.
 *
 * @param props.connection
 * @param props.categoryId Unique identifier of the category to soft delete.
 * @path /discussionBoard/admin/categories/:categoryId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the category to soft delete. */
    categoryId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/discussionBoard/admin/categories/:categoryId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/admin/categories/${encodeURIComponent(props.categoryId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("categoryId")(() => typia.assert(props.categoryId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
