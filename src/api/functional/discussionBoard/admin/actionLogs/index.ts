import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussionBoardActionLog } from "../../../../structures/IDiscussionBoardActionLog";
import { IPageIDiscussionBoardActionLog } from "../../../../structures/IPageIDiscussionBoardActionLog";

/**
 * List/search detailed action logs for compliance and administration.
 *
 * Search and retrieve a paginated list of action log entries, which serve as
 * detailed sub-events or system-level traces attached to audit logs. Each log
 * details its status, metadata, and creation timestamp, providing granular
 * visibility into the internal operations and compliance story of the
 * platform.
 *
 * This endpoint is commonly used by compliance auditors, admins, and (when
 * appropriate) technical support personnel to investigate incidents, confirm
 * audit trails, or debug complex sequences of platform actions. List results
 * can be filtered, sorted, and paginated according to business rules and
 * performance considerations.
 *
 * This operation references the discussion_board_action_logs table, returning
 * relevant child records that may be associated with larger audit events, all
 * according to the Prisma schema fields and documented relationships.
 *
 * @param props.connection
 * @param props.body Action log search criteria, filters, and pagination/sorting
 *   options
 * @path /discussionBoard/admin/actionLogs
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Action log search criteria, filters, and pagination/sorting options */
    body: IDiscussionBoardActionLog.IRequest;
  };
  export type Body = IDiscussionBoardActionLog.IRequest;
  export type Response = IPageIDiscussionBoardActionLog;

  export const METADATA = {
    method: "PATCH",
    path: "/discussionBoard/admin/actionLogs",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/admin/actionLogs";
  export const random = (): IPageIDiscussionBoardActionLog =>
    typia.random<IPageIDiscussionBoardActionLog>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get a specific action log by ID (admin-only).
 *
 * Fetch a single action log record by its unique ID, including embedded status,
 * metadata, and timestamp. Useful for compliance audit, root-cause analysis,
 * and advanced troubleshooting tasks. The endpoint cross-references parent
 * audit log data for investigative context and is primarily intended for admin
 * and compliance workflows.
 *
 * Access is strictly limited to admin role to safeguard sensitive traces of
 * platform logic or user actions. If the action log does not exist, a not-found
 * error is returned. Each record maps directly to the
 * discussion_board_action_logs Prisma schema and relates upward to an audit log
 * for full event history.
 *
 * @param props.connection
 * @param props.actionLogId Unique identifier of the action log record
 * @path /discussionBoard/admin/actionLogs/:actionLogId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the action log record */
    actionLogId: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussionBoardActionLog;

  export const METADATA = {
    method: "GET",
    path: "/discussionBoard/admin/actionLogs/:actionLogId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/admin/actionLogs/${encodeURIComponent(props.actionLogId ?? "null")}`;
  export const random = (): IDiscussionBoardActionLog =>
    typia.random<IDiscussionBoardActionLog>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("actionLogId")(() => typia.assert(props.actionLogId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
