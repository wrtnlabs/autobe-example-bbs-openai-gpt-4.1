import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussionBoardVisitor } from "../../../../structures/IDiscussionBoardVisitor";
import { IPageIDiscussionBoardVisitor } from "../../../../structures/IPageIDiscussionBoardVisitor";

/**
 * List/search visitor accounts (discussion_board_visitors) with filtering and
 * pagination.
 *
 * Retrieves a paginated and searchable list of visitor accounts registered in
 * the system. This endpoint provides viewing, searching, and filter
 * capabilities for auditing, anti-abuse, or operational analytics purposes.
 * Accessible only to admin users as visitor info is considered sensitive even
 * without PII.
 *
 * The result is a summary of visitor records, filtered and paginated according
 * to the query parameters defined in the request body.
 *
 * This endpoint references the discussion_board_visitors table and leverages
 * its metadata columns for filtering and audit. Related operations may include
 * retrieving visitor details or associating a visitor with an authenticated
 * user for escalation.
 *
 * @param props.connection
 * @param props.body Visitor search, filter, pagination, and sort options.
 * @path /discussionBoard/admin/visitors
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Visitor search, filter, pagination, and sort options. */
    body: IDiscussionBoardVisitor.IRequest;
  };
  export type Body = IDiscussionBoardVisitor.IRequest;
  export type Response = IPageIDiscussionBoardVisitor.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/discussionBoard/admin/visitors",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/admin/visitors";
  export const random = (): IPageIDiscussionBoardVisitor.ISummary =>
    typia.random<IPageIDiscussionBoardVisitor.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve visitor account details by visitorId (discussion_board_visitors).
 *
 * Retrieve the detail of a single visitor account by its visitorId. Supplies
 * the full set of available non-PII metadata for auditing, operational
 * analysis, or security context.
 *
 * This endpoint references the discussion_board_visitors model, allowing
 * inspection of any individual session or visitor identified by their UUID.
 * Only accessible to platform admins for compliance and regulatory controls.
 * Related endpoints include searching all visitors and associating sessions
 * with user sign-ups.
 *
 * @param props.connection
 * @param props.visitorId Unique identifier (UUID) of the visitor account.
 * @path /discussionBoard/admin/visitors/:visitorId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier (UUID) of the visitor account. */
    visitorId: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussionBoardVisitor;

  export const METADATA = {
    method: "GET",
    path: "/discussionBoard/admin/visitors/:visitorId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/admin/visitors/${encodeURIComponent(props.visitorId ?? "null")}`;
  export const random = (): IDiscussionBoardVisitor =>
    typia.random<IDiscussionBoardVisitor>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("visitorId")(() => typia.assert(props.visitorId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
