import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussionBoardVerificationToken } from "../../../../structures/IDiscussionBoardVerificationToken";
import { IPageIDiscussionBoardVerificationToken } from "../../../../structures/IPageIDiscussionBoardVerificationToken";

/**
 * Search and retrieve a paginated list of verification tokens for audit and
 * admin use.
 *
 * Retrieve a filtered, paginated list of verification tokens from the system
 * for investigation or administration purposes.
 *
 * This API allows authorized users (typically admin or moderator roles) to
 * search, filter, and paginate verification tokens issued for account
 * registration, password resets, or multi-factor authentication events. Query
 * filters may include purpose (such as 'email_verification', 'password_reset'),
 * issuance and expiration dates, and the user ID associated with the token.
 * Tokens that are expired, used, or revoked will be included or excluded in
 * results depending on filters.
 *
 * Security is paramount: token values are never returned directly. Only
 * summary/admin-safe fields, such as creation/expiry timestamps, usage
 * information, or token status, are exposed for administration and compliance.
 * This operation serves as an audit mechanism supporting business and
 * regulatory needs, with full traceability as described in the Prisma schema.
 * Only users with proper administrative or moderation privileges can call this
 * endpoint.
 *
 * @param props.connection
 * @param props.body Advanced search/filter and pagination criteria for
 *   verification tokens
 * @path /discussionBoard/admin/verificationTokens
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Advanced search/filter and pagination criteria for verification
     * tokens
     */
    body: IDiscussionBoardVerificationToken.IRequest;
  };
  export type Body = IDiscussionBoardVerificationToken.IRequest;
  export type Response = IPageIDiscussionBoardVerificationToken.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/discussionBoard/admin/verificationTokens",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/admin/verificationTokens";
  export const random = (): IPageIDiscussionBoardVerificationToken.ISummary =>
    typia.random<IPageIDiscussionBoardVerificationToken.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve detailed information about a specific verification token by ID.
 *
 * Retrieve full details about a verification token by its ID for audit,
 * compliance, or troubleshooting use cases.
 *
 * The endpoint supports administrative visibility into a specific verification
 * token's lifecycle, including creation time, expiration, use status, and
 * assigned user (via userId). This operation is designed for workflow
 * troubleshooting, escalated support, and security incident analysis, and only
 * available to authorized admin roles. Sensitive properties such as the raw
 * verification token value are not exposed in the response.
 *
 * Token status and audit information must be handled in accordance with privacy
 * and compliance rules described in the Prisma schema.
 *
 * @param props.connection
 * @param props.verificationTokenId Unique identifier for the target
 *   verification token
 * @path /discussionBoard/admin/verificationTokens/:verificationTokenId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier for the target verification token */
    verificationTokenId: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussionBoardVerificationToken;

  export const METADATA = {
    method: "GET",
    path: "/discussionBoard/admin/verificationTokens/:verificationTokenId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/admin/verificationTokens/${encodeURIComponent(props.verificationTokenId ?? "null")}`;
  export const random = (): IDiscussionBoardVerificationToken =>
    typia.random<IDiscussionBoardVerificationToken>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("verificationTokenId")(() =>
        typia.assert(props.verificationTokenId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update non-sensitive verification token metadata (admin only).
 *
 * Update metadata or non-sensitive properties of a verification token, such as
 * adjusting expiration, marking as used, or updating administrative notes.
 *
 * This operation is restricted to administrative and compliance staff, as
 * changes to verification tokens can impact security and account activation
 * workflows. The operation never allows direct modification of the token value
 * itself. All property updates are subject to detailed audit logging per
 * compliance requirements. Only the fields allowed in the
 * IDiscussionBoardVerificationToken.IUpdate schema may be changed.
 *
 * Typical use cases include resolving user support escalations,
 * compliance-driven metadata updates, or exceptional case workflow adjustments.
 * Full compliance with the Prisma schema's field definitions and relations is
 * enforced.
 *
 * @param props.connection
 * @param props.verificationTokenId Unique identifier for the target
 *   verification token
 * @param props.body New values for updatable verification token fields
 *   (excluding the token string)
 * @path /discussionBoard/admin/verificationTokens/:verificationTokenId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier for the target verification token */
    verificationTokenId: string & tags.Format<"uuid">;

    /**
     * New values for updatable verification token fields (excluding the
     * token string)
     */
    body: IDiscussionBoardVerificationToken.IUpdate;
  };
  export type Body = IDiscussionBoardVerificationToken.IUpdate;
  export type Response = IDiscussionBoardVerificationToken;

  export const METADATA = {
    method: "PUT",
    path: "/discussionBoard/admin/verificationTokens/:verificationTokenId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussionBoard/admin/verificationTokens/${encodeURIComponent(props.verificationTokenId ?? "null")}`;
  export const random = (): IDiscussionBoardVerificationToken =>
    typia.random<IDiscussionBoardVerificationToken>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("verificationTokenId")(() =>
        typia.assert(props.verificationTokenId),
      );
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft delete a verification token by ID (admin only, audit retained).
 *
 * Soft delete a verification token by marking it as deleted, ensuring it is no
 * longer used for authentication or workflow purposes, but is retained for
 * audit and compliance traceability.
 *
 * Authorized admins or compliance staff can use this operation for regulatory
 * purposes, incident remediation, or to purge invalid/expired tokens. Actual
 * record is not permanently removed from the database—deleted_at is set to
 * current time for soft deletion. All actions are logged for compliance in
 * accordance with the Prisma schema.
 *
 * @param props.connection
 * @param props.verificationTokenId Unique identifier for the target
 *   verification token
 * @path /discussionBoard/admin/verificationTokens/:verificationTokenId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier for the target verification token */
    verificationTokenId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/discussionBoard/admin/verificationTokens/:verificationTokenId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/admin/verificationTokens/${encodeURIComponent(props.verificationTokenId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("verificationTokenId")(() =>
        typia.assert(props.verificationTokenId),
      );
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
