import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussionBoardExportLog } from "../../../../structures/IDiscussionBoardExportLog";
import { IPageIDiscussionBoardExportLog } from "../../../../structures/IPageIDiscussionBoardExportLog";

/**
 * Retrieve audit details for a specific export log record by ID.
 *
 * Get the full details and audit record for a specific export log, identified
 * by exportLogId. This read-only operation returns requester information, file
 * location, export timing, type, status, and trace metadata for compliance or
 * forensic review.
 *
 * The endpoint ensures only authorized admins can access potentially sensitive
 * export histories. It supports compliance and audit by providing all relevant
 * context for a given export event logged in the system.
 *
 * If the exportLogId does not correspond to an existing record, the operation
 * should return an appropriate error response indicating not found or
 * unauthorized access, as relevant.
 *
 * @param props.connection
 * @param props.exportLogId Unique identifier of the export log record to
 *   retrieve.
 * @path /discussionBoard/admin/exportLogs/:exportLogId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the export log record to retrieve. */
    exportLogId: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussionBoardExportLog;

  export const METADATA = {
    method: "GET",
    path: "/discussionBoard/admin/exportLogs/:exportLogId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/admin/exportLogs/${encodeURIComponent(props.exportLogId ?? "null")}`;
  export const random = (): IDiscussionBoardExportLog =>
    typia.random<IDiscussionBoardExportLog>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("exportLogId")(() => typia.assert(props.exportLogId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing export log record's audit data by ID.
 *
 * Update the details of an export log record by ID, such as its status, file
 * location URI, or exported time to reflect delivery or final audit outcomes.
 * Administrators use this operation to keep export tracking up to date for
 * proper compliance and regulatory reporting.
 *
 * The endpoint requires valid admin privileges and a valid exportLogId. Input
 * will be validated for audit accuracy, uniqueness (for file URI), and proper
 * update sequencing.
 *
 * If exportLogId does not correspond to a current record, the service will
 * return an error indicating missing resource or access permission denial.
 *
 * @param props.connection
 * @param props.exportLogId Unique identifier of the export log record to
 *   update.
 * @param props.body Update fields for the export log record.
 * @path /discussionBoard/admin/exportLogs/:exportLogId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the export log record to update. */
    exportLogId: string & tags.Format<"uuid">;

    /** Update fields for the export log record. */
    body: IDiscussionBoardExportLog.IUpdate;
  };
  export type Body = IDiscussionBoardExportLog.IUpdate;
  export type Response = IDiscussionBoardExportLog;

  export const METADATA = {
    method: "PUT",
    path: "/discussionBoard/admin/exportLogs/:exportLogId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussionBoard/admin/exportLogs/${encodeURIComponent(props.exportLogId ?? "null")}`;
  export const random = (): IDiscussionBoardExportLog =>
    typia.random<IDiscussionBoardExportLog>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("exportLogId")(() => typia.assert(props.exportLogId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft-delete an export log entry for compliance lifecycle management.
 *
 * Soft-delete a single export log entry by exportLogId. This operation will
 * mark the log record as deleted using the 'deleted_at' column, preserving it
 * for future compliance or incident review. The record will be omitted from
 * non-audit log lookups after deletion.
 *
 * Only users with the admin role may execute this operation. For audit and
 * compliance, the operation should log the deletion's actor and timestamp. If
 * the export log record is not found, a not found or error response will be
 * provided.
 *
 * @param props.connection
 * @param props.exportLogId Unique identifier of the export log record to
 *   delete.
 * @path /discussionBoard/admin/exportLogs/:exportLogId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the export log record to delete. */
    exportLogId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/discussionBoard/admin/exportLogs/:exportLogId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/admin/exportLogs/${encodeURIComponent(props.exportLogId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("exportLogId")(() => typia.assert(props.exportLogId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Create a new export log entry for compliance or audit file delivery.
 *
 * Create and record a new export log entry for tracking compliance and audit
 * file deliveries in the discussion board service. Administrators can provide
 * all necessary details about the export event—requester (if any), export
 * target type, the URI of the export file, its MIME type, export date, and
 * initial status—for full compliance traceability.
 *
 * The endpoint will validate that all required fields are provided and that
 * file URIs remain unique. This helps maintain a complete audit trail and
 * ensures regulatory and business export events are documented.
 *
 * This operation should only be accessible to users with the admin role, as it
 * involves sensitive audit/audit log data and compliance actions.
 *
 * @param props.connection
 * @param props.body Details for the export log record to be created.
 * @path /discussionBoard/admin/exportLogs
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Details for the export log record to be created. */
    body: IDiscussionBoardExportLog.ICreate;
  };
  export type Body = IDiscussionBoardExportLog.ICreate;
  export type Response = IDiscussionBoardExportLog;

  export const METADATA = {
    method: "POST",
    path: "/discussionBoard/admin/exportLogs",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/admin/exportLogs";
  export const random = (): IDiscussionBoardExportLog =>
    typia.random<IDiscussionBoardExportLog>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve and filter export log records with pagination for compliance audit.
 *
 * Retrieve a filtered, paginated list of export log records used for tracking
 * downloads and exports of compliance, audit, or privacy data. This operation
 * enables administrators and compliance teams to monitor the lifecycle of
 * export files, audit export activity, and investigate export history for
 * regulatory and business needs.
 *
 * The endpoint supports advanced searching, filtering (by target type, status,
 * file type), and configurable sorting mechanisms. Administrators can use this
 * API to review which users or staff requested particular exports, when files
 * were made available, and the current status of each logged event.
 *
 * Data returned does not include personal PII outside of user identifiers for
 * audit. The endpoint only exposes information to authorized admin users. Use
 * this operation together with detailed retrieval and update endpoints to audit
 * or manage export log records.
 *
 * @param props.connection
 * @param props.body Advanced search and pagination request for export log
 *   records.
 * @path /discussionBoard/admin/exportLogs
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Advanced search and pagination request for export log records. */
    body: IDiscussionBoardExportLog.IRequest;
  };
  export type Body = IDiscussionBoardExportLog.IRequest;
  export type Response = IPageIDiscussionBoardExportLog.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/discussionBoard/admin/exportLogs",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/admin/exportLogs";
  export const random = (): IPageIDiscussionBoardExportLog.ISummary =>
    typia.random<IPageIDiscussionBoardExportLog.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
