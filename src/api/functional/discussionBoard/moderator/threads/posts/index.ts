import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
export * as comments from "./comments";

/**
 * Soft delete a specific post in a thread by setting its deleted_at timestamp.
 *
 * Delete a specific post within a thread by performing a soft deletion. This
 * API sets the post's deleted_at timestamp, effectively hiding the post from
 * standard user access while retaining it for compliance, moderation, or later
 * auditing. Only authorized users (the post author, moderators, or admins) may
 * invoke this operation. The operation does not erase associated comments or
 * attachments, but those may become hidden through parent soft-deletion logic.
 * A successful soft delete allows the forum to maintain audit trails and
 * supports moderator review in case of disputes or appeals. If inappropriate
 * users attempt deletion, an explicit permission denied error will be returned.
 * Attempting to delete a non-existent or already-deleted post results in a 404
 * error with appropriate messaging.
 *
 * @param props.connection
 * @param props.threadId Unique identifier for the parent discussion thread.
 * @param props.postId Unique identifier for the target post within the thread.
 * @path /discussionBoard/moderator/threads/:threadId/posts/:postId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier for the parent discussion thread. */
    threadId: string & tags.Format<"uuid">;

    /** Unique identifier for the target post within the thread. */
    postId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/discussionBoard/moderator/threads/:threadId/posts/:postId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/moderator/threads/${encodeURIComponent(props.threadId ?? "null")}/posts/${encodeURIComponent(props.postId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("threadId")(() => typia.assert(props.threadId));
      assert.param("postId")(() => typia.assert(props.postId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
