import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussionBoardAppeal } from "../../../../structures/IDiscussionBoardAppeal";
import { IPageIDiscussionBoardAppeal } from "../../../../structures/IPageIDiscussionBoardAppeal";

/**
 * Search and retrieve appeals with filtering, pagination, and workflow sorting.
 *
 * Retrieve a filtered, paginated list of appeals against moderation actions or
 * flag reports. Supports advanced search/filtering by appellant user, status,
 * reason, related moderation action or flag report, and submission/resolution
 * timestamps. Includes pagination controls, keyword search, and sorting options
 * for workflow efficiency.
 *
 * Security rules prevent disclosure of sensitive details to unauthorized users;
 * only moderators and admins can access all appeals, while users may see their
 * own. The endpoint supports compliance needs and moderation workflow
 * management. Related appeals, moderation actions, and report status are
 * included for triage and compliance review.
 *
 * Search is optimized for volume and includes filtering and ordering consistent
 * with administrative/triage use cases.
 *
 * @param props.connection
 * @param props.body Search, filtering, and pagination information for appeal
 *   triage.
 * @path /discussionBoard/moderator/appeals
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search, filtering, and pagination information for appeal triage. */
    body: IDiscussionBoardAppeal.IRequest;
  };
  export type Body = IDiscussionBoardAppeal.IRequest;
  export type Response = IPageIDiscussionBoardAppeal;

  export const METADATA = {
    method: "PATCH",
    path: "/discussionBoard/moderator/appeals",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/moderator/appeals";
  export const random = (): IPageIDiscussionBoardAppeal =>
    typia.random<IPageIDiscussionBoardAppeal>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get details for a specific appeal by its ID.
 *
 * Retrieve appeal detail for the identified appeal. Returns all relevant
 * information for the appealâ€”including status, reason, timestamps, related
 * moderation/flag actions, and resolution comments. Permission logic ensures
 * that end users can retrieve their own appeals, while moderators/admins access
 * all details for their review purposes. The operation responds with full
 * detail for compliant auditing and user communications.
 *
 * @param props.connection
 * @param props.appealId Unique identifier of the appeal to retrieve.
 * @path /discussionBoard/moderator/appeals/:appealId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the appeal to retrieve. */
    appealId: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussionBoardAppeal;

  export const METADATA = {
    method: "GET",
    path: "/discussionBoard/moderator/appeals/:appealId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/moderator/appeals/${encodeURIComponent(props.appealId ?? "null")}`;
  export const random = (): IDiscussionBoardAppeal =>
    typia.random<IDiscussionBoardAppeal>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("appealId")(() => typia.assert(props.appealId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update or correct an existing appeal, reason, status, or linkage.
 *
 * Update an existing appeal against a moderation action or flag report. Allows
 * correction or addition of appeal narrative, adjust status (e.g.,
 * moderator/admin review), update resolution comments, or amend linked
 * moderation/flag report reference if appropriate. All updates are logged for
 * regulatory compliance and audit, and responses include the full updated
 * appeal record.
 *
 * Permission logic enforces that only the original appellant, a moderator, or
 * an admin may update an appeal in allowed workflow states. Attempts by
 * unauthorized or out-of-sequence actors will be denied and logged. This
 * ensures appeal integrity, audit trails, and structured workflow management
 * while retaining a complete history of modifications.
 *
 * @param props.connection
 * @param props.appealId Unique identifier for the appeal to update.
 * @param props.body Appeal updates or corrections, such as narrative, status,
 *   resolution comments, or linkage.
 * @path /discussionBoard/moderator/appeals/:appealId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier for the appeal to update. */
    appealId: string & tags.Format<"uuid">;

    /**
     * Appeal updates or corrections, such as narrative, status, resolution
     * comments, or linkage.
     */
    body: IDiscussionBoardAppeal.IUpdate;
  };
  export type Body = IDiscussionBoardAppeal.IUpdate;
  export type Response = IDiscussionBoardAppeal;

  export const METADATA = {
    method: "PUT",
    path: "/discussionBoard/moderator/appeals/:appealId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussionBoard/moderator/appeals/${encodeURIComponent(props.appealId ?? "null")}`;
  export const random = (): IDiscussionBoardAppeal =>
    typia.random<IDiscussionBoardAppeal>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("appealId")(() => typia.assert(props.appealId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft delete (retire) an appeal for compliance/audit purposes.
 *
 * Soft delete (retire) an appeal record. This marks the appeal as deleted (sets
 * deleted_at), rendering it inaccessible in public queries but maintaining the
 * record for audit/compliance. Permission logic enforces that only the
 * appellant, moderators, or admins may retire appeals, and only in allowed
 * workflow states (e.g., after closure/resolution or where personal data rights
 * permit). Attempts to retire ineligible appeals are denied and logged for
 * transparency.
 *
 * Soft-deletion is audit-safe, preserves data for regulatory and compliance
 * checks, and cannot be reversed without admin intervention. The API provides
 * confirmation and updated record of retirement state.
 *
 * @param props.connection
 * @param props.appealId Unique ID of the appeal to soft delete.
 * @path /discussionBoard/moderator/appeals/:appealId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<erase.Response> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique ID of the appeal to soft delete. */
    appealId: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussionBoardAppeal;

  export const METADATA = {
    method: "DELETE",
    path: "/discussionBoard/moderator/appeals/:appealId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/moderator/appeals/${encodeURIComponent(props.appealId ?? "null")}`;
  export const random = (): IDiscussionBoardAppeal =>
    typia.random<IDiscussionBoardAppeal>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("appealId")(() => typia.assert(props.appealId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
