import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussionBoardPollOption } from "../../../../../../structures/IDiscussionBoardPollOption";
import { IPageIDiscussionBoardPollOption } from "../../../../../../structures/IPageIDiscussionBoardPollOption";

/**
 * List and filter poll options for a poll on a post. Moderators and admins
 * only.
 *
 * Lists and filters poll options for a given pollId, supporting advanced
 * filters (sequence ordering, text match, state). Output is paginated for UI
 * consumption. Moderators and admins use this endpoint for routine audits or
 * quality reviews.
 *
 * Soft-deleted options are only included in the response when requested by an
 * admin role. Optionally, the endpoint allows sorting by sequence or updated
 * date. This endpoint complements single-poll metadata retrieval and poll
 * option CRUD operations.
 *
 * @param props.connection
 * @param props.postId Identifier of the parent post for the poll.
 * @param props.pollId Identifier of the poll whose options are to be listed.
 * @param props.body Search and pagination input for poll options attached to
 *   the given pollId.
 * @path /discussionBoard/moderator/posts/:postId/polls/:pollId/pollOptions
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Identifier of the parent post for the poll. */
    postId: string & tags.Format<"uuid">;

    /** Identifier of the poll whose options are to be listed. */
    pollId: string & tags.Format<"uuid">;

    /**
     * Search and pagination input for poll options attached to the given
     * pollId.
     */
    body: IDiscussionBoardPollOption.IRequest;
  };
  export type Body = IDiscussionBoardPollOption.IRequest;
  export type Response = IPageIDiscussionBoardPollOption.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/discussionBoard/moderator/posts/:postId/polls/:pollId/pollOptions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussionBoard/moderator/posts/${encodeURIComponent(props.postId ?? "null")}/polls/${encodeURIComponent(props.pollId ?? "null")}/pollOptions`;
  export const random = (): IPageIDiscussionBoardPollOption.ISummary =>
    typia.random<IPageIDiscussionBoardPollOption.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.param("pollId")(() => typia.assert(props.pollId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
