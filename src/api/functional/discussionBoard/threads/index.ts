import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussionBoardThread } from "../../../structures/IDiscussionBoardThread";
import { IPageIDiscussionBoardThread } from "../../../structures/IPageIDiscussionBoardThread";
export * as posts from "./posts";

/**
 * List/search discussion threads (discussion_board_threads) with advanced
 * filters.
 *
 * Get a filtered, paginated, and sorted list of discussion threads available on
 * the platform. This endpoint is public and accessible by any user (including
 * visitors and authenticated users), reflecting the public nature of most
 * discussion threads.
 *
 * Supports advanced filters (by title, status, date range, or creator ID),
 * keyword search (by title), pagination (page number/size), and sorting (by
 * created_at or updated_at). Related endpoints provide methods for thread
 * detail view, thread creation, or post-management within threads.
 *
 * The operation uses the discussion_board_threads model; fields include title,
 * status flags (locked/archived), and standard timestamps. Business rules
 * restrict display of soft-deleted or locked threads as per platform
 * guidelines. Results reflect the user's access level and platform-wide
 * discovery rules.
 *
 * @param props.connection
 * @param props.body Thread search, filter, pagination, and sort options.
 * @path /discussionBoard/threads
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Thread search, filter, pagination, and sort options. */
    body: IDiscussionBoardThread.IRequest;
  };
  export type Body = IDiscussionBoardThread.IRequest;
  export type Response = IPageIDiscussionBoardThread.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/discussionBoard/threads",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/threads";
  export const random = (): IPageIDiscussionBoardThread.ISummary =>
    typia.random<IPageIDiscussionBoardThread.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a single discussion thread by ID (discussion_board_threads).
 *
 * Retrieve a single discussion thread by its unique identifier. This endpoint
 * provides access to thread-level data, including core properties such as
 * title, locked/archived flags, creation time, and the creator's user ID, as
 * defined in the discussion_board_threads schema.
 *
 * Only threads that have not been soft-deleted (where deleted_at is null) are
 * accessible via this endpoint. The thread's associated metadata, such as the
 * number of related posts or posts themselves, are available through other
 * endpoints, but not included in this response by default.
 *
 * Permissions: All roles (visitor, user, moderator, admin) may access this
 * endpoint to display public thread information. Thread-level access control is
 * enforced elsewhere if thread privacy is enabled in the future. Review errors
 * include thread not found, deleted, or permission denied based on user
 * status.
 *
 * @param props.connection
 * @param props.threadId Unique identifier of the discussion thread to retrieve.
 * @path /discussionBoard/threads/:threadId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the discussion thread to retrieve. */
    threadId: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussionBoardThread;

  export const METADATA = {
    method: "GET",
    path: "/discussionBoard/threads/:threadId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/threads/${encodeURIComponent(props.threadId ?? "null")}`;
  export const random = (): IDiscussionBoardThread =>
    typia.random<IDiscussionBoardThread>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("threadId")(() => typia.assert(props.threadId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
