import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussionBoardComment } from "../../../../../structures/IDiscussionBoardComment";
import { IPageIDiscussionBoardComment } from "../../../../../structures/IPageIDiscussionBoardComment";

/**
 * Search and retrieve a paginated, filterable list of comments for a post.
 *
 * Obtain a filtered, paginated list of comments for a specific post within a
 * thread. This operation enables recursive comment structures up to five levels
 * deep. Supports advanced search by author, keyword, nesting level, date range,
 * and ordering. Excludes soft-deleted comments (those with deleted_at set)
 * unless the user is a moderator or admin. Pagination and sorting parameters
 * allow efficient display for posts with high comment volume. Includes support
 * for building hierarchical/collapsible comment trees in the client UI.
 * Requires appropriate permissions for viewing deleted or flagged comments.
 * Returns summary/comment list data optimized for threaded views.
 *
 * @param props.connection
 * @param props.threadId Unique identifier for the parent thread.
 * @param props.postId Unique identifier for the specific post within the
 *   thread.
 * @param props.body Filter and pagination criteria for retrieving comments.
 *   Includes search keyword, nesting level, author filtering, date range, and
 *   sort options.
 * @path /discussionBoard/threads/:threadId/posts/:postId/comments
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier for the parent thread. */
    threadId: string & tags.Format<"uuid">;

    /** Unique identifier for the specific post within the thread. */
    postId: string & tags.Format<"uuid">;

    /**
     * Filter and pagination criteria for retrieving comments. Includes
     * search keyword, nesting level, author filtering, date range, and sort
     * options.
     */
    body: IDiscussionBoardComment.IRequest;
  };
  export type Body = IDiscussionBoardComment.IRequest;
  export type Response = IPageIDiscussionBoardComment.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/discussionBoard/threads/:threadId/posts/:postId/comments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussionBoard/threads/${encodeURIComponent(props.threadId ?? "null")}/posts/${encodeURIComponent(props.postId ?? "null")}/comments`;
  export const random = (): IPageIDiscussionBoardComment.ISummary =>
    typia.random<IPageIDiscussionBoardComment.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("threadId")(() => typia.assert(props.threadId));
      assert.param("postId")(() => typia.assert(props.postId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get detailed information about a specific comment in a post/thread.
 *
 * Retrieve a single comment in detail given its unique identifiers within
 * thread and post. This operation provides client applications with the full
 * content, author, created timestamp, nesting level, and parent/child
 * structure. Only visible to non-privileged users if not soft-deleted.
 * Moderators and admins may access soft-deleted comments for review or audit.
 * Intended for comment detail views, direct comment links, moderator tools, and
 * compliance reviews. Errors include not found or insufficient permission for
 * blocked/deleted comments.
 *
 * @param props.connection
 * @param props.threadId Unique identifier for the parent thread.
 * @param props.postId Unique identifier for the parent post.
 * @param props.commentId Unique identifier of the target comment.
 * @path /discussionBoard/threads/:threadId/posts/:postId/comments/:commentId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier for the parent thread. */
    threadId: string & tags.Format<"uuid">;

    /** Unique identifier for the parent post. */
    postId: string & tags.Format<"uuid">;

    /** Unique identifier of the target comment. */
    commentId: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussionBoardComment;

  export const METADATA = {
    method: "GET",
    path: "/discussionBoard/threads/:threadId/posts/:postId/comments/:commentId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/threads/${encodeURIComponent(props.threadId ?? "null")}/posts/${encodeURIComponent(props.postId ?? "null")}/comments/${encodeURIComponent(props.commentId ?? "null")}`;
  export const random = (): IDiscussionBoardComment =>
    typia.random<IDiscussionBoardComment>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("threadId")(() => typia.assert(props.threadId));
      assert.param("postId")(() => typia.assert(props.postId));
      assert.param("commentId")(() => typia.assert(props.commentId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
