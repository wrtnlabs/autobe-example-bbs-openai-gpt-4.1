import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussionBoardPost } from "../../../../structures/IDiscussionBoardPost";
import { IPageIDiscussionBoardPost } from "../../../../structures/IPageIDiscussionBoardPost";
export * as comments from "./comments";
export * as attachments from "./attachments";

/**
 * List/paginate posts for a thread (discussion_board_posts).
 *
 * Retrieve a paginated and filtered list of discussion board posts for a given
 * thread. This endpoint allows searching posts by title, body, author, date
 * range, and sort order within the context of a single discussion thread.
 *
 * The returned list is suitable for displaying thread content with the ability
 * to paginate through posts. Only posts that have not been soft-deleted
 * (deleted_at is null) are returned. Users may view thread posts if they have
 * access to the parent thread; private threads, if implemented later, would
 * restrict access according to business rules.
 *
 * Search and filter options are provided via the request body schema
 * IDiscussionBoardPost.IRequest, and paginated summary results are returned for
 * efficient client consumption. Common uses include thread detail views and
 * topic exploration workflows.
 *
 * @param props.connection
 * @param props.threadId Identifier of the parent discussion thread.
 * @param props.body Search, filter, and pagination request for thread posts.
 * @path /discussionBoard/threads/:threadId/posts
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Identifier of the parent discussion thread. */
    threadId: string & tags.Format<"uuid">;

    /** Search, filter, and pagination request for thread posts. */
    body: IDiscussionBoardPost.IRequest;
  };
  export type Body = IDiscussionBoardPost.IRequest;
  export type Response = IPageIDiscussionBoardPost.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/discussionBoard/threads/:threadId/posts",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussionBoard/threads/${encodeURIComponent(props.threadId ?? "null")}/posts`;
  export const random = (): IPageIDiscussionBoardPost.ISummary =>
    typia.random<IPageIDiscussionBoardPost.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("threadId")(() => typia.assert(props.threadId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve a single post by ID within a thread (discussion_board_posts).
 *
 * Fetch a single post within a thread, identified by its unique post ID and
 * thread ID. This endpoint returns all relevant fields from the
 * discussion_board_posts schema, including title, body, author, locked status,
 * and timestamps.
 *
 * Only posts that are not soft-deleted (deleted_at is null) are accessible.
 * Post content is only available to users who have access to the parent thread
 * according to platform policy (all roles for public threads). Ownership and
 * moderator/admin permissions are considered for access control. Errors may
 * include not found, already deleted, or forbidden based on status.
 *
 * @param props.connection
 * @param props.threadId Unique identifier of the thread.
 * @param props.postId Unique identifier of the post.
 * @path /discussionBoard/threads/:threadId/posts/:postId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the thread. */
    threadId: string & tags.Format<"uuid">;

    /** Unique identifier of the post. */
    postId: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussionBoardPost;

  export const METADATA = {
    method: "GET",
    path: "/discussionBoard/threads/:threadId/posts/:postId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/threads/${encodeURIComponent(props.threadId ?? "null")}/posts/${encodeURIComponent(props.postId ?? "null")}`;
  export const random = (): IDiscussionBoardPost =>
    typia.random<IDiscussionBoardPost>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("threadId")(() => typia.assert(props.threadId));
      assert.param("postId")(() => typia.assert(props.postId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
