import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussionBoardFlagReport } from "../../../../structures/IDiscussionBoardFlagReport";

/**
 * Flag a post or comment by creating a new user content flag report.
 *
 * Create a new flag report in response to a user's request to flag content.
 * This operation requires the reporting user to provide a valid reason category
 * (e.g., 'abuse', 'spam', 'misinformation') and optionally include detailed
 * justification. The API ensures all necessary information is provided and
 * stored securely, allowing future moderation triage. Duplicate flag
 * submissions by the same user for the same content are prevented.
 *
 * Upon successful submission, the flag report is set as 'pending' and queued
 * for moderator review. If the flagged item has already exceeded a reporting
 * threshold, it may be automatically hidden from public view pending review.
 * The response includes the new flag report's unique identifier and associated
 * metadata for user feedback and moderation queueing.
 *
 * The endpoint enforces permissions to restrict flag submission to
 * authenticated users in good standing (not suspended or banned).
 *
 * @param props.connection
 * @param props.body Details of the flagged content, the reason, and any extra
 *   justification from the reporting user.
 * @path /discussionBoard/user/flagReports
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /**
     * Details of the flagged content, the reason, and any extra
     * justification from the reporting user.
     */
    body: IDiscussionBoardFlagReport.ICreate;
  };
  export type Body = IDiscussionBoardFlagReport.ICreate;
  export type Response = IDiscussionBoardFlagReport;

  export const METADATA = {
    method: "POST",
    path: "/discussionBoard/user/flagReports",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/user/flagReports";
  export const random = (): IDiscussionBoardFlagReport =>
    typia.random<IDiscussionBoardFlagReport>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
