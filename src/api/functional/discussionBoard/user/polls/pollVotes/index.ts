import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussionBoardPollVote } from "../../../../../structures/IDiscussionBoardPollVote";
import { IPageIDiscussionBoardPollVote } from "../../../../../structures/IPageIDiscussionBoardPollVote";

/**
 * Vote in a poll (single or multiple choice as poll allows).
 *
 * Enables authenticated users to submit their vote in a poll by selecting one
 * or more poll options. The operation enforces poll state (must be open), user
 * eligibility (one vote per option), and respects poll configuration
 * (single-choice or multi-choice). Votes can only be cast if the poll and
 * selected options are active and not marked as deleted.
 *
 * Duplicate voting, attempts to vote in closed or deleted polls, or invalid
 * option selection will result in explicit error responses. Successful vote
 * submission updates aggregate results and may trigger notification or audit
 * log updates per compliance rules. Voting is traceable to user for
 * transparency and abuse prevention. Multiple votes per poll/option submitted
 * in a batch may be supported for multi-choice polls.
 *
 * @param props.connection
 * @param props.pollId Unique identifier for the poll to vote in.
 * @param props.body Payload describing the vote(s): user-selected poll
 *   option(s), batch eligibility, and any relevant assignment data.
 * @path /discussionBoard/user/polls/:pollId/pollVotes
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Unique identifier for the poll to vote in. */
    pollId: string & tags.Format<"uuid">;

    /**
     * Payload describing the vote(s): user-selected poll option(s), batch
     * eligibility, and any relevant assignment data.
     */
    body: IDiscussionBoardPollVote.ICreate;
  };
  export type Body = IDiscussionBoardPollVote.ICreate;
  export type Response = IDiscussionBoardPollVote;

  export const METADATA = {
    method: "POST",
    path: "/discussionBoard/user/polls/:pollId/pollVotes",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussionBoard/user/polls/${encodeURIComponent(props.pollId ?? "null")}/pollVotes`;
  export const random = (): IDiscussionBoardPollVote =>
    typia.random<IDiscussionBoardPollVote>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("pollId")(() => typia.assert(props.pollId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Search and paginate poll votes for a given poll.
 *
 * Returns a paginated set of poll votes for the specified poll. Useful for poll
 * result tallies, identifying user voting patterns (where permitted), or for
 * situational analysis in audits. Supports advanced query filtering by user,
 * option, date, or vote status (where enabled). May be restricted: in-progress
 * polls may hide full results from regular users but show to
 * creators/moderators, while concluded polls usually expose full voting
 * statistics.
 *
 * Only users with authorization (poll creator, moderator/admin, or user who
 * participated) may see full details if the poll is not public. Pagination and
 * sorting are supported. All accesses are logged for compliance as voting data
 * may be sensitive.
 *
 * @param props.connection
 * @param props.pollId Unique identifier for the poll whose votes are being
 *   searched.
 * @param props.body Filtering, search, and pagination parameters for poll
 *   votes.
 * @path /discussionBoard/user/polls/:pollId/pollVotes
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Unique identifier for the poll whose votes are being searched. */
    pollId: string & tags.Format<"uuid">;

    /** Filtering, search, and pagination parameters for poll votes. */
    body: IDiscussionBoardPollVote.IRequest;
  };
  export type Body = IDiscussionBoardPollVote.IRequest;
  export type Response = IPageIDiscussionBoardPollVote;

  export const METADATA = {
    method: "PATCH",
    path: "/discussionBoard/user/polls/:pollId/pollVotes",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussionBoard/user/polls/${encodeURIComponent(props.pollId ?? "null")}/pollVotes`;
  export const random = (): IPageIDiscussionBoardPollVote =>
    typia.random<IPageIDiscussionBoardPollVote>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("pollId")(() => typia.assert(props.pollId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get user voting record for a poll by pollVoteId.
 *
 * Returns the detailed record for a specific poll vote associated with a poll.
 * Commonly used for moderation review or to confirm a user's participation/vote
 * in a poll. Access is strictly controlledâ€”only the owner of the vote,
 * moderators, or admins are permitted to retrieve this information unless poll
 * is configured for full transparency.
 *
 * Permission checks prevent users from accessing the votes of others unless
 * privileged. Attempting to access non-existent or soft-deleted votes results
 * in clear business errors with appropriate audit logging. Compliance rules may
 * require additional data suppression for certain privacy-sensitive polls.
 *
 * @param props.connection
 * @param props.pollId Unique identifier for the poll.
 * @param props.pollVoteId Unique identifier for the poll vote.
 * @path /discussionBoard/user/polls/:pollId/pollVotes/:pollVoteId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier for the poll. */
    pollId: string & tags.Format<"uuid">;

    /** Unique identifier for the poll vote. */
    pollVoteId: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussionBoardPollVote;

  export const METADATA = {
    method: "GET",
    path: "/discussionBoard/user/polls/:pollId/pollVotes/:pollVoteId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/user/polls/${encodeURIComponent(props.pollId ?? "null")}/pollVotes/${encodeURIComponent(props.pollVoteId ?? "null")}`;
  export const random = (): IDiscussionBoardPollVote =>
    typia.random<IDiscussionBoardPollVote>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("pollId")(() => typia.assert(props.pollId));
      assert.param("pollVoteId")(() => typia.assert(props.pollVoteId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a poll vote (moderator/admin override or correction).
 *
 * This operation updates the selection or meta-data of a specific poll
 * voteâ€”typically used in moderation cases where an incorrect vote or abuse is
 * detected. Only allowed for privileged users. Ensures that voting rules (such
 * as one vote per poll option per user) are preserved. Changes are tracked in
 * the audit log with old and new states recorded for traceability.
 *
 * Improper attempts (such as normal users updating votes after submission, or
 * votes in closed/deleted polls) result in explicit business errors. The
 * endpoint validates poll, vote, and user eligibility and ensures all
 * modifications are consistent with poll configuration policies.
 * Audit/compliance and notification hooks are triggered as appropriate.
 *
 * @param props.connection
 * @param props.pollId Unique identifier for the target poll.
 * @param props.pollVoteId Unique identifier of the poll vote.
 * @param props.body Fields to update in an existing poll vote. Only privileged
 *   users allowed.
 * @path /discussionBoard/user/polls/:pollId/pollVotes/:pollVoteId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier for the target poll. */
    pollId: string & tags.Format<"uuid">;

    /** Unique identifier of the poll vote. */
    pollVoteId: string & tags.Format<"uuid">;

    /**
     * Fields to update in an existing poll vote. Only privileged users
     * allowed.
     */
    body: IDiscussionBoardPollVote.IUpdate;
  };
  export type Body = IDiscussionBoardPollVote.IUpdate;
  export type Response = IDiscussionBoardPollVote;

  export const METADATA = {
    method: "PUT",
    path: "/discussionBoard/user/polls/:pollId/pollVotes/:pollVoteId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussionBoard/user/polls/${encodeURIComponent(props.pollId ?? "null")}/pollVotes/${encodeURIComponent(props.pollVoteId ?? "null")}`;
  export const random = (): IDiscussionBoardPollVote =>
    typia.random<IDiscussionBoardPollVote>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("pollId")(() => typia.assert(props.pollId));
      assert.param("pollVoteId")(() => typia.assert(props.pollVoteId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
