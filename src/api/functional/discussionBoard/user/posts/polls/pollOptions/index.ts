import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussionBoardPollOption } from "../../../../../../structures/IDiscussionBoardPollOption";

/**
 * Get a specific poll option under a poll attached to a post.
 *
 * This operation fetches the detailed information of a specific poll option
 * belonging to a poll under a given post. The endpoint requires valid post,
 * poll, and pollOption IDs and is used to retrieve option label, its sequence
 * order, and status for rendering poll voting interfaces, reviewing poll
 * setups, or displaying historical polls for audit or analytics.
 *
 * Access is restricted to authenticated users, and additional business logic
 * may filter results based on poll privacy or poll closure status. If a poll or
 * its parent post is deleted or inactive, this operation will respond with a
 * clear error, ensuring compliance with business rules. This endpoint supports
 * admin and moderator review for poll management and troubleshooting.
 *
 * @param props.connection
 * @param props.postId Unique identifier for the parent post.
 * @param props.pollId Unique identifier for the poll belonging to the post.
 * @param props.pollOptionId Unique identifier for the poll option to retrieve.
 * @path /discussionBoard/user/posts/:postId/polls/:pollId/pollOptions/:pollOptionId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier for the parent post. */
    postId: string & tags.Format<"uuid">;

    /** Unique identifier for the poll belonging to the post. */
    pollId: string & tags.Format<"uuid">;

    /** Unique identifier for the poll option to retrieve. */
    pollOptionId: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussionBoardPollOption;

  export const METADATA = {
    method: "GET",
    path: "/discussionBoard/user/posts/:postId/polls/:pollId/pollOptions/:pollOptionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/user/posts/${encodeURIComponent(props.postId ?? "null")}/polls/${encodeURIComponent(props.pollId ?? "null")}/pollOptions/${encodeURIComponent(props.pollOptionId ?? "null")}`;
  export const random = (): IDiscussionBoardPollOption =>
    typia.random<IDiscussionBoardPollOption>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.param("pollId")(() => typia.assert(props.pollId));
      assert.param("pollOptionId")(() => typia.assert(props.pollOptionId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a poll option in a poll under a post.
 *
 * This endpoint facilitates modification of an existing poll option's label
 * (option_text) or display sequence for a poll under a post. It is used to
 * correct typos, reorder options, or adapt options in active poll drafts.
 * Ownership and poll lifecycle rules are enforced: poll creators may update
 * before voting starts, while moderators and admins may update for policy
 * enforcement or correcting violations.
 *
 * Edits to options in closed or deleted polls are rejected. All updates are
 * tracked in the audit log for compliance review. If an update attempts to
 * duplicate a sequence or label within the poll, a business error is returned.
 *
 * @param props.connection
 * @param props.postId Unique identifier for the parent post.
 * @param props.pollId Unique identifier for the parent poll.
 * @param props.pollOptionId Unique identifier of the poll option to update.
 * @param props.body Fields to update for this poll option (label, sequence,
 *   etc).
 * @path /discussionBoard/user/posts/:postId/polls/:pollId/pollOptions/:pollOptionId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier for the parent post. */
    postId: string & tags.Format<"uuid">;

    /** Unique identifier for the parent poll. */
    pollId: string & tags.Format<"uuid">;

    /** Unique identifier of the poll option to update. */
    pollOptionId: string & tags.Format<"uuid">;

    /** Fields to update for this poll option (label, sequence, etc). */
    body: IDiscussionBoardPollOption.IUpdate;
  };
  export type Body = IDiscussionBoardPollOption.IUpdate;
  export type Response = IDiscussionBoardPollOption;

  export const METADATA = {
    method: "PUT",
    path: "/discussionBoard/user/posts/:postId/polls/:pollId/pollOptions/:pollOptionId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussionBoard/user/posts/${encodeURIComponent(props.postId ?? "null")}/polls/${encodeURIComponent(props.pollId ?? "null")}/pollOptions/${encodeURIComponent(props.pollOptionId ?? "null")}`;
  export const random = (): IDiscussionBoardPollOption =>
    typia.random<IDiscussionBoardPollOption>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.param("pollId")(() => typia.assert(props.pollId));
      assert.param("pollOptionId")(() => typia.assert(props.pollOptionId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft delete a poll option (remove from voting, keep for audit).
 *
 * Performs a soft deletion of a specific poll option. Once deleted, the option
 * becomes unavailable for user voting but remains in the database for
 * regulatory and audit purposes. Only authorized actors (poll creator,
 * moderator, or admin) may perform deletions. Poll status is checked: options
 * may only be deleted pre-poll open or by privileged roles post-open in the
 * case of abuse, error, or compliance needs.
 *
 * A deleted poll option cannot be restored via this API; a new option must be
 * created in its place. The endpoint audits all operations for compliance and
 * may trigger notifications depending on notification policy. Errors from
 * trying to delete options in active, locked, or non-existing polls will return
 * explicit business error codes.
 *
 * @param props.connection
 * @param props.postId Unique identifier for the parent post.
 * @param props.pollId Unique identifier for the parent poll.
 * @param props.pollOptionId Unique identifier for the poll option to be
 *   deleted.
 * @path /discussionBoard/user/posts/:postId/polls/:pollId/pollOptions/:pollOptionId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier for the parent post. */
    postId: string & tags.Format<"uuid">;

    /** Unique identifier for the parent poll. */
    pollId: string & tags.Format<"uuid">;

    /** Unique identifier for the poll option to be deleted. */
    pollOptionId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/discussionBoard/user/posts/:postId/polls/:pollId/pollOptions/:pollOptionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/user/posts/${encodeURIComponent(props.postId ?? "null")}/polls/${encodeURIComponent(props.pollId ?? "null")}/pollOptions/${encodeURIComponent(props.pollOptionId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.param("pollId")(() => typia.assert(props.pollId));
      assert.param("pollOptionId")(() => typia.assert(props.pollOptionId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Add a new option to a poll under a post.
 *
 * This endpoint allows eligible users to create a new option for a poll that
 * belongs to a specific post. The request requires poll and post context to
 * ensure referential integrity and proper sequence ordering. Validation ensures
 * that the new option label is not duplicated within the same poll, and that
 * the poll is not closed (no options may be added after closure).
 *
 * Only authenticated users with correct ownership or moderator/admin roles can
 * perform this action; users may only add options to polls they created or have
 * explicit rights to manage. Moderators and admins may override lifecycle
 * restrictions for extraordinary governance or compliance needs. If the poll is
 * deleted or closed, creation requests are rejected with a clear business
 * error.
 *
 * @param props.connection
 * @param props.postId Unique identifier for the parent post.
 * @param props.pollId Unique identifier for the poll.
 * @param props.body Information needed to create a new poll option, including
 *   label and optional sequence placement.
 * @path /discussionBoard/user/posts/:postId/polls/:pollId/pollOptions
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Unique identifier for the parent post. */
    postId: string & tags.Format<"uuid">;

    /** Unique identifier for the poll. */
    pollId: string & tags.Format<"uuid">;

    /**
     * Information needed to create a new poll option, including label and
     * optional sequence placement.
     */
    body: IDiscussionBoardPollOption.ICreate;
  };
  export type Body = IDiscussionBoardPollOption.ICreate;
  export type Response = IDiscussionBoardPollOption;

  export const METADATA = {
    method: "POST",
    path: "/discussionBoard/user/posts/:postId/polls/:pollId/pollOptions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussionBoard/user/posts/${encodeURIComponent(props.postId ?? "null")}/polls/${encodeURIComponent(props.pollId ?? "null")}/pollOptions`;
  export const random = (): IDiscussionBoardPollOption =>
    typia.random<IDiscussionBoardPollOption>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("postId")(() => typia.assert(props.postId));
      assert.param("pollId")(() => typia.assert(props.pollId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
