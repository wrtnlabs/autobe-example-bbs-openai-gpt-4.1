import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussionBoardThread } from "../../../../structures/IDiscussionBoardThread";
export * as posts from "./posts";

/**
 * Create a new discussion thread (discussion_board_threads).
 *
 * Create a new discussion thread under the current user's identity. This
 * endpoint accepts the thread input payload, including the thread's title, and
 * automatically populates creator, timestamps, and default status flags
 * (unlocked/unarchived). Only authenticated users (user, moderator, admin
 * roles) are allowed to create threads.
 *
 * Thread titles must be unique and non-empty per validation rules in the
 * discussion_board_threads schema. Attempts to create a thread with a duplicate
 * title will result in a validation error. Additional thread management
 * (locking/archiving) is performed through separate moderator/admin workflows.
 *
 * Business logic requires moderation or automatic flagging for prohibited
 * thread content or rapid, duplicate thread creation. Upon success, full thread
 * metadata including ID is returned. If a user is suspended or not verified,
 * creation is forbidden.
 *
 * @param props.connection
 * @param props.body Information for creating a new thread (title, etc.)
 * @path /discussionBoard/user/threads
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Information for creating a new thread (title, etc.) */
    body: IDiscussionBoardThread.ICreate;
  };
  export type Body = IDiscussionBoardThread.ICreate;
  export type Response = IDiscussionBoardThread;

  export const METADATA = {
    method: "POST",
    path: "/discussionBoard/user/threads",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/user/threads";
  export const random = (): IDiscussionBoardThread =>
    typia.random<IDiscussionBoardThread>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update an existing discussion thread by ID (discussion_board_threads).
 *
 * Update a thread's properties, such as title or status (lock/archive), by its
 * unique identifier. The request body should contain only the editable fields
 * permitted by system policy. Thread ownership is required unless the acting
 * user is a moderator or admin, who may update any thread per community or
 * moderation guidelines.
 *
 * All updates are tracked via the thread's updated_at field and may be
 * accompanied by audit log entries or edit history per compliance. Soft
 * deletion is not supported by this endpoint. Title changes are validated for
 * uniqueness.
 *
 * Errors include thread not found, permission denied, and validation failures.
 * Only authenticated users, moderators, or admins may perform updates.
 *
 * @param props.connection
 * @param props.threadId ID of the thread to update
 * @param props.body Update payload for the discussion thread. Only editable
 *   fields should be sent.
 * @path /discussionBoard/user/threads/:threadId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** ID of the thread to update */
    threadId: string & tags.Format<"uuid">;

    /**
     * Update payload for the discussion thread. Only editable fields should
     * be sent.
     */
    body: IDiscussionBoardThread.IUpdate;
  };
  export type Body = IDiscussionBoardThread.IUpdate;
  export type Response = IDiscussionBoardThread;

  export const METADATA = {
    method: "PUT",
    path: "/discussionBoard/user/threads/:threadId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussionBoard/user/threads/${encodeURIComponent(props.threadId ?? "null")}`;
  export const random = (): IDiscussionBoardThread =>
    typia.random<IDiscussionBoardThread>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("threadId")(() => typia.assert(props.threadId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft delete a discussion thread by ID (discussion_board_threads).
 *
 * Soft delete a discussion thread so that it is no longer visible to regular
 * users but is retained for compliance and potential restoration by moderators
 * or admins. The endpoint sets the deleted_at timestamp for the thread,
 * adhering to platform policy for logical deletion.
 *
 * Only authenticated users, who are either the thread owners or possess
 * moderator/admin privileges, may perform this action. Regular users cannot
 * delete threads they do not own. Deletion actions are logged for audit
 * purposes, ensuring traceability per compliance requirements. Physically
 * removed threads are only supported by admin workflow, not by this endpoint.
 *
 * Expected errors include thread not found, permission denied, or already
 * deleted. No response body is returned on success; relevant status and
 * timestamp can be inferred elsewhere.
 *
 * @param props.connection
 * @param props.threadId Unique identifier of the thread to be soft deleted.
 * @path /discussionBoard/user/threads/:threadId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the thread to be soft deleted. */
    threadId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/discussionBoard/user/threads/:threadId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/user/threads/${encodeURIComponent(props.threadId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("threadId")(() => typia.assert(props.threadId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
