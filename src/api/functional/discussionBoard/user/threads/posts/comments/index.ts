import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussionBoardComment } from "../../../../../../structures/IDiscussionBoardComment";
export * as attachments from "./attachments";
export * as replies from "./replies";

/**
 * Create a new comment on a post in a thread.
 *
 * Create a new comment under a post in a thread. This operation enforces
 * business rules such as maximum comment length and nesting level, validates
 * presence of mandatory fields, and updates indexing structures for future
 * retrieval. It supports both root comments and replies. The API triggers
 * business flows for notifications and subscription updates as appropriate.
 * Only active (non-suspended) authenticated users may create comments. Rejected
 * attempts for invalid input or permission results in error responses. The
 * newly created comment object, including all meta fields, is returned on
 * success.
 *
 * @param props.connection
 * @param props.threadId Unique identifier for the parent thread.
 * @param props.postId Unique identifier for the parent post.
 * @param props.body Information required to create a new comment, including
 *   parent id, body, and nesting.
 * @path /discussionBoard/user/threads/:threadId/posts/:postId/comments
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Unique identifier for the parent thread. */
    threadId: string & tags.Format<"uuid">;

    /** Unique identifier for the parent post. */
    postId: string & tags.Format<"uuid">;

    /**
     * Information required to create a new comment, including parent id,
     * body, and nesting.
     */
    body: IDiscussionBoardComment.ICreate;
  };
  export type Body = IDiscussionBoardComment.ICreate;
  export type Response = IDiscussionBoardComment;

  export const METADATA = {
    method: "POST",
    path: "/discussionBoard/user/threads/:threadId/posts/:postId/comments",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussionBoard/user/threads/${encodeURIComponent(props.threadId ?? "null")}/posts/${encodeURIComponent(props.postId ?? "null")}/comments`;
  export const random = (): IDiscussionBoardComment =>
    typia.random<IDiscussionBoardComment>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("threadId")(() => typia.assert(props.threadId));
      assert.param("postId")(() => typia.assert(props.postId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update the content or metadata of a specific comment.
 *
 * Update an existing comment in a thread's post. The operation accepts new
 * comment content and optionally metadata fields subject to validation. Checks
 * for edit privilege: only the comment author or users with escalated
 * permissions (moderator/admin) may edit. All edits append an edit history
 * entry for audit trails. Attempts to update deleted, locked, or non-existent
 * comments result in errors. Moderators and admins can override restricted
 * update windows. Success returns detailed updated comment data.
 *
 * @param props.connection
 * @param props.threadId Unique identifier of the parent thread.
 * @param props.postId Unique identifier of the parent post.
 * @param props.commentId Unique identifier of the comment to update.
 * @param props.body New content and/or metadata for updating the comment.
 * @path /discussionBoard/user/threads/:threadId/posts/:postId/comments/:commentId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique identifier of the parent thread. */
    threadId: string & tags.Format<"uuid">;

    /** Unique identifier of the parent post. */
    postId: string & tags.Format<"uuid">;

    /** Unique identifier of the comment to update. */
    commentId: string & tags.Format<"uuid">;

    /** New content and/or metadata for updating the comment. */
    body: IDiscussionBoardComment.IUpdate;
  };
  export type Body = IDiscussionBoardComment.IUpdate;
  export type Response = IDiscussionBoardComment;

  export const METADATA = {
    method: "PUT",
    path: "/discussionBoard/user/threads/:threadId/posts/:postId/comments/:commentId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussionBoard/user/threads/${encodeURIComponent(props.threadId ?? "null")}/posts/${encodeURIComponent(props.postId ?? "null")}/comments/${encodeURIComponent(props.commentId ?? "null")}`;
  export const random = (): IDiscussionBoardComment =>
    typia.random<IDiscussionBoardComment>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("threadId")(() => typia.assert(props.threadId));
      assert.param("postId")(() => typia.assert(props.postId));
      assert.param("commentId")(() => typia.assert(props.commentId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft delete a specific comment in a thread's post by setting its deleted_at
 * timestamp.
 *
 * Soft delete a specific comment within a post. This operation, available to
 * the comment author, moderator, or admin, sets the comment's deleted_at
 * timestamp. The comment is no longer returned in public results but remains in
 * the database for compliance, moderation, and possible restoration. This
 * preserves auditability and allows for regulatory response. Associated child
 * comments, attachments, and votes are preserved but subject to parent
 * visibility logic. The API returns 403 on insufficient permissions and 404 for
 * already deleted or non-existent resources. The operation supports business
 * rules on user-driven and privileged deletions, aligned with role-based
 * access.
 *
 * @param props.connection
 * @param props.threadId Unique identifier for the parent thread.
 * @param props.postId Unique identifier for the parent post.
 * @param props.commentId Unique identifier for the comment to be deleted.
 * @path /discussionBoard/user/threads/:threadId/posts/:postId/comments/:commentId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier for the parent thread. */
    threadId: string & tags.Format<"uuid">;

    /** Unique identifier for the parent post. */
    postId: string & tags.Format<"uuid">;

    /** Unique identifier for the comment to be deleted. */
    commentId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/discussionBoard/user/threads/:threadId/posts/:postId/comments/:commentId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/user/threads/${encodeURIComponent(props.threadId ?? "null")}/posts/${encodeURIComponent(props.postId ?? "null")}/comments/${encodeURIComponent(props.commentId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("threadId")(() => typia.assert(props.threadId));
      assert.param("postId")(() => typia.assert(props.postId));
      assert.param("commentId")(() => typia.assert(props.commentId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
