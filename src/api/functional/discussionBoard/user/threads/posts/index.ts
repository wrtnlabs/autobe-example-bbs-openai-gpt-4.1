import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussionBoardPost } from "../../../../../structures/IDiscussionBoardPost";
export * as comments from "./comments";
export * as attachments from "./attachments";

/**
 * Create a new post in a thread (discussion_board_posts).
 *
 * Create a new post as part of a specified discussion thread. The request body
 * should include required fields such as title and body; author/user context
 * and timestamps are set by the backend. Newly created posts are unlocked by
 * default and attributed to the authenticated user.
 *
 * This operation supports only authenticated users (roles: user, moderator,
 * admin). Access is forbidden if the target thread does not exist, is locked,
 * or the user is suspended or not verified. Duplicate post titles within the
 * same thread are rejected according to business and schema rules. Moderation
 * queues, flagging, and post lifecycle management are handled elsewhere. Upon
 * success, full post details are returned.
 *
 * @param props.connection
 * @param props.threadId Identifier of the thread in which to create the post.
 * @param props.body Fields for creating a new post in the thread.
 * @path /discussionBoard/user/threads/:threadId/posts
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function create(
  connection: IConnection,
  props: create.Props,
): Promise<create.Response> {
  return true === connection.simulate
    ? create.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace create {
  export type Props = {
    /** Identifier of the thread in which to create the post. */
    threadId: string & tags.Format<"uuid">;

    /** Fields for creating a new post in the thread. */
    body: IDiscussionBoardPost.ICreate;
  };
  export type Body = IDiscussionBoardPost.ICreate;
  export type Response = IDiscussionBoardPost;

  export const METADATA = {
    method: "POST",
    path: "/discussionBoard/user/threads/:threadId/posts",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussionBoard/user/threads/${encodeURIComponent(props.threadId ?? "null")}/posts`;
  export const random = (): IDiscussionBoardPost =>
    typia.random<IDiscussionBoardPost>();
  export const simulate = (
    connection: IConnection,
    props: create.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: create.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("threadId")(() => typia.assert(props.threadId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update a post in a thread (discussion_board_posts).
 *
 * Update an existing post identified by both thread and post ID. Only permitted
 * fields as defined in the post update schema (title, body, lock status) may be
 * altered. The system validates that the acting user is either the post owner
 * or has moderator/admin privileges. Title must remain unique within the
 * thread.
 *
 * On update, the system records the modification in both the main post record
 * (updated_at) and in the edit histories table for compliance. Posts that are
 * locked or soft-deleted cannot be updated except by elevated roles. Errors
 * include not found, forbidden, or validation failures.
 *
 * @param props.connection
 * @param props.threadId ID of the thread containing the post.
 * @param props.postId Unique ID of the post to update.
 * @param props.body Fields to update on the post.
 * @path /discussionBoard/user/threads/:threadId/posts/:postId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** ID of the thread containing the post. */
    threadId: string & tags.Format<"uuid">;

    /** Unique ID of the post to update. */
    postId: string & tags.Format<"uuid">;

    /** Fields to update on the post. */
    body: IDiscussionBoardPost.IUpdate;
  };
  export type Body = IDiscussionBoardPost.IUpdate;
  export type Response = IDiscussionBoardPost;

  export const METADATA = {
    method: "PUT",
    path: "/discussionBoard/user/threads/:threadId/posts/:postId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussionBoard/user/threads/${encodeURIComponent(props.threadId ?? "null")}/posts/${encodeURIComponent(props.postId ?? "null")}`;
  export const random = (): IDiscussionBoardPost =>
    typia.random<IDiscussionBoardPost>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("threadId")(() => typia.assert(props.threadId));
      assert.param("postId")(() => typia.assert(props.postId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft delete a specific post in a thread by setting its deleted_at timestamp.
 *
 * Delete a specific post within a thread by performing a soft deletion. This
 * API sets the post's deleted_at timestamp, effectively hiding the post from
 * standard user access while retaining it for compliance, moderation, or later
 * auditing. Only authorized users (the post author, moderators, or admins) may
 * invoke this operation. The operation does not erase associated comments or
 * attachments, but those may become hidden through parent soft-deletion logic.
 * A successful soft delete allows the forum to maintain audit trails and
 * supports moderator review in case of disputes or appeals. If inappropriate
 * users attempt deletion, an explicit permission denied error will be returned.
 * Attempting to delete a non-existent or already-deleted post results in a 404
 * error with appropriate messaging.
 *
 * @param props.connection
 * @param props.threadId Unique identifier for the parent discussion thread.
 * @param props.postId Unique identifier for the target post within the thread.
 * @path /discussionBoard/user/threads/:threadId/posts/:postId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier for the parent discussion thread. */
    threadId: string & tags.Format<"uuid">;

    /** Unique identifier for the target post within the thread. */
    postId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/discussionBoard/user/threads/:threadId/posts/:postId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/user/threads/${encodeURIComponent(props.threadId ?? "null")}/posts/${encodeURIComponent(props.postId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("threadId")(() => typia.assert(props.threadId));
      assert.param("postId")(() => typia.assert(props.postId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
