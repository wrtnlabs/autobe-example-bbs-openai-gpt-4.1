import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussionBoardNotificationSubscription } from "../../../../structures/IDiscussionBoardNotificationSubscription";
import { IPageIDiscussionBoardNotificationSubscription } from "../../../../structures/IPageIDiscussionBoardNotificationSubscription";

/**
 * Get a paginated list of the user's notification subscriptions.
 *
 * Retrieve a list of notification subscription records for the current
 * authenticated user. This allows users to view and audit which discussions,
 * categories, or entities they are currently following and receiving
 * notifications for, based on preference.
 *
 * The response contains paginated results, supports searching/filtering by
 * notification target type (post, thread, category, tag), and enables
 * inspection of subscription creation or deleted/unsubscribed state for
 * compliance.
 *
 * Security checks ensure that only the requesting user's records are returned,
 * protecting privacy and complying with business rules for user-managed
 * notification subscriptions. Unauthenticated users are not permitted to access
 * this endpoint.
 *
 * @param props.connection
 * @param props.body Search/filter and paging criteria for subscription query.
 * @path /discussionBoard/user/notificationSubscriptions
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /** Search/filter and paging criteria for subscription query. */
    body: IDiscussionBoardNotificationSubscription.IRequest;
  };
  export type Body = IDiscussionBoardNotificationSubscription.IRequest;
  export type Response = IPageIDiscussionBoardNotificationSubscription.ISummary;

  export const METADATA = {
    method: "PATCH",
    path: "/discussionBoard/user/notificationSubscriptions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/user/notificationSubscriptions";
  export const random =
    (): IPageIDiscussionBoardNotificationSubscription.ISummary =>
      typia.random<IPageIDiscussionBoardNotificationSubscription.ISummary>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Get detailed information for a single notification subscription by id.
 *
 * Fetch details about a specific notification subscription by its unique id.
 * Users can inspect which thread, post, category, or tag they are watching and
 * audit its creation time, target type/id, and active/deleted state.
 *
 * The operation verifies that the subscription belongs to the requesting user.
 * Security rules deny access to resources not owned by the user, supporting
 * privacy requirements and compliance. This is typically used when a client
 * drills down from a subscription list to view details about one subscription.
 *
 * @param props.connection
 * @param props.subscriptionId Unique notification subscription id (UUID) to
 *   retrieve.
 * @path /discussionBoard/user/notificationSubscriptions/:subscriptionId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique notification subscription id (UUID) to retrieve. */
    subscriptionId: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussionBoardNotificationSubscription;

  export const METADATA = {
    method: "GET",
    path: "/discussionBoard/user/notificationSubscriptions/:subscriptionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/user/notificationSubscriptions/${encodeURIComponent(props.subscriptionId ?? "null")}`;
  export const random = (): IDiscussionBoardNotificationSubscription =>
    typia.random<IDiscussionBoardNotificationSubscription>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("subscriptionId")(() => typia.assert(props.subscriptionId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update the properties of a user's notification subscription by id.
 *
 * Update a specific notification subscription by id for the authenticated user.
 *
 * This enables users to unsubscribe, change which specific resource (post,
 * category, etc.) they are following, or otherwise modify their subscription
 * state. Only the subscription record belonging to the requesting user can be
 * modified. Attempts to update others' subscriptions are denied.
 *
 * Validation rules enforce proper resource existence, correct target types, and
 * compliance with unique constraints per user. Soft deletion is supported by
 * setting deleted_at. The endpoint also updates the record's timestamp.
 *
 * @param props.connection
 * @param props.subscriptionId Unique id for the notification subscription to
 *   update.
 * @param props.body Fields to update on the notification subscription.
 * @path /discussionBoard/user/notificationSubscriptions/:subscriptionId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Unique id for the notification subscription to update. */
    subscriptionId: string & tags.Format<"uuid">;

    /** Fields to update on the notification subscription. */
    body: IDiscussionBoardNotificationSubscription.IUpdate;
  };
  export type Body = IDiscussionBoardNotificationSubscription.IUpdate;
  export type Response = IDiscussionBoardNotificationSubscription;

  export const METADATA = {
    method: "PUT",
    path: "/discussionBoard/user/notificationSubscriptions/:subscriptionId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussionBoard/user/notificationSubscriptions/${encodeURIComponent(props.subscriptionId ?? "null")}`;
  export const random = (): IDiscussionBoardNotificationSubscription =>
    typia.random<IDiscussionBoardNotificationSubscription>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("subscriptionId")(() => typia.assert(props.subscriptionId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Soft delete (unsubscribe) a user's notification subscription by id.
 *
 * Unsubscribe or remove a notification subscription by marking it as deleted
 * using the deleted_at field. This hides the subscription from a user's active
 * subscription list but does not permanently erase it from the system,
 * supporting audit/compliance policy.
 *
 * Only records belonging to the requesting authenticated user can be deleted
 * through this endpoint. Attempts to delete other users' subscriptions are
 * forbidden. If the subscription is already deleted or does not exist, a
 * descriptive error is returned.
 *
 * @param props.connection
 * @param props.subscriptionId The unique id of the notification subscription to
 *   be deleted (soft deleted).
 * @path /discussionBoard/user/notificationSubscriptions/:subscriptionId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /**
     * The unique id of the notification subscription to be deleted (soft
     * deleted).
     */
    subscriptionId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/discussionBoard/user/notificationSubscriptions/:subscriptionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/user/notificationSubscriptions/${encodeURIComponent(props.subscriptionId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("subscriptionId")(() => typia.assert(props.subscriptionId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
