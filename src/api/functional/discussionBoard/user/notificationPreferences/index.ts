import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia, { tags } from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussionBoardNotificationPreference } from "../../../../structures/IDiscussionBoardNotificationPreference";
import { IPageIDiscussionBoardNotificationPreference } from "../../../../structures/IPageIDiscussionBoardNotificationPreference";

/**
 * List and filter notification preferences for the authenticated user.
 *
 * Allows the authenticated user to list and filter their notification channel
 * preferences. Users can search preferences by delivery type (in-app, email,
 * push), frequency, and categories. Responses include pertinent details, such
 * as mute settings and coverage intervals. This enables users to optimize
 * notification delivery across all categories and event types, ensuring
 * alignment with privacy and engagement goals.
 *
 * Access is always limited to the requesting user's own preferences; security
 * checks prevent access to other users' preferences. This operation is
 * typically used for displaying in profile, account, or notification settings
 * screens.
 *
 * Potential error cases include searching for preferences before any are
 * defined, attempting to access another user's preferences, or providing
 * invalid pagination/filter parameters.
 *
 * @param props.connection
 * @param props.body Search, filter, or pagination options for listing
 *   notification preferences.
 * @path /discussionBoard/user/notificationPreferences
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function index(
  connection: IConnection,
  props: index.Props,
): Promise<index.Response> {
  return true === connection.simulate
    ? index.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
          status: null,
        },
        props.body,
      );
}
export namespace index {
  export type Props = {
    /**
     * Search, filter, or pagination options for listing notification
     * preferences.
     */
    body: IDiscussionBoardNotificationPreference.IRequest;
  };
  export type Body = IDiscussionBoardNotificationPreference.IRequest;
  export type Response = IPageIDiscussionBoardNotificationPreference;

  export const METADATA = {
    method: "PATCH",
    path: "/discussionBoard/user/notificationPreferences",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/discussionBoard/user/notificationPreferences";
  export const random = (): IPageIDiscussionBoardNotificationPreference =>
    typia.random<IPageIDiscussionBoardNotificationPreference>();
  export const simulate = (
    connection: IConnection,
    props: index.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: index.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Retrieve details of notification preference by preferenceId for the current
 * user.
 *
 * Allows an authenticated user to retrieve the full details of a single
 * notification preference configuration. The operation only permits access to
 * preferences owned by the requesting user. Results include active channel
 * selections (in-app, email, push), notification frequency, mute interval, and
 * covered event categories.
 *
 * Strong ownership rules and security checks are enforced to prevent access to
 * another user's preferences. Error responses are returned when the specified
 * record does not exist, has been deleted, or does not belong to the requesting
 * user.
 *
 * @param props.connection
 * @param props.preferenceId Unique identifier of the notification preference
 *   record.
 * @path /discussionBoard/user/notificationPreferences/:preferenceId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function at(
  connection: IConnection,
  props: at.Props,
): Promise<at.Response> {
  return true === connection.simulate
    ? at.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...at.METADATA,
          path: at.path(props),
          status: null,
        },
      );
}
export namespace at {
  export type Props = {
    /** Unique identifier of the notification preference record. */
    preferenceId: string & tags.Format<"uuid">;
  };
  export type Response = IDiscussionBoardNotificationPreference;

  export const METADATA = {
    method: "GET",
    path: "/discussionBoard/user/notificationPreferences/:preferenceId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/user/notificationPreferences/${encodeURIComponent(props.preferenceId ?? "null")}`;
  export const random = (): IDiscussionBoardNotificationPreference =>
    typia.random<IDiscussionBoardNotificationPreference>();
  export const simulate = (
    connection: IConnection,
    props: at.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: at.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("preferenceId")(() => typia.assert(props.preferenceId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Update the configuration of a notification preference record by preferenceId.
 *
 * This endpoint enables authenticated users to update their notification
 * preference configurations. Supported updates include changing which channels
 * are enabled (such as toggling email, push, or in-app notifications),
 * adjusting the delivery frequency, choosing applicable categories/events, or
 * setting a new muted interval. This facilitates personalized notification
 * control for each user.
 *
 * Ownership and authorization are strictly enforced. Attempts to update another
 * user's notification preferences or settings not owned by the requester will
 * fail with a precise business error. The update is reflected immediately and
 * is available in subsequent operations to fetch or list preferences.
 *
 * @param props.connection
 * @param props.preferenceId Identifier of the notification preference to
 *   update.
 * @param props.body Updated configuration details for the notification
 *   preference.
 * @path /discussionBoard/user/notificationPreferences/:preferenceId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function update(
  connection: IConnection,
  props: update.Props,
): Promise<update.Response> {
  return true === connection.simulate
    ? update.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(props),
          status: null,
        },
        props.body,
      );
}
export namespace update {
  export type Props = {
    /** Identifier of the notification preference to update. */
    preferenceId: string & tags.Format<"uuid">;

    /** Updated configuration details for the notification preference. */
    body: IDiscussionBoardNotificationPreference.IUpdate;
  };
  export type Body = IDiscussionBoardNotificationPreference.IUpdate;
  export type Response = IDiscussionBoardNotificationPreference;

  export const METADATA = {
    method: "PUT",
    path: "/discussionBoard/user/notificationPreferences/:preferenceId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Omit<Props, "body">) =>
    `/discussionBoard/user/notificationPreferences/${encodeURIComponent(props.preferenceId ?? "null")}`;
  export const random = (): IDiscussionBoardNotificationPreference =>
    typia.random<IDiscussionBoardNotificationPreference>();
  export const simulate = (
    connection: IConnection,
    props: update.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: update.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("preferenceId")(() => typia.assert(props.preferenceId));
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Delete a notification preference configuration by its identifier for the
 * authenticated user.
 *
 * Enables authenticated users to delete (hard-delete) their notification
 * preference configuration. This operation is irreversible and results in the
 * removal of the preferences from the data store. Ownership checks ensure that
 * only the requesting user may delete their own preference record. After
 * deletion, system or default notification settings apply for the affected
 * notification categories or channels.
 *
 * Related operations include listing preferences, viewing by ID, and updating
 * (PUT). Deletion attempts for non-existent or non-owned preferences are denied
 * with explicit business error responses. Once deleted, preference
 * configurations cannot be restored.
 *
 * @param props.connection
 * @param props.preferenceId Unique identifier of the notification preference to
 *   delete.
 * @path /discussionBoard/user/notificationPreferences/:preferenceId
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function erase(
  connection: IConnection,
  props: erase.Props,
): Promise<void> {
  return true === connection.simulate
    ? erase.simulate(connection, props)
    : await PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...erase.METADATA,
          path: erase.path(props),
          status: null,
        },
      );
}
export namespace erase {
  export type Props = {
    /** Unique identifier of the notification preference to delete. */
    preferenceId: string & tags.Format<"uuid">;
  };

  export const METADATA = {
    method: "DELETE",
    path: "/discussionBoard/user/notificationPreferences/:preferenceId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = (props: Props) =>
    `/discussionBoard/user/notificationPreferences/${encodeURIComponent(props.preferenceId ?? "null")}`;
  export const random = (): void => typia.random<void>();
  export const simulate = (
    connection: IConnection,
    props: erase.Props,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: erase.path(props),
      contentType: "application/json",
    });
    try {
      assert.param("preferenceId")(() => typia.assert(props.preferenceId));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
