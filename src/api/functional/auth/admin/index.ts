import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussionBoardAdmin } from "../../../structures/IDiscussionBoardAdmin";

/**
 * Register a new administrator account in the discussion_board_admins table.
 *
 * This API operation is used for the registration of administrator accounts in
 * the discussionBoard system. Administrators are managed in the
 * `discussion_board_admins` table, which stores attributes such as `user_id`,
 * `assigned_at`, and `is_active`. The registration process requires a valid and
 * unique `user_id` referencing an already email-verified user in the
 * `discussion_board_users` table.
 *
 * Upon successful administrator registration, a new record is created in
 * `discussion_board_admins`, with `assigned_at` set to the current time and
 * `is_active` marked as true unless explicitly suspended. An audit log entry is
 * recorded in `discussion_board_audit_logs` with action_type
 * `admin_registration` to ensure traceability and compliance.
 *
 * The system enforces that only authorized system actors may perform admin
 * registration; public users cannot directly self-register as administrators.
 * This operation interacts with the platform's verification workflow by
 * enforcing email verification, and with compliance flows for root admin
 * approval.
 *
 * If input is invalid (e.g., duplicate admin for same user, user not verified,
 * improper authority), a detailed error is returned and the registration is not
 * persisted. This is designed to align with high-security requirements,
 * including explicit admin assignment/revocation events and retention of audit
 * logs for compliance.
 *
 * This operation is typically followed by the admin login process, after which
 * JWT tokens are issued for API access.
 *
 * @param props.connection
 * @param props.body Admin registration payload (must include reference to
 *   already verified user ID).
 * @setHeader token.access Authorization
 *
 * @path /auth/admin/join
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function join(
  connection: IConnection,
  props: join.Props,
): Promise<join.Response> {
  const output: join.Response =
    true === connection.simulate
      ? join.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...join.METADATA,
            path: join.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace join {
  export type Props = {
    /**
     * Admin registration payload (must include reference to already
     * verified user ID).
     */
    body: IDiscussionBoardAdmin.ICreate;
  };
  export type Body = IDiscussionBoardAdmin.ICreate;
  export type Response = IDiscussionBoardAdmin.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/admin/join",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/admin/join";
  export const random = (): IDiscussionBoardAdmin.IAuthorized =>
    typia.random<IDiscussionBoardAdmin.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: join.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: join.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Authenticate and login an active admin account for the
 * discussion_board_admins table.
 *
 * This operation handles admin authentication in the discussionBoard platform.
 * It validates admin login credentials by matching the provided email and
 * password (checked as a secure hash against the `password_hash` field in
 * `discussion_board_users`).
 *
 * Additionally, it ensures the user has an active, valid administrator role by
 * referencing `discussion_board_admins` (`is_active`: true, `revoked_at`: null,
 * and not soft-deleted). Email verification is enforced via the `is_verified`
 * flag in `discussion_board_users`, and lockout is implemented for suspended
 * accounts based on `is_suspended` and `suspended_until`.
 *
 * Upon successful authentication, this operation issues new JWT access and
 * refresh tokens and updates the `last_login_at` value for the admin user. All
 * login attempts, both successful and failed, are logged into
 * `discussion_board_audit_logs` under the `admin_login` action_type for
 * compliance and auditing. This endpoint supports rate limiting and explicit
 * error codes for invalid credentials, suspension, or failed login attempts.
 *
 * This operation is only available to previously assigned, verified admin
 * accounts. Admins must subsequently use the issued JWT tokens to access
 * restricted endpoints.
 *
 * @param props.connection
 * @param props.body Admin login payload (typically includes email and
 *   password).
 * @setHeader token.access Authorization
 *
 * @path /auth/admin/login
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function login(
  connection: IConnection,
  props: login.Props,
): Promise<login.Response> {
  const output: login.Response =
    true === connection.simulate
      ? login.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...login.METADATA,
            path: login.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace login {
  export type Props = {
    /** Admin login payload (typically includes email and password). */
    body: IDiscussionBoardAdmin.ILogin;
  };
  export type Body = IDiscussionBoardAdmin.ILogin;
  export type Response = IDiscussionBoardAdmin.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/admin/login",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/admin/login";
  export const random = (): IDiscussionBoardAdmin.IAuthorized =>
    typia.random<IDiscussionBoardAdmin.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: login.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: login.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Refresh admin JWT access and refresh tokens using a valid refresh token for
 * session management.
 *
 * This operation issues a new JWT access token for an administrator, exchanging
 * a valid, non-expired refresh token (tracked in
 * `discussion_board_refresh_tokens`, `revoked_at` is null, `expires_at` is in
 * the future) for new tokens. It ensures the admin is active and not currently
 * suspended (using `is_active`, `revoked_at`, and `suspended_until` from
 * `discussion_board_admins` and `discussion_board_users`).
 *
 * Upon a valid refresh, this endpoint rotates refresh tokens and issues new
 * authentication credentials for continued API access. All usage is logged to
 * the `discussion_board_audit_logs` table under `admin_refresh` for audit and
 * regulatory compliance. If the refresh token is expired, revoked, or invalid,
 * a detailed error response is returned.
 *
 * This endpoint underpins the stateless session management system and is
 * critical for securely extending admin access. Tokens must be managed per
 * device/session, and this operation guarantees that existing refresh tokens
 * are correctly rotated or invalidated according to compliance rules.
 *
 * @param props.connection
 * @param props.body Refresh token request payload for admin session token
 *   renewal.
 * @setHeader token.access Authorization
 *
 * @path /auth/admin/refresh
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function refresh(
  connection: IConnection,
  props: refresh.Props,
): Promise<refresh.Response> {
  const output: refresh.Response =
    true === connection.simulate
      ? refresh.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...refresh.METADATA,
            path: refresh.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace refresh {
  export type Props = {
    /** Refresh token request payload for admin session token renewal. */
    body: IDiscussionBoardAdmin.IRefresh;
  };
  export type Body = IDiscussionBoardAdmin.IRefresh;
  export type Response = IDiscussionBoardAdmin.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/admin/refresh",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/admin/refresh";
  export const random = (): IDiscussionBoardAdmin.IAuthorized =>
    typia.random<IDiscussionBoardAdmin.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: refresh.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: refresh.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
