import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussBoardMember } from "../../../structures/IDiscussBoardMember";

/**
 * Register a new discussBoard member account (discuss_board_user_accounts,
 * discuss_board_members, discuss_board_consent_records) and issue JWT tokens.
 *
 * This API operation enables guest users to register as members of the
 * discussBoard platform by creating an account with a unique email, a securely
 * hashed password, and explicit agreement to platform policies (terms of
 * service and privacy policy), as described in the discuss_board_user_accounts,
 * discuss_board_members, and discuss_board_consent_records schema tables.
 *
 * Upon receiving the registration request, the system validates the uniqueness
 * of the submitted email and checks that the password meets all business
 * security rules (as per the password_hash field constraints). The account is
 * created in a 'pending' or 'active' status depending on the email verification
 * process, and a member profile is initialized via the discuss_board_members
 * table, capturing assigned nickname and status.
 *
 * Consent records required by regulation (e.g. 'privacy_policy',
 * 'terms_of_service') are logged to the discuss_board_consent_records table for
 * future audit and compliance checks. If any required consents are missing, the
 * operation will fail and provide appropriate errors, as this is a strict
 * platform requirement.
 *
 * Successful registration triggers the issuance of JWT access and refresh
 * tokens, which are stored along with device/user_agent and ip_address info in
 * the discuss_board_jwt_sessions schema. These tokens enable the new member to
 * authenticate with the platform, and the initial session is enforced as per
 * audit requirements.
 *
 * Only users who pass consent, uniqueness, policy acceptance, and security
 * checks will be registered. Any attempt to register with already-used email
 * addresses, missing consents, or weak passwords will result in a business
 * error. This operation is the starting point for all member authentication
 * workflows and is essential for discussBoard’s secure, policy-driven
 * onboarding.
 *
 * @param props.connection
 * @param props.body Information required to register a new member, including
 *   unique email, secure password, nickname, and required policy consents.
 * @setHeader token.access Authorization
 *
 * @path /auth/member/join
 * @accessor api.functional.auth.member.join
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function join(
  connection: IConnection,
  props: join.Props,
): Promise<join.Response> {
  const output: join.Response =
    true === connection.simulate
      ? join.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...join.METADATA,
            path: join.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace join {
  export type Props = {
    /**
     * Information required to register a new member, including unique
     * email, secure password, nickname, and required policy consents.
     */
    body: IDiscussBoardMember.IJoin;
  };
  export type Body = IDiscussBoardMember.IJoin;
  export type Response = IDiscussBoardMember.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/member/join",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/member/join";
  export const random = (): IDiscussBoardMember.IAuthorized =>
    typia.random<IDiscussBoardMember.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: join.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: join.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Authenticate a discussBoard member (discuss_board_user_accounts,
 * discuss_board_members); issue new JWT tokens after validating credentials and
 * status.
 *
 * This API operation authenticates a registered discussBoard member using the
 * email and password fields managed in the discuss_board_user_accounts table.
 * Authentication checks are performed against the stored password_hash (hashed
 * password) and email address, ensuring the account is in 'active' status (or
 * other eligible states as defined by business rules) and has completed the
 * required email verification (email_verified=true).
 *
 * Upon successful credential validation, the system issues new JWT access and
 * refresh tokens and creates a new record in the discuss_board_jwt_sessions
 * table to track the session, storing details such as user_agent, ip_address,
 * and session creation times. This operation enables returning or ongoing
 * members to continue their platform usage securely and triggers login-session
 * logic required by the platform’s audit policies.
 *
 * Failed authentication attempts due to wrong credentials,
 * locked/suspended/banned status, or missing email verification result in
 * clear, business-appropriate error responses as defined in the
 * discuss_board_user_accounts schema. All login attempts are logged for
 * security, anti-abuse, and compliance purposes.
 *
 * This endpoint is critical to account lifecycle and is directly tied to the
 * backend's authentication, session management, and business permission
 * boundaries. It must strictly enforce credential and status validation at
 * every call.
 *
 * @param props.connection
 * @param props.body Credential information for member login (email, password).
 * @setHeader token.access Authorization
 *
 * @path /auth/member/login
 * @accessor api.functional.auth.member.login
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function login(
  connection: IConnection,
  props: login.Props,
): Promise<login.Response> {
  const output: login.Response =
    true === connection.simulate
      ? login.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...login.METADATA,
            path: login.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace login {
  export type Props = {
    /** Credential information for member login (email, password). */
    body: IDiscussBoardMember.ILogin;
  };
  export type Body = IDiscussBoardMember.ILogin;
  export type Response = IDiscussBoardMember.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/member/login",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/member/login";
  export const random = (): IDiscussBoardMember.IAuthorized =>
    typia.random<IDiscussBoardMember.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: login.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: login.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Issue new JWT tokens for a member by validating/rotating a refresh token
 * (discuss_board_jwt_sessions, discuss_board_user_accounts).
 *
 * This API operation allows an authenticated discussBoard member to refresh
 * their session by presenting a valid refresh token, which is stored and
 * validated against the discuss_board_jwt_sessions table (refresh_token_hash).
 * The operation ensures session activity status ('active'), verifies that the
 * refresh token has not been revoked, deleted, or expired, and that the
 * associated user’s account is not suspended, banned, or otherwise disqualified
 * per discuss_board_user_accounts status.
 *
 * Upon successful verification, new JWT access and refresh tokens are issued,
 * and the discuss_board_jwt_sessions record is updated with refreshed session
 * metadata (issued_at, expires_at, device info, rotation hash). Session refresh
 * also triggers session activity logs and anti-abuse analytics per business
 * requirements.
 *
 * Any error relating to token status, validity, revocation, or user
 * ineligibility will be surfaced at this endpoint and tracked for compliance
 * and fraud prevention purposes. The endpoint is foundational for maintaining
 * secure, long-lived member sessions according to discussBoard platform
 * policy.
 *
 * @param props.connection
 * @param props.body Refresh token and user authentication context for session
 *   refresh request.
 * @setHeader token.access Authorization
 *
 * @path /auth/member/refresh
 * @accessor api.functional.auth.member.refresh
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function refresh(
  connection: IConnection,
  props: refresh.Props,
): Promise<refresh.Response> {
  const output: refresh.Response =
    true === connection.simulate
      ? refresh.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...refresh.METADATA,
            path: refresh.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace refresh {
  export type Props = {
    /**
     * Refresh token and user authentication context for session refresh
     * request.
     */
    body: IDiscussBoardMember.IRefresh;
  };
  export type Body = IDiscussBoardMember.IRefresh;
  export type Response = IDiscussBoardMember.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/member/refresh",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/member/refresh";
  export const random = (): IDiscussBoardMember.IAuthorized =>
    typia.random<IDiscussBoardMember.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: refresh.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: refresh.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
