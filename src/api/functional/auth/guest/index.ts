import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussBoardGuest } from "../../../structures/IDiscussBoardGuest";

/**
 * Guest registration (join) for discuss_board_guests table: creates guest
 * record, issues temporary identity.
 *
 * Handles initial guest registration for the discussBoard platform. Creates a
 * new record in 'discuss_board_guests' for analytics/tracking and issues a
 * guest JWT if supported. No credentials are handled here. Guests can only be
 * created, not logged in or managed. For temporary identity allocation only.
 * Security and privacy are strictly enforced per data minimization policy.
 * Escalation to member role requires separate flow. No login or refresh
 * operations for guests. Only suitable for anonymous/temporary use.
 *
 * @param props.connection
 * @param props.body Guest analytics and conversion funnel data (IP, user agent,
 *   referer). Used for tracking, not authentication.
 * @setHeader token.access Authorization
 *
 * @path /auth/guest/join
 * @accessor api.functional.auth.guest.join
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function join(
  connection: IConnection,
  props: join.Props,
): Promise<join.Response> {
  const output: join.Response =
    true === connection.simulate
      ? join.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...join.METADATA,
            path: join.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace join {
  export type Props = {
    /**
     * Guest analytics and conversion funnel data (IP, user agent, referer).
     * Used for tracking, not authentication.
     */
    body: IDiscussBoardGuest.ICreate;
  };
  export type Body = IDiscussBoardGuest.ICreate;
  export type Response = IDiscussBoardGuest.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/guest/join",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/guest/join";
  export const random = (): IDiscussBoardGuest.IAuthorized =>
    typia.random<IDiscussBoardGuest.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: join.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: join.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Guest token refresh (refresh) for discuss_board_guests: renews anonymous
 * access tokens if authorized.
 *
 * Handles guest token refresh for the discussBoard platform, using a valid
 * refresh token. As guests have no credentials, this endpoint renews temporary
 * access for guests already in 'discuss_board_guests'. No password or login
 * performed. Errors if the refresh token is invalid. Role upgrade requires
 * separate flow. Useful for continued, limited anonymous access within privacy
 * constraints.
 *
 * @param props.connection
 * @param props.body Refresh token data for temporary guest session validity
 *   check.
 * @setHeader token.access Authorization
 *
 * @path /auth/guest/refresh
 * @accessor api.functional.auth.guest.refresh
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function refresh(
  connection: IConnection,
  props: refresh.Props,
): Promise<refresh.Response> {
  const output: refresh.Response =
    true === connection.simulate
      ? refresh.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...refresh.METADATA,
            path: refresh.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace refresh {
  export type Props = {
    /** Refresh token data for temporary guest session validity check. */
    body: IDiscussBoardGuest.IRefresh;
  };
  export type Body = IDiscussBoardGuest.IRefresh;
  export type Response = IDiscussBoardGuest.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/guest/refresh",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/guest/refresh";
  export const random = (): IDiscussBoardGuest.IAuthorized =>
    typia.random<IDiscussBoardGuest.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: refresh.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: refresh.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
