import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussBoardModerator } from "../../../structures/IDiscussBoardModerator";

/**
 * Register a moderator and issue JWT credentials (discuss_board_moderators,
 * admin flow).
 *
 * This API endpoint registers a new moderator by assigning moderator rights to
 * an existing member. It tightly references the 'discuss_board_moderators'
 * table, which tracks moderator role assignments, their administrative status,
 * and escalation history. The assignment is only valid for members whose status
 * permits escalation (i.e., not already banned, suspended, or pending
 * activation), in compliance with platform rules described in the business
 * requirements documentation. If the referenced 'member_id' does not exist in
 * 'discuss_board_members' or lacks a verified, active linked user account in
 * 'discuss_board_user_accounts', the registration fails. Upon successful
 * registration, JWT credentials conforming to platform rules are issued and
 * linked to the new or updated session in 'discuss_board_jwt_sessions',
 * enabling secure moderator access to protected operations. Business logic
 * ensures that duplicate moderator assignments, unauthorized privilege
 * escalations, or policy violations trigger detailed errors and audit logs via
 * the platform's audit and privacy log tables. This endpoint is essential for
 * managing the lifecycle of moderator accounts and ensuring compliance with
 * admin-only authentication flows. Related endpoints include 'login',
 * 'refresh', and moderation privilege transfers, which require valid JWTs
 * granted via the current operation.
 *
 * @param props.connection
 * @param props.body Information required to register and grant moderator rights
 *   to an existing member (referencing 'discuss_board_moderators' and
 *   'discuss_board_members').
 * @setHeader token.access Authorization
 *
 * @path /auth/moderator/join
 * @accessor api.functional.auth.moderator.join
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function join(
  connection: IConnection,
  props: join.Props,
): Promise<join.Response> {
  const output: join.Response =
    true === connection.simulate
      ? join.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...join.METADATA,
            path: join.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace join {
  export type Props = {
    /**
     * Information required to register and grant moderator rights to an
     * existing member (referencing 'discuss_board_moderators' and
     * 'discuss_board_members').
     */
    body: IDiscussBoardModerator.ICreate;
  };
  export type Body = IDiscussBoardModerator.ICreate;
  export type Response = IDiscussBoardModerator.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/moderator/join",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/moderator/join";
  export const random = (): IDiscussBoardModerator.IAuthorized =>
    typia.random<IDiscussBoardModerator.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: join.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: join.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Moderator login and JWT token issuance (discuss_board_moderators,
 * discuss_board_user_accounts).
 *
 * This operation provides secure password-based login for moderators, robustly
 * referencing the columns in 'discuss_board_user_accounts', with additional
 * privilege validation via 'discuss_board_moderators'. The login flow verifies
 * email, hashes and checks password against 'password_hash', ensures
 * 'email_verified' is true, and cross-checks that the user is currently
 * assigned the moderator role (with a valid 'status' and non-revoked
 * assignment). On success, securely issues JWT access and refresh tokens,
 * records the login session in 'discuss_board_jwt_sessions', and returns
 * session-relevant details for fine-grained audit and business logic
 * enforcement. Failed logins due to locked accounts, suspended, pending, or
 * otherwise unauthorized status are rejected with clear, descriptive errors and
 * corresponding audit entries in the compliance log. This endpoint is central
 * in the moderator authentication flow, and is always paired with proper error
 * handling, rate limiting, and compliance documentation as per platform policy.
 * Other related operations include moderator registration ('join') and token
 * refresh ('refresh').
 *
 * @param props.connection
 * @param props.body Moderator login credentials (email, password), referencing
 *   'discuss_board_user_accounts' and privilege checks via
 *   'discuss_board_moderators'.
 * @setHeader token.access Authorization
 *
 * @path /auth/moderator/login
 * @accessor api.functional.auth.moderator.login
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function login(
  connection: IConnection,
  props: login.Props,
): Promise<login.Response> {
  const output: login.Response =
    true === connection.simulate
      ? login.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...login.METADATA,
            path: login.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace login {
  export type Props = {
    /**
     * Moderator login credentials (email, password), referencing
     * 'discuss_board_user_accounts' and privilege checks via
     * 'discuss_board_moderators'.
     */
    body: IDiscussBoardModerator.ILogin;
  };
  export type Body = IDiscussBoardModerator.ILogin;
  export type Response = IDiscussBoardModerator.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/moderator/login",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/moderator/login";
  export const random = (): IDiscussBoardModerator.IAuthorized =>
    typia.random<IDiscussBoardModerator.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: login.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: login.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Refresh JWT access/refresh tokens for an authenticated moderator
 * (discuss_board_jwt_sessions, discuss_board_moderators).
 *
 * Provides a JWT access token refresh for authorized moderators by referencing
 * session and privilege details in both 'discuss_board_jwt_sessions' and
 * 'discuss_board_moderators'. The flow requires a valid refresh token, checks
 * session status in 'discuss_board_jwt_sessions', and verifies ongoing
 * eligibility in 'discuss_board_moderators' (including 'status', 'revoked_at',
 * and assignment fields). New tokens are issued and the session record is
 * updated, provided all validations pass. Failures, such as expired or invalid
 * tokens, or privilege revocation since last login, are returned with specific
 * status codes and are always logged for compliance and incident handling.
 * Ensures strict business rules for secure moderator/token rotation, as per
 * documented platform authentication policies. Related APIs include 'login',
 * 'join', and moderator-protected API endpoints relying on the refreshed token
 * context.
 *
 * @param props.connection
 * @param props.body Moderator token refresh request context (contains refresh
 *   token and session info), referencing 'discuss_board_jwt_sessions' and
 *   'discuss_board_moderators'.
 * @setHeader token.access Authorization
 *
 * @path /auth/moderator/refresh
 * @accessor api.functional.auth.moderator.refresh
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function refresh(
  connection: IConnection,
  props: refresh.Props,
): Promise<refresh.Response> {
  const output: refresh.Response =
    true === connection.simulate
      ? refresh.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...refresh.METADATA,
            path: refresh.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace refresh {
  export type Props = {
    /**
     * Moderator token refresh request context (contains refresh token and
     * session info), referencing 'discuss_board_jwt_sessions' and
     * 'discuss_board_moderators'.
     */
    body: IDiscussBoardModerator.IRefresh;
  };
  export type Body = IDiscussBoardModerator.IRefresh;
  export type Response = IDiscussBoardModerator.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/moderator/refresh",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/moderator/refresh";
  export const random = (): IDiscussBoardModerator.IAuthorized =>
    typia.random<IDiscussBoardModerator.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: refresh.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: refresh.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
