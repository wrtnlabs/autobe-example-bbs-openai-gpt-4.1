import { IConnection, HttpError } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";

import { IDiscussionBoardUser } from "../../../structures/IDiscussionBoardUser";

/**
 * Register a new standard user member (discussion_board_users table) and issue
 * tokens.
 *
 * This endpoint enables guest users to register as standard users by supplying
 * unique email, username, password (hashed using the password_hash field), and
 * optional display_name. The user is created as unverified (is_verified: false)
 * and unsuspended (is_suspended: false) by default, in accordance with the
 * discussion_board_users schema. Email and username are enforced as unique. The
 * operation triggers an email verification process (via related verification
 * token table), but does not immediately allow forum participation until
 * verification (is_verified) is complete. Security is ensured by storing only
 * password_hash, never plaintext. In accordance with security requirements and
 * audit policy, registration attempts, failures, and resulting states are
 * logged for compliance. This operation establishes user membership, laying the
 * foundation of JWT-based authentication for the entire service. Related
 * operations: verification initiation and login endpoints.
 *
 * @param props.connection
 * @param props.body User registration payload (email, username, password,
 *   display_name).
 * @setHeader token.access Authorization
 *
 * @path /auth/user/join
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function join(
  connection: IConnection,
  props: join.Props,
): Promise<join.Response> {
  const output: join.Response =
    true === connection.simulate
      ? join.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...join.METADATA,
            path: join.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace join {
  export type Props = {
    /** User registration payload (email, username, password, display_name). */
    body: IDiscussionBoardUser.ICreate;
  };
  export type Body = IDiscussionBoardUser.ICreate;
  export type Response = IDiscussionBoardUser.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/user/join",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/user/join";
  export const random = (): IDiscussionBoardUser.IAuthorized =>
    typia.random<IDiscussionBoardUser.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: join.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: join.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Authenticate a user (discussion_board_users) and issue new tokens for member
 * session.
 *
 * This endpoint authenticates a user using provided credentials (email or
 * username, plus password) by verifying against the discussion_board_users
 * schema (email/username, password_hash). The system only allows verified
 * (is_verified: true) and unsuspended (is_suspended: false) accounts to log in,
 * blocking those suspended or unverified, per the schema's security
 * requirements. On success, JWT access and refresh tokens including user id,
 * role, and permissions are returned. On failure, rate limiting and audit
 * logging of failed attempts are enforced as described in functional
 * requirements and audit logs for compliance. Passwords are never returned or
 * logged, only the password_hash is stored and compared securely. This is
 * crucial for user access to all member operations, acting as the gateway to
 * authenticated discussionBoard participation.
 *
 * @param props.connection
 * @param props.body User login payload (email/username and password).
 * @setHeader token.access Authorization
 *
 * @path /auth/user/login
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function login(
  connection: IConnection,
  props: login.Props,
): Promise<login.Response> {
  const output: login.Response =
    true === connection.simulate
      ? login.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...login.METADATA,
            path: login.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace login {
  export type Props = {
    /** User login payload (email/username and password). */
    body: IDiscussionBoardUser.ILogin;
  };
  export type Body = IDiscussionBoardUser.ILogin;
  export type Response = IDiscussionBoardUser.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/user/login",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/user/login";
  export const random = (): IDiscussionBoardUser.IAuthorized =>
    typia.random<IDiscussionBoardUser.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: login.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: login.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}

/**
 * Refresh a user JWT access token using a valid refresh token
 * (discussion_board_refresh_tokens table).
 *
 * This endpoint allows an authenticated user to refresh their JWT access token
 * by presenting a valid, non-revoked refresh token, as stored in
 * discussion_board_refresh_tokens. It ensures single-token-per-device and that
 * the user is not suspended or deleted as per the discussion_board_users schema
 * (is_suspended must be false, deleted_at null). On verification and success,
 * it rotates the refresh token and issues new tokens. This process maintains
 * session continuity for authenticated users, while aligning with compliance,
 * audit, and security policies enforced through schema relationships on
 * discussion_board_refresh_tokens and discussion_board_users.
 *
 * @param props.connection
 * @param props.body Refresh token payload (typically just a refresh_token
 *   string).
 * @setHeader token.access Authorization
 *
 * @path /auth/user/refresh
 * @autobe Generated by AutoBE - https://github.com/wrtnlabs/autobe
 */
export async function refresh(
  connection: IConnection,
  props: refresh.Props,
): Promise<refresh.Response> {
  const output: refresh.Response =
    true === connection.simulate
      ? refresh.simulate(connection, props)
      : await PlainFetcher.fetch(
          {
            ...connection,
            headers: {
              ...connection.headers,
              "Content-Type": "application/json",
            },
          },
          {
            ...refresh.METADATA,
            path: refresh.path(),
            status: null,
          },
          props.body,
        );
  connection.headers ??= {};
  connection.headers.Authorization = output.token.access;
  return output;
}
export namespace refresh {
  export type Props = {
    /** Refresh token payload (typically just a refresh_token string). */
    body: IDiscussionBoardUser.IRefresh;
  };
  export type Body = IDiscussionBoardUser.IRefresh;
  export type Response = IDiscussionBoardUser.IAuthorized;

  export const METADATA = {
    method: "POST",
    path: "/auth/user/refresh",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
  } as const;

  export const path = () => "/auth/user/refresh";
  export const random = (): IDiscussionBoardUser.IAuthorized =>
    typia.random<IDiscussionBoardUser.IAuthorized>();
  export const simulate = (
    connection: IConnection,
    props: refresh.Props,
  ): Response => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: refresh.path(),
      contentType: "application/json",
    });
    try {
      assert.body(() => typia.assert(props.body));
    } catch (exp) {
      if (!typia.is<HttpError>(exp)) throw exp;
      return {
        success: false,
        status: exp.status,
        headers: exp.headers,
        data: exp.toJSON().message,
      } as any;
    }
    return random();
  };
}
