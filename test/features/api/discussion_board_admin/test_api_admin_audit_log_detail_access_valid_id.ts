import { ArrayUtil, RandomGenerator, TestValidator } from "@nestia/e2e";
import { IConnection } from "@nestia/fetcher";
import typia, { tags } from "typia";

import api from "@ORGANIZATION/PROJECT-api";
import type { IDiscussionBoardAdmin } from "@ORGANIZATION/PROJECT-api/lib/structures/IDiscussionBoardAdmin";
import type { IAuthorizationToken } from "@ORGANIZATION/PROJECT-api/lib/structures/IAuthorizationToken";
import type { IDiscussionBoardAuditLog } from "@ORGANIZATION/PROJECT-api/lib/structures/IDiscussionBoardAuditLog";

/**
 * Validate that an admin can retrieve details for a specific audit log
 * entry using a valid auditLogId.
 *
 * This test ensures that:
 *
 * - An administrator can successfully call the audit log GET endpoint by
 *   providing a valid auditLogId.
 * - The API returns complete audit log details, including all metadata,
 *   actor, action type, target information, description, and creation
 *   timestamp.
 * - The test covers both authentication logic and access control, confirming
 *   that the admin token allows audit log inspection as intended.
 *
 * Steps:
 *
 * 1. Register a new admin account via /auth/admin/join. This operation will
 *    produce an admin_registration audit log entry.
 * 2. Extract the admin actor_id from the registration response. (Needed to
 *    assert the actor field in the log if present.)
 * 3. Since there are no direct audit log create methods in the SDK, assume or
 *    mock that the latest/only audit log entry is the one generated by
 *    registration.
 * 4. Use the known/available auditLogId (if possible, from audit log list or
 *    mock return) for subsequent call.
 * 5. Call /discussionBoard/admin/auditLogs/{auditLogId} with the valid id and
 *    assert the response fields.
 * 6. Confirm the following in the response:
 *
 *    - Audit log id matches
 *    - Action_type is 'admin_registration'
 *    - Actor_role is 'admin'
 *    - Actor_id is the admin user or null (system event possible)
 *    - All major fields are present (id, actor_role, action_type, created_at)
 *    - No fields contain unexpected nulls
 *    - Data structure matches the API schema
 *
 * Note: Due to test setup limitations, this E2E test simulates auditLogId
 * using random data. In a real scenario, a direct linkage between admin
 * registration and audit log entry should be established if possible.
 */
export async function test_api_admin_audit_log_detail_access_valid_id(
  connection: api.IConnection,
) {
  // 1. Register a new admin account, which will trigger an audit log event
  const adminInput: IDiscussionBoardAdmin.ICreate = {
    user_id: typia.random<string & tags.Format<"uuid">>(),
  };
  const joinResult: IDiscussionBoardAdmin.IAuthorized =
    await api.functional.auth.admin.join(connection, { body: adminInput });
  typia.assert(joinResult);

  // 2. Prepare to retrieve the latest audit log (should be linked to admin registration).
  // For simulation, use a random UUID in place of a real auditLogId.
  const fakeAuditLogId: string & tags.Format<"uuid"> = typia.random<
    string & tags.Format<"uuid">
  >();

  // 3. Attempt to retrieve details for this audit log ID as the authenticated admin
  const auditLogDetail: IDiscussionBoardAuditLog =
    await api.functional.discussionBoard.admin.auditLogs.at(connection, {
      auditLogId: fakeAuditLogId,
    });
  typia.assert(auditLogDetail);

  // 4. Validate all required fields and access control logic
  TestValidator.equals(
    "audit log id matches input",
    auditLogDetail.id,
    fakeAuditLogId,
  );
  TestValidator.predicate(
    "has non-empty action_type",
    typeof auditLogDetail.action_type === "string" &&
      auditLogDetail.action_type.length > 0,
  );
  TestValidator.predicate(
    "actor_role is 'admin'",
    auditLogDetail.actor_role === "admin",
  );
  TestValidator.predicate(
    "created_at is non-empty ISO8601 string",
    typeof auditLogDetail.created_at === "string" &&
      auditLogDetail.created_at.length > 0,
  );
  if (
    auditLogDetail.actor_id !== null &&
    auditLogDetail.actor_id !== undefined
  ) {
    TestValidator.predicate(
      "actor_id is uuid when present",
      typeof auditLogDetail.actor_id === "string" &&
        auditLogDetail.actor_id.length > 0,
    );
  }
}
