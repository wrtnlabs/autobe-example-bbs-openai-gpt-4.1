/// Tracks anonymous or unauthenticated actors (visitors) for auditing,
/// analytics, and potential future privilege escalation. Each record
/// represents an individual visitor session or unique actor basis. Enables
/// future anonymous posting privileges, per-visitor fraud detection, and
/// regulatory compliance. No PII captured unless elevated. Provides soft
/// deletion for retention management.
///
/// @namespace Actors
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model discussion_board_visitors {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id @db.Uuid
  
  /// Opaque, non-reversible unique token identifying a visitor. Used for
  /// session tracking and fraud detection. Never linked to PII.
  visitor_token String
  
  /// IP address used to access the service. Used only for security, fraud
  /// detection, and audit; deleted/pseudonymized per policy.
  ip_address String?
  
  /// User agent string or device fingerprint as received. Used for analytic
  /// and anti-abuse measures.
  user_agent String?
  
  /// Timestamp when the visitor record was created.
  created_at DateTime @db.Timestamptz
  
  /// Timestamp when the visitor record was last updated.
  updated_at DateTime @db.Timestamptz
  
  /// Timestamp when the visitor record was soft-deleted (if applicable).
  deleted_at DateTime? @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  @@unique([visitor_token])
  @@index([created_at])
}

/// Core registered and authenticated user actors. Each represents a member
/// with standard posting, commenting, voting, and flagging privileges. Email
/// and username must be unique. Contains authentication and profile
/// metadata. Subject to verification, suspension, and role escalation.
/// Provides soft deletion for compliance.
///
/// @namespace Actors
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model discussion_board_users {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id @db.Uuid
  
  /// User email address, used for login and communication. Must be unique.
  email String
  
  /// Unique username chosen by the user; displayed as handle on posts/comments.
  username String
  
  /// User's display name or nickname for personalized experience.
  display_name String?
  
  /// Secure password hash for authentication. Raw passwords are never stored.
  password_hash String
  
  /// Whether the user's email has been verified.
  is_verified Boolean
  
  /// Whether the user is currently suspended from activity.
  is_suspended Boolean
  
  /// If suspended, date-time until which user cannot interact. Null if not
  /// suspended.
  suspended_until DateTime? @db.Timestamptz
  
  /// Date-time of the user's last successful login.
  last_login_at DateTime? @db.Timestamptz
  
  /// Timestamp when the user record was created.
  created_at DateTime @db.Timestamptz
  
  /// Timestamp when the user record was last updated.
  updated_at DateTime @db.Timestamptz
  
  /// Timestamp when the user record was soft-deleted (if applicable).
  deleted_at DateTime? @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  discussion_board_threads discussion_board_threads[]
  discussion_board_posts discussion_board_posts[]
  discussion_board_post_edit_histories discussion_board_post_edit_histories[]
  discussion_board_comments discussion_board_comments[]
  discussion_board_comment_edit_histories discussion_board_comment_edit_histories[]
  discussion_board_attachments discussion_board_attachments[]
  discussion_board_votes discussion_board_votes[]
  discussion_board_poll_votes discussion_board_poll_votes[]
  discussion_board_flag_reports discussion_board_flag_reports[]
  discussion_board_moderation_actions discussion_board_moderation_actions[]
  discussion_board_appeals discussion_board_appeals[]
  discussion_board_notifications_of_recipient_user_id discussion_board_notifications[] @relation("discussion_board_notifications_of_recipient_user_id")
  discussion_board_notifications_of_actor_user_id discussion_board_notifications[] @relation("discussion_board_notifications_of_actor_user_id")
  discussion_board_notification_preferences discussion_board_notification_preferences?
  discussion_board_notification_subscriptions discussion_board_notification_subscriptions[]
  discussion_board_jwt_tokens discussion_board_jwt_tokens[]
  discussion_board_refresh_tokens discussion_board_refresh_tokens[]
  discussion_board_password_resets discussion_board_password_resets[]
  discussion_board_verification_tokens discussion_board_verification_tokens[]
  discussion_board_data_erasure_requests discussion_board_data_erasure_requests[]
  discussion_board_privacy_dashboards discussion_board_privacy_dashboards[]
  discussion_board_compliance_events discussion_board_compliance_events[]
  discussion_board_export_logs discussion_board_export_logs[]
  
  @@unique([email])
  @@unique([username])
  @@index([created_at])
  @@index([is_verified, is_suspended])
  @@index([display_name(ops: raw("gin_trgm_ops"))], type: Gin)
}

/// Table of actors with assigned moderator status. Moderators are registered
/// users with elevated permissions for content and user management.
/// Assignment/removal is managed by admins; assignment events are logged
/// externally. Includes privileged status and active window. Independent
/// management supports auditing of promotion/demotion and moderator-specific
/// attributes. Provides soft deletion for compliance.
///
/// @namespace Actors
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model discussion_board_moderators {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id @db.Uuid
  
  /// Associated user actor's id promoted to moderator role. Duplicates user
  /// data for audit separation and role-specific attributes.
  user_id String @db.Uuid
  
  /// Timestamp when moderator role was assigned.
  assigned_at DateTime @db.Timestamptz
  
  /// Timestamp moderator privileges were revoked, if ever. Null if currently
  /// active.
  revoked_at DateTime? @db.Timestamptz
  
  /// Whether the moderator is currently active (not revoked or suspended).
  is_active Boolean
  
  /// Moderator-specific suspension window, if applicable.
  suspended_until DateTime? @db.Timestamptz
  
  /// Timestamp when the moderator record was created.
  created_at DateTime @db.Timestamptz
  
  /// Timestamp when the moderator record was last updated.
  updated_at DateTime @db.Timestamptz
  
  /// Timestamp when the moderator record was soft-deleted (if applicable).
  deleted_at DateTime? @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  discussion_board_moderation_actions discussion_board_moderation_actions[]
  
  @@unique([user_id])
  @@index([is_active])
  @@index([created_at])
}

/// Platform/system administrators with the highest permissions. This table
/// tracks all admin actors, with status, assignment, suspension, and audit
/// fields. Admin management is independent for audit/control.
/// Assignment/removal is always by root/admin. No calculated fields.
/// Provides soft deletion for regulatory compliance.
///
/// @namespace Actors
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model discussion_board_admins {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id @db.Uuid
  
  /// Associated user actor's id with admin role. Allows admin-specific
  /// privileges, assignment/revocation audit, and separation of admin status.
  user_id String @db.Uuid
  
  /// Timestamp when admin status/role was granted.
  assigned_at DateTime @db.Timestamptz
  
  /// Timestamp when admin privileges were revoked, if ever. Null if currently
  /// active.
  revoked_at DateTime? @db.Timestamptz
  
  /// Whether the admin is currently active (not revoked or suspended).
  is_active Boolean
  
  /// Admin-specific suspension window, if applicable.
  suspended_until DateTime? @db.Timestamptz
  
  /// Timestamp when the admin record was created.
  created_at DateTime @db.Timestamptz
  
  /// Timestamp when the admin record was last updated.
  updated_at DateTime @db.Timestamptz
  
  /// Timestamp when the admin record was soft-deleted (if applicable).
  deleted_at DateTime? @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  @@unique([user_id])
  @@index([is_active])
  @@index([created_at])
}