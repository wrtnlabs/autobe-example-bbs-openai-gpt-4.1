/// Represents discussion categories within the board (e.g. Politics,
/// Economics, Society). Used for organizing posts and threads into topical
/// groups. Supports CRUD and independent administration. Categories can have
/// multiple tags via discussion_board_category_tag_relations. Frequently
/// referenced by posts for content classification.
///
/// @namespace Systematic
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model discussion_board_categories {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id @db.Uuid
  
  /// Category display name. Unique and user-facing (e.g. 'Politics').
  name String
  
  /// Human-readable description for moderators and users.
  description String?
  
  /// Whether this category is currently active and visible to users.
  is_active Boolean
  
  /// Manual sort order for displaying categories.
  sort_order Int @db.Integer
  
  /// Timestamp when category was created.
  created_at DateTime @db.Timestamptz
  
  /// Timestamp when category was last updated.
  updated_at DateTime @db.Timestamptz
  
  /// Timestamp for soft deletion; null means not deleted.
  deleted_at DateTime? @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  discussion_board_category_tag_relations discussion_board_category_tag_relations[]
  
  @@unique([name])
  @@index([is_active])
}

/// Vocabulary of tags that can be assigned to categories and posts. Tags
/// enable faceted search, topic suggestions, and content filtering. Tags are
/// managed independently; supports CRUD and list operations. Tags can be
/// assigned to many categories (see
/// discussion_board_category_tag_relations).
///
/// @namespace Systematic
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model discussion_board_tags {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id @db.Uuid
  
  /// Tag label as seen by users. Must be unique (case-insensitive).
  label String
  
  /// Optional human-readable description for users/moderators.
  description String?
  
  /// Whether the tag can currently be assigned.
  is_active Boolean
  
  /// Timestamp when tag was registered.
  created_at DateTime @db.Timestamptz
  
  /// Timestamp when tag was last updated.
  updated_at DateTime @db.Timestamptz
  
  /// Timestamp for soft deletion; null = not deleted.
  deleted_at DateTime? @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  discussion_board_category_tag_relations discussion_board_category_tag_relations[]
  
  @@unique([label])
  @@index([is_active])
}

/// Junction table for many-to-many relation between categories and tags.
/// Allows a category to have multiple tags and vice versa. Only stores
/// references; maintains referential integrity and disables duplicates.
/// Managed internally; users assign tags to categories via admin/control
/// panels.
///
/// @namespace Systematic
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model discussion_board_category_tag_relations {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id @db.Uuid
  
  /// Linked category's {@link discussion_board_categories.id}
  discussion_board_category_id String @db.Uuid
  
  /// Linked tag's {@link discussion_board_tags.id}
  discussion_board_tag_id String @db.Uuid
  
  /// Timestamp when this association was created.
  created_at DateTime @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  category discussion_board_categories @relation(fields: [discussion_board_category_id], references: [id], onDelete: Cascade, map: "discussion_board_category_tag_relations_discussion_boa_d71922fb")
  tag discussion_board_tags @relation(fields: [discussion_board_tag_id], references: [id], onDelete: Cascade, map: "discussion_board_category_tag_relations_discussion_boa_a933acc4")
  
  @@index([discussion_board_tag_id], map: "discussion_board_category_tag_relations_discussion_boa_0c679702")
  
  @@unique([discussion_board_category_id, discussion_board_tag_id], map: "discussion_board_category_tag_relations_discussion_boa_28e1b254")
}

/// Holds global/system-wide configuration values (e.g., max post length,
/// flags thresholds, maintenance flags). Settings are key-value, with
/// standard metadata, allowing dynamic system reconfiguration without code
/// deployments. Supports secure audit of changes.
///
/// @namespace Systematic
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model discussion_board_settings {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id @db.Uuid
  
  /// Unique identifier for this setting (e.g. 'max_post_length',
  /// 'flag_threshold').
  key String
  
  /// Serialized config value for interpretation by the app (stringified JSON
  /// for complex data if needed).
  value String
  
  /// Human-intelligible explanation of this setting.
  description String?
  
  /// Whether this setting is system-level (vs business-level).
  is_system Boolean
  
  /// Timestamp when setting was registered.
  created_at DateTime @db.Timestamptz
  
  /// Timestamp when setting was last updated.
  updated_at DateTime @db.Timestamptz
  
  /// Timestamp for soft deletion.
  deleted_at DateTime? @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  @@unique([key])
  @@index([is_system])
}

/// Audit log for all major platform actions: configuration changes, role
/// changes, moderation decisions, and critical system events. Each record
/// includes metadata and references to the actor where possible (e.g., user,
/// moderator, admin). Used for legal, compliance, and business/technical
/// auditing.
///
/// @namespace Systematic
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model discussion_board_audit_logs {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id @db.Uuid
  
  /// Optional reference to the acting user (visitor, user, moderator, or
  /// admin), if applicable. Null for system actions.
  actor_id String? @db.Uuid
  
  /// Role of acting entity at time of action ('visitor', 'user', 'moderator',
  /// 'admin', or 'system').
  actor_role String
  
  /// Type/category of action performed (e.g., 'config_update',
  /// 'role_assignment', 'moderation', 'login').
  action_type String
  
  /// Subject entity/object of the action. E.g., which setting, user, post,
  /// etc. (Flexible string).
  target_object String?
  
  /// Human-readable description, suited for compliance reviews.
  description String?
  
  /// Action event timestamp; represents when it occurred.
  created_at DateTime @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  discussion_board_action_logs discussion_board_action_logs[]
  
  @@index([actor_id])
  @@index([created_at])
  @@index([action_type(ops: raw("gin_trgm_ops"))], type: Gin)
}

/// Detailed per-action log entries as a subsidiary to the audit log. Used
/// for lower-level action tracing, debugging, and advanced compliance. Each
/// action log entry references audit logs and provides granular metadata
/// (status, payloads, errors, etc.). Not independently user-facing; supports
/// system/compliance tracing.
///
/// @namespace Systematic
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model discussion_board_action_logs {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id @db.Uuid
  
  /// Reference to the master audit log entry {@link
  /// discussion_board_audit_logs.id}
  discussion_board_audit_log_id String @db.Uuid
  
  /// Outcome of the action (e.g., 'success', 'fail', 'partial', or custom).
  status String
  
  /// Serialized contextual metadata (JSON). As detailed as needed for
  /// compliance or debugging.
  metadata String?
  
  /// Timestamp at which the action log was recorded.
  created_at DateTime @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  auditLog discussion_board_audit_logs @relation(fields: [discussion_board_audit_log_id], references: [id], onDelete: Cascade)
  
  @@index([discussion_board_audit_log_id])
}