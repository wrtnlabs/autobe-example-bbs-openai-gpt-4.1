/// Records each user-initiated request for data erasure (GDPR/CCPA Right to
/// be Forgotten). Tracks requestor, status, type, justification,
/// verification, and regulator responses. Allows for compliance with
/// required audit trail and deletion verification. Relates to {@link
/// discussion_board_users}.
///
/// @namespace Compliance
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model discussion_board_data_erasure_requests {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id @db.Uuid
  
  /// Belonged user's {@link discussion_board_users.id}. Foreign key for
  /// tracking which user's data is to be erased. Mandatory for audit and
  /// traceability.
  discussion_board_user_id String @db.Uuid
  
  /// Type of erasure (full account, post-only, comment-only, partial, or
  /// specific legal request). Used for regulatory reporting.
  request_type String
  
  /// Current erasure process state (pending, processing, completed, rejected).
  /// Must be explicitly set for record integrity.
  status String
  
  /// Timestamp when the erasure request was submitted.
  submitted_at DateTime @db.Timestamptz
  
  /// When the erasure request was fully processed, if applicable.
  processed_at DateTime? @db.Timestamptz
  
  /// User-provided or legally required reason for data erasure. Supports
  /// compliance with regulatory requirements.
  justification String?
  
  /// External regulatory agency reference or ticket if applicable (e.g. DPA
  /// reference number).
  regulator_reference String?
  
  /// Compliance staff or automated process validating the request. For audit
  /// tracking.
  verifier String?
  
  /// When request was verified for eligibility. May be null if auto-approved.
  verified_at DateTime? @db.Timestamptz
  
  /// Structured response content to the requester, used for compliance
  /// communication and documentation.
  response_payload String?
  
  /// Timestamp when the record was created.
  created_at DateTime @db.Timestamptz
  
  /// Timestamp when the record was last updated.
  updated_at DateTime @db.Timestamptz
  
  /// When the record was soft-deleted (may be null for active records). Soft
  /// delete required for audit compliance.
  deleted_at DateTime? @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  user discussion_board_users @relation(fields: [discussion_board_user_id], references: [id], onDelete: Cascade, map: "discussion_board_data_erasure_requests_discussion_boar_79e23a16")
  
  @@unique([discussion_board_user_id, request_type, submitted_at], map: "discussion_board_data_erasure_requests_discussion_boar_0f72bde3")
  @@index([status])
  @@index([submitted_at])
  @@index([justification(ops: raw("gin_trgm_ops"))], type: Gin)
}

/// Aggregated privacy metrics, summaries, and user-facing data exports for
/// compliance dashboards (GDPR/CCPA Art. 15/20, right to
/// access/portability). Used to generate machine-readable exports, audit
/// logs, and summary tables for regulatory response. Not for regular use,
/// only on user request or regulatory demand.
///
/// @namespace Compliance
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model discussion_board_privacy_dashboards {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id @db.Uuid
  
  /// The user whose data this privacy dashboard summarizes. Belongs to {@link
  /// discussion_board_users.id}.
  discussion_board_user_id String @db.Uuid
  
  /// When the user requested privacy data access/export.
  access_requested_at DateTime @db.Timestamptz
  
  /// When data export was completed and made available. For regulatory
  /// deadlines.
  access_fulfilled_at DateTime? @db.Timestamptz
  
  /// JSON-encoded or structured summary of user's privacy data, data sources,
  /// erasure history, etc. Used for export and compliance evidence.
  dashboard_payload String
  
  /// URI link to generated download or export file for portability. May be
  /// null prior to file generation.
  export_file_uri String? @db.VarChar(80000)
  
  /// Timestamp when the dashboard record was created.
  created_at DateTime @db.Timestamptz
  
  /// Timestamp when dashboard was last updated or re-generated.
  updated_at DateTime @db.Timestamptz
  
  /// When the record was soft-deleted (may be null).
  deleted_at DateTime? @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  user discussion_board_users @relation(fields: [discussion_board_user_id], references: [id], onDelete: Cascade, map: "discussion_board_privacy_dashboards_discussion_board_u_3d688974")
  
  @@unique([discussion_board_user_id, access_requested_at], map: "discussion_board_privacy_dashboards_discussion_board_u_ee6f53f4")
  @@index([access_requested_at])
  @@index([discussion_board_user_id], map: "discussion_board_privacy_dashboards_discussion_board_u_1ef24e97")
}

/// Captures all compliance-triggered actions, incidents, investigation
/// cases, regulatory requests (not business-as-usual logs). Used for
/// recordkeeping, reporting to DPAs (Data Protection Authorities), and
/// internal compliance audits. Not a general audit or syslog table.
///
/// @namespace Compliance
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model discussion_board_compliance_events {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id @db.Uuid
  
  /// Optional: User who triggered the compliance event, if applicable (e.g.,
  /// making a legal or privacy request). Nullable, since not all events come
  /// from users.
  initiated_by_user_id String? @db.Uuid
  
  /// Nature of the compliance event (e.g., regulator_inquiry,
  /// data_breach_report, DPIA_completed, erasure_executed, legal_hold).
  event_type String
  
  /// Current status (open, closed, in_review, escalated, resolved), allowing
  /// distinct compliance tracking.
  event_status String
  
  /// Detailed event content, investigation summary, or protocol steps. Often
  /// used for audit export; supports full text search.
  event_details String?
  
  /// When the compliance event started or was detected/received.
  detected_at DateTime @db.Timestamptz
  
  /// When event was closed or resolved, if finalized.
  resolved_at DateTime? @db.Timestamptz
  
  /// Regulator's case/ticket number or external ID, if available, for
  /// traceability.
  regulatory_ticket String?
  
  /// Compliance staff member or system process handling the event. May be null
  /// if auto-processed or pending assignment.
  assigned_staff String?
  
  /// Timestamp when this event record was created.
  created_at DateTime @db.Timestamptz
  
  /// Record last updated timestamp.
  updated_at DateTime @db.Timestamptz
  
  /// Soft-deleted timestamp (null when active).
  deleted_at DateTime? @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  initiator discussion_board_users? @relation(fields: [initiated_by_user_id], references: [id], onDelete: Cascade)
  
  @@index([initiated_by_user_id])
  
  @@unique([event_type, detected_at])
  @@index([event_status])
  @@index([detected_at])
  @@index([event_details(ops: raw("gin_trgm_ops"))], type: Gin)
}

/// Tracks all exports and downloads of compliance, audit, or user privacy
/// data (for regulatory evidence). Includes target type (user, regulator,
/// legal), file info, requester, and status for traceability. Provides
/// evidence for meeting data export/portability requirements. Distinct from
/// privacy dashboards as this logs every generated file event.
///
/// @namespace Compliance
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model discussion_board_export_logs {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id @db.Uuid
  
  /// The user (or staff) requesting the export file. FK to {@link
  /// discussion_board_users.id}. Nullable to support external/automated
  /// exports.
  requested_by_user_id String? @db.Uuid
  
  /// Export target: user, regulator, admin, legal, etc. Used to segment export
  /// type for audit.
  target_type String
  
  /// Download URI for the exported data/logs file.
  file_uri String @db.VarChar(80000)
  
  /// MIME type or descriptor of file (e.g. application/json, application/pdf,
  /// csv, xml, etc.).
  file_type String
  
  /// When export was generated.
  exported_at DateTime @db.Timestamptz
  
  /// Export status (pending, available, expired, failed).
  status String
  
  /// Timestamp when the export log was created.
  created_at DateTime @db.Timestamptz
  
  /// Timestamp when this record was last updated.
  updated_at DateTime @db.Timestamptz
  
  /// Soft-deleted timestamp (null for active/log-retained).
  deleted_at DateTime? @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  requester discussion_board_users? @relation(fields: [requested_by_user_id], references: [id], onDelete: Cascade)
  
  @@unique([file_uri])
  @@index([target_type])
  @@index([requested_by_user_id])
}