/// Notification delivery instances: Each record represents a discrete
/// notification, either user-facing or system-triggered, intended for a
/// specific recipient. Supports associations with sending actor, linked
/// post/comment (if reference exists), notification type, status
/// (unread/read/delivered), and failure/audit fields. User can independently
/// mark as read/archived. Related to {@link discussion_board_users},
/// potentially to posts/comments via foreign keys. Business logic
/// distinguishes among notification types (reply, mention, moderator action,
/// system alert, etc.).
///
/// @namespace Notifications
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model discussion_board_notifications {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id @db.Uuid
  
  /// Target recipient's {@link discussion_board_users.id}. User who receives
  /// the notification.
  recipient_user_id String @db.Uuid
  
  /// Optional actor that generated the notification. References {@link
  /// discussion_board_users.id}; null for system events.
  actor_user_id String? @db.Uuid
  
  /// Linked post, if notification relates to a discussion post. References
  /// {@link discussion_board_posts.id}. Nullable.
  post_id String? @db.Uuid
  
  /// Linked comment, if notification relates to a post comment. References
  /// {@link discussion_board_comments.id}. Nullable.
  comment_id String? @db.Uuid
  
  /// Type of notification (e.g., reply, mention, flag, mod_action,
  /// system_alert, poll_close, etc.) - used to drive business and UI logic.
  type String
  
  /// Delivery/read status: one of 'unread', 'read', 'delivered', 'archived',
  /// 'failed'. Used to filter in notification center and trigger UX badges.
  status String
  
  /// Short notification title or summary (for display in notification center
  /// previews).
  title String?
  
  /// Notification content/body, typically short and context-focused. HTML/text
  /// allowed per business policy.
  body String?
  
  /// Link or URI for user action (e.g., "go to post", "view comment"). Null if
  /// system/informational only.
  action_url String? @db.VarChar(80000)
  
  /// Reason for delivery failure (if status is 'failed'). May contain
  /// business-level reason or error code. Null if delivered/successful.
  failure_reason String?
  
  /// Notification creation timestamp (when notification was generated).
  created_at DateTime @db.Timestamptz
  
  /// When notification was (attempted to be) delivered (e.g., pushed, sent,
  /// shown). Nullable if not delivered yet.
  delivered_at DateTime? @db.Timestamptz
  
  /// When recipient read the notification (set by user interaction, system, or
  /// push). Null if not yet read.
  read_at DateTime? @db.Timestamptz
  
  /// Soft-deletion timestamp. Null if not (soft-)deleted.
  deleted_at DateTime? @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  recipientUser discussion_board_users @relation("discussion_board_notifications_of_recipient_user_id", fields: [recipient_user_id], references: [id], onDelete: Cascade)
  actorUser discussion_board_users? @relation("discussion_board_notifications_of_actor_user_id", fields: [actor_user_id], references: [id], onDelete: Cascade)
  post discussion_board_posts? @relation(fields: [post_id], references: [id], onDelete: Cascade)
  comment discussion_board_comments? @relation(fields: [comment_id], references: [id], onDelete: Cascade)
  
  @@unique([recipient_user_id, type, action_url, created_at], map: "discussion_board_notifications_recipient_user_id_type__7283f99a")
  @@index([recipient_user_id, status, created_at], map: "discussion_board_notifications_recipient_user_id_statu_382ed7fb")
  @@index([actor_user_id])
  @@index([post_id])
  @@index([comment_id])
  @@index([title(ops: raw("gin_trgm_ops"))], type: Gin)
  @@index([body(ops: raw("gin_trgm_ops"))], type: Gin)
}

/// Per-user notification preference settings: Each record applies to a
/// specific user and defines delivery channel choices (in-app, email, push),
/// frequency, and opt-in/out preferences for each notification
/// type/category. Managed independently by the user. Critical for respecting
/// user contact permissions and compliance requirements.
///
/// @namespace Notifications
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model discussion_board_notification_preferences {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id @db.Uuid
  
  /// Notification preference owner's {@link discussion_board_users.id}.
  /// References the user this preference set belongs to.
  user_id String @db.Uuid
  
  /// Whether the user enables email notifications for this category (true:
  /// allowed, false: suppressed).
  email_enabled Boolean
  
  /// Whether the user enables push notifications for this category.
  push_enabled Boolean
  
  /// Whether the user enables in-app notifications for this category
  /// (notification center, banners, etc.).
  in_app_enabled Boolean
  
  /// Notification delivery frequency: e.g., 'immediate', 'digest_daily',
  /// 'digest_weekly'. Directs scheduling for batch or real-time delivery.
  frequency String
  
  /// CSV or JSON-encoded list of notification categories/types this preference
  /// applies to. (e.g., 'reply,mention,mod_action').
  categories String
  
  /// Suppress notifications for all categories until this datetime. Null if
  /// not muted.
  mute_until DateTime? @db.Timestamptz
  
  /// Creation timestamp for this preference record.
  created_at DateTime @db.Timestamptz
  
  /// Last updated timestamp for this preferences record.
  updated_at DateTime @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  user discussion_board_users @relation(fields: [user_id], references: [id], onDelete: Cascade)
  
  @@unique([user_id])
  @@index([categories(ops: raw("gin_trgm_ops"))], type: Gin)
}

/// Represents persistent notification subscriptions: Each record describes a
/// user following a topic, category, or post/thread
/// (subscription_target_type/target_id). Enables delivery of notifications
/// whenever the subscribed entity (category, thread, post, etc.) is updated
/// or triggers an event. Users can manage these subscriptions independently,
/// and unsubscribe at any time.
///
/// @namespace Notifications
/// @author AutoBE - https://github.com/wrtnlabs/autobe
model discussion_board_notification_subscriptions {
  //----
  // COLUMNS
  //----
  /// Primary Key.
  id String @id @db.Uuid
  
  /// Subscribing user's {@link discussion_board_users.id}. The user who
  /// follows or subscribes to event delivery.
  user_id String @db.Uuid
  
  /// Type of entity being followed (e.g., 'post', 'thread', 'category', 'tag',
  /// 'user') for polymorphic delivery.
  subscription_target_type String
  
  /// Entity ID being followed/subscribed (FK to target entity, not enforced
  /// here due to polymorphism).
  subscription_target_id String @db.Uuid
  
  /// Timestamp when subscription was created.
  created_at DateTime @db.Timestamptz
  
  /// If present, marks a soft delete (unsubscribed). Still retained for
  /// compliance/audit.
  deleted_at DateTime? @db.Timestamptz
  
  //----
  // RELATIONS
  //----
  user discussion_board_users @relation(fields: [user_id], references: [id], onDelete: Cascade)
  
  @@unique([user_id, subscription_target_type, subscription_target_id], map: "discussion_board_notification_subscriptions_user_id_su_160be914")
  @@index([subscription_target_type, subscription_target_id], map: "discussion_board_notification_subscriptions_subscripti_eac49167")
}